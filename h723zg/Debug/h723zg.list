
h723zg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013e90  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fe0  08014160  08014160  00024160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017140  08017140  00027140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017148  08017148  00027148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801714c  0801714c  0002714c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000308  24000000  08017150  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000308  08017458  00030308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000368  080174b8  00030368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000033c4  240003c8  08017518  000303c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2400378c  08017518  0003378c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000303c8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000303f6  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022fc4  00000000  00000000  00030439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fe0  00000000  00000000  000533fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001918  00000000  00000000  000563e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000147f  00000000  00000000  00057cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003528a  00000000  00000000  00059177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d705  00000000  00000000  0008e401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0014d55e  00000000  00000000  000abb06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007d2c  00000000  00000000  001f9064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00200d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240003c8 	.word	0x240003c8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08014148 	.word	0x08014148

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240003cc 	.word	0x240003cc
 800030c:	08014148 	.word	0x08014148

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	; 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_ldivmod>:
 8000758:	b97b      	cbnz	r3, 800077a <__aeabi_ldivmod+0x22>
 800075a:	b972      	cbnz	r2, 800077a <__aeabi_ldivmod+0x22>
 800075c:	2900      	cmp	r1, #0
 800075e:	bfbe      	ittt	lt
 8000760:	2000      	movlt	r0, #0
 8000762:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000766:	e006      	blt.n	8000776 <__aeabi_ldivmod+0x1e>
 8000768:	bf08      	it	eq
 800076a:	2800      	cmpeq	r0, #0
 800076c:	bf1c      	itt	ne
 800076e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000772:	f04f 30ff 	movne.w	r0, #4294967295
 8000776:	f000 b9f3 	b.w	8000b60 <__aeabi_idiv0>
 800077a:	f1ad 0c08 	sub.w	ip, sp, #8
 800077e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000782:	2900      	cmp	r1, #0
 8000784:	db09      	blt.n	800079a <__aeabi_ldivmod+0x42>
 8000786:	2b00      	cmp	r3, #0
 8000788:	db1a      	blt.n	80007c0 <__aeabi_ldivmod+0x68>
 800078a:	f000 f885 	bl	8000898 <__udivmoddi4>
 800078e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000792:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000796:	b004      	add	sp, #16
 8000798:	4770      	bx	lr
 800079a:	4240      	negs	r0, r0
 800079c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	db1b      	blt.n	80007dc <__aeabi_ldivmod+0x84>
 80007a4:	f000 f878 	bl	8000898 <__udivmoddi4>
 80007a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007b0:	b004      	add	sp, #16
 80007b2:	4240      	negs	r0, r0
 80007b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b8:	4252      	negs	r2, r2
 80007ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007be:	4770      	bx	lr
 80007c0:	4252      	negs	r2, r2
 80007c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007c6:	f000 f867 	bl	8000898 <__udivmoddi4>
 80007ca:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007d2:	b004      	add	sp, #16
 80007d4:	4240      	negs	r0, r0
 80007d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007da:	4770      	bx	lr
 80007dc:	4252      	negs	r2, r2
 80007de:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007e2:	f000 f859 	bl	8000898 <__udivmoddi4>
 80007e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007ee:	b004      	add	sp, #16
 80007f0:	4252      	negs	r2, r2
 80007f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007f6:	4770      	bx	lr

080007f8 <__aeabi_uldivmod>:
 80007f8:	b953      	cbnz	r3, 8000810 <__aeabi_uldivmod+0x18>
 80007fa:	b94a      	cbnz	r2, 8000810 <__aeabi_uldivmod+0x18>
 80007fc:	2900      	cmp	r1, #0
 80007fe:	bf08      	it	eq
 8000800:	2800      	cmpeq	r0, #0
 8000802:	bf1c      	itt	ne
 8000804:	f04f 31ff 	movne.w	r1, #4294967295
 8000808:	f04f 30ff 	movne.w	r0, #4294967295
 800080c:	f000 b9a8 	b.w	8000b60 <__aeabi_idiv0>
 8000810:	f1ad 0c08 	sub.w	ip, sp, #8
 8000814:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000818:	f000 f83e 	bl	8000898 <__udivmoddi4>
 800081c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000820:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000824:	b004      	add	sp, #16
 8000826:	4770      	bx	lr

08000828 <__aeabi_d2lz>:
 8000828:	b508      	push	{r3, lr}
 800082a:	4602      	mov	r2, r0
 800082c:	460b      	mov	r3, r1
 800082e:	ec43 2b17 	vmov	d7, r2, r3
 8000832:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800083a:	d403      	bmi.n	8000844 <__aeabi_d2lz+0x1c>
 800083c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000840:	f000 b80a 	b.w	8000858 <__aeabi_d2ulz>
 8000844:	eeb1 7b47 	vneg.f64	d7, d7
 8000848:	ec51 0b17 	vmov	r0, r1, d7
 800084c:	f000 f804 	bl	8000858 <__aeabi_d2ulz>
 8000850:	4240      	negs	r0, r0
 8000852:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000856:	bd08      	pop	{r3, pc}

08000858 <__aeabi_d2ulz>:
 8000858:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000888 <__aeabi_d2ulz+0x30>
 800085c:	ec41 0b17 	vmov	d7, r0, r1
 8000860:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000890 <__aeabi_d2ulz+0x38>
 8000864:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000868:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800086c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000870:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000874:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000878:	ee16 1a10 	vmov	r1, s12
 800087c:	ee17 0a90 	vmov	r0, s15
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	f3af 8000 	nop.w
 8000888:	00000000 	.word	0x00000000
 800088c:	3df00000 	.word	0x3df00000
 8000890:	00000000 	.word	0x00000000
 8000894:	41f00000 	.word	0x41f00000

08000898 <__udivmoddi4>:
 8000898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800089c:	9e08      	ldr	r6, [sp, #32]
 800089e:	460d      	mov	r5, r1
 80008a0:	4604      	mov	r4, r0
 80008a2:	460f      	mov	r7, r1
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d14a      	bne.n	800093e <__udivmoddi4+0xa6>
 80008a8:	428a      	cmp	r2, r1
 80008aa:	4694      	mov	ip, r2
 80008ac:	d965      	bls.n	800097a <__udivmoddi4+0xe2>
 80008ae:	fab2 f382 	clz	r3, r2
 80008b2:	b143      	cbz	r3, 80008c6 <__udivmoddi4+0x2e>
 80008b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80008b8:	f1c3 0220 	rsb	r2, r3, #32
 80008bc:	409f      	lsls	r7, r3
 80008be:	fa20 f202 	lsr.w	r2, r0, r2
 80008c2:	4317      	orrs	r7, r2
 80008c4:	409c      	lsls	r4, r3
 80008c6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008ca:	fa1f f58c 	uxth.w	r5, ip
 80008ce:	fbb7 f1fe 	udiv	r1, r7, lr
 80008d2:	0c22      	lsrs	r2, r4, #16
 80008d4:	fb0e 7711 	mls	r7, lr, r1, r7
 80008d8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008dc:	fb01 f005 	mul.w	r0, r1, r5
 80008e0:	4290      	cmp	r0, r2
 80008e2:	d90a      	bls.n	80008fa <__udivmoddi4+0x62>
 80008e4:	eb1c 0202 	adds.w	r2, ip, r2
 80008e8:	f101 37ff 	add.w	r7, r1, #4294967295
 80008ec:	f080 811c 	bcs.w	8000b28 <__udivmoddi4+0x290>
 80008f0:	4290      	cmp	r0, r2
 80008f2:	f240 8119 	bls.w	8000b28 <__udivmoddi4+0x290>
 80008f6:	3902      	subs	r1, #2
 80008f8:	4462      	add	r2, ip
 80008fa:	1a12      	subs	r2, r2, r0
 80008fc:	b2a4      	uxth	r4, r4
 80008fe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000902:	fb0e 2210 	mls	r2, lr, r0, r2
 8000906:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800090a:	fb00 f505 	mul.w	r5, r0, r5
 800090e:	42a5      	cmp	r5, r4
 8000910:	d90a      	bls.n	8000928 <__udivmoddi4+0x90>
 8000912:	eb1c 0404 	adds.w	r4, ip, r4
 8000916:	f100 32ff 	add.w	r2, r0, #4294967295
 800091a:	f080 8107 	bcs.w	8000b2c <__udivmoddi4+0x294>
 800091e:	42a5      	cmp	r5, r4
 8000920:	f240 8104 	bls.w	8000b2c <__udivmoddi4+0x294>
 8000924:	4464      	add	r4, ip
 8000926:	3802      	subs	r0, #2
 8000928:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800092c:	1b64      	subs	r4, r4, r5
 800092e:	2100      	movs	r1, #0
 8000930:	b11e      	cbz	r6, 800093a <__udivmoddi4+0xa2>
 8000932:	40dc      	lsrs	r4, r3
 8000934:	2300      	movs	r3, #0
 8000936:	e9c6 4300 	strd	r4, r3, [r6]
 800093a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800093e:	428b      	cmp	r3, r1
 8000940:	d908      	bls.n	8000954 <__udivmoddi4+0xbc>
 8000942:	2e00      	cmp	r6, #0
 8000944:	f000 80ed 	beq.w	8000b22 <__udivmoddi4+0x28a>
 8000948:	2100      	movs	r1, #0
 800094a:	e9c6 0500 	strd	r0, r5, [r6]
 800094e:	4608      	mov	r0, r1
 8000950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000954:	fab3 f183 	clz	r1, r3
 8000958:	2900      	cmp	r1, #0
 800095a:	d149      	bne.n	80009f0 <__udivmoddi4+0x158>
 800095c:	42ab      	cmp	r3, r5
 800095e:	d302      	bcc.n	8000966 <__udivmoddi4+0xce>
 8000960:	4282      	cmp	r2, r0
 8000962:	f200 80f8 	bhi.w	8000b56 <__udivmoddi4+0x2be>
 8000966:	1a84      	subs	r4, r0, r2
 8000968:	eb65 0203 	sbc.w	r2, r5, r3
 800096c:	2001      	movs	r0, #1
 800096e:	4617      	mov	r7, r2
 8000970:	2e00      	cmp	r6, #0
 8000972:	d0e2      	beq.n	800093a <__udivmoddi4+0xa2>
 8000974:	e9c6 4700 	strd	r4, r7, [r6]
 8000978:	e7df      	b.n	800093a <__udivmoddi4+0xa2>
 800097a:	b902      	cbnz	r2, 800097e <__udivmoddi4+0xe6>
 800097c:	deff      	udf	#255	; 0xff
 800097e:	fab2 f382 	clz	r3, r2
 8000982:	2b00      	cmp	r3, #0
 8000984:	f040 8090 	bne.w	8000aa8 <__udivmoddi4+0x210>
 8000988:	1a8a      	subs	r2, r1, r2
 800098a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800098e:	fa1f fe8c 	uxth.w	lr, ip
 8000992:	2101      	movs	r1, #1
 8000994:	fbb2 f5f7 	udiv	r5, r2, r7
 8000998:	fb07 2015 	mls	r0, r7, r5, r2
 800099c:	0c22      	lsrs	r2, r4, #16
 800099e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009a2:	fb0e f005 	mul.w	r0, lr, r5
 80009a6:	4290      	cmp	r0, r2
 80009a8:	d908      	bls.n	80009bc <__udivmoddi4+0x124>
 80009aa:	eb1c 0202 	adds.w	r2, ip, r2
 80009ae:	f105 38ff 	add.w	r8, r5, #4294967295
 80009b2:	d202      	bcs.n	80009ba <__udivmoddi4+0x122>
 80009b4:	4290      	cmp	r0, r2
 80009b6:	f200 80cb 	bhi.w	8000b50 <__udivmoddi4+0x2b8>
 80009ba:	4645      	mov	r5, r8
 80009bc:	1a12      	subs	r2, r2, r0
 80009be:	b2a4      	uxth	r4, r4
 80009c0:	fbb2 f0f7 	udiv	r0, r2, r7
 80009c4:	fb07 2210 	mls	r2, r7, r0, r2
 80009c8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009cc:	fb0e fe00 	mul.w	lr, lr, r0
 80009d0:	45a6      	cmp	lr, r4
 80009d2:	d908      	bls.n	80009e6 <__udivmoddi4+0x14e>
 80009d4:	eb1c 0404 	adds.w	r4, ip, r4
 80009d8:	f100 32ff 	add.w	r2, r0, #4294967295
 80009dc:	d202      	bcs.n	80009e4 <__udivmoddi4+0x14c>
 80009de:	45a6      	cmp	lr, r4
 80009e0:	f200 80bb 	bhi.w	8000b5a <__udivmoddi4+0x2c2>
 80009e4:	4610      	mov	r0, r2
 80009e6:	eba4 040e 	sub.w	r4, r4, lr
 80009ea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80009ee:	e79f      	b.n	8000930 <__udivmoddi4+0x98>
 80009f0:	f1c1 0720 	rsb	r7, r1, #32
 80009f4:	408b      	lsls	r3, r1
 80009f6:	fa22 fc07 	lsr.w	ip, r2, r7
 80009fa:	ea4c 0c03 	orr.w	ip, ip, r3
 80009fe:	fa05 f401 	lsl.w	r4, r5, r1
 8000a02:	fa20 f307 	lsr.w	r3, r0, r7
 8000a06:	40fd      	lsrs	r5, r7
 8000a08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a0c:	4323      	orrs	r3, r4
 8000a0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a12:	fa1f fe8c 	uxth.w	lr, ip
 8000a16:	fb09 5518 	mls	r5, r9, r8, r5
 8000a1a:	0c1c      	lsrs	r4, r3, #16
 8000a1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a20:	fb08 f50e 	mul.w	r5, r8, lr
 8000a24:	42a5      	cmp	r5, r4
 8000a26:	fa02 f201 	lsl.w	r2, r2, r1
 8000a2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000a2e:	d90b      	bls.n	8000a48 <__udivmoddi4+0x1b0>
 8000a30:	eb1c 0404 	adds.w	r4, ip, r4
 8000a34:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a38:	f080 8088 	bcs.w	8000b4c <__udivmoddi4+0x2b4>
 8000a3c:	42a5      	cmp	r5, r4
 8000a3e:	f240 8085 	bls.w	8000b4c <__udivmoddi4+0x2b4>
 8000a42:	f1a8 0802 	sub.w	r8, r8, #2
 8000a46:	4464      	add	r4, ip
 8000a48:	1b64      	subs	r4, r4, r5
 8000a4a:	b29d      	uxth	r5, r3
 8000a4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a50:	fb09 4413 	mls	r4, r9, r3, r4
 8000a54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a5c:	45a6      	cmp	lr, r4
 8000a5e:	d908      	bls.n	8000a72 <__udivmoddi4+0x1da>
 8000a60:	eb1c 0404 	adds.w	r4, ip, r4
 8000a64:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a68:	d26c      	bcs.n	8000b44 <__udivmoddi4+0x2ac>
 8000a6a:	45a6      	cmp	lr, r4
 8000a6c:	d96a      	bls.n	8000b44 <__udivmoddi4+0x2ac>
 8000a6e:	3b02      	subs	r3, #2
 8000a70:	4464      	add	r4, ip
 8000a72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a76:	fba3 9502 	umull	r9, r5, r3, r2
 8000a7a:	eba4 040e 	sub.w	r4, r4, lr
 8000a7e:	42ac      	cmp	r4, r5
 8000a80:	46c8      	mov	r8, r9
 8000a82:	46ae      	mov	lr, r5
 8000a84:	d356      	bcc.n	8000b34 <__udivmoddi4+0x29c>
 8000a86:	d053      	beq.n	8000b30 <__udivmoddi4+0x298>
 8000a88:	b156      	cbz	r6, 8000aa0 <__udivmoddi4+0x208>
 8000a8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000a8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000a92:	fa04 f707 	lsl.w	r7, r4, r7
 8000a96:	40ca      	lsrs	r2, r1
 8000a98:	40cc      	lsrs	r4, r1
 8000a9a:	4317      	orrs	r7, r2
 8000a9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa8:	f1c3 0120 	rsb	r1, r3, #32
 8000aac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ab0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ab4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ab8:	409d      	lsls	r5, r3
 8000aba:	432a      	orrs	r2, r5
 8000abc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ac0:	fa1f fe8c 	uxth.w	lr, ip
 8000ac4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ac8:	fb07 1510 	mls	r5, r7, r0, r1
 8000acc:	0c11      	lsrs	r1, r2, #16
 8000ace:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ad2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ad6:	428d      	cmp	r5, r1
 8000ad8:	fa04 f403 	lsl.w	r4, r4, r3
 8000adc:	d908      	bls.n	8000af0 <__udivmoddi4+0x258>
 8000ade:	eb1c 0101 	adds.w	r1, ip, r1
 8000ae2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ae6:	d22f      	bcs.n	8000b48 <__udivmoddi4+0x2b0>
 8000ae8:	428d      	cmp	r5, r1
 8000aea:	d92d      	bls.n	8000b48 <__udivmoddi4+0x2b0>
 8000aec:	3802      	subs	r0, #2
 8000aee:	4461      	add	r1, ip
 8000af0:	1b49      	subs	r1, r1, r5
 8000af2:	b292      	uxth	r2, r2
 8000af4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000af8:	fb07 1115 	mls	r1, r7, r5, r1
 8000afc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b00:	fb05 f10e 	mul.w	r1, r5, lr
 8000b04:	4291      	cmp	r1, r2
 8000b06:	d908      	bls.n	8000b1a <__udivmoddi4+0x282>
 8000b08:	eb1c 0202 	adds.w	r2, ip, r2
 8000b0c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b10:	d216      	bcs.n	8000b40 <__udivmoddi4+0x2a8>
 8000b12:	4291      	cmp	r1, r2
 8000b14:	d914      	bls.n	8000b40 <__udivmoddi4+0x2a8>
 8000b16:	3d02      	subs	r5, #2
 8000b18:	4462      	add	r2, ip
 8000b1a:	1a52      	subs	r2, r2, r1
 8000b1c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b20:	e738      	b.n	8000994 <__udivmoddi4+0xfc>
 8000b22:	4631      	mov	r1, r6
 8000b24:	4630      	mov	r0, r6
 8000b26:	e708      	b.n	800093a <__udivmoddi4+0xa2>
 8000b28:	4639      	mov	r1, r7
 8000b2a:	e6e6      	b.n	80008fa <__udivmoddi4+0x62>
 8000b2c:	4610      	mov	r0, r2
 8000b2e:	e6fb      	b.n	8000928 <__udivmoddi4+0x90>
 8000b30:	4548      	cmp	r0, r9
 8000b32:	d2a9      	bcs.n	8000a88 <__udivmoddi4+0x1f0>
 8000b34:	ebb9 0802 	subs.w	r8, r9, r2
 8000b38:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	e7a3      	b.n	8000a88 <__udivmoddi4+0x1f0>
 8000b40:	4645      	mov	r5, r8
 8000b42:	e7ea      	b.n	8000b1a <__udivmoddi4+0x282>
 8000b44:	462b      	mov	r3, r5
 8000b46:	e794      	b.n	8000a72 <__udivmoddi4+0x1da>
 8000b48:	4640      	mov	r0, r8
 8000b4a:	e7d1      	b.n	8000af0 <__udivmoddi4+0x258>
 8000b4c:	46d0      	mov	r8, sl
 8000b4e:	e77b      	b.n	8000a48 <__udivmoddi4+0x1b0>
 8000b50:	3d02      	subs	r5, #2
 8000b52:	4462      	add	r2, ip
 8000b54:	e732      	b.n	80009bc <__udivmoddi4+0x124>
 8000b56:	4608      	mov	r0, r1
 8000b58:	e70a      	b.n	8000970 <__udivmoddi4+0xd8>
 8000b5a:	4464      	add	r4, ip
 8000b5c:	3802      	subs	r0, #2
 8000b5e:	e742      	b.n	80009e6 <__udivmoddi4+0x14e>

08000b60 <__aeabi_idiv0>:
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <chiprev>:

#pragma once

#include <stm32h723xx.h>

static inline char chiprev(void) {
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
  uint16_t rev = (uint16_t) (((uint32_t) DBGMCU->IDCODE) >> 16);
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <chiprev+0x38>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	0c1b      	lsrs	r3, r3, #16
 8000b70:	80fb      	strh	r3, [r7, #6]
  if (rev == 0x1003) return 'Y';
 8000b72:	88fb      	ldrh	r3, [r7, #6]
 8000b74:	f241 0203 	movw	r2, #4099	; 0x1003
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d101      	bne.n	8000b80 <chiprev+0x1c>
 8000b7c:	2359      	movs	r3, #89	; 0x59
 8000b7e:	e007      	b.n	8000b90 <chiprev+0x2c>
  if (rev == 0x2003) return 'V';
 8000b80:	88fb      	ldrh	r3, [r7, #6]
 8000b82:	f242 0203 	movw	r2, #8195	; 0x2003
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d101      	bne.n	8000b8e <chiprev+0x2a>
 8000b8a:	2356      	movs	r3, #86	; 0x56
 8000b8c:	e000      	b.n	8000b90 <chiprev+0x2c>
  return '?';
 8000b8e:	233f      	movs	r3, #63	; 0x3f
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	5c001000 	.word	0x5c001000

08000ba0 <mg_millis>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint64_t mg_millis(void) {  // Let Mongoose use our uptime function
 8000ba0:	b5b0      	push	{r4, r5, r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  return (uint64_t)HAL_GetTick();     // Return number of milliseconds since boot
 8000ba4:	f00d f8a0 	bl	800dce8 <HAL_GetTick>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2200      	movs	r2, #0
 8000bac:	461c      	mov	r4, r3
 8000bae:	4615      	mov	r5, r2
 8000bb0:	4622      	mov	r2, r4
 8000bb2:	462b      	mov	r3, r5
}
 8000bb4:	4610      	mov	r0, r2
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000bbc <mg_random>:

void mg_random(void *buf, size_t len) {  // Use on-board RNG
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
  extern RNG_HandleTypeDef hrng;
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	e01a      	b.n	8000c02 <mg_random+0x46>
    uint32_t r;
    HAL_RNG_GenerateRandomNumber(&hrng, &r);
 8000bcc:	f107 0308 	add.w	r3, r7, #8
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4810      	ldr	r0, [pc, #64]	; (8000c14 <mg_random+0x58>)
 8000bd4:	f010 fdbe 	bl	8011754 <HAL_RNG_GenerateRandomNumber>
    memcpy((char *) buf + n, &r, n + sizeof(r) > len ? len - n : sizeof(r));
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	18d0      	adds	r0, r2, r3
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	3304      	adds	r3, #4
 8000be2:	683a      	ldr	r2, [r7, #0]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d203      	bcs.n	8000bf0 <mg_random+0x34>
 8000be8:	683a      	ldr	r2, [r7, #0]
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	e000      	b.n	8000bf2 <mg_random+0x36>
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	f107 0108 	add.w	r1, r7, #8
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	f012 fd30 	bl	801365c <memcpy>
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	3304      	adds	r3, #4
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d3e0      	bcc.n	8000bcc <mg_random+0x10>
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	bf00      	nop
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	240004cc 	.word	0x240004cc

08000c18 <timer_fn>:

static void timer_fn(void *arg) {
 8000c18:	b5b0      	push	{r4, r5, r7, lr}
 8000c1a:	b08a      	sub	sp, #40	; 0x28
 8000c1c:	af04      	add	r7, sp, #16
 8000c1e:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);   // Blink On-board yellow LED
 8000c20:	2102      	movs	r1, #2
 8000c22:	481a      	ldr	r0, [pc, #104]	; (8000c8c <timer_fn+0x74>)
 8000c24:	f00d ff75 	bl	800eb12 <HAL_GPIO_TogglePin>
  struct mg_tcpip_if *ifp = arg;                  // And show
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	617b      	str	r3, [r7, #20]
  const char *names[] = {"down", "up", "ready"};  // network stats
 8000c2c:	4a18      	ldr	r2, [pc, #96]	; (8000c90 <timer_fn+0x78>)
 8000c2e:	f107 0308 	add.w	r3, r7, #8
 8000c32:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  MG_INFO(("Ethernet: %s, IP: %M, rx:%u, tx:%u, dr:%u, er:%u",
 8000c38:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <timer_fn+0x7c>)
 8000c3a:	2269      	movs	r2, #105	; 0x69
 8000c3c:	4916      	ldr	r1, [pc, #88]	; (8000c98 <timer_fn+0x80>)
 8000c3e:	2002      	movs	r0, #2
 8000c40:	f006 f984 	bl	8006f4c <mg_log_prefix>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d01c      	beq.n	8000c84 <timer_fn+0x6c>
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	3318      	adds	r3, #24
 8000c54:	443b      	add	r3, r7
 8000c56:	f853 4c10 	ldr.w	r4, [r3, #-16]
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	f103 0508 	add.w	r5, r3, #8
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8000c68:	6979      	ldr	r1, [r7, #20]
 8000c6a:	6e49      	ldr	r1, [r1, #100]	; 0x64
 8000c6c:	6978      	ldr	r0, [r7, #20]
 8000c6e:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8000c70:	9003      	str	r0, [sp, #12]
 8000c72:	9102      	str	r1, [sp, #8]
 8000c74:	9201      	str	r2, [sp, #4]
 8000c76:	9300      	str	r3, [sp, #0]
 8000c78:	462b      	mov	r3, r5
 8000c7a:	4a08      	ldr	r2, [pc, #32]	; (8000c9c <timer_fn+0x84>)
 8000c7c:	4621      	mov	r1, r4
 8000c7e:	4808      	ldr	r0, [pc, #32]	; (8000ca0 <timer_fn+0x88>)
 8000c80:	f006 f9be 	bl	8007000 <mg_log>
           names[ifp->state], mg_print_ip4, &ifp->ip, ifp->nrecv, ifp->nsent,
           ifp->ndrop, ifp->nerr));
}
 8000c84:	bf00      	nop
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bdb0      	pop	{r4, r5, r7, pc}
 8000c8c:	58021000 	.word	0x58021000
 8000c90:	080141bc 	.word	0x080141bc
 8000c94:	08016190 	.word	0x08016190
 8000c98:	08014160 	.word	0x08014160
 8000c9c:	08007d09 	.word	0x08007d09
 8000ca0:	08014174 	.word	0x08014174
 8000ca4:	00000000 	.word	0x00000000

08000ca8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca8:	b590      	push	{r4, r7, lr}
 8000caa:	b0b5      	sub	sp, #212	; 0xd4
 8000cac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cae:	f00c ff95 	bl	800dbdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb2:	f000 f8cd 	bl	8000e50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb6:	f000 f9f1 	bl	800109c <MX_GPIO_Init>
  MX_ETH_Init();
 8000cba:	f000 f939 	bl	8000f30 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000cbe:	f000 f999 	bl	8000ff4 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000cc2:	f000 f9e3 	bl	800108c <MX_USB_OTG_HS_USB_Init>
  MX_RNG_Init();
 8000cc6:	f000 f97f 	bl	8000fc8 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  test_init();  // for internal testing purposes only
    MG_INFO(("Chip revision: %c, max cpu clock: %u MHz", chiprev(),
 8000cca:	4b55      	ldr	r3, [pc, #340]	; (8000e20 <main+0x178>)
 8000ccc:	2291      	movs	r2, #145	; 0x91
 8000cce:	4955      	ldr	r1, [pc, #340]	; (8000e24 <main+0x17c>)
 8000cd0:	2002      	movs	r0, #2
 8000cd2:	f006 f93b 	bl	8006f4c <mg_log_prefix>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d012      	beq.n	8000d02 <main+0x5a>
 8000cdc:	f7ff ff42 	bl	8000b64 <chiprev>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	461c      	mov	r4, r3
 8000ce4:	f7ff ff3e 	bl	8000b64 <chiprev>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b56      	cmp	r3, #86	; 0x56
 8000cec:	d102      	bne.n	8000cf4 <main+0x4c>
 8000cee:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000cf2:	e001      	b.n	8000cf8 <main+0x50>
 8000cf4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4621      	mov	r1, r4
 8000cfc:	484a      	ldr	r0, [pc, #296]	; (8000e28 <main+0x180>)
 8000cfe:	f006 f97f 	bl	8007000 <mg_log>
             (chiprev() == 'V') ? 480 : 400));
    MG_INFO(("Starting, CPU freq %g MHz", (double) SystemCoreClock / 1000000));
 8000d02:	4b47      	ldr	r3, [pc, #284]	; (8000e20 <main+0x178>)
 8000d04:	2293      	movs	r2, #147	; 0x93
 8000d06:	4947      	ldr	r1, [pc, #284]	; (8000e24 <main+0x17c>)
 8000d08:	2002      	movs	r0, #2
 8000d0a:	f006 f91f 	bl	8006f4c <mg_log_prefix>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d00e      	beq.n	8000d32 <main+0x8a>
 8000d14:	4b45      	ldr	r3, [pc, #276]	; (8000e2c <main+0x184>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	ee07 3a90 	vmov	s15, r3
 8000d1c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000d20:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8000e18 <main+0x170>
 8000d24:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000d28:	ec53 2b15 	vmov	r2, r3, d5
 8000d2c:	4840      	ldr	r0, [pc, #256]	; (8000e30 <main+0x188>)
 8000d2e:	f006 f967 	bl	8007000 <mg_log>

    struct mg_mgr mgr;        // Initialise
    mg_mgr_init(&mgr);        // Mongoose event manager
 8000d32:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d36:	4618      	mov	r0, r3
 8000d38:	f006 fe8c 	bl	8007a54 <mg_mgr_init>
    mg_log_set(MG_LL_DEBUG);  // Set log level
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f006 f8e3 	bl	8006f08 <mg_log_set>

    // Initialise Mongoose network stack
    struct mg_tcpip_driver_stm32h_data driver_data = {.mdc_cr = 4};
 8000d42:	2304      	movs	r3, #4
 8000d44:	67bb      	str	r3, [r7, #120]	; 0x78
    struct mg_tcpip_if mif = {.mac = {0xaa,0xbb,0xcc,1,2,3},
 8000d46:	463b      	mov	r3, r7
 8000d48:	2278      	movs	r2, #120	; 0x78
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f012 fb9e 	bl	801348e <memset>
 8000d52:	4a38      	ldr	r2, [pc, #224]	; (8000e34 <main+0x18c>)
 8000d54:	463b      	mov	r3, r7
 8000d56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d5a:	6018      	str	r0, [r3, #0]
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	8019      	strh	r1, [r3, #0]
 8000d60:	4b35      	ldr	r3, [pc, #212]	; (8000e38 <main+0x190>)
 8000d62:	623b      	str	r3, [r7, #32]
 8000d64:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
                              //.ip = mg_htonl(MG_U32(192, 168, 1, 25)),
                              //.mask = mg_htonl(MG_U32(255, 255, 255, 0)),
                              //.gw = mg_htonl(MG_U32(192, 168, 1, 1)),
                              .driver = &mg_tcpip_driver_stm32h,
                              .driver_data = &driver_data};
    mg_tcpip_init(&mgr, &mif);
 8000d6a:	463a      	mov	r2, r7
 8000d6c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d70:	4611      	mov	r1, r2
 8000d72:	4618      	mov	r0, r3
 8000d74:	f00b fa76 	bl	800c264 <mg_tcpip_init>
    mg_timer_add(&mgr, BLINK_PERIOD_MS, MG_TIMER_REPEAT, timer_fn, &mif);
 8000d78:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8000d7c:	463b      	mov	r3, r7
 8000d7e:	9302      	str	r3, [sp, #8]
 8000d80:	4b2e      	ldr	r3, [pc, #184]	; (8000e3c <main+0x194>)
 8000d82:	9301      	str	r3, [sp, #4]
 8000d84:	2301      	movs	r3, #1
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d8c:	f04f 0300 	mov.w	r3, #0
 8000d90:	4608      	mov	r0, r1
 8000d92:	f006 fe35 	bl	8007a00 <mg_timer_add>

    MG_INFO(("MAC: %M. Waiting for IP...", mg_print_mac, mif.mac));
 8000d96:	4b22      	ldr	r3, [pc, #136]	; (8000e20 <main+0x178>)
 8000d98:	22a5      	movs	r2, #165	; 0xa5
 8000d9a:	4922      	ldr	r1, [pc, #136]	; (8000e24 <main+0x17c>)
 8000d9c:	2002      	movs	r0, #2
 8000d9e:	f006 f8d5 	bl	8006f4c <mg_log_prefix>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d00c      	beq.n	8000dc2 <main+0x11a>
 8000da8:	463b      	mov	r3, r7
 8000daa:	461a      	mov	r2, r3
 8000dac:	4924      	ldr	r1, [pc, #144]	; (8000e40 <main+0x198>)
 8000dae:	4825      	ldr	r0, [pc, #148]	; (8000e44 <main+0x19c>)
 8000db0:	f006 f926 	bl	8007000 <mg_log>
    while (mif.state != MG_TCPIP_STATE_READY) {
 8000db4:	e005      	b.n	8000dc2 <main+0x11a>
      mg_mgr_poll(&mgr, 0);
 8000db6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f00b fd13 	bl	800c7e8 <mg_mgr_poll>
    while (mif.state != MG_TCPIP_STATE_READY) {
 8000dc2:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8000dc6:	2b03      	cmp	r3, #3
 8000dc8:	d1f5      	bne.n	8000db6 <main+0x10e>
    }

    MG_INFO(("Initialising application..."));
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <main+0x178>)
 8000dcc:	22aa      	movs	r2, #170	; 0xaa
 8000dce:	4915      	ldr	r1, [pc, #84]	; (8000e24 <main+0x17c>)
 8000dd0:	2002      	movs	r0, #2
 8000dd2:	f006 f8bb 	bl	8006f4c <mg_log_prefix>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d002      	beq.n	8000de2 <main+0x13a>
 8000ddc:	481a      	ldr	r0, [pc, #104]	; (8000e48 <main+0x1a0>)
 8000dde:	f006 f90f 	bl	8007000 <mg_log>
    web_init(&mgr);
 8000de2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000de6:	4618      	mov	r0, r3
 8000de8:	f00c fb3c 	bl	800d464 <web_init>

    MG_INFO(("Starting event loop"));
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <main+0x178>)
 8000dee:	22ad      	movs	r2, #173	; 0xad
 8000df0:	490c      	ldr	r1, [pc, #48]	; (8000e24 <main+0x17c>)
 8000df2:	2002      	movs	r0, #2
 8000df4:	f006 f8aa 	bl	8006f4c <mg_log_prefix>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d002      	beq.n	8000e04 <main+0x15c>
 8000dfe:	4813      	ldr	r0, [pc, #76]	; (8000e4c <main+0x1a4>)
 8000e00:	f006 f8fe 	bl	8007000 <mg_log>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  mg_mgr_poll(&mgr, 0);
 8000e04:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f00b fcec 	bl	800c7e8 <mg_mgr_poll>
 8000e10:	e7f8      	b.n	8000e04 <main+0x15c>
 8000e12:	bf00      	nop
 8000e14:	f3af 8000 	nop.w
 8000e18:	00000000 	.word	0x00000000
 8000e1c:	412e8480 	.word	0x412e8480
 8000e20:	0801619c 	.word	0x0801619c
 8000e24:	08014160 	.word	0x08014160
 8000e28:	080141c8 	.word	0x080141c8
 8000e2c:	2400029c 	.word	0x2400029c
 8000e30:	080141f4 	.word	0x080141f4
 8000e34:	0801425c 	.word	0x0801425c
 8000e38:	24000240 	.word	0x24000240
 8000e3c:	08000c19 	.word	0x08000c19
 8000e40:	08007dcd 	.word	0x08007dcd
 8000e44:	08014210 	.word	0x08014210
 8000e48:	0801422c 	.word	0x0801422c
 8000e4c:	08014248 	.word	0x08014248

08000e50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b09c      	sub	sp, #112	; 0x70
 8000e54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5a:	224c      	movs	r2, #76	; 0x4c
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f012 fb15 	bl	801348e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	2220      	movs	r2, #32
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f012 fb0f 	bl	801348e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e70:	2002      	movs	r0, #2
 8000e72:	f00d fe69 	bl	800eb48 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e76:	2300      	movs	r3, #0
 8000e78:	603b      	str	r3, [r7, #0]
 8000e7a:	4b2c      	ldr	r3, [pc, #176]	; (8000f2c <SystemClock_Config+0xdc>)
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	4a2b      	ldr	r2, [pc, #172]	; (8000f2c <SystemClock_Config+0xdc>)
 8000e80:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e84:	6193      	str	r3, [r2, #24]
 8000e86:	4b29      	ldr	r3, [pc, #164]	; (8000f2c <SystemClock_Config+0xdc>)
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e8e:	603b      	str	r3, [r7, #0]
 8000e90:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e92:	bf00      	nop
 8000e94:	4b25      	ldr	r3, [pc, #148]	; (8000f2c <SystemClock_Config+0xdc>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ea0:	d1f8      	bne.n	8000e94 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000ea2:	2321      	movs	r3, #33	; 0x21
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ea6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000eaa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000eac:	2301      	movs	r3, #1
 8000eae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000eb8:	2304      	movs	r3, #4
 8000eba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000ebc:	f240 1313 	movw	r3, #275	; 0x113
 8000ec0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000ece:	2304      	movs	r3, #4
 8000ed0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f00d fe6c 	bl	800ebbc <HAL_RCC_OscConfig>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000eea:	f000 f9d3 	bl	8001294 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eee:	233f      	movs	r3, #63	; 0x3f
 8000ef0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000efa:	2308      	movs	r3, #8
 8000efc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000efe:	2340      	movs	r3, #64	; 0x40
 8000f00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f02:	2340      	movs	r3, #64	; 0x40
 8000f04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f0a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f0c:	2340      	movs	r3, #64	; 0x40
 8000f0e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	2103      	movs	r1, #3
 8000f14:	4618      	mov	r0, r3
 8000f16:	f00e fa2b 	bl	800f370 <HAL_RCC_ClockConfig>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000f20:	f000 f9b8 	bl	8001294 <Error_Handler>
  }
}
 8000f24:	bf00      	nop
 8000f26:	3770      	adds	r7, #112	; 0x70
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	58024800 	.word	0x58024800

08000f30 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000f34:	4b1e      	ldr	r3, [pc, #120]	; (8000fb0 <MX_ETH_Init+0x80>)
 8000f36:	4a1f      	ldr	r2, [pc, #124]	; (8000fb4 <MX_ETH_Init+0x84>)
 8000f38:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000f3a:	4b1f      	ldr	r3, [pc, #124]	; (8000fb8 <MX_ETH_Init+0x88>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000f40:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <MX_ETH_Init+0x88>)
 8000f42:	2280      	movs	r2, #128	; 0x80
 8000f44:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000f46:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <MX_ETH_Init+0x88>)
 8000f48:	22e1      	movs	r2, #225	; 0xe1
 8000f4a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000f4c:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <MX_ETH_Init+0x88>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000f52:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <MX_ETH_Init+0x88>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000f58:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <MX_ETH_Init+0x88>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000f5e:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_ETH_Init+0x80>)
 8000f60:	4a15      	ldr	r2, [pc, #84]	; (8000fb8 <MX_ETH_Init+0x88>)
 8000f62:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <MX_ETH_Init+0x80>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_ETH_Init+0x80>)
 8000f6c:	4a13      	ldr	r2, [pc, #76]	; (8000fbc <MX_ETH_Init+0x8c>)
 8000f6e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <MX_ETH_Init+0x80>)
 8000f72:	4a13      	ldr	r2, [pc, #76]	; (8000fc0 <MX_ETH_Init+0x90>)
 8000f74:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <MX_ETH_Init+0x80>)
 8000f78:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000f7c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000f7e:	480c      	ldr	r0, [pc, #48]	; (8000fb0 <MX_ETH_Init+0x80>)
 8000f80:	f00c ffe2 	bl	800df48 <HAL_ETH_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000f8a:	f000 f983 	bl	8001294 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000f8e:	2238      	movs	r2, #56	; 0x38
 8000f90:	2100      	movs	r1, #0
 8000f92:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <MX_ETH_Init+0x94>)
 8000f94:	f012 fa7b 	bl	801348e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000f98:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <MX_ETH_Init+0x94>)
 8000f9a:	2221      	movs	r2, #33	; 0x21
 8000f9c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <MX_ETH_Init+0x94>)
 8000fa0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fa4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000fa6:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <MX_ETH_Init+0x94>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	2400041c 	.word	0x2400041c
 8000fb4:	40028000 	.word	0x40028000
 8000fb8:	24000574 	.word	0x24000574
 8000fbc:	24000368 	.word	0x24000368
 8000fc0:	24000308 	.word	0x24000308
 8000fc4:	240003e4 	.word	0x240003e4

08000fc8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <MX_RNG_Init+0x24>)
 8000fce:	4a08      	ldr	r2, [pc, #32]	; (8000ff0 <MX_RNG_Init+0x28>)
 8000fd0:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_RNG_Init+0x24>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000fd8:	4804      	ldr	r0, [pc, #16]	; (8000fec <MX_RNG_Init+0x24>)
 8000fda:	f010 fb17 	bl	801160c <HAL_RNG_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000fe4:	f000 f956 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	240004cc 	.word	0x240004cc
 8000ff0:	48021800 	.word	0x48021800

08000ff4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ff8:	4b22      	ldr	r3, [pc, #136]	; (8001084 <MX_USART3_UART_Init+0x90>)
 8000ffa:	4a23      	ldr	r2, [pc, #140]	; (8001088 <MX_USART3_UART_Init+0x94>)
 8000ffc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ffe:	4b21      	ldr	r3, [pc, #132]	; (8001084 <MX_USART3_UART_Init+0x90>)
 8001000:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001004:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001006:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <MX_USART3_UART_Init+0x90>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800100c:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <MX_USART3_UART_Init+0x90>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001012:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <MX_USART3_UART_Init+0x90>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001018:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <MX_USART3_UART_Init+0x90>)
 800101a:	220c      	movs	r2, #12
 800101c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101e:	4b19      	ldr	r3, [pc, #100]	; (8001084 <MX_USART3_UART_Init+0x90>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001024:	4b17      	ldr	r3, [pc, #92]	; (8001084 <MX_USART3_UART_Init+0x90>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800102a:	4b16      	ldr	r3, [pc, #88]	; (8001084 <MX_USART3_UART_Init+0x90>)
 800102c:	2200      	movs	r2, #0
 800102e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001030:	4b14      	ldr	r3, [pc, #80]	; (8001084 <MX_USART3_UART_Init+0x90>)
 8001032:	2200      	movs	r2, #0
 8001034:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001036:	4b13      	ldr	r3, [pc, #76]	; (8001084 <MX_USART3_UART_Init+0x90>)
 8001038:	2200      	movs	r2, #0
 800103a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800103c:	4811      	ldr	r0, [pc, #68]	; (8001084 <MX_USART3_UART_Init+0x90>)
 800103e:	f010 fc93 	bl	8011968 <HAL_UART_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001048:	f000 f924 	bl	8001294 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800104c:	2100      	movs	r1, #0
 800104e:	480d      	ldr	r0, [pc, #52]	; (8001084 <MX_USART3_UART_Init+0x90>)
 8001050:	f011 fe27 	bl	8012ca2 <HAL_UARTEx_SetTxFifoThreshold>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800105a:	f000 f91b 	bl	8001294 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800105e:	2100      	movs	r1, #0
 8001060:	4808      	ldr	r0, [pc, #32]	; (8001084 <MX_USART3_UART_Init+0x90>)
 8001062:	f011 fe5c 	bl	8012d1e <HAL_UARTEx_SetRxFifoThreshold>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800106c:	f000 f912 	bl	8001294 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001070:	4804      	ldr	r0, [pc, #16]	; (8001084 <MX_USART3_UART_Init+0x90>)
 8001072:	f011 fddd 	bl	8012c30 <HAL_UARTEx_DisableFifoMode>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800107c:	f000 f90a 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	240004e0 	.word	0x240004e0
 8001088:	40004800 	.word	0x40004800

0800108c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
	...

0800109c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08c      	sub	sp, #48	; 0x30
 80010a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a2:	f107 031c 	add.w	r3, r7, #28
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]
 80010b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b2:	4b71      	ldr	r3, [pc, #452]	; (8001278 <MX_GPIO_Init+0x1dc>)
 80010b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b8:	4a6f      	ldr	r2, [pc, #444]	; (8001278 <MX_GPIO_Init+0x1dc>)
 80010ba:	f043 0304 	orr.w	r3, r3, #4
 80010be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010c2:	4b6d      	ldr	r3, [pc, #436]	; (8001278 <MX_GPIO_Init+0x1dc>)
 80010c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	61bb      	str	r3, [r7, #24]
 80010ce:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010d0:	4b69      	ldr	r3, [pc, #420]	; (8001278 <MX_GPIO_Init+0x1dc>)
 80010d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d6:	4a68      	ldr	r2, [pc, #416]	; (8001278 <MX_GPIO_Init+0x1dc>)
 80010d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e0:	4b65      	ldr	r3, [pc, #404]	; (8001278 <MX_GPIO_Init+0x1dc>)
 80010e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	4b62      	ldr	r3, [pc, #392]	; (8001278 <MX_GPIO_Init+0x1dc>)
 80010f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f4:	4a60      	ldr	r2, [pc, #384]	; (8001278 <MX_GPIO_Init+0x1dc>)
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010fe:	4b5e      	ldr	r3, [pc, #376]	; (8001278 <MX_GPIO_Init+0x1dc>)
 8001100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110c:	4b5a      	ldr	r3, [pc, #360]	; (8001278 <MX_GPIO_Init+0x1dc>)
 800110e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001112:	4a59      	ldr	r2, [pc, #356]	; (8001278 <MX_GPIO_Init+0x1dc>)
 8001114:	f043 0302 	orr.w	r3, r3, #2
 8001118:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800111c:	4b56      	ldr	r3, [pc, #344]	; (8001278 <MX_GPIO_Init+0x1dc>)
 800111e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800112a:	4b53      	ldr	r3, [pc, #332]	; (8001278 <MX_GPIO_Init+0x1dc>)
 800112c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001130:	4a51      	ldr	r2, [pc, #324]	; (8001278 <MX_GPIO_Init+0x1dc>)
 8001132:	f043 0308 	orr.w	r3, r3, #8
 8001136:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800113a:	4b4f      	ldr	r3, [pc, #316]	; (8001278 <MX_GPIO_Init+0x1dc>)
 800113c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001140:	f003 0308 	and.w	r3, r3, #8
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001148:	4b4b      	ldr	r3, [pc, #300]	; (8001278 <MX_GPIO_Init+0x1dc>)
 800114a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800114e:	4a4a      	ldr	r2, [pc, #296]	; (8001278 <MX_GPIO_Init+0x1dc>)
 8001150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001154:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001158:	4b47      	ldr	r3, [pc, #284]	; (8001278 <MX_GPIO_Init+0x1dc>)
 800115a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001166:	4b44      	ldr	r3, [pc, #272]	; (8001278 <MX_GPIO_Init+0x1dc>)
 8001168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116c:	4a42      	ldr	r2, [pc, #264]	; (8001278 <MX_GPIO_Init+0x1dc>)
 800116e:	f043 0310 	orr.w	r3, r3, #16
 8001172:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001176:	4b40      	ldr	r3, [pc, #256]	; (8001278 <MX_GPIO_Init+0x1dc>)
 8001178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117c:	f003 0310 	and.w	r3, r3, #16
 8001180:	603b      	str	r3, [r7, #0]
 8001182:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8001184:	2200      	movs	r2, #0
 8001186:	f244 0101 	movw	r1, #16385	; 0x4001
 800118a:	483c      	ldr	r0, [pc, #240]	; (800127c <MX_GPIO_Init+0x1e0>)
 800118c:	f00d fca8 	bl	800eae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001196:	483a      	ldr	r0, [pc, #232]	; (8001280 <MX_GPIO_Init+0x1e4>)
 8001198:	f00d fca2 	bl	800eae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	2102      	movs	r1, #2
 80011a0:	4838      	ldr	r0, [pc, #224]	; (8001284 <MX_GPIO_Init+0x1e8>)
 80011a2:	f00d fc9d 	bl	800eae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ac:	2300      	movs	r3, #0
 80011ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	4619      	mov	r1, r3
 80011ba:	4833      	ldr	r0, [pc, #204]	; (8001288 <MX_GPIO_Init+0x1ec>)
 80011bc:	f00d fae8 	bl	800e790 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80011c0:	f244 0301 	movw	r3, #16385	; 0x4001
 80011c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d2:	f107 031c 	add.w	r3, r7, #28
 80011d6:	4619      	mov	r1, r3
 80011d8:	4828      	ldr	r0, [pc, #160]	; (800127c <MX_GPIO_Init+0x1e0>)
 80011da:	f00d fad9 	bl	800e790 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80011de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	4619      	mov	r1, r3
 80011f6:	4822      	ldr	r0, [pc, #136]	; (8001280 <MX_GPIO_Init+0x1e4>)
 80011f8:	f00d faca 	bl	800e790 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80011fc:	2380      	movs	r3, #128	; 0x80
 80011fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001200:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001204:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800120a:	f107 031c 	add.w	r3, r7, #28
 800120e:	4619      	mov	r1, r3
 8001210:	481e      	ldr	r0, [pc, #120]	; (800128c <MX_GPIO_Init+0x1f0>)
 8001212:	f00d fabd 	bl	800e790 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001216:	f44f 7300 	mov.w	r3, #512	; 0x200
 800121a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800121c:	2300      	movs	r3, #0
 800121e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001224:	f107 031c 	add.w	r3, r7, #28
 8001228:	4619      	mov	r1, r3
 800122a:	4819      	ldr	r0, [pc, #100]	; (8001290 <MX_GPIO_Init+0x1f4>)
 800122c:	f00d fab0 	bl	800e790 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001230:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001234:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001242:	230a      	movs	r3, #10
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	4619      	mov	r1, r3
 800124c:	4810      	ldr	r0, [pc, #64]	; (8001290 <MX_GPIO_Init+0x1f4>)
 800124e:	f00d fa9f 	bl	800e790 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8001252:	2302      	movs	r3, #2
 8001254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001256:	2301      	movs	r3, #1
 8001258:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	2300      	movs	r3, #0
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	4619      	mov	r1, r3
 8001268:	4806      	ldr	r0, [pc, #24]	; (8001284 <MX_GPIO_Init+0x1e8>)
 800126a:	f00d fa91 	bl	800e790 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800126e:	bf00      	nop
 8001270:	3730      	adds	r7, #48	; 0x30
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	58024400 	.word	0x58024400
 800127c:	58020400 	.word	0x58020400
 8001280:	58020c00 	.word	0x58020c00
 8001284:	58021000 	.word	0x58021000
 8001288:	58020800 	.word	0x58020800
 800128c:	58021800 	.word	0x58021800
 8001290:	58020000 	.word	0x58020000

08001294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001298:	b672      	cpsid	i
}
 800129a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800129c:	e7fe      	b.n	800129c <Error_Handler+0x8>

0800129e <mg_b64rev>:
  } else {
    return c == 62 ? '+' : '/';
  }
}

static int mg_b64rev(int c) {
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
  if (c >= 'A' && c <= 'Z') {
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b40      	cmp	r3, #64	; 0x40
 80012aa:	dd05      	ble.n	80012b8 <mg_b64rev+0x1a>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b5a      	cmp	r3, #90	; 0x5a
 80012b0:	dc02      	bgt.n	80012b8 <mg_b64rev+0x1a>
    return c - 'A';
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3b41      	subs	r3, #65	; 0x41
 80012b6:	e022      	b.n	80012fe <mg_b64rev+0x60>
  } else if (c >= 'a' && c <= 'z') {
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b60      	cmp	r3, #96	; 0x60
 80012bc:	dd05      	ble.n	80012ca <mg_b64rev+0x2c>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b7a      	cmp	r3, #122	; 0x7a
 80012c2:	dc02      	bgt.n	80012ca <mg_b64rev+0x2c>
    return c + 26 - 'a';
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3b47      	subs	r3, #71	; 0x47
 80012c8:	e019      	b.n	80012fe <mg_b64rev+0x60>
  } else if (c >= '0' && c <= '9') {
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b2f      	cmp	r3, #47	; 0x2f
 80012ce:	dd05      	ble.n	80012dc <mg_b64rev+0x3e>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b39      	cmp	r3, #57	; 0x39
 80012d4:	dc02      	bgt.n	80012dc <mg_b64rev+0x3e>
    return c + 52 - '0';
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3304      	adds	r3, #4
 80012da:	e010      	b.n	80012fe <mg_b64rev+0x60>
  } else if (c == '+') {
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b2b      	cmp	r3, #43	; 0x2b
 80012e0:	d101      	bne.n	80012e6 <mg_b64rev+0x48>
    return 62;
 80012e2:	233e      	movs	r3, #62	; 0x3e
 80012e4:	e00b      	b.n	80012fe <mg_b64rev+0x60>
  } else if (c == '/') {
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b2f      	cmp	r3, #47	; 0x2f
 80012ea:	d101      	bne.n	80012f0 <mg_b64rev+0x52>
    return 63;
 80012ec:	233f      	movs	r3, #63	; 0x3f
 80012ee:	e006      	b.n	80012fe <mg_b64rev+0x60>
  } else if (c == '=') {
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b3d      	cmp	r3, #61	; 0x3d
 80012f4:	d101      	bne.n	80012fa <mg_b64rev+0x5c>
    return 64;
 80012f6:	2340      	movs	r3, #64	; 0x40
 80012f8:	e001      	b.n	80012fe <mg_b64rev+0x60>
  } else {
    return -1;
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80012fe:	4618      	mov	r0, r3
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <mg_base64_decode>:
  for (i = 0; i < n; i++) len = mg_base64_update(p[i], to, len);
  len = mg_base64_final(to, len);
  return len;
}

int mg_base64_decode(const char *src, int n, char *dst) {
 800130a:	b580      	push	{r7, lr}
 800130c:	b08a      	sub	sp, #40	; 0x28
 800130e:	af00      	add	r7, sp, #0
 8001310:	60f8      	str	r0, [r7, #12]
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607a      	str	r2, [r7, #4]
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <mg_base64_decode+0x1a>
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	4413      	add	r3, r2
 8001322:	e000      	b.n	8001326 <mg_base64_decode+0x1c>
 8001324:	2300      	movs	r3, #0
 8001326:	623b      	str	r3, [r7, #32]
  int len = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  while (src != NULL && src + 3 < end) {
 800132c:	e06a      	b.n	8001404 <mg_base64_decode+0xfa>
    int a = mg_b64rev(src[0]), b = mg_b64rev(src[1]), c = mg_b64rev(src[2]),
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff ffb3 	bl	800129e <mg_b64rev>
 8001338:	61f8      	str	r0, [r7, #28]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	3301      	adds	r3, #1
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ffac 	bl	800129e <mg_b64rev>
 8001346:	61b8      	str	r0, [r7, #24]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	3302      	adds	r3, #2
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff ffa5 	bl	800129e <mg_b64rev>
 8001354:	6178      	str	r0, [r7, #20]
        d = mg_b64rev(src[3]);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	3303      	adds	r3, #3
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff9e 	bl	800129e <mg_b64rev>
 8001362:	6138      	str	r0, [r7, #16]
    if (a == 64 || a < 0 || b == 64 || b < 0 || c < 0 || d < 0) return 0;
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	2b40      	cmp	r3, #64	; 0x40
 8001368:	d00e      	beq.n	8001388 <mg_base64_decode+0x7e>
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	2b00      	cmp	r3, #0
 800136e:	db0b      	blt.n	8001388 <mg_base64_decode+0x7e>
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	2b40      	cmp	r3, #64	; 0x40
 8001374:	d008      	beq.n	8001388 <mg_base64_decode+0x7e>
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	2b00      	cmp	r3, #0
 800137a:	db05      	blt.n	8001388 <mg_base64_decode+0x7e>
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	2b00      	cmp	r3, #0
 8001380:	db02      	blt.n	8001388 <mg_base64_decode+0x7e>
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	2b00      	cmp	r3, #0
 8001386:	da01      	bge.n	800138c <mg_base64_decode+0x82>
 8001388:	2300      	movs	r3, #0
 800138a:	e049      	b.n	8001420 <mg_base64_decode+0x116>
    dst[len++] = (char) ((a << 2) | (b >> 4));
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	b25a      	sxtb	r2, r3
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	111b      	asrs	r3, r3, #4
 8001396:	b25b      	sxtb	r3, r3
 8001398:	4313      	orrs	r3, r2
 800139a:	b259      	sxtb	r1, r3
 800139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139e:	1c5a      	adds	r2, r3, #1
 80013a0:	627a      	str	r2, [r7, #36]	; 0x24
 80013a2:	461a      	mov	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4413      	add	r3, r2
 80013a8:	b2ca      	uxtb	r2, r1
 80013aa:	701a      	strb	r2, [r3, #0]
    if (src[2] != '=') {
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	3302      	adds	r3, #2
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b3d      	cmp	r3, #61	; 0x3d
 80013b4:	d023      	beq.n	80013fe <mg_base64_decode+0xf4>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	011b      	lsls	r3, r3, #4
 80013ba:	b25a      	sxtb	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	109b      	asrs	r3, r3, #2
 80013c0:	b25b      	sxtb	r3, r3
 80013c2:	4313      	orrs	r3, r2
 80013c4:	b259      	sxtb	r1, r3
 80013c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c8:	1c5a      	adds	r2, r3, #1
 80013ca:	627a      	str	r2, [r7, #36]	; 0x24
 80013cc:	461a      	mov	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	b2ca      	uxtb	r2, r1
 80013d4:	701a      	strb	r2, [r3, #0]
      if (src[3] != '=') dst[len++] = (char) ((c << 6) | d);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	3303      	adds	r3, #3
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b3d      	cmp	r3, #61	; 0x3d
 80013de:	d00e      	beq.n	80013fe <mg_base64_decode+0xf4>
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	019b      	lsls	r3, r3, #6
 80013e4:	b25a      	sxtb	r2, r3
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	4313      	orrs	r3, r2
 80013ec:	b259      	sxtb	r1, r3
 80013ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f0:	1c5a      	adds	r2, r3, #1
 80013f2:	627a      	str	r2, [r7, #36]	; 0x24
 80013f4:	461a      	mov	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	b2ca      	uxtb	r2, r1
 80013fc:	701a      	strb	r2, [r3, #0]
    }
    src += 4;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	3304      	adds	r3, #4
 8001402:	60fb      	str	r3, [r7, #12]
  while (src != NULL && src + 3 < end) {
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d004      	beq.n	8001414 <mg_base64_decode+0x10a>
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	3303      	adds	r3, #3
 800140e:	6a3a      	ldr	r2, [r7, #32]
 8001410:	429a      	cmp	r2, r3
 8001412:	d88c      	bhi.n	800132e <mg_base64_decode+0x24>
  }
  dst[len] = '\0';
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	4413      	add	r3, r2
 800141a:	2200      	movs	r2, #0
 800141c:	701a      	strb	r2, [r3, #0]
  return len;
 800141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001420:	4618      	mov	r0, r3
 8001422:	3728      	adds	r7, #40	; 0x28
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <mg_dns_free>:
};

static void mg_sendnsreq(struct mg_connection *, struct mg_str *, int,
                         struct mg_dns *, bool);

static void mg_dns_free(struct mg_connection *c, struct dns_data *d) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  LIST_DELETE(struct dns_data,
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	3330      	adds	r3, #48	; 0x30
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	e002      	b.n	8001442 <mg_dns_free+0x1a>
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	683a      	ldr	r2, [r7, #0]
 8001448:	429a      	cmp	r2, r3
 800144a:	d1f7      	bne.n	800143c <mg_dns_free+0x14>
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	601a      	str	r2, [r3, #0]
              (struct dns_data **) &c->mgr->active_dns_requests, d);
  free(d);
 8001454:	6838      	ldr	r0, [r7, #0]
 8001456:	f011 fd37 	bl	8012ec8 <free>
}
 800145a:	bf00      	nop
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <mg_resolve_cancel>:

void mg_resolve_cancel(struct mg_connection *c) {
 8001462:	b580      	push	{r7, lr}
 8001464:	b084      	sub	sp, #16
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
  struct dns_data *tmp, *d = (struct dns_data *) c->mgr->active_dns_requests;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001470:	60fb      	str	r3, [r7, #12]
  for (; d != NULL; d = tmp) {
 8001472:	e00d      	b.n	8001490 <mg_resolve_cancel+0x2e>
    tmp = d->next;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	60bb      	str	r3, [r7, #8]
    if (d->c == c) mg_dns_free(c, d);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	429a      	cmp	r2, r3
 8001482:	d103      	bne.n	800148c <mg_resolve_cancel+0x2a>
 8001484:	68f9      	ldr	r1, [r7, #12]
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff ffce 	bl	8001428 <mg_dns_free>
  for (; d != NULL; d = tmp) {
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1ee      	bne.n	8001474 <mg_resolve_cancel+0x12>
  }
}
 8001496:	bf00      	nop
 8001498:	bf00      	nop
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <mg_dns_parse_name_depth>:

static size_t mg_dns_parse_name_depth(const uint8_t *s, size_t len, size_t ofs,
                                      char *to, size_t tolen, size_t j,
                                      int depth) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08c      	sub	sp, #48	; 0x30
 80014a4:	af04      	add	r7, sp, #16
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
 80014ac:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
  if (tolen > 0 && depth == 0) to[0] = '\0';
 80014b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d005      	beq.n	80014c4 <mg_dns_parse_name_depth+0x24>
 80014b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d102      	bne.n	80014c4 <mg_dns_parse_name_depth+0x24>
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
  if (depth > 5) return 0;
 80014c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014c6:	2b05      	cmp	r3, #5
 80014c8:	f340 8084 	ble.w	80015d4 <mg_dns_parse_name_depth+0x134>
 80014cc:	2300      	movs	r3, #0
 80014ce:	e093      	b.n	80015f8 <mg_dns_parse_name_depth+0x158>
  // MG_INFO(("ofs %lx %x %x", (unsigned long) ofs, s[ofs], s[ofs + 1]));
  while (ofs + i + 1 < len) {
    size_t n = s[ofs + i];
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	4413      	add	r3, r2
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	4413      	add	r3, r2
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	61bb      	str	r3, [r7, #24]
    if (n == 0) {
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d103      	bne.n	80014ec <mg_dns_parse_name_depth+0x4c>
      i++;
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	3301      	adds	r3, #1
 80014e8:	61fb      	str	r3, [r7, #28]
      break;
 80014ea:	e07b      	b.n	80015e4 <mg_dns_parse_name_depth+0x144>
    }
    if (n & 0xc0) {
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d02f      	beq.n	8001556 <mg_dns_parse_name_depth+0xb6>
      size_t ptr = (((n & 0x3f) << 8) | s[ofs + i + 1]);  // 12 is hdr len
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	69fa      	ldr	r2, [r7, #28]
 8001502:	440a      	add	r2, r1
 8001504:	3201      	adds	r2, #1
 8001506:	68f9      	ldr	r1, [r7, #12]
 8001508:	440a      	add	r2, r1
 800150a:	7812      	ldrb	r2, [r2, #0]
 800150c:	4313      	orrs	r3, r2
 800150e:	617b      	str	r3, [r7, #20]
      // MG_INFO(("PTR %lx", (unsigned long) ptr));
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	3301      	adds	r3, #1
 8001514:	68ba      	ldr	r2, [r7, #8]
 8001516:	429a      	cmp	r2, r3
 8001518:	d919      	bls.n	800154e <mg_dns_parse_name_depth+0xae>
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	4413      	add	r3, r2
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d111      	bne.n	800154e <mg_dns_parse_name_depth+0xae>
          mg_dns_parse_name_depth(s, len, ptr, to, tolen, j, depth + 1) == 0)
 800152a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800152c:	3301      	adds	r3, #1
 800152e:	9302      	str	r3, [sp, #8]
 8001530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001532:	9301      	str	r3, [sp, #4]
 8001534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	68b9      	ldr	r1, [r7, #8]
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f7ff ffae 	bl	80014a0 <mg_dns_parse_name_depth>
 8001544:	4603      	mov	r3, r0
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <mg_dns_parse_name_depth+0xae>
        return 0;
 800154a:	2300      	movs	r3, #0
 800154c:	e054      	b.n	80015f8 <mg_dns_parse_name_depth+0x158>
      i += 2;
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3302      	adds	r3, #2
 8001552:	61fb      	str	r3, [r7, #28]
      break;
 8001554:	e046      	b.n	80015e4 <mg_dns_parse_name_depth+0x144>
    }
    if (ofs + i + n + 1 >= len) return 0;
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	441a      	add	r2, r3
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	4413      	add	r3, r2
 8001560:	3301      	adds	r3, #1
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	429a      	cmp	r2, r3
 8001566:	d801      	bhi.n	800156c <mg_dns_parse_name_depth+0xcc>
 8001568:	2300      	movs	r3, #0
 800156a:	e045      	b.n	80015f8 <mg_dns_parse_name_depth+0x158>
    if (j > 0) {
 800156c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00b      	beq.n	800158a <mg_dns_parse_name_depth+0xea>
      if (j < tolen) to[j] = '.';
 8001572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001576:	429a      	cmp	r2, r3
 8001578:	d204      	bcs.n	8001584 <mg_dns_parse_name_depth+0xe4>
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157e:	4413      	add	r3, r2
 8001580:	222e      	movs	r2, #46	; 0x2e
 8001582:	701a      	strb	r2, [r3, #0]
      j++;
 8001584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001586:	3301      	adds	r3, #1
 8001588:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 800158a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	4413      	add	r3, r2
 8001590:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001592:	429a      	cmp	r2, r3
 8001594:	d90c      	bls.n	80015b0 <mg_dns_parse_name_depth+0x110>
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800159a:	18d0      	adds	r0, r2, r3
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	4413      	add	r3, r2
 80015a2:	3301      	adds	r3, #1
 80015a4:	68fa      	ldr	r2, [r7, #12]
 80015a6:	4413      	add	r3, r2
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4619      	mov	r1, r3
 80015ac:	f012 f856 	bl	801365c <memcpy>
    j += n;
 80015b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	4413      	add	r3, r2
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    i += n + 1;
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	4413      	add	r3, r2
 80015be:	3301      	adds	r3, #1
 80015c0:	61fb      	str	r3, [r7, #28]
    if (j < tolen) to[j] = '\0';  // Zero-terminate this chunk
 80015c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d204      	bcs.n	80015d4 <mg_dns_parse_name_depth+0x134>
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ce:	4413      	add	r3, r2
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
  while (ofs + i + 1 < len) {
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	4413      	add	r3, r2
 80015da:	3301      	adds	r3, #1
 80015dc:	68ba      	ldr	r2, [r7, #8]
 80015de:	429a      	cmp	r2, r3
 80015e0:	f63f af76 	bhi.w	80014d0 <mg_dns_parse_name_depth+0x30>
    // MG_INFO(("--> [%s]", to));
  }
  if (tolen > 0) to[tolen - 1] = '\0';  // Make sure make sure it is nul-term
 80015e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d005      	beq.n	80015f6 <mg_dns_parse_name_depth+0x156>
 80015ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ec:	3b01      	subs	r3, #1
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	4413      	add	r3, r2
 80015f2:	2200      	movs	r2, #0
 80015f4:	701a      	strb	r2, [r3, #0]
  return i;
 80015f6:	69fb      	ldr	r3, [r7, #28]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3720      	adds	r7, #32
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <mg_dns_parse_name>:

static size_t mg_dns_parse_name(const uint8_t *s, size_t n, size_t ofs,
                                char *dst, size_t dstlen) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b088      	sub	sp, #32
 8001604:	af04      	add	r7, sp, #16
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
 800160c:	603b      	str	r3, [r7, #0]
  return mg_dns_parse_name_depth(s, n, ofs, dst, dstlen, 0, 0);
 800160e:	2300      	movs	r3, #0
 8001610:	9302      	str	r3, [sp, #8]
 8001612:	2300      	movs	r3, #0
 8001614:	9301      	str	r3, [sp, #4]
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	68b9      	ldr	r1, [r7, #8]
 8001620:	68f8      	ldr	r0, [r7, #12]
 8001622:	f7ff ff3d 	bl	80014a0 <mg_dns_parse_name_depth>
 8001626:	4603      	mov	r3, r0
}
 8001628:	4618      	mov	r0, r3
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <mg_dns_parse_rr>:

size_t mg_dns_parse_rr(const uint8_t *buf, size_t len, size_t ofs,
                       bool is_question, struct mg_dns_rr *rr) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af02      	add	r7, sp, #8
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
 800163c:	70fb      	strb	r3, [r7, #3]
  const uint8_t *s = buf + ofs, *e = &buf[len];
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4413      	add	r3, r2
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	4413      	add	r3, r2
 800164c:	613b      	str	r3, [r7, #16]

  memset(rr, 0, sizeof(*rr));
 800164e:	2208      	movs	r2, #8
 8001650:	2100      	movs	r1, #0
 8001652:	6a38      	ldr	r0, [r7, #32]
 8001654:	f011 ff1b 	bl	801348e <memset>
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	2b0b      	cmp	r3, #11
 800165c:	d801      	bhi.n	8001662 <mg_dns_parse_rr+0x32>
 800165e:	2300      	movs	r3, #0
 8001660:	e074      	b.n	800174c <mg_dns_parse_rr+0x11c>
  if (len > 512) return 0;  //  Too large, we don't expect that
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001668:	d901      	bls.n	800166e <mg_dns_parse_rr+0x3e>
 800166a:	2300      	movs	r3, #0
 800166c:	e06e      	b.n	800174c <mg_dns_parse_rr+0x11c>
  if (s >= e) return 0;     //  Overflow
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	429a      	cmp	r2, r3
 8001674:	d301      	bcc.n	800167a <mg_dns_parse_rr+0x4a>
 8001676:	2300      	movs	r3, #0
 8001678:	e068      	b.n	800174c <mg_dns_parse_rr+0x11c>

  if ((rr->nlen = (uint16_t) mg_dns_parse_name(buf, len, ofs, NULL, 0)) == 0)
 800167a:	2300      	movs	r3, #0
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	2300      	movs	r3, #0
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	68b9      	ldr	r1, [r7, #8]
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f7ff ffbb 	bl	8001600 <mg_dns_parse_name>
 800168a:	4603      	mov	r3, r0
 800168c:	b29a      	uxth	r2, r3
 800168e:	6a3b      	ldr	r3, [r7, #32]
 8001690:	801a      	strh	r2, [r3, #0]
 8001692:	6a3b      	ldr	r3, [r7, #32]
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <mg_dns_parse_rr+0x6e>
    return 0;
 800169a:	2300      	movs	r3, #0
 800169c:	e056      	b.n	800174c <mg_dns_parse_rr+0x11c>
  s += rr->nlen + 4;
 800169e:	6a3b      	ldr	r3, [r7, #32]
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	3304      	adds	r3, #4
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	4413      	add	r3, r2
 80016a8:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d901      	bls.n	80016b6 <mg_dns_parse_rr+0x86>
 80016b2:	2300      	movs	r3, #0
 80016b4:	e04a      	b.n	800174c <mg_dns_parse_rr+0x11c>
  rr->atype = (uint16_t) (((uint16_t) s[-4] << 8) | s[-3]);
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	3b04      	subs	r3, #4
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	021b      	lsls	r3, r3, #8
 80016be:	b21a      	sxth	r2, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	3b03      	subs	r3, #3
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	b21b      	sxth	r3, r3
 80016c8:	4313      	orrs	r3, r2
 80016ca:	b21b      	sxth	r3, r3
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	6a3b      	ldr	r3, [r7, #32]
 80016d0:	805a      	strh	r2, [r3, #2]
  rr->aclass = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	3b02      	subs	r3, #2
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	021b      	lsls	r3, r3, #8
 80016da:	b21a      	sxth	r2, r3
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	3b01      	subs	r3, #1
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	b21b      	sxth	r3, r3
 80016e4:	4313      	orrs	r3, r2
 80016e6:	b21b      	sxth	r3, r3
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	6a3b      	ldr	r3, [r7, #32]
 80016ec:	809a      	strh	r2, [r3, #4]
  if (is_question) return (size_t) (rr->nlen + 4);
 80016ee:	78fb      	ldrb	r3, [r7, #3]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <mg_dns_parse_rr+0xcc>
 80016f4:	6a3b      	ldr	r3, [r7, #32]
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	3304      	adds	r3, #4
 80016fa:	e027      	b.n	800174c <mg_dns_parse_rr+0x11c>

  s += 6;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	3306      	adds	r3, #6
 8001700:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	429a      	cmp	r2, r3
 8001708:	d901      	bls.n	800170e <mg_dns_parse_rr+0xde>
 800170a:	2300      	movs	r3, #0
 800170c:	e01e      	b.n	800174c <mg_dns_parse_rr+0x11c>
  rr->alen = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	3b02      	subs	r3, #2
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	021b      	lsls	r3, r3, #8
 8001716:	b21a      	sxth	r2, r3
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	3b01      	subs	r3, #1
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	b21b      	sxth	r3, r3
 8001720:	4313      	orrs	r3, r2
 8001722:	b21b      	sxth	r3, r3
 8001724:	b29a      	uxth	r2, r3
 8001726:	6a3b      	ldr	r3, [r7, #32]
 8001728:	80da      	strh	r2, [r3, #6]
  if (s + rr->alen > e) return 0;
 800172a:	6a3b      	ldr	r3, [r7, #32]
 800172c:	88db      	ldrh	r3, [r3, #6]
 800172e:	461a      	mov	r2, r3
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	4413      	add	r3, r2
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	429a      	cmp	r2, r3
 8001738:	d201      	bcs.n	800173e <mg_dns_parse_rr+0x10e>
 800173a:	2300      	movs	r3, #0
 800173c:	e006      	b.n	800174c <mg_dns_parse_rr+0x11c>
  return (size_t) (rr->nlen + rr->alen + 10);
 800173e:	6a3b      	ldr	r3, [r7, #32]
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	461a      	mov	r2, r3
 8001744:	6a3b      	ldr	r3, [r7, #32]
 8001746:	88db      	ldrh	r3, [r3, #6]
 8001748:	4413      	add	r3, r2
 800174a:	330a      	adds	r3, #10
}
 800174c:	4618      	mov	r0, r3
 800174e:	3718      	adds	r7, #24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <mg_dns_parse>:

bool mg_dns_parse(const uint8_t *buf, size_t len, struct mg_dns_message *dm) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b08c      	sub	sp, #48	; 0x30
 8001758:	af02      	add	r7, sp, #8
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
  const struct mg_dns_header *h = (struct mg_dns_header *) buf;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	61fb      	str	r3, [r7, #28]
  struct mg_dns_rr rr;
  size_t i, n, ofs = sizeof(*h);
 8001764:	230c      	movs	r3, #12
 8001766:	623b      	str	r3, [r7, #32]
  memset(dm, 0, sizeof(*dm));
 8001768:	f44f 728c 	mov.w	r2, #280	; 0x118
 800176c:	2100      	movs	r1, #0
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f011 fe8d 	bl	801348e <memset>

  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	2b0b      	cmp	r3, #11
 8001778:	d801      	bhi.n	800177e <mg_dns_parse+0x2a>
 800177a:	2300      	movs	r3, #0
 800177c:	e09f      	b.n	80018be <mg_dns_parse+0x16a>
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	889b      	ldrh	r3, [r3, #4]
 8001782:	4618      	mov	r0, r3
 8001784:	f007 fe39 	bl	80093fa <mg_ntohs>
 8001788:	4603      	mov	r3, r0
 800178a:	2b01      	cmp	r3, #1
 800178c:	d901      	bls.n	8001792 <mg_dns_parse+0x3e>
 800178e:	2300      	movs	r3, #0
 8001790:	e095      	b.n	80018be <mg_dns_parse+0x16a>
  if (mg_ntohs(h->num_answers) > 10) return 0;   // Sanity
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	88db      	ldrh	r3, [r3, #6]
 8001796:	4618      	mov	r0, r3
 8001798:	f007 fe2f 	bl	80093fa <mg_ntohs>
 800179c:	4603      	mov	r3, r0
 800179e:	2b0a      	cmp	r3, #10
 80017a0:	d901      	bls.n	80017a6 <mg_dns_parse+0x52>
 80017a2:	2300      	movs	r3, #0
 80017a4:	e08b      	b.n	80018be <mg_dns_parse+0x16a>
  dm->txnid = mg_ntohs(h->txnid);
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f007 fe25 	bl	80093fa <mg_ntohs>
 80017b0:	4603      	mov	r3, r0
 80017b2:	461a      	mov	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	801a      	strh	r2, [r3, #0]

  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 80017b8:	2300      	movs	r3, #0
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
 80017bc:	e015      	b.n	80017ea <mg_dns_parse+0x96>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 80017be:	f107 0310 	add.w	r3, r7, #16
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	2301      	movs	r3, #1
 80017c6:	6a3a      	ldr	r2, [r7, #32]
 80017c8:	68b9      	ldr	r1, [r7, #8]
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f7ff ff30 	bl	8001630 <mg_dns_parse_rr>
 80017d0:	61b8      	str	r0, [r7, #24]
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d101      	bne.n	80017dc <mg_dns_parse+0x88>
 80017d8:	2300      	movs	r3, #0
 80017da:	e070      	b.n	80018be <mg_dns_parse+0x16a>
    // MG_INFO(("Q %lu %lu %hu/%hu", ofs, n, rr.atype, rr.aclass));
    ofs += n;
 80017dc:	6a3a      	ldr	r2, [r7, #32]
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	4413      	add	r3, r2
 80017e2:	623b      	str	r3, [r7, #32]
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	3301      	adds	r3, #1
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	889b      	ldrh	r3, [r3, #4]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f007 fe03 	bl	80093fa <mg_ntohs>
 80017f4:	4603      	mov	r3, r0
 80017f6:	461a      	mov	r2, r3
 80017f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d3df      	bcc.n	80017be <mg_dns_parse+0x6a>
  }
  for (i = 0; i < mg_ntohs(h->num_answers); i++) {
 80017fe:	2300      	movs	r3, #0
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
 8001802:	e051      	b.n	80018a8 <mg_dns_parse+0x154>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 8001804:	f107 0310 	add.w	r3, r7, #16
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	2300      	movs	r3, #0
 800180c:	6a3a      	ldr	r2, [r7, #32]
 800180e:	68b9      	ldr	r1, [r7, #8]
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f7ff ff0d 	bl	8001630 <mg_dns_parse_rr>
 8001816:	61b8      	str	r0, [r7, #24]
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <mg_dns_parse+0xce>
 800181e:	2300      	movs	r3, #0
 8001820:	e04d      	b.n	80018be <mg_dns_parse+0x16a>
    // MG_INFO(("A -- %lu %lu %hu/%hu %s", ofs, n, rr.atype, rr.aclass,
    // dm->name));
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3318      	adds	r3, #24
 8001826:	f44f 7280 	mov.w	r2, #256	; 0x100
 800182a:	9200      	str	r2, [sp, #0]
 800182c:	6a3a      	ldr	r2, [r7, #32]
 800182e:	68b9      	ldr	r1, [r7, #8]
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	f7ff fee5 	bl	8001600 <mg_dns_parse_name>
    ofs += n;
 8001836:	6a3a      	ldr	r2, [r7, #32]
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	4413      	add	r3, r2
 800183c:	623b      	str	r3, [r7, #32]

    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 800183e:	8afb      	ldrh	r3, [r7, #22]
 8001840:	2b04      	cmp	r3, #4
 8001842:	d114      	bne.n	800186e <mg_dns_parse+0x11a>
 8001844:	8a7b      	ldrh	r3, [r7, #18]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d111      	bne.n	800186e <mg_dns_parse+0x11a>
 800184a:	8abb      	ldrh	r3, [r7, #20]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d10e      	bne.n	800186e <mg_dns_parse+0x11a>
      dm->addr.is_ip6 = false;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	759a      	strb	r2, [r3, #22]
      memcpy(&dm->addr.ip, &buf[ofs - 4], 4);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3304      	adds	r3, #4
 800185a:	6a3a      	ldr	r2, [r7, #32]
 800185c:	3a04      	subs	r2, #4
 800185e:	68f9      	ldr	r1, [r7, #12]
 8001860:	440a      	add	r2, r1
 8001862:	6812      	ldr	r2, [r2, #0]
 8001864:	601a      	str	r2, [r3, #0]
      dm->resolved = true;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2201      	movs	r2, #1
 800186a:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 800186c:	e026      	b.n	80018bc <mg_dns_parse+0x168>
    } else if (rr.alen == 16 && rr.atype == 28 && rr.aclass == 1) {
 800186e:	8afb      	ldrh	r3, [r7, #22]
 8001870:	2b10      	cmp	r3, #16
 8001872:	d116      	bne.n	80018a2 <mg_dns_parse+0x14e>
 8001874:	8a7b      	ldrh	r3, [r7, #18]
 8001876:	2b1c      	cmp	r3, #28
 8001878:	d113      	bne.n	80018a2 <mg_dns_parse+0x14e>
 800187a:	8abb      	ldrh	r3, [r7, #20]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d110      	bne.n	80018a2 <mg_dns_parse+0x14e>
      dm->addr.is_ip6 = true;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	759a      	strb	r2, [r3, #22]
      memcpy(&dm->addr.ip, &buf[ofs - 16], 16);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	1d18      	adds	r0, r3, #4
 800188a:	6a3b      	ldr	r3, [r7, #32]
 800188c:	3b10      	subs	r3, #16
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	4413      	add	r3, r2
 8001892:	2210      	movs	r2, #16
 8001894:	4619      	mov	r1, r3
 8001896:	f011 fee1 	bl	801365c <memcpy>
      dm->resolved = true;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2201      	movs	r2, #1
 800189e:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 80018a0:	e00c      	b.n	80018bc <mg_dns_parse+0x168>
  for (i = 0; i < mg_ntohs(h->num_answers); i++) {
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	3301      	adds	r3, #1
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	88db      	ldrh	r3, [r3, #6]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f007 fda4 	bl	80093fa <mg_ntohs>
 80018b2:	4603      	mov	r3, r0
 80018b4:	461a      	mov	r2, r3
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d3a3      	bcc.n	8001804 <mg_dns_parse+0xb0>
    }
  }
  return true;
 80018bc:	2301      	movs	r3, #1
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3728      	adds	r7, #40	; 0x28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <dns_cb>:

static void dns_cb(struct mg_connection *c, int ev, void *ev_data,
                   void *fn_data) {
 80018c8:	b5b0      	push	{r4, r5, r7, lr}
 80018ca:	b0d2      	sub	sp, #328	; 0x148
 80018cc:	af02      	add	r7, sp, #8
 80018ce:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 80018d2:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 80018d6:	6020      	str	r0, [r4, #0]
 80018d8:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 80018dc:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 80018e0:	6001      	str	r1, [r0, #0]
 80018e2:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80018e6:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 80018ea:	600a      	str	r2, [r1, #0]
 80018ec:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80018f0:	f5a2 72a0 	sub.w	r2, r2, #320	; 0x140
 80018f4:	6013      	str	r3, [r2, #0]
  struct dns_data *d, *tmp;
  if (ev == MG_EV_POLL) {
 80018f6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80018fa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2b02      	cmp	r3, #2
 8001902:	d131      	bne.n	8001968 <dns_cb+0xa0>
    uint64_t now = *(uint64_t *) ev_data;
 8001904:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001908:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001912:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
    for (d = (struct dns_data *) c->mgr->active_dns_requests; d != NULL;
 8001916:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800191a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001924:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001928:	e019      	b.n	800195e <dns_cb+0x96>
         d = tmp) {
      tmp = d->next;
 800192a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      // MG_DEBUG ("%lu %lu dns poll", d->expire, now));
      if (now > d->expire) mg_error(d->c, "DNS timeout");
 8001934:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001938:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800193c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001940:	4290      	cmp	r0, r2
 8001942:	eb71 0303 	sbcs.w	r3, r1, r3
 8001946:	d206      	bcs.n	8001956 <dns_cb+0x8e>
 8001948:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	4997      	ldr	r1, [pc, #604]	; (8001bac <dns_cb+0x2e4>)
 8001950:	4618      	mov	r0, r3
 8001952:	f000 fb3d 	bl	8001fd0 <mg_error>
         d = tmp) {
 8001956:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800195a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    for (d = (struct dns_data *) c->mgr->active_dns_requests; d != NULL;
 800195e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1e1      	bne.n	800192a <dns_cb+0x62>
      mg_error(d->c, "DNS error");
      mg_dns_free(c, d);
    }
  }
  (void) fn_data;
}
 8001966:	e11c      	b.n	8001ba2 <dns_cb+0x2da>
  } else if (ev == MG_EV_READ) {
 8001968:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800196c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2b07      	cmp	r3, #7
 8001974:	f040 80e7 	bne.w	8001b46 <dns_cb+0x27e>
    int resolved = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    if (mg_dns_parse(c->recv.buf, c->recv.len, &dm) == false) {
 800197e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001982:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800198a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800198e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	f107 0210 	add.w	r2, r7, #16
 800199a:	4619      	mov	r1, r3
 800199c:	f7ff feda 	bl	8001754 <mg_dns_parse>
 80019a0:	4603      	mov	r3, r0
 80019a2:	f083 0301 	eor.w	r3, r3, #1
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d01d      	beq.n	80019e8 <dns_cb+0x120>
      MG_ERROR(("Unexpected DNS response:"));
 80019ac:	4b80      	ldr	r3, [pc, #512]	; (8001bb0 <dns_cb+0x2e8>)
 80019ae:	f44f 7284 	mov.w	r2, #264	; 0x108
 80019b2:	4980      	ldr	r1, [pc, #512]	; (8001bb4 <dns_cb+0x2ec>)
 80019b4:	2001      	movs	r0, #1
 80019b6:	f005 fac9 	bl	8006f4c <mg_log_prefix>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d002      	beq.n	80019c6 <dns_cb+0xfe>
 80019c0:	487d      	ldr	r0, [pc, #500]	; (8001bb8 <dns_cb+0x2f0>)
 80019c2:	f005 fb1d 	bl	8007000 <mg_log>
      mg_hexdump(c->recv.buf, c->recv.len);
 80019c6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80019ca:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019d2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80019d6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	4619      	mov	r1, r3
 80019e0:	4610      	mov	r0, r2
 80019e2:	f005 fb41 	bl	8007068 <mg_hexdump>
 80019e6:	e095      	b.n	8001b14 <dns_cb+0x24c>
      for (d = (struct dns_data *) c->mgr->active_dns_requests; d != NULL;
 80019e8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80019ec:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80019fa:	e086      	b.n	8001b0a <dns_cb+0x242>
        tmp = d->next;
 80019fc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
        if (dm.txnid != d->txnid) continue;
 8001a06:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001a0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001a0e:	881a      	ldrh	r2, [r3, #0]
 8001a10:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001a14:	8a1b      	ldrh	r3, [r3, #16]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d172      	bne.n	8001b00 <dns_cb+0x238>
        if (d->c->is_resolving) {
 8001a1a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001a24:	f003 0308 	and.w	r3, r3, #8
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d049      	beq.n	8001ac2 <dns_cb+0x1fa>
          if (dm.resolved) {
 8001a2e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001a32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001a36:	789b      	ldrb	r3, [r3, #2]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d037      	beq.n	8001aac <dns_cb+0x1e4>
            dm.addr.port = d->c->rem.port;  // Save port
 8001a3c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001a44:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001a48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001a4c:	829a      	strh	r2, [r3, #20]
            d->c->rem = dm.addr;            // Copy resolved address
 8001a4e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001a58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001a5c:	f102 041c 	add.w	r4, r2, #28
 8001a60:	1d1d      	adds	r5, r3, #4
 8001a62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a66:	682b      	ldr	r3, [r5, #0]
 8001a68:	6023      	str	r3, [r4, #0]
            MG_DEBUG(
 8001a6a:	4b51      	ldr	r3, [pc, #324]	; (8001bb0 <dns_cb+0x2e8>)
 8001a6c:	f240 1215 	movw	r2, #277	; 0x115
 8001a70:	4950      	ldr	r1, [pc, #320]	; (8001bb4 <dns_cb+0x2ec>)
 8001a72:	2003      	movs	r0, #3
 8001a74:	f005 fa6a 	bl	8006f4c <mg_log_prefix>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d00f      	beq.n	8001a9e <dns_cb+0x1d6>
 8001a7e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a86:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	331c      	adds	r3, #28
 8001a8e:	f107 0210 	add.w	r2, r7, #16
 8001a92:	3218      	adds	r2, #24
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	4b49      	ldr	r3, [pc, #292]	; (8001bbc <dns_cb+0x2f4>)
 8001a98:	4849      	ldr	r0, [pc, #292]	; (8001bc0 <dns_cb+0x2f8>)
 8001a9a:	f005 fab1 	bl	8007000 <mg_log>
            mg_connect_resolved(d->c);
 8001a9e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f00a fce3 	bl	800c470 <mg_connect_resolved>
 8001aaa:	e01c      	b.n	8001ae6 <dns_cb+0x21e>
            mg_error(d->c, "%s DNS lookup failed", dm.name);
 8001aac:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001ab0:	6858      	ldr	r0, [r3, #4]
 8001ab2:	f107 0310 	add.w	r3, r7, #16
 8001ab6:	3318      	adds	r3, #24
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4942      	ldr	r1, [pc, #264]	; (8001bc4 <dns_cb+0x2fc>)
 8001abc:	f000 fa88 	bl	8001fd0 <mg_error>
 8001ac0:	e011      	b.n	8001ae6 <dns_cb+0x21e>
          MG_ERROR(("%lu already resolved", d->c->id));
 8001ac2:	4b3b      	ldr	r3, [pc, #236]	; (8001bb0 <dns_cb+0x2e8>)
 8001ac4:	f44f 7291 	mov.w	r2, #290	; 0x122
 8001ac8:	493a      	ldr	r1, [pc, #232]	; (8001bb4 <dns_cb+0x2ec>)
 8001aca:	2001      	movs	r0, #1
 8001acc:	f005 fa3e 	bl	8006f4c <mg_log_prefix>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d007      	beq.n	8001ae6 <dns_cb+0x21e>
 8001ad6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4839      	ldr	r0, [pc, #228]	; (8001bc8 <dns_cb+0x300>)
 8001ae2:	f005 fa8d 	bl	8007000 <mg_log>
        mg_dns_free(c, d);
 8001ae6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001aea:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001aee:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001af2:	6818      	ldr	r0, [r3, #0]
 8001af4:	f7ff fc98 	bl	8001428 <mg_dns_free>
        resolved = 1;
 8001af8:	2301      	movs	r3, #1
 8001afa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001afe:	e000      	b.n	8001b02 <dns_cb+0x23a>
        if (dm.txnid != d->txnid) continue;
 8001b00:	bf00      	nop
           d = tmp) {
 8001b02:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001b06:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
      for (d = (struct dns_data *) c->mgr->active_dns_requests; d != NULL;
 8001b0a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f47f af74 	bne.w	80019fc <dns_cb+0x134>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 8001b14:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d10c      	bne.n	8001b36 <dns_cb+0x26e>
 8001b1c:	4b24      	ldr	r3, [pc, #144]	; (8001bb0 <dns_cb+0x2e8>)
 8001b1e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8001b22:	4924      	ldr	r1, [pc, #144]	; (8001bb4 <dns_cb+0x2ec>)
 8001b24:	2001      	movs	r0, #1
 8001b26:	f005 fa11 	bl	8006f4c <mg_log_prefix>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d002      	beq.n	8001b36 <dns_cb+0x26e>
 8001b30:	4826      	ldr	r0, [pc, #152]	; (8001bcc <dns_cb+0x304>)
 8001b32:	f005 fa65 	bl	8007000 <mg_log>
    c->recv.len = 0;
 8001b36:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001b3a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2200      	movs	r2, #0
 8001b42:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001b44:	e02d      	b.n	8001ba2 <dns_cb+0x2da>
  } else if (ev == MG_EV_CLOSE) {
 8001b46:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001b4a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2b09      	cmp	r3, #9
 8001b52:	d126      	bne.n	8001ba2 <dns_cb+0x2da>
    for (d = (struct dns_data *) c->mgr->active_dns_requests; d != NULL;
 8001b54:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001b58:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001b66:	e018      	b.n	8001b9a <dns_cb+0x2d2>
      tmp = d->next;
 8001b68:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      mg_error(d->c, "DNS error");
 8001b72:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	4915      	ldr	r1, [pc, #84]	; (8001bd0 <dns_cb+0x308>)
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 fa28 	bl	8001fd0 <mg_error>
      mg_dns_free(c, d);
 8001b80:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001b84:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001b88:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001b8c:	6818      	ldr	r0, [r3, #0]
 8001b8e:	f7ff fc4b 	bl	8001428 <mg_dns_free>
         d = tmp) {
 8001b92:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001b96:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    for (d = (struct dns_data *) c->mgr->active_dns_requests; d != NULL;
 8001b9a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1e2      	bne.n	8001b68 <dns_cb+0x2a0>
}
 8001ba2:	bf00      	nop
 8001ba4:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bdb0      	pop	{r4, r5, r7, pc}
 8001bac:	08014264 	.word	0x08014264
 8001bb0:	080161ac 	.word	0x080161ac
 8001bb4:	08014270 	.word	0x08014270
 8001bb8:	08014288 	.word	0x08014288
 8001bbc:	08007d37 	.word	0x08007d37
 8001bc0:	080142a4 	.word	0x080142a4
 8001bc4:	080142b4 	.word	0x080142b4
 8001bc8:	080142cc 	.word	0x080142cc
 8001bcc:	080142e4 	.word	0x080142e4
 8001bd0:	080142f4 	.word	0x080142f4

08001bd4 <mg_dns_send>:

static bool mg_dns_send(struct mg_connection *c, const struct mg_str *name,
                        uint16_t txnid, bool ipv6) {
 8001bd4:	b590      	push	{r4, r7, lr}
 8001bd6:	b0cb      	sub	sp, #300	; 0x12c
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	f507 7494 	add.w	r4, r7, #296	; 0x128
 8001bde:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8001be2:	6020      	str	r0, [r4, #0]
 8001be4:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8001be8:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 8001bec:	6001      	str	r1, [r0, #0]
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001bf4:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 8001bf8:	801a      	strh	r2, [r3, #0]
 8001bfa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001bfe:	f2a3 1323 	subw	r3, r3, #291	; 0x123
 8001c02:	460a      	mov	r2, r1
 8001c04:	701a      	strb	r2, [r3, #0]
  struct {
    struct mg_dns_header header;
    uint8_t data[256];
  } pkt;
  size_t i, n;
  memset(&pkt, 0, sizeof(pkt));
 8001c06:	f107 0314 	add.w	r3, r7, #20
 8001c0a:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8001c0e:	2100      	movs	r1, #0
 8001c10:	4618      	mov	r0, r3
 8001c12:	f011 fc3c 	bl	801348e <memset>
  pkt.header.txnid = mg_htons(txnid);
 8001c16:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001c1a:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f007 fbea 	bl	80093fa <mg_ntohs>
 8001c26:	4603      	mov	r3, r0
 8001c28:	461a      	mov	r2, r3
 8001c2a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001c2e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001c32:	801a      	strh	r2, [r3, #0]
  pkt.header.flags = mg_htons(0x100);
 8001c34:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001c38:	f007 fbdf 	bl	80093fa <mg_ntohs>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	461a      	mov	r2, r3
 8001c40:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001c44:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001c48:	805a      	strh	r2, [r3, #2]
  pkt.header.num_questions = mg_htons(1);
 8001c4a:	2001      	movs	r0, #1
 8001c4c:	f007 fbd5 	bl	80093fa <mg_ntohs>
 8001c50:	4603      	mov	r3, r0
 8001c52:	461a      	mov	r2, r3
 8001c54:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001c58:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001c5c:	809a      	strh	r2, [r3, #4]
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8001c5e:	2300      	movs	r3, #0
 8001c60:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001c64:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001c68:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001c6c:	e054      	b.n	8001d18 <mg_dns_send+0x144>
    if (name->ptr[i] == '.' || i >= name->len) {
 8001c6e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001c72:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001c7e:	4413      	add	r3, r2
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b2e      	cmp	r3, #46	; 0x2e
 8001c84:	d009      	beq.n	8001c9a <mg_dns_send+0xc6>
 8001c86:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001c8a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d32f      	bcc.n	8001cfa <mg_dns_send+0x126>
      pkt.data[n] = (uint8_t) (i - n);
 8001c9a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	b2d9      	uxtb	r1, r3
 8001caa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001cae:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8001cb2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001cb6:	4413      	add	r3, r2
 8001cb8:	330c      	adds	r3, #12
 8001cba:	460a      	mov	r2, r1
 8001cbc:	701a      	strb	r2, [r3, #0]
      memcpy(&pkt.data[n + 1], name->ptr + n, i - n);
 8001cbe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	f107 0214 	add.w	r2, r7, #20
 8001cc8:	3308      	adds	r3, #8
 8001cca:	4413      	add	r3, r2
 8001ccc:	1d18      	adds	r0, r3, #4
 8001cce:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001cd2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001cde:	18d1      	adds	r1, r2, r3
 8001ce0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001ce4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	461a      	mov	r2, r3
 8001cec:	f011 fcb6 	bl	801365c <memcpy>
      n = i + 1;
 8001cf0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    }
    if (i >= name->len) break;
 8001cfa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001cfe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d209      	bcs.n	8001d22 <mg_dns_send+0x14e>
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8001d0e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001d12:	3301      	adds	r3, #1
 8001d14:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001d18:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001d1c:	2bfa      	cmp	r3, #250	; 0xfa
 8001d1e:	d9a6      	bls.n	8001c6e <mg_dns_send+0x9a>
 8001d20:	e000      	b.n	8001d24 <mg_dns_send+0x150>
    if (i >= name->len) break;
 8001d22:	bf00      	nop
  }
  memcpy(&pkt.data[n], "\x00\x00\x01\x00\x01", 5);  // A query
 8001d24:	f107 0214 	add.w	r2, r7, #20
 8001d28:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001d2c:	3308      	adds	r3, #8
 8001d2e:	4413      	add	r3, r2
 8001d30:	3304      	adds	r3, #4
 8001d32:	2205      	movs	r2, #5
 8001d34:	4916      	ldr	r1, [pc, #88]	; (8001d90 <mg_dns_send+0x1bc>)
 8001d36:	4618      	mov	r0, r3
 8001d38:	f011 fc90 	bl	801365c <memcpy>
  n += 5;
 8001d3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001d40:	3305      	adds	r3, #5
 8001d42:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  if (ipv6) pkt.data[n - 3] = 0x1c;  // AAAA query
 8001d46:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001d4a:	f2a3 1323 	subw	r3, r3, #291	; 0x123
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d009      	beq.n	8001d68 <mg_dns_send+0x194>
 8001d54:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001d58:	3b03      	subs	r3, #3
 8001d5a:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001d5e:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8001d62:	4413      	add	r3, r2
 8001d64:	221c      	movs	r2, #28
 8001d66:	731a      	strb	r2, [r3, #12]
  // memcpy(&pkt.data[n], "\xc0\x0c\x00\x1c\x00\x01", 6);  // AAAA query
  // n += 6;
  return mg_send(c, &pkt, sizeof(pkt.header) + n);
 8001d68:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001d6c:	f103 020c 	add.w	r2, r3, #12
 8001d70:	f107 0114 	add.w	r1, r7, #20
 8001d74:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001d78:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d7c:	6818      	ldr	r0, [r3, #0]
 8001d7e:	f00a fdeb 	bl	800c958 <mg_send>
 8001d82:	4603      	mov	r3, r0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd90      	pop	{r4, r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	08014300 	.word	0x08014300

08001d94 <mg_sendnsreq>:

static void mg_sendnsreq(struct mg_connection *c, struct mg_str *name, int ms,
                         struct mg_dns *dnsc, bool ipv6) {
 8001d94:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d98:	b088      	sub	sp, #32
 8001d9a:	af02      	add	r7, sp, #8
 8001d9c:	60f8      	str	r0, [r7, #12]
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
 8001da2:	603b      	str	r3, [r7, #0]
  struct dns_data *d = NULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]
  if (dnsc->url == NULL) {
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d104      	bne.n	8001dba <mg_sendnsreq+0x26>
    mg_error(c, "DNS server URL is NULL. Call mg_mgr_init()");
 8001db0:	494c      	ldr	r1, [pc, #304]	; (8001ee4 <mg_sendnsreq+0x150>)
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f000 f90c 	bl	8001fd0 <mg_error>
 8001db8:	e016      	b.n	8001de8 <mg_sendnsreq+0x54>
  } else if (dnsc->c == NULL) {
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d112      	bne.n	8001de8 <mg_sendnsreq+0x54>
    dnsc->c = mg_connect(c->mgr, dnsc->url, NULL, NULL);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6858      	ldr	r0, [r3, #4]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	6819      	ldr	r1, [r3, #0]
 8001dca:	2300      	movs	r3, #0
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f005 fcfd 	bl	80077cc <mg_connect>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	605a      	str	r2, [r3, #4]
    if (dnsc->c != NULL) {
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d003      	beq.n	8001de8 <mg_sendnsreq+0x54>
      dnsc->c->pfn = dns_cb;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	4a40      	ldr	r2, [pc, #256]	; (8001ee8 <mg_sendnsreq+0x154>)
 8001de6:	661a      	str	r2, [r3, #96]	; 0x60
      // dnsc->c->is_hexdumping = 1;
    }
  }
  if (dnsc->c == NULL) {
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d104      	bne.n	8001dfa <mg_sendnsreq+0x66>
    mg_error(c, "resolver");
 8001df0:	493e      	ldr	r1, [pc, #248]	; (8001eec <mg_sendnsreq+0x158>)
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f000 f8ec 	bl	8001fd0 <mg_error>
                name->ptr, dnsc->url, d->txnid));
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
      mg_error(dnsc->c, "DNS send");
    }
  }
}
 8001df8:	e06f      	b.n	8001eda <mg_sendnsreq+0x146>
  } else if ((d = (struct dns_data *) calloc(1, sizeof(*d))) == NULL) {
 8001dfa:	2118      	movs	r1, #24
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	f011 f83d 	bl	8012e7c <calloc>
 8001e02:	4603      	mov	r3, r0
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d104      	bne.n	8001e16 <mg_sendnsreq+0x82>
    mg_error(c, "resolve OOM");
 8001e0c:	4938      	ldr	r1, [pc, #224]	; (8001ef0 <mg_sendnsreq+0x15c>)
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f000 f8de 	bl	8001fd0 <mg_error>
}
 8001e14:	e061      	b.n	8001eda <mg_sendnsreq+0x146>
    struct dns_data *reqs = (struct dns_data *) c->mgr->active_dns_requests;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1c:	613b      	str	r3, [r7, #16]
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d004      	beq.n	8001e2e <mg_sendnsreq+0x9a>
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	8a1b      	ldrh	r3, [r3, #16]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	e000      	b.n	8001e30 <mg_sendnsreq+0x9c>
 8001e2e:	2201      	movs	r2, #1
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	821a      	strh	r2, [r3, #16]
    d->next = (struct dns_data *) c->mgr->active_dns_requests;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	601a      	str	r2, [r3, #0]
    c->mgr->active_dns_requests = d;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	631a      	str	r2, [r3, #48]	; 0x30
    d->expire = mg_millis() + (uint64_t) ms;
 8001e46:	f7fe feab 	bl	8000ba0 <mg_millis>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	17c8      	asrs	r0, r1, #31
 8001e52:	460c      	mov	r4, r1
 8001e54:	4605      	mov	r5, r0
 8001e56:	eb12 0804 	adds.w	r8, r2, r4
 8001e5a:	eb43 0905 	adc.w	r9, r3, r5
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	e9c3 8902 	strd	r8, r9, [r3, #8]
    d->c = c;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	605a      	str	r2, [r3, #4]
    c->is_resolving = 1;
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 8001e70:	f043 0308 	orr.w	r3, r3, #8
 8001e74:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 8001e78:	4b1e      	ldr	r3, [pc, #120]	; (8001ef4 <mg_sendnsreq+0x160>)
 8001e7a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001e7e:	491e      	ldr	r1, [pc, #120]	; (8001ef8 <mg_sendnsreq+0x164>)
 8001e80:	2004      	movs	r0, #4
 8001e82:	f005 f863 	bl	8006f4c <mg_log_prefix>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d011      	beq.n	8001eb0 <mg_sendnsreq+0x11c>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	461c      	mov	r4, r3
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	6818      	ldr	r0, [r3, #0]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	8a12      	ldrh	r2, [r2, #16]
 8001ea2:	9201      	str	r2, [sp, #4]
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	4622      	mov	r2, r4
 8001eaa:	4814      	ldr	r0, [pc, #80]	; (8001efc <mg_sendnsreq+0x168>)
 8001eac:	f005 f8a8 	bl	8007000 <mg_log>
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	6858      	ldr	r0, [r3, #4]
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	8a1a      	ldrh	r2, [r3, #16]
 8001eb8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001ebc:	68b9      	ldr	r1, [r7, #8]
 8001ebe:	f7ff fe89 	bl	8001bd4 <mg_dns_send>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	f083 0301 	eor.w	r3, r3, #1
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d005      	beq.n	8001eda <mg_sendnsreq+0x146>
      mg_error(dnsc->c, "DNS send");
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	490b      	ldr	r1, [pc, #44]	; (8001f00 <mg_sendnsreq+0x16c>)
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f000 f87b 	bl	8001fd0 <mg_error>
}
 8001eda:	bf00      	nop
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ee4:	08014308 	.word	0x08014308
 8001ee8:	080018c9 	.word	0x080018c9
 8001eec:	08014334 	.word	0x08014334
 8001ef0:	08014340 	.word	0x08014340
 8001ef4:	080161b4 	.word	0x080161b4
 8001ef8:	08014270 	.word	0x08014270
 8001efc:	0801434c 	.word	0x0801434c
 8001f00:	08014370 	.word	0x08014370

08001f04 <mg_resolve>:

void mg_resolve(struct mg_connection *c, const char *url) {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b088      	sub	sp, #32
 8001f08:	af02      	add	r7, sp, #8
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  struct mg_str host = mg_url_host(url);
 8001f0e:	f107 030c 	add.w	r3, r7, #12
 8001f12:	6839      	ldr	r1, [r7, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f007 f9c0 	bl	800929a <mg_url_host>
  c->rem.port = mg_htons(mg_url_port(url));
 8001f1a:	6838      	ldr	r0, [r7, #0]
 8001f1c:	f007 f9f0 	bl	8009300 <mg_url_port>
 8001f20:	4603      	mov	r3, r0
 8001f22:	4618      	mov	r0, r3
 8001f24:	f007 fa69 	bl	80093fa <mg_ntohs>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	859a      	strh	r2, [r3, #44]	; 0x2c
  if (mg_aton(host, &c->rem)) {
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	331c      	adds	r3, #28
 8001f34:	461a      	mov	r2, r3
 8001f36:	f107 030c 	add.w	r3, r7, #12
 8001f3a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f3e:	f005 fb7f 	bl	8007640 <mg_aton>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <mg_resolve+0x4c>
    // host is an IP address, do not fire name resolution
    mg_connect_resolved(c);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f00a fa91 	bl	800c470 <mg_connect_resolved>
  } else {
    // host is not an IP, send DNS resolution request
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
  }
}
 8001f4e:	e019      	b.n	8001f84 <mg_resolve+0x80>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	7e1b      	ldrb	r3, [r3, #24]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <mg_resolve+0x5e>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	330c      	adds	r3, #12
 8001f60:	e002      	b.n	8001f68 <mg_resolve+0x64>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	3304      	adds	r3, #4
 8001f68:	617b      	str	r3, [r7, #20]
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	695a      	ldr	r2, [r3, #20]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	7e1b      	ldrb	r3, [r3, #24]
 8001f76:	f107 010c 	add.w	r1, r7, #12
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff ff08 	bl	8001d94 <mg_sendnsreq>
}
 8001f84:	bf00      	nop
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <mg_call>:





void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 8001f8c:	b590      	push	{r4, r7, lr}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  // Run user-defined handler first, in order to give it an ability
  // to intercept processing (e.g. clean input buffer) before the
  // protocol handler kicks in
  if (c->fn != NULL) c->fn(c, ev, ev_data, c->fn_data);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d007      	beq.n	8001fb0 <mg_call+0x24>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	68b9      	ldr	r1, [r7, #8]
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	47a0      	blx	r4
  if (c->pfn != NULL) c->pfn(c, ev, ev_data, c->pfn_data);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d007      	beq.n	8001fc8 <mg_call+0x3c>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	68b9      	ldr	r1, [r7, #8]
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	47a0      	blx	r4
}
 8001fc8:	bf00      	nop
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd90      	pop	{r4, r7, pc}

08001fd0 <mg_error>:

void mg_error(struct mg_connection *c, const char *fmt, ...) {
 8001fd0:	b40e      	push	{r1, r2, r3}
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b095      	sub	sp, #84	; 0x54
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  char buf[64];
  va_list ap;
  va_start(ap, fmt);
 8001fda:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001fde:	60fb      	str	r3, [r7, #12]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 8001fe0:	f107 030c 	add.w	r3, r7, #12
 8001fe4:	f107 0010 	add.w	r0, r7, #16
 8001fe8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001fea:	2140      	movs	r1, #64	; 0x40
 8001fec:	f005 fdba 	bl	8007b64 <mg_vsnprintf>
  va_end(ap);
  MG_ERROR(("%lu %p %s", c->id, c->fd, buf));
 8001ff0:	4b13      	ldr	r3, [pc, #76]	; (8002040 <mg_error+0x70>)
 8001ff2:	f240 1293 	movw	r2, #403	; 0x193
 8001ff6:	4913      	ldr	r1, [pc, #76]	; (8002044 <mg_error+0x74>)
 8001ff8:	2001      	movs	r0, #1
 8001ffa:	f004 ffa7 	bl	8006f4c <mg_log_prefix>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d008      	beq.n	8002016 <mg_error+0x46>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800200c:	f107 0310 	add.w	r3, r7, #16
 8002010:	480d      	ldr	r0, [pc, #52]	; (8002048 <mg_error+0x78>)
 8002012:	f004 fff5 	bl	8007000 <mg_log>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800201c:	f043 0320 	orr.w	r3, r3, #32
 8002020:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler to override it
 8002024:	f107 0310 	add.w	r3, r7, #16
 8002028:	461a      	mov	r2, r3
 800202a:	2100      	movs	r1, #0
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff ffad 	bl	8001f8c <mg_call>
}
 8002032:	bf00      	nop
 8002034:	3754      	adds	r7, #84	; 0x54
 8002036:	46bd      	mov	sp, r7
 8002038:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800203c:	b003      	add	sp, #12
 800203e:	4770      	bx	lr
 8002040:	080161c4 	.word	0x080161c4
 8002044:	08014270 	.word	0x08014270
 8002048:	0801437c 	.word	0x0801437c

0800204c <is_digit>:
#endif




static bool is_digit(int c) {
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  return c >= '0' && c <= '9';
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b2f      	cmp	r3, #47	; 0x2f
 8002058:	dd04      	ble.n	8002064 <is_digit+0x18>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b39      	cmp	r3, #57	; 0x39
 800205e:	dc01      	bgt.n	8002064 <is_digit+0x18>
 8002060:	2301      	movs	r3, #1
 8002062:	e000      	b.n	8002066 <is_digit+0x1a>
 8002064:	2300      	movs	r3, #0
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	b2db      	uxtb	r3, r3
}
 800206c:	4618      	mov	r0, r3
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <addexp>:

static int addexp(char *buf, int e, int sign) {
 8002078:	b480      	push	{r7}
 800207a:	b087      	sub	sp, #28
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  int n = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
  buf[n++] = 'e';
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	617a      	str	r2, [r7, #20]
 800208e:	461a      	mov	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4413      	add	r3, r2
 8002094:	2265      	movs	r2, #101	; 0x65
 8002096:	701a      	strb	r2, [r3, #0]
  buf[n++] = (char) sign;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	1c5a      	adds	r2, r3, #1
 800209c:	617a      	str	r2, [r7, #20]
 800209e:	461a      	mov	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4413      	add	r3, r2
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	701a      	strb	r2, [r3, #0]
  if (e > 400) return 0;
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80020b0:	dd01      	ble.n	80020b6 <addexp+0x3e>
 80020b2:	2300      	movs	r3, #0
 80020b4:	e057      	b.n	8002166 <addexp+0xee>
  if (e < 10) buf[n++] = '0';
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2b09      	cmp	r3, #9
 80020ba:	dc07      	bgt.n	80020cc <addexp+0x54>
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	1c5a      	adds	r2, r3, #1
 80020c0:	617a      	str	r2, [r7, #20]
 80020c2:	461a      	mov	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4413      	add	r3, r2
 80020c8:	2230      	movs	r2, #48	; 0x30
 80020ca:	701a      	strb	r2, [r3, #0]
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	2b63      	cmp	r3, #99	; 0x63
 80020d0:	dd1c      	ble.n	800210c <addexp+0x94>
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	4a27      	ldr	r2, [pc, #156]	; (8002174 <addexp+0xfc>)
 80020d6:	fb82 1203 	smull	r1, r2, r2, r3
 80020da:	1152      	asrs	r2, r2, #5
 80020dc:	17db      	asrs	r3, r3, #31
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	1c59      	adds	r1, r3, #1
 80020e6:	6179      	str	r1, [r7, #20]
 80020e8:	4619      	mov	r1, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	440b      	add	r3, r1
 80020ee:	3230      	adds	r2, #48	; 0x30
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	701a      	strb	r2, [r3, #0]
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	4a1f      	ldr	r2, [pc, #124]	; (8002174 <addexp+0xfc>)
 80020f8:	fb82 1203 	smull	r1, r2, r2, r3
 80020fc:	1151      	asrs	r1, r2, #5
 80020fe:	17da      	asrs	r2, r3, #31
 8002100:	1a8a      	subs	r2, r1, r2
 8002102:	2164      	movs	r1, #100	; 0x64
 8002104:	fb01 f202 	mul.w	r2, r1, r2
 8002108:	1a9b      	subs	r3, r3, r2
 800210a:	60bb      	str	r3, [r7, #8]
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	2b09      	cmp	r3, #9
 8002110:	dd1d      	ble.n	800214e <addexp+0xd6>
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	4a18      	ldr	r2, [pc, #96]	; (8002178 <addexp+0x100>)
 8002116:	fb82 1203 	smull	r1, r2, r2, r3
 800211a:	1092      	asrs	r2, r2, #2
 800211c:	17db      	asrs	r3, r3, #31
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	b2da      	uxtb	r2, r3
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	1c59      	adds	r1, r3, #1
 8002126:	6179      	str	r1, [r7, #20]
 8002128:	4619      	mov	r1, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	440b      	add	r3, r1
 800212e:	3230      	adds	r2, #48	; 0x30
 8002130:	b2d2      	uxtb	r2, r2
 8002132:	701a      	strb	r2, [r3, #0]
 8002134:	68ba      	ldr	r2, [r7, #8]
 8002136:	4b10      	ldr	r3, [pc, #64]	; (8002178 <addexp+0x100>)
 8002138:	fb83 1302 	smull	r1, r3, r3, r2
 800213c:	1099      	asrs	r1, r3, #2
 800213e:	17d3      	asrs	r3, r2, #31
 8002140:	1ac9      	subs	r1, r1, r3
 8002142:	460b      	mov	r3, r1
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	440b      	add	r3, r1
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	60bb      	str	r3, [r7, #8]
  buf[n++] = (char) (e + '0');
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	b2da      	uxtb	r2, r3
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	1c59      	adds	r1, r3, #1
 8002156:	6179      	str	r1, [r7, #20]
 8002158:	4619      	mov	r1, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	440b      	add	r3, r1
 800215e:	3230      	adds	r2, #48	; 0x30
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	701a      	strb	r2, [r3, #0]
  return n;
 8002164:	697b      	ldr	r3, [r7, #20]
}
 8002166:	4618      	mov	r0, r3
 8002168:	371c      	adds	r7, #28
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	51eb851f 	.word	0x51eb851f
 8002178:	66666667 	.word	0x66666667

0800217c <xisinf>:

static int xisinf(double x) {
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8002186:	e9d7 2300 	ldrd	r2, r3, [r7]
 800218a:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 800218e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002192:	f04f 0200 	mov.w	r2, #0
 8002196:	f04f 0300 	mov.w	r3, #0
 800219a:	000a      	movs	r2, r1
 800219c:	2300      	movs	r3, #0
 800219e:	4613      	mov	r3, r2
 80021a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021a4:	4a08      	ldr	r2, [pc, #32]	; (80021c8 <xisinf+0x4c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d106      	bne.n	80021b8 <xisinf+0x3c>
         ((unsigned) ieee754.u == 0);
 80021aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021ae:	4613      	mov	r3, r2
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <xisinf+0x3c>
 80021b4:	2301      	movs	r3, #1
 80021b6:	e000      	b.n	80021ba <xisinf+0x3e>
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	7ff00000 	.word	0x7ff00000

080021cc <xisnan>:

static int xisnan(double x) {
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 80021d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021da:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 80021de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	f04f 0300 	mov.w	r3, #0
 80021ea:	000a      	movs	r2, r1
 80021ec:	2300      	movs	r3, #0
 80021ee:	4613      	mov	r3, r2
 80021f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
             ((unsigned) ieee754.u != 0) >
 80021f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021f8:	4613      	mov	r3, r2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	bf14      	ite	ne
 80021fe:	2301      	movne	r3, #1
 8002200:	2300      	moveq	r3, #0
 8002202:	b2db      	uxtb	r3, r3
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8002204:	440b      	add	r3, r1
             ((unsigned) ieee754.u != 0) >
 8002206:	4a06      	ldr	r2, [pc, #24]	; (8002220 <xisnan+0x54>)
 8002208:	4293      	cmp	r3, r2
 800220a:	bf8c      	ite	hi
 800220c:	2301      	movhi	r3, #1
 800220e:	2300      	movls	r3, #0
 8002210:	b2db      	uxtb	r3, r3
         0x7ff00000;
}
 8002212:	4618      	mov	r0, r3
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	7ff00000 	.word	0x7ff00000
 8002224:	00000000 	.word	0x00000000

08002228 <mg_dtoa>:

static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 8002228:	b580      	push	{r7, lr}
 800222a:	b09e      	sub	sp, #120	; 0x78
 800222c:	af02      	add	r7, sp, #8
 800222e:	6178      	str	r0, [r7, #20]
 8002230:	6139      	str	r1, [r7, #16]
 8002232:	ed87 0b02 	vstr	d0, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
 8002238:	70fb      	strb	r3, [r7, #3]
  char buf[40];
  int i, s = 0, n = 0, e = 0;
 800223a:	2300      	movs	r3, #0
 800223c:	66bb      	str	r3, [r7, #104]	; 0x68
 800223e:	2300      	movs	r3, #0
 8002240:	667b      	str	r3, [r7, #100]	; 0x64
 8002242:	2300      	movs	r3, #0
 8002244:	663b      	str	r3, [r7, #96]	; 0x60
  double t, mul, saved;
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8002246:	ed97 7b02 	vldr	d7, [r7, #8]
 800224a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800224e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002252:	d107      	bne.n	8002264 <mg_dtoa+0x3c>
 8002254:	4bb1      	ldr	r3, [pc, #708]	; (800251c <mg_dtoa+0x2f4>)
 8002256:	4ab2      	ldr	r2, [pc, #712]	; (8002520 <mg_dtoa+0x2f8>)
 8002258:	6939      	ldr	r1, [r7, #16]
 800225a:	6978      	ldr	r0, [r7, #20]
 800225c:	f005 fcaa 	bl	8007bb4 <mg_snprintf>
 8002260:	4603      	mov	r3, r0
 8002262:	e266      	b.n	8002732 <mg_dtoa+0x50a>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8002264:	ed97 0b02 	vldr	d0, [r7, #8]
 8002268:	f7ff ff88 	bl	800217c <xisinf>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d010      	beq.n	8002294 <mg_dtoa+0x6c>
 8002272:	ed97 7b02 	vldr	d7, [r7, #8]
 8002276:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800227a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227e:	dd01      	ble.n	8002284 <mg_dtoa+0x5c>
 8002280:	4ba8      	ldr	r3, [pc, #672]	; (8002524 <mg_dtoa+0x2fc>)
 8002282:	e000      	b.n	8002286 <mg_dtoa+0x5e>
 8002284:	4ba8      	ldr	r3, [pc, #672]	; (8002528 <mg_dtoa+0x300>)
 8002286:	4aa6      	ldr	r2, [pc, #664]	; (8002520 <mg_dtoa+0x2f8>)
 8002288:	6939      	ldr	r1, [r7, #16]
 800228a:	6978      	ldr	r0, [r7, #20]
 800228c:	f005 fc92 	bl	8007bb4 <mg_snprintf>
 8002290:	4603      	mov	r3, r0
 8002292:	e24e      	b.n	8002732 <mg_dtoa+0x50a>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 8002294:	ed97 0b02 	vldr	d0, [r7, #8]
 8002298:	f7ff ff98 	bl	80021cc <xisnan>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d007      	beq.n	80022b2 <mg_dtoa+0x8a>
 80022a2:	4ba2      	ldr	r3, [pc, #648]	; (800252c <mg_dtoa+0x304>)
 80022a4:	4a9e      	ldr	r2, [pc, #632]	; (8002520 <mg_dtoa+0x2f8>)
 80022a6:	6939      	ldr	r1, [r7, #16]
 80022a8:	6978      	ldr	r0, [r7, #20]
 80022aa:	f005 fc83 	bl	8007bb4 <mg_snprintf>
 80022ae:	4603      	mov	r3, r0
 80022b0:	e23f      	b.n	8002732 <mg_dtoa+0x50a>
  if (d < 0.0) d = -d, buf[s++] = '-';
 80022b2:	ed97 7b02 	vldr	d7, [r7, #8]
 80022b6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80022ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022be:	d50d      	bpl.n	80022dc <mg_dtoa+0xb4>
 80022c0:	ed97 7b02 	vldr	d7, [r7, #8]
 80022c4:	eeb1 7b47 	vneg.f64	d7, d7
 80022c8:	ed87 7b02 	vstr	d7, [r7, #8]
 80022cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022ce:	1c5a      	adds	r2, r3, #1
 80022d0:	66ba      	str	r2, [r7, #104]	; 0x68
 80022d2:	3370      	adds	r3, #112	; 0x70
 80022d4:	443b      	add	r3, r7
 80022d6:	222d      	movs	r2, #45	; 0x2d
 80022d8:	f803 2c58 	strb.w	r2, [r3, #-88]

  // Round
  saved = d;
 80022dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022e0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  mul = 1.0;
 80022e4:	f04f 0200 	mov.w	r2, #0
 80022e8:	4b91      	ldr	r3, [pc, #580]	; (8002530 <mg_dtoa+0x308>)
 80022ea:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 80022ee:	e007      	b.n	8002300 <mg_dtoa+0xd8>
 80022f0:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 80022f4:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80022f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80022fc:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
 8002300:	ed97 7b02 	vldr	d7, [r7, #8]
 8002304:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8002308:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800230c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002310:	db0c      	blt.n	800232c <mg_dtoa+0x104>
 8002312:	ed97 5b02 	vldr	d5, [r7, #8]
 8002316:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 800231a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800231e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8002322:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800232a:	dae1      	bge.n	80022f0 <mg_dtoa+0xc8>
  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 800232c:	e007      	b.n	800233e <mg_dtoa+0x116>
 800232e:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 8002332:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002336:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800233a:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
 800233e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002342:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002346:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800234a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800234e:	d80c      	bhi.n	800236a <mg_dtoa+0x142>
 8002350:	ed97 5b02 	vldr	d5, [r7, #8]
 8002354:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 8002358:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800235c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002360:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002368:	d9e1      	bls.n	800232e <mg_dtoa+0x106>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 800236a:	2300      	movs	r3, #0
 800236c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800236e:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8002372:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 8002376:	ee27 7b06 	vmul.f64	d7, d7, d6
 800237a:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
 800237e:	e00a      	b.n	8002396 <mg_dtoa+0x16e>
 8002380:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 8002384:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002388:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800238c:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
 8002390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002392:	3301      	adds	r3, #1
 8002394:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002396:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	429a      	cmp	r2, r3
 800239c:	dbf0      	blt.n	8002380 <mg_dtoa+0x158>
  d += t;
 800239e:	ed97 6b02 	vldr	d6, [r7, #8]
 80023a2:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 80023a6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80023aa:	ed87 7b02 	vstr	d7, [r7, #8]
  // Calculate exponent, and 'mul' for scientific representation
  mul = 1.0;
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	4b5f      	ldr	r3, [pc, #380]	; (8002530 <mg_dtoa+0x308>)
 80023b4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 80023b8:	e00a      	b.n	80023d0 <mg_dtoa+0x1a8>
 80023ba:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 80023be:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80023c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80023c6:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
 80023ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023cc:	3301      	adds	r3, #1
 80023ce:	663b      	str	r3, [r7, #96]	; 0x60
 80023d0:	ed97 7b02 	vldr	d7, [r7, #8]
 80023d4:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80023d8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80023dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e0:	db0c      	blt.n	80023fc <mg_dtoa+0x1d4>
 80023e2:	ed97 5b02 	vldr	d5, [r7, #8]
 80023e6:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 80023ea:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80023ee:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80023f2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80023f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023fa:	dade      	bge.n	80023ba <mg_dtoa+0x192>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 80023fc:	e00a      	b.n	8002414 <mg_dtoa+0x1ec>
 80023fe:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 8002402:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002406:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800240a:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
 800240e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002410:	3b01      	subs	r3, #1
 8002412:	663b      	str	r3, [r7, #96]	; 0x60
 8002414:	ed97 7b02 	vldr	d7, [r7, #8]
 8002418:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800241c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002424:	d50c      	bpl.n	8002440 <mg_dtoa+0x218>
 8002426:	ed97 5b02 	vldr	d5, [r7, #8]
 800242a:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 800242e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002432:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002436:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800243a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800243e:	d4de      	bmi.n	80023fe <mg_dtoa+0x1d6>
  // printf(" --> %g %d %g %g\n", saved, e, t, mul);

  if (e >= width && width > 1) {
 8002440:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	429a      	cmp	r2, r3
 8002446:	db2d      	blt.n	80024a4 <mg_dtoa+0x27c>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b01      	cmp	r3, #1
 800244c:	dd2a      	ble.n	80024a4 <mg_dtoa+0x27c>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 800244e:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 8002452:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8002456:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800245a:	78fb      	ldrb	r3, [r7, #3]
 800245c:	f107 0018 	add.w	r0, r7, #24
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	eeb0 0b45 	vmov.f64	d0, d5
 8002466:	2128      	movs	r1, #40	; 0x28
 8002468:	f7ff fede 	bl	8002228 <mg_dtoa>
 800246c:	4603      	mov	r3, r0
 800246e:	667b      	str	r3, [r7, #100]	; 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / t, e, n, buf);
    n += addexp(buf + s + n, e, '+');
 8002470:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002472:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002474:	4413      	add	r3, r2
 8002476:	f107 0218 	add.w	r2, r7, #24
 800247a:	4413      	add	r3, r2
 800247c:	222b      	movs	r2, #43	; 0x2b
 800247e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff fdf9 	bl	8002078 <addexp>
 8002486:	4602      	mov	r2, r0
 8002488:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800248a:	4413      	add	r3, r2
 800248c:	667b      	str	r3, [r7, #100]	; 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 800248e:	f107 0318 	add.w	r3, r7, #24
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002496:	4a27      	ldr	r2, [pc, #156]	; (8002534 <mg_dtoa+0x30c>)
 8002498:	6939      	ldr	r1, [r7, #16]
 800249a:	6978      	ldr	r0, [r7, #20]
 800249c:	f005 fb8a 	bl	8007bb4 <mg_snprintf>
 80024a0:	4603      	mov	r3, r0
 80024a2:	e146      	b.n	8002732 <mg_dtoa+0x50a>
  } else if (e <= -width && width > 1) {
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	425b      	negs	r3, r3
 80024a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024aa:	429a      	cmp	r2, r3
 80024ac:	dc2e      	bgt.n	800250c <mg_dtoa+0x2e4>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	dd2b      	ble.n	800250c <mg_dtoa+0x2e4>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 80024b4:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 80024b8:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 80024bc:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80024c0:	78fb      	ldrb	r3, [r7, #3]
 80024c2:	f107 0018 	add.w	r0, r7, #24
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	eeb0 0b45 	vmov.f64	d0, d5
 80024cc:	2128      	movs	r1, #40	; 0x28
 80024ce:	f7ff feab 	bl	8002228 <mg_dtoa>
 80024d2:	4603      	mov	r3, r0
 80024d4:	667b      	str	r3, [r7, #100]	; 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / mul, e, n, buf);
    n += addexp(buf + s + n, -e, '-');
 80024d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80024d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024da:	4413      	add	r3, r2
 80024dc:	f107 0218 	add.w	r2, r7, #24
 80024e0:	18d0      	adds	r0, r2, r3
 80024e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024e4:	425b      	negs	r3, r3
 80024e6:	222d      	movs	r2, #45	; 0x2d
 80024e8:	4619      	mov	r1, r3
 80024ea:	f7ff fdc5 	bl	8002078 <addexp>
 80024ee:	4602      	mov	r2, r0
 80024f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024f2:	4413      	add	r3, r2
 80024f4:	667b      	str	r3, [r7, #100]	; 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 80024f6:	f107 0318 	add.w	r3, r7, #24
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024fe:	4a0d      	ldr	r2, [pc, #52]	; (8002534 <mg_dtoa+0x30c>)
 8002500:	6939      	ldr	r1, [r7, #16]
 8002502:	6978      	ldr	r0, [r7, #20]
 8002504:	f005 fb56 	bl	8007bb4 <mg_snprintf>
 8002508:	4603      	mov	r3, r0
 800250a:	e112      	b.n	8002732 <mg_dtoa+0x50a>
  } else {
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 800250c:	2300      	movs	r3, #0
 800250e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002510:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002514:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8002518:	e046      	b.n	80025a8 <mg_dtoa+0x380>
 800251a:	bf00      	nop
 800251c:	08014388 	.word	0x08014388
 8002520:	0801438c 	.word	0x0801438c
 8002524:	08014390 	.word	0x08014390
 8002528:	08014394 	.word	0x08014394
 800252c:	0801439c 	.word	0x0801439c
 8002530:	3ff00000 	.word	0x3ff00000
 8002534:	080143a0 	.word	0x080143a0
      int ch = (int) (d / t);
 8002538:	ed97 5b02 	vldr	d5, [r7, #8]
 800253c:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 8002540:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002544:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002548:	ee17 3a90 	vmov	r3, s15
 800254c:	647b      	str	r3, [r7, #68]	; 0x44
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 800254e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002550:	2b00      	cmp	r3, #0
 8002552:	dc02      	bgt.n	800255a <mg_dtoa+0x332>
 8002554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002556:	2b00      	cmp	r3, #0
 8002558:	dd0c      	ble.n	8002574 <mg_dtoa+0x34c>
 800255a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800255c:	b2da      	uxtb	r2, r3
 800255e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002560:	1c59      	adds	r1, r3, #1
 8002562:	6679      	str	r1, [r7, #100]	; 0x64
 8002564:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002566:	440b      	add	r3, r1
 8002568:	3230      	adds	r2, #48	; 0x30
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	3370      	adds	r3, #112	; 0x70
 800256e:	443b      	add	r3, r7
 8002570:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 8002574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002576:	ee07 3a90 	vmov	s15, r3
 800257a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800257e:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8002582:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002586:	ed97 6b02 	vldr	d6, [r7, #8]
 800258a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800258e:	ed87 7b02 	vstr	d7, [r7, #8]
      t /= 10.0;
 8002592:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 8002596:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 800259a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800259e:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 80025a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025a4:	3301      	adds	r3, #1
 80025a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80025a8:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 80025ac:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80025b0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80025b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b8:	db04      	blt.n	80025c4 <mg_dtoa+0x39c>
 80025ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80025bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025be:	4413      	add	r3, r2
 80025c0:	2b27      	cmp	r3, #39	; 0x27
 80025c2:	ddb9      	ble.n	8002538 <mg_dtoa+0x310>
    }
    // printf(" --> [%g] -> %g %g (%d) [%.*s]\n", saved, d, t, n, s + n, buf);
    if (n == 0) buf[s++] = '0';
 80025c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d118      	bne.n	80025fc <mg_dtoa+0x3d4>
 80025ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025cc:	1c5a      	adds	r2, r3, #1
 80025ce:	66ba      	str	r2, [r7, #104]	; 0x68
 80025d0:	3370      	adds	r3, #112	; 0x70
 80025d2:	443b      	add	r3, r7
 80025d4:	2230      	movs	r2, #48	; 0x30
 80025d6:	f803 2c58 	strb.w	r2, [r3, #-88]
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 80025da:	e00f      	b.n	80025fc <mg_dtoa+0x3d4>
 80025dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	667a      	str	r2, [r7, #100]	; 0x64
 80025e2:	3370      	adds	r3, #112	; 0x70
 80025e4:	443b      	add	r3, r7
 80025e6:	2230      	movs	r2, #48	; 0x30
 80025e8:	f803 2c58 	strb.w	r2, [r3, #-88]
 80025ec:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 80025f0:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 80025f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80025f8:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
 80025fc:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8002600:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002604:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800260c:	db04      	blt.n	8002618 <mg_dtoa+0x3f0>
 800260e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002610:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002612:	4413      	add	r3, r2
 8002614:	2b27      	cmp	r3, #39	; 0x27
 8002616:	dde1      	ble.n	80025dc <mg_dtoa+0x3b4>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 8002618:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800261a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800261c:	4413      	add	r3, r2
 800261e:	2b27      	cmp	r3, #39	; 0x27
 8002620:	dc09      	bgt.n	8002636 <mg_dtoa+0x40e>
 8002622:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002624:	1c5a      	adds	r2, r3, #1
 8002626:	66ba      	str	r2, [r7, #104]	; 0x68
 8002628:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800262a:	4413      	add	r3, r2
 800262c:	3370      	adds	r3, #112	; 0x70
 800262e:	443b      	add	r3, r7
 8002630:	222e      	movs	r2, #46	; 0x2e
 8002632:	f803 2c58 	strb.w	r2, [r3, #-88]
    // printf(" 1--> [%g] -> [%.*s]\n", saved, s + n, buf);
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8002636:	2300      	movs	r3, #0
 8002638:	66fb      	str	r3, [r7, #108]	; 0x6c
 800263a:	a342      	add	r3, pc, #264	; (adr r3, 8002744 <mg_dtoa+0x51c>)
 800263c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002640:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8002644:	e031      	b.n	80026aa <mg_dtoa+0x482>
      int ch = (int) (d / t);
 8002646:	ed97 5b02 	vldr	d5, [r7, #8]
 800264a:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 800264e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002652:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002656:	ee17 3a90 	vmov	r3, s15
 800265a:	643b      	str	r3, [r7, #64]	; 0x40
      buf[s + n++] = (char) (ch + '0');
 800265c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800265e:	b2da      	uxtb	r2, r3
 8002660:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002662:	1c59      	adds	r1, r3, #1
 8002664:	6679      	str	r1, [r7, #100]	; 0x64
 8002666:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002668:	440b      	add	r3, r1
 800266a:	3230      	adds	r2, #48	; 0x30
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	3370      	adds	r3, #112	; 0x70
 8002670:	443b      	add	r3, r7
 8002672:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 8002676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002678:	ee07 3a90 	vmov	s15, r3
 800267c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002680:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8002684:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002688:	ed97 6b02 	vldr	d6, [r7, #8]
 800268c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002690:	ed87 7b02 	vstr	d7, [r7, #8]
      t /= 10.0;
 8002694:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 8002698:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 800269c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80026a0:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 80026a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026a6:	3301      	adds	r3, #1
 80026a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80026aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80026ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026ae:	4413      	add	r3, r2
 80026b0:	2b27      	cmp	r3, #39	; 0x27
 80026b2:	dc07      	bgt.n	80026c4 <mg_dtoa+0x49c>
 80026b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	dbc4      	blt.n	8002646 <mg_dtoa+0x41e>
    }
  }
  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 80026bc:	e002      	b.n	80026c4 <mg_dtoa+0x49c>
 80026be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026c0:	3b01      	subs	r3, #1
 80026c2:	667b      	str	r3, [r7, #100]	; 0x64
 80026c4:	78fb      	ldrb	r3, [r7, #3]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00c      	beq.n	80026e4 <mg_dtoa+0x4bc>
 80026ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	dd09      	ble.n	80026e4 <mg_dtoa+0x4bc>
 80026d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80026d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026d4:	4413      	add	r3, r2
 80026d6:	3b01      	subs	r3, #1
 80026d8:	3370      	adds	r3, #112	; 0x70
 80026da:	443b      	add	r3, r7
 80026dc:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 80026e0:	2b30      	cmp	r3, #48	; 0x30
 80026e2:	d0ec      	beq.n	80026be <mg_dtoa+0x496>
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 80026e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	dd0c      	ble.n	8002704 <mg_dtoa+0x4dc>
 80026ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80026ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026ee:	4413      	add	r3, r2
 80026f0:	3b01      	subs	r3, #1
 80026f2:	3370      	adds	r3, #112	; 0x70
 80026f4:	443b      	add	r3, r7
 80026f6:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 80026fa:	2b2e      	cmp	r3, #46	; 0x2e
 80026fc:	d102      	bne.n	8002704 <mg_dtoa+0x4dc>
 80026fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002700:	3b01      	subs	r3, #1
 8002702:	667b      	str	r3, [r7, #100]	; 0x64
  n += s;
 8002704:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002706:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002708:	4413      	add	r3, r2
 800270a:	667b      	str	r3, [r7, #100]	; 0x64
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 800270c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800270e:	2b27      	cmp	r3, #39	; 0x27
 8002710:	dd01      	ble.n	8002716 <mg_dtoa+0x4ee>
 8002712:	2327      	movs	r3, #39	; 0x27
 8002714:	667b      	str	r3, [r7, #100]	; 0x64
  buf[n] = '\0';
 8002716:	f107 0218 	add.w	r2, r7, #24
 800271a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800271c:	4413      	add	r3, r2
 800271e:	2200      	movs	r2, #0
 8002720:	701a      	strb	r2, [r3, #0]
  return mg_snprintf(dst, dstlen, "%s", buf);
 8002722:	f107 0318 	add.w	r3, r7, #24
 8002726:	4a06      	ldr	r2, [pc, #24]	; (8002740 <mg_dtoa+0x518>)
 8002728:	6939      	ldr	r1, [r7, #16]
 800272a:	6978      	ldr	r0, [r7, #20]
 800272c:	f005 fa42 	bl	8007bb4 <mg_snprintf>
 8002730:	4603      	mov	r3, r0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3770      	adds	r7, #112	; 0x70
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	f3af 8000 	nop.w
 8002740:	0801438c 	.word	0x0801438c
 8002744:	9999999a 	.word	0x9999999a
 8002748:	3fb99999 	.word	0x3fb99999

0800274c <mg_lld>:

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 800274c:	b5b0      	push	{r4, r5, r7, lr}
 800274e:	b08c      	sub	sp, #48	; 0x30
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	e9c7 2300 	strd	r2, r3, [r7]
  const char *letters = "0123456789abcdef";
 8002758:	4b53      	ldr	r3, [pc, #332]	; (80028a8 <mg_lld+0x15c>)
 800275a:	61bb      	str	r3, [r7, #24]
  uint64_t v = (uint64_t) val;
 800275c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002760:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  size_t s = 0, n, i;
 8002764:	2300      	movs	r3, #0
 8002766:	627b      	str	r3, [r7, #36]	; 0x24
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 8002768:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800276c:	2b00      	cmp	r3, #0
 800276e:	d012      	beq.n	8002796 <mg_lld+0x4a>
 8002770:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002774:	2b00      	cmp	r3, #0
 8002776:	da0e      	bge.n	8002796 <mg_lld+0x4a>
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	1c5a      	adds	r2, r3, #1
 800277c:	627a      	str	r2, [r7, #36]	; 0x24
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	4413      	add	r3, r2
 8002782:	222d      	movs	r2, #45	; 0x2d
 8002784:	701a      	strb	r2, [r3, #0]
 8002786:	e9d7 2300 	ldrd	r2, r3, [r7]
 800278a:	2100      	movs	r1, #0
 800278c:	4254      	negs	r4, r2
 800278e:	eb61 0503 	sbc.w	r5, r1, r3
 8002792:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 8002796:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800279a:	2b00      	cmp	r3, #0
 800279c:	d021      	beq.n	80027e2 <mg_lld+0x96>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 800279e:	2300      	movs	r3, #0
 80027a0:	623b      	str	r3, [r7, #32]
 80027a2:	e019      	b.n	80027d8 <mg_lld+0x8c>
 80027a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	441a      	add	r2, r3
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	1c59      	adds	r1, r3, #1
 80027b2:	6239      	str	r1, [r7, #32]
 80027b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027b6:	440b      	add	r3, r1
 80027b8:	68f9      	ldr	r1, [r7, #12]
 80027ba:	440b      	add	r3, r1
 80027bc:	7812      	ldrb	r2, [r2, #0]
 80027be:	701a      	strb	r2, [r3, #0]
 80027c0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80027c4:	f04f 0200 	mov.w	r2, #0
 80027c8:	f04f 0300 	mov.w	r3, #0
 80027cc:	0902      	lsrs	r2, r0, #4
 80027ce:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 80027d2:	090b      	lsrs	r3, r1, #4
 80027d4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80027d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027dc:	4313      	orrs	r3, r2
 80027de:	d1e1      	bne.n	80027a4 <mg_lld+0x58>
 80027e0:	e025      	b.n	800282e <mg_lld+0xe2>
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 80027e2:	2300      	movs	r3, #0
 80027e4:	623b      	str	r3, [r7, #32]
 80027e6:	e01e      	b.n	8002826 <mg_lld+0xda>
 80027e8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80027ec:	f04f 020a 	mov.w	r2, #10
 80027f0:	f04f 0300 	mov.w	r3, #0
 80027f4:	f7fe f800 	bl	80007f8 <__aeabi_uldivmod>
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	441a      	add	r2, r3
 80027fc:	6a3b      	ldr	r3, [r7, #32]
 80027fe:	1c59      	adds	r1, r3, #1
 8002800:	6239      	str	r1, [r7, #32]
 8002802:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002804:	440b      	add	r3, r1
 8002806:	68f9      	ldr	r1, [r7, #12]
 8002808:	440b      	add	r3, r1
 800280a:	7812      	ldrb	r2, [r2, #0]
 800280c:	701a      	strb	r2, [r3, #0]
 800280e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002812:	f04f 020a 	mov.w	r2, #10
 8002816:	f04f 0300 	mov.w	r3, #0
 800281a:	f7fd ffed 	bl	80007f8 <__aeabi_uldivmod>
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002826:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800282a:	4313      	orrs	r3, r2
 800282c:	d1dc      	bne.n	80027e8 <mg_lld+0x9c>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 800282e:	2300      	movs	r3, #0
 8002830:	61fb      	str	r3, [r7, #28]
 8002832:	e022      	b.n	800287a <mg_lld+0x12e>
    char t = buf[s + i];
 8002834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	4413      	add	r3, r2
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	4413      	add	r3, r2
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	75fb      	strb	r3, [r7, #23]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 8002842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002844:	6a3b      	ldr	r3, [r7, #32]
 8002846:	441a      	add	r2, r3
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	3b01      	subs	r3, #1
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	441a      	add	r2, r3
 8002852:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	440b      	add	r3, r1
 8002858:	68f9      	ldr	r1, [r7, #12]
 800285a:	440b      	add	r3, r1
 800285c:	7812      	ldrb	r2, [r2, #0]
 800285e:	701a      	strb	r2, [r3, #0]
 8002860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002862:	6a3b      	ldr	r3, [r7, #32]
 8002864:	441a      	add	r2, r3
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	3b01      	subs	r3, #1
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	4413      	add	r3, r2
 8002870:	7dfa      	ldrb	r2, [r7, #23]
 8002872:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < n / 2; i++) {
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	3301      	adds	r3, #1
 8002878:	61fb      	str	r3, [r7, #28]
 800287a:	6a3b      	ldr	r3, [r7, #32]
 800287c:	085b      	lsrs	r3, r3, #1
 800287e:	69fa      	ldr	r2, [r7, #28]
 8002880:	429a      	cmp	r2, r3
 8002882:	d3d7      	bcc.n	8002834 <mg_lld+0xe8>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 8002884:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002888:	4313      	orrs	r3, r2
 800288a:	d106      	bne.n	800289a <mg_lld+0x14e>
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	623a      	str	r2, [r7, #32]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	4413      	add	r3, r2
 8002896:	2230      	movs	r2, #48	; 0x30
 8002898:	701a      	strb	r2, [r3, #0]
  return n + s;
 800289a:	6a3a      	ldr	r2, [r7, #32]
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	4413      	add	r3, r2
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3730      	adds	r7, #48	; 0x30
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bdb0      	pop	{r4, r5, r7, pc}
 80028a8:	080143a8 	.word	0x080143a8

080028ac <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
 80028b8:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 80028be:	e009      	b.n	80028d4 <scpy+0x28>
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	617a      	str	r2, [r7, #20]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	4413      	add	r3, r2
 80028ca:	781a      	ldrb	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	68b9      	ldr	r1, [r7, #8]
 80028d0:	4610      	mov	r0, r2
 80028d2:	4798      	blx	r3
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d205      	bcs.n	80028e8 <scpy+0x3c>
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	4413      	add	r3, r2
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1eb      	bne.n	80028c0 <scpy+0x14>
  return i;
 80028e8:	697b      	ldr	r3, [r7, #20]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <mg_xprintf>:

size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 80028f2:	b40c      	push	{r2, r3}
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 8002902:	f107 031c 	add.w	r3, r7, #28
 8002906:	60bb      	str	r3, [r7, #8]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 8002908:	f107 0308 	add.w	r3, r7, #8
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	6839      	ldr	r1, [r7, #0]
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f809 	bl	8002928 <mg_vxprintf>
 8002916:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 8002918:	68fb      	ldr	r3, [r7, #12]
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002924:	b002      	add	sp, #8
 8002926:	4770      	bx	lr

08002928 <mg_vxprintf>:

size_t mg_vxprintf(void (*out)(char, void *), void *param, const char *fmt,
                   va_list *ap) {
 8002928:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800292c:	b0a6      	sub	sp, #152	; 0x98
 800292e:	af02      	add	r7, sp, #8
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	607a      	str	r2, [r7, #4]
 8002936:	603b      	str	r3, [r7, #0]
  size_t i = 0, n = 0;
 8002938:	2300      	movs	r3, #0
 800293a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800293e:	2300      	movs	r3, #0
 8002940:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  while (fmt[i] != '\0') {
 8002944:	e383      	b.n	800304e <mg_vxprintf+0x726>
    if (fmt[i] == '%') {
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800294c:	4413      	add	r3, r2
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b25      	cmp	r3, #37	; 0x25
 8002952:	f040 8369 	bne.w	8003028 <mg_vxprintf+0x700>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8002956:	2300      	movs	r3, #0
 8002958:	67fb      	str	r3, [r7, #124]	; 0x7c
 800295a:	2300      	movs	r3, #0
 800295c:	67bb      	str	r3, [r7, #120]	; 0x78
 800295e:	2300      	movs	r3, #0
 8002960:	677b      	str	r3, [r7, #116]	; 0x74
 8002962:	f04f 33ff 	mov.w	r3, #4294967295
 8002966:	673b      	str	r3, [r7, #112]	; 0x70
      char pad = ' ', minus = 0, c = fmt[++i];
 8002968:	2320      	movs	r3, #32
 800296a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800296e:	2300      	movs	r3, #0
 8002970:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002974:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002978:	3301      	adds	r3, #1
 800297a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002984:	4413      	add	r3, r2
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      if (c == '#') x++, c = fmt[++i];
 800298c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002990:	2b23      	cmp	r3, #35	; 0x23
 8002992:	d10e      	bne.n	80029b2 <mg_vxprintf+0x8a>
 8002994:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002996:	3301      	adds	r3, #1
 8002998:	67fb      	str	r3, [r7, #124]	; 0x7c
 800299a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800299e:	3301      	adds	r3, #1
 80029a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029aa:	4413      	add	r3, r2
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      if (c == '-') minus++, c = fmt[++i];
 80029b2:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80029b6:	2b2d      	cmp	r3, #45	; 0x2d
 80029b8:	d110      	bne.n	80029dc <mg_vxprintf+0xb4>
 80029ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80029be:	3301      	adds	r3, #1
 80029c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80029c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029c8:	3301      	adds	r3, #1
 80029ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029d4:	4413      	add	r3, r2
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      if (c == '0') pad = '0', c = fmt[++i];
 80029dc:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80029e0:	2b30      	cmp	r3, #48	; 0x30
 80029e2:	d127      	bne.n	8002a34 <mg_vxprintf+0x10c>
 80029e4:	2330      	movs	r3, #48	; 0x30
 80029e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80029ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029ee:	3301      	adds	r3, #1
 80029f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029fa:	4413      	add	r3, r2
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 8002a02:	e017      	b.n	8002a34 <mg_vxprintf+0x10c>
 8002a04:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002a06:	4613      	mov	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	677b      	str	r3, [r7, #116]	; 0x74
 8002a10:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8002a14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a16:	4413      	add	r3, r2
 8002a18:	3b30      	subs	r3, #48	; 0x30
 8002a1a:	677b      	str	r3, [r7, #116]	; 0x74
 8002a1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a20:	3301      	adds	r3, #1
 8002a22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a2c:	4413      	add	r3, r2
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8002a34:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff fb07 	bl	800204c <is_digit>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1df      	bne.n	8002a04 <mg_vxprintf+0xdc>
      if (c == '.') {
 8002a44:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002a48:	2b2e      	cmp	r3, #46	; 0x2e
 8002a4a:	d153      	bne.n	8002af4 <mg_vxprintf+0x1cc>
        c = fmt[++i];
 8002a4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a50:	3301      	adds	r3, #1
 8002a52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a5c:	4413      	add	r3, r2
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
        if (c == '*') {
 8002a64:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002a68:	2b2a      	cmp	r3, #42	; 0x2a
 8002a6a:	d113      	bne.n	8002a94 <mg_vxprintf+0x16c>
          pr = (size_t) va_arg(*ap, int);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	1d19      	adds	r1, r3, #4
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	6011      	str	r1, [r2, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	673b      	str	r3, [r7, #112]	; 0x70
          c = fmt[++i];
 8002a7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a7e:	3301      	adds	r3, #1
 8002a80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a8a:	4413      	add	r3, r2
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8002a92:	e02f      	b.n	8002af4 <mg_vxprintf+0x1cc>
        } else {
          pr = 0;
 8002a94:	2300      	movs	r3, #0
 8002a96:	673b      	str	r3, [r7, #112]	; 0x70
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 8002a98:	e017      	b.n	8002aca <mg_vxprintf+0x1a2>
 8002a9a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	673b      	str	r3, [r7, #112]	; 0x70
 8002aa6:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8002aaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002aac:	4413      	add	r3, r2
 8002aae:	3b30      	subs	r3, #48	; 0x30
 8002ab0:	673b      	str	r3, [r7, #112]	; 0x70
 8002ab2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ac2:	4413      	add	r3, r2
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8002aca:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fabc 	bl	800204c <is_digit>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1df      	bne.n	8002a9a <mg_vxprintf+0x172>
        }
      }
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 8002ada:	e00b      	b.n	8002af4 <mg_vxprintf+0x1cc>
 8002adc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002aec:	4413      	add	r3, r2
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8002af4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002af8:	2b68      	cmp	r3, #104	; 0x68
 8002afa:	d0ef      	beq.n	8002adc <mg_vxprintf+0x1b4>
      if (c == 'l') {
 8002afc:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002b00:	2b6c      	cmp	r3, #108	; 0x6c
 8002b02:	d121      	bne.n	8002b48 <mg_vxprintf+0x220>
        is_long++, c = fmt[++i];
 8002b04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b06:	3301      	adds	r3, #1
 8002b08:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b0e:	3301      	adds	r3, #1
 8002b10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b1a:	4413      	add	r3, r2
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
        if (c == 'l') is_long++, c = fmt[++i];
 8002b22:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002b26:	2b6c      	cmp	r3, #108	; 0x6c
 8002b28:	d10e      	bne.n	8002b48 <mg_vxprintf+0x220>
 8002b2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b34:	3301      	adds	r3, #1
 8002b36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b40:	4413      	add	r3, r2
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      }
      if (c == 'p') x = 1, is_long = 1;
 8002b48:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002b4c:	2b70      	cmp	r3, #112	; 0x70
 8002b4e:	d103      	bne.n	8002b58 <mg_vxprintf+0x230>
 8002b50:	2301      	movs	r3, #1
 8002b52:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b54:	2301      	movs	r3, #1
 8002b56:	67bb      	str	r3, [r7, #120]	; 0x78
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8002b58:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002b5c:	2b64      	cmp	r3, #100	; 0x64
 8002b5e:	d018      	beq.n	8002b92 <mg_vxprintf+0x26a>
 8002b60:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002b64:	2b75      	cmp	r3, #117	; 0x75
 8002b66:	d014      	beq.n	8002b92 <mg_vxprintf+0x26a>
 8002b68:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002b6c:	2b78      	cmp	r3, #120	; 0x78
 8002b6e:	d010      	beq.n	8002b92 <mg_vxprintf+0x26a>
 8002b70:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002b74:	2b58      	cmp	r3, #88	; 0x58
 8002b76:	d00c      	beq.n	8002b92 <mg_vxprintf+0x26a>
 8002b78:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002b7c:	2b70      	cmp	r3, #112	; 0x70
 8002b7e:	d008      	beq.n	8002b92 <mg_vxprintf+0x26a>
 8002b80:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002b84:	2b67      	cmp	r3, #103	; 0x67
 8002b86:	d004      	beq.n	8002b92 <mg_vxprintf+0x26a>
          c == 'g' || c == 'f') {
 8002b88:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002b8c:	2b66      	cmp	r3, #102	; 0x66
 8002b8e:	f040 816c 	bne.w	8002e6a <mg_vxprintf+0x542>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8002b92:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002b96:	2b64      	cmp	r3, #100	; 0x64
 8002b98:	bf0c      	ite	eq
 8002b9a:	2301      	moveq	r3, #1
 8002b9c:	2300      	movne	r3, #0
 8002b9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002ba2:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002ba6:	2b78      	cmp	r3, #120	; 0x78
 8002ba8:	d007      	beq.n	8002bba <mg_vxprintf+0x292>
 8002baa:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002bae:	2b58      	cmp	r3, #88	; 0x58
 8002bb0:	d003      	beq.n	8002bba <mg_vxprintf+0x292>
 8002bb2:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002bb6:	2b70      	cmp	r3, #112	; 0x70
 8002bb8:	d101      	bne.n	8002bbe <mg_vxprintf+0x296>
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e000      	b.n	8002bc0 <mg_vxprintf+0x298>
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8002bc4:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        char tmp[40];
        size_t xl = x ? 2 : 0;
 8002bd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <mg_vxprintf+0x2b2>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e000      	b.n	8002bdc <mg_vxprintf+0x2b4>
 8002bda:	2300      	movs	r3, #0
 8002bdc:	65bb      	str	r3, [r7, #88]	; 0x58
        if (c == 'g' || c == 'f') {
 8002bde:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002be2:	2b67      	cmp	r3, #103	; 0x67
 8002be4:	d003      	beq.n	8002bee <mg_vxprintf+0x2c6>
 8002be6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002bea:	2b66      	cmp	r3, #102	; 0x66
 8002bec:	d124      	bne.n	8002c38 <mg_vxprintf+0x310>
          double v = va_arg(*ap, double);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	3307      	adds	r3, #7
 8002bf4:	f023 0307 	bic.w	r3, r3, #7
 8002bf8:	f103 0108 	add.w	r1, r3, #8
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	6011      	str	r1, [r2, #0]
 8002c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c04:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          if (pr == ~0U) pr = 6;
 8002c08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0e:	d101      	bne.n	8002c14 <mg_vxprintf+0x2ec>
 8002c10:	2306      	movs	r3, #6
 8002c12:	673b      	str	r3, [r7, #112]	; 0x70
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 8002c14:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002c16:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002c1a:	2b67      	cmp	r3, #103	; 0x67
 8002c1c:	bf0c      	ite	eq
 8002c1e:	2301      	moveq	r3, #1
 8002c20:	2300      	movne	r3, #0
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	f107 0014 	add.w	r0, r7, #20
 8002c28:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8002c2c:	2128      	movs	r1, #40	; 0x28
 8002c2e:	f7ff fafb 	bl	8002228 <mg_dtoa>
 8002c32:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
        if (c == 'g' || c == 'f') {
 8002c36:	e069      	b.n	8002d0c <mg_vxprintf+0x3e4>
        } else if (is_long == 2) {
 8002c38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d11c      	bne.n	8002c78 <mg_vxprintf+0x350>
          int64_t v = va_arg(*ap, int64_t);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	3307      	adds	r3, #7
 8002c44:	f023 0307 	bic.w	r3, r3, #7
 8002c48:	f103 0108 	add.w	r1, r3, #8
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	6011      	str	r1, [r2, #0]
 8002c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c54:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
          k = mg_lld(tmp, v, s, h);
 8002c58:	f107 0114 	add.w	r1, r7, #20
 8002c5c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002c60:	9301      	str	r3, [sp, #4]
 8002c62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c6c:	4608      	mov	r0, r1
 8002c6e:	f7ff fd6d 	bl	800274c <mg_lld>
 8002c72:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 8002c76:	e049      	b.n	8002d0c <mg_vxprintf+0x3e4>
        } else if (is_long == 1) {
 8002c78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d123      	bne.n	8002cc6 <mg_vxprintf+0x39e>
          long v = va_arg(*ap, long);
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	1d19      	adds	r1, r3, #4
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	6011      	str	r1, [r2, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	653b      	str	r3, [r7, #80]	; 0x50
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 8002c8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d004      	beq.n	8002c9e <mg_vxprintf+0x376>
 8002c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c96:	17da      	asrs	r2, r3, #31
 8002c98:	461c      	mov	r4, r3
 8002c9a:	4615      	mov	r5, r2
 8002c9c:	e003      	b.n	8002ca6 <mg_vxprintf+0x37e>
 8002c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	461c      	mov	r4, r3
 8002ca4:	4615      	mov	r5, r2
 8002ca6:	f107 0114 	add.w	r1, r7, #20
 8002caa:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002cae:	9301      	str	r3, [sp, #4]
 8002cb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	4622      	mov	r2, r4
 8002cb8:	462b      	mov	r3, r5
 8002cba:	4608      	mov	r0, r1
 8002cbc:	f7ff fd46 	bl	800274c <mg_lld>
 8002cc0:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 8002cc4:	e022      	b.n	8002d0c <mg_vxprintf+0x3e4>
        } else {
          int v = va_arg(*ap, int);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	1d19      	adds	r1, r3, #4
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	6011      	str	r1, [r2, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	657b      	str	r3, [r7, #84]	; 0x54
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8002cd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d004      	beq.n	8002ce6 <mg_vxprintf+0x3be>
 8002cdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cde:	17da      	asrs	r2, r3, #31
 8002ce0:	4698      	mov	r8, r3
 8002ce2:	4691      	mov	r9, r2
 8002ce4:	e003      	b.n	8002cee <mg_vxprintf+0x3c6>
 8002ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ce8:	2200      	movs	r2, #0
 8002cea:	4698      	mov	r8, r3
 8002cec:	4691      	mov	r9, r2
 8002cee:	f107 0114 	add.w	r1, r7, #20
 8002cf2:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002cf6:	9301      	str	r3, [sp, #4]
 8002cf8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	4642      	mov	r2, r8
 8002d00:	464b      	mov	r3, r9
 8002d02:	4608      	mov	r0, r1
 8002d04:	f7ff fd22 	bl	800274c <mg_lld>
 8002d08:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
        }
        for (j = 0; j < xl && w > 0; j++) w--;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d12:	e007      	b.n	8002d24 <mg_vxprintf+0x3fc>
 8002d14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d16:	3b01      	subs	r3, #1
 8002d18:	677b      	str	r3, [r7, #116]	; 0x74
 8002d1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d1e:	3301      	adds	r3, #1
 8002d20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d24:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002d28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d202      	bcs.n	8002d34 <mg_vxprintf+0x40c>
 8002d2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1ef      	bne.n	8002d14 <mg_vxprintf+0x3ec>
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8002d34:	2300      	movs	r3, #0
 8002d36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d3a:	e011      	b.n	8002d60 <mg_vxprintf+0x438>
          n += scpy(out, param, &pad, 1);
 8002d3c:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 8002d40:	2301      	movs	r3, #1
 8002d42:	68b9      	ldr	r1, [r7, #8]
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f7ff fdb1 	bl	80028ac <scpy>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d50:	4413      	add	r3, r2
 8002d52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8002d56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d60:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002d64:	2b20      	cmp	r3, #32
 8002d66:	d110      	bne.n	8002d8a <mg_vxprintf+0x462>
 8002d68:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10c      	bne.n	8002d8a <mg_vxprintf+0x462>
 8002d70:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d207      	bcs.n	8002d8a <mg_vxprintf+0x462>
 8002d7a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002d7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d82:	4413      	add	r3, r2
 8002d84:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d8d8      	bhi.n	8002d3c <mg_vxprintf+0x414>
        n += scpy(out, param, (char *) "0x", xl);
 8002d8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d8c:	4ab7      	ldr	r2, [pc, #732]	; (800306c <mg_vxprintf+0x744>)
 8002d8e:	68b9      	ldr	r1, [r7, #8]
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f7ff fd8b 	bl	80028ac <scpy>
 8002d96:	4602      	mov	r2, r0
 8002d98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8002da2:	2300      	movs	r3, #0
 8002da4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002da8:	e011      	b.n	8002dce <mg_vxprintf+0x4a6>
          n += scpy(out, param, &pad, 1);
 8002daa:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 8002dae:	2301      	movs	r3, #1
 8002db0:	68b9      	ldr	r1, [r7, #8]
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f7ff fd7a 	bl	80028ac <scpy>
 8002db8:	4602      	mov	r2, r0
 8002dba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8002dc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dc8:	3301      	adds	r3, #1
 8002dca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002dce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002dd2:	2b30      	cmp	r3, #48	; 0x30
 8002dd4:	d10c      	bne.n	8002df0 <mg_vxprintf+0x4c8>
 8002dd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002dda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d207      	bcs.n	8002df0 <mg_vxprintf+0x4c8>
 8002de0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002de4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002de8:	4413      	add	r3, r2
 8002dea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d8dc      	bhi.n	8002daa <mg_vxprintf+0x482>
        n += scpy(out, param, tmp, k);
 8002df0:	f107 0214 	add.w	r2, r7, #20
 8002df4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002df8:	68b9      	ldr	r1, [r7, #8]
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f7ff fd56 	bl	80028ac <scpy>
 8002e00:	4602      	mov	r2, r0
 8002e02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e06:	4413      	add	r3, r2
 8002e08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e12:	e011      	b.n	8002e38 <mg_vxprintf+0x510>
          n += scpy(out, param, &pad, 1);
 8002e14:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 8002e18:	2301      	movs	r3, #1
 8002e1a:	68b9      	ldr	r1, [r7, #8]
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f7ff fd45 	bl	80028ac <scpy>
 8002e22:	4602      	mov	r2, r0
 8002e24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e28:	4413      	add	r3, r2
 8002e2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8002e2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e32:	3301      	adds	r3, #1
 8002e34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	f040 80ea 	bne.w	8003016 <mg_vxprintf+0x6ee>
 8002e42:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 80e5 	beq.w	8003016 <mg_vxprintf+0x6ee>
 8002e4c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e52:	429a      	cmp	r2, r3
 8002e54:	f080 80df 	bcs.w	8003016 <mg_vxprintf+0x6ee>
 8002e58:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002e5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e60:	4413      	add	r3, r2
 8002e62:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d8d5      	bhi.n	8002e14 <mg_vxprintf+0x4ec>
          c == 'g' || c == 'f') {
 8002e68:	e0d5      	b.n	8003016 <mg_vxprintf+0x6ee>
      } else if (c == 'm' || c == 'M') {
 8002e6a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002e6e:	2b6d      	cmp	r3, #109	; 0x6d
 8002e70:	d003      	beq.n	8002e7a <mg_vxprintf+0x552>
 8002e72:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002e76:	2b4d      	cmp	r3, #77	; 0x4d
 8002e78:	d128      	bne.n	8002ecc <mg_vxprintf+0x5a4>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	1d19      	adds	r1, r3, #4
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	6011      	str	r1, [r2, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	663b      	str	r3, [r7, #96]	; 0x60
        if (c == 'm') out('"', param);
 8002e88:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002e8c:	2b6d      	cmp	r3, #109	; 0x6d
 8002e8e:	d103      	bne.n	8002e98 <mg_vxprintf+0x570>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	68b9      	ldr	r1, [r7, #8]
 8002e94:	2022      	movs	r0, #34	; 0x22
 8002e96:	4798      	blx	r3
        n += f(out, param, ap);
 8002e98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	68b9      	ldr	r1, [r7, #8]
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	4798      	blx	r3
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ea8:	4413      	add	r3, r2
 8002eaa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        if (c == 'm') n += 2, out('"', param);
 8002eae:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002eb2:	2b6d      	cmp	r3, #109	; 0x6d
 8002eb4:	f040 80b1 	bne.w	800301a <mg_vxprintf+0x6f2>
 8002eb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ebc:	3302      	adds	r3, #2
 8002ebe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	68b9      	ldr	r1, [r7, #8]
 8002ec6:	2022      	movs	r0, #34	; 0x22
 8002ec8:	4798      	blx	r3
      } else if (c == 'm' || c == 'M') {
 8002eca:	e0a6      	b.n	800301a <mg_vxprintf+0x6f2>
      } else if (c == 'c') {
 8002ecc:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002ed0:	2b63      	cmp	r3, #99	; 0x63
 8002ed2:	d112      	bne.n	8002efa <mg_vxprintf+0x5d2>
        int ch = va_arg(*ap, int);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	1d19      	adds	r1, r3, #4
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	6011      	str	r1, [r2, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	667b      	str	r3, [r7, #100]	; 0x64
        out((char) ch, param);
 8002ee2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ee4:	b2da      	uxtb	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	68b9      	ldr	r1, [r7, #8]
 8002eea:	4610      	mov	r0, r2
 8002eec:	4798      	blx	r3
        n++;
 8002eee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ef8:	e090      	b.n	800301c <mg_vxprintf+0x6f4>
      } else if (c == 's') {
 8002efa:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002efe:	2b73      	cmp	r3, #115	; 0x73
 8002f00:	d16b      	bne.n	8002fda <mg_vxprintf+0x6b2>
        char *p = va_arg(*ap, char *);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	1d19      	adds	r1, r3, #4
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	6011      	str	r1, [r2, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	66bb      	str	r3, [r7, #104]	; 0x68
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 8002f10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f16:	d109      	bne.n	8002f2c <mg_vxprintf+0x604>
 8002f18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d004      	beq.n	8002f28 <mg_vxprintf+0x600>
 8002f1e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002f20:	f7fd fa56 	bl	80003d0 <strlen>
 8002f24:	4603      	mov	r3, r0
 8002f26:	e000      	b.n	8002f2a <mg_vxprintf+0x602>
 8002f28:	2300      	movs	r3, #0
 8002f2a:	673b      	str	r3, [r7, #112]	; 0x70
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f32:	e011      	b.n	8002f58 <mg_vxprintf+0x630>
          n += scpy(out, param, &pad, 1);
 8002f34:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 8002f38:	2301      	movs	r3, #1
 8002f3a:	68b9      	ldr	r1, [r7, #8]
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f7ff fcb5 	bl	80028ac <scpy>
 8002f42:	4602      	mov	r2, r0
 8002f44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f48:	4413      	add	r3, r2
 8002f4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8002f4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f52:	3301      	adds	r3, #1
 8002f54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f58:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10a      	bne.n	8002f76 <mg_vxprintf+0x64e>
 8002f60:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002f62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d206      	bcs.n	8002f76 <mg_vxprintf+0x64e>
 8002f68:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002f6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f6e:	4413      	add	r3, r2
 8002f70:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d8de      	bhi.n	8002f34 <mg_vxprintf+0x60c>
        n += scpy(out, param, p, pr);
 8002f76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f78:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002f7a:	68b9      	ldr	r1, [r7, #8]
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f7ff fc95 	bl	80028ac <scpy>
 8002f82:	4602      	mov	r2, r0
 8002f84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f88:	4413      	add	r3, r2
 8002f8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8002f8e:	2300      	movs	r3, #0
 8002f90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f94:	e011      	b.n	8002fba <mg_vxprintf+0x692>
          n += scpy(out, param, &pad, 1);
 8002f96:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	68b9      	ldr	r1, [r7, #8]
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f7ff fc84 	bl	80028ac <scpy>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002faa:	4413      	add	r3, r2
 8002fac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8002fb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002fba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d02c      	beq.n	800301c <mg_vxprintf+0x6f4>
 8002fc2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002fc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d228      	bcs.n	800301c <mg_vxprintf+0x6f4>
 8002fca:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002fce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fd0:	4413      	add	r3, r2
 8002fd2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d8de      	bhi.n	8002f96 <mg_vxprintf+0x66e>
 8002fd8:	e020      	b.n	800301c <mg_vxprintf+0x6f4>
      } else if (c == '%') {
 8002fda:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002fde:	2b25      	cmp	r3, #37	; 0x25
 8002fe0:	d109      	bne.n	8002ff6 <mg_vxprintf+0x6ce>
        out('%', param);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	68b9      	ldr	r1, [r7, #8]
 8002fe6:	2025      	movs	r0, #37	; 0x25
 8002fe8:	4798      	blx	r3
        n++;
 8002fea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fee:	3301      	adds	r3, #1
 8002ff0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ff4:	e012      	b.n	800301c <mg_vxprintf+0x6f4>
      } else {
        out('%', param);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	68b9      	ldr	r1, [r7, #8]
 8002ffa:	2025      	movs	r0, #37	; 0x25
 8002ffc:	4798      	blx	r3
        out(c, param);
 8002ffe:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	68b9      	ldr	r1, [r7, #8]
 8003006:	4610      	mov	r0, r2
 8003008:	4798      	blx	r3
        n += 2;
 800300a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800300e:	3302      	adds	r3, #2
 8003010:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003014:	e002      	b.n	800301c <mg_vxprintf+0x6f4>
          c == 'g' || c == 'f') {
 8003016:	bf00      	nop
 8003018:	e000      	b.n	800301c <mg_vxprintf+0x6f4>
      } else if (c == 'm' || c == 'M') {
 800301a:	bf00      	nop
      }
      i++;
 800301c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003020:	3301      	adds	r3, #1
 8003022:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003026:	e012      	b.n	800304e <mg_vxprintf+0x726>
    } else {
      out(fmt[i], param), n++, i++;
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800302e:	4413      	add	r3, r2
 8003030:	781a      	ldrb	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	68b9      	ldr	r1, [r7, #8]
 8003036:	4610      	mov	r0, r2
 8003038:	4798      	blx	r3
 800303a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800303e:	3301      	adds	r3, #1
 8003040:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003044:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003048:	3301      	adds	r3, #1
 800304a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  while (fmt[i] != '\0') {
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003054:	4413      	add	r3, r2
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	f47f ac74 	bne.w	8002946 <mg_vxprintf+0x1e>
    }
  }
  return n;
 800305e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 8003062:	4618      	mov	r0, r3
 8003064:	3790      	adds	r7, #144	; 0x90
 8003066:	46bd      	mov	sp, r7
 8003068:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800306c:	080143bc 	.word	0x080143bc

08003070 <mg_fs_open>:
#line 1 "src/fs.c"
#endif



struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 800307c:	2108      	movs	r1, #8
 800307e:	2001      	movs	r0, #1
 8003080:	f00f fefc 	bl	8012e7c <calloc>
 8003084:	4603      	mov	r3, r0
 8003086:	617b      	str	r3, [r7, #20]
  if (fd != NULL) {
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d013      	beq.n	80030b6 <mg_fs_open+0x46>
    fd->fd = fs->op(path, flags);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	68b8      	ldr	r0, [r7, #8]
 8003096:	4798      	blx	r3
 8003098:	4602      	mov	r2, r0
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	601a      	str	r2, [r3, #0]
    fd->fs = fs;
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	605a      	str	r2, [r3, #4]
    if (fd->fd == NULL) {
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d104      	bne.n	80030b6 <mg_fs_open+0x46>
      free(fd);
 80030ac:	6978      	ldr	r0, [r7, #20]
 80030ae:	f00f ff0b 	bl	8012ec8 <free>
      fd = NULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	617b      	str	r3, [r7, #20]
    }
  }
  return fd;
 80030b6:	697b      	ldr	r3, [r7, #20]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <mg_fs_close>:

void mg_fs_close(struct mg_fd *fd) {
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  if (fd != NULL) {
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d009      	beq.n	80030e2 <mg_fs_close+0x22>
    fd->fs->cl(fd->fd);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6812      	ldr	r2, [r2, #0]
 80030d8:	4610      	mov	r0, r2
 80030da:	4798      	blx	r3
    free(fd);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f00f fef3 	bl	8012ec8 <free>
  }
}
 80030e2:	bf00      	nop
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <is_dir_prefix>:
  (void) no;
  return NULL;
}
#endif

static int is_dir_prefix(const char *prefix, size_t n, const char *path) {
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b084      	sub	sp, #16
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	60b9      	str	r1, [r7, #8]
 80030f4:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s] [%s] %c", (int) n, prefix, path, path[n]));
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7fd f96a 	bl	80003d0 <strlen>
 80030fc:	4602      	mov	r2, r0
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	4293      	cmp	r3, r2
 8003102:	d219      	bcs.n	8003138 <is_dir_prefix+0x4e>
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f010 f9f2 	bl	80134f2 <strncmp>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d111      	bne.n	8003138 <is_dir_prefix+0x4e>
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00c      	beq.n	8003134 <is_dir_prefix+0x4a>
         (n == 0 || path[n] == '/' || path[n - 1] == '/');
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	4413      	add	r3, r2
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b2f      	cmp	r3, #47	; 0x2f
 8003124:	d006      	beq.n	8003134 <is_dir_prefix+0x4a>
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	3b01      	subs	r3, #1
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	4413      	add	r3, r2
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	2b2f      	cmp	r3, #47	; 0x2f
 8003132:	d101      	bne.n	8003138 <is_dir_prefix+0x4e>
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 8003134:	2301      	movs	r3, #1
 8003136:	e000      	b.n	800313a <is_dir_prefix+0x50>
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <packed_stat>:

static int packed_stat(const char *path, size_t *size, time_t *mtime) {
 8003142:	b580      	push	{r7, lr}
 8003144:	b088      	sub	sp, #32
 8003146:	af00      	add	r7, sp, #0
 8003148:	60f8      	str	r0, [r7, #12]
 800314a:	60b9      	str	r1, [r7, #8]
 800314c:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t i, n = strlen(path);
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f7fd f93e 	bl	80003d0 <strlen>
 8003154:	61b8      	str	r0, [r7, #24]
  if (mg_unpack(path, size, mtime)) return MG_FS_READ;  // Regular file
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	68b9      	ldr	r1, [r7, #8]
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f00a f9e6 	bl	800d52c <mg_unpack>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <packed_stat+0x28>
 8003166:	2301      	movs	r3, #1
 8003168:	e017      	b.n	800319a <packed_stat+0x58>
  // Scan all files. If `path` is a dir prefix for any of them, it's a dir
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 800316a:	2300      	movs	r3, #0
 800316c:	61fb      	str	r3, [r7, #28]
 800316e:	e00c      	b.n	800318a <packed_stat+0x48>
    if (is_dir_prefix(path, n, p)) return MG_FS_DIR;
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	69b9      	ldr	r1, [r7, #24]
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f7ff ffb8 	bl	80030ea <is_dir_prefix>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <packed_stat+0x42>
 8003180:	2304      	movs	r3, #4
 8003182:	e00a      	b.n	800319a <packed_stat+0x58>
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	3301      	adds	r3, #1
 8003188:	61fb      	str	r3, [r7, #28]
 800318a:	69f8      	ldr	r0, [r7, #28]
 800318c:	f00a f9ba 	bl	800d504 <mg_unlist>
 8003190:	6178      	str	r0, [r7, #20]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1eb      	bne.n	8003170 <packed_stat+0x2e>
  }
  return 0;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3720      	adds	r7, #32
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <packed_list>:

static void packed_list(const char *dir, void (*fn)(const char *, void *),
                        void *userdata) {
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b0be      	sub	sp, #248	; 0xf8
 80031a8:	af02      	add	r7, sp, #8
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  char buf[MG_PATH_MAX], tmp[sizeof(buf)];
  const char *path, *begin, *end;
  size_t i, n = strlen(dir);
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f7fd f90d 	bl	80003d0 <strlen>
 80031b6:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  tmp[0] = '\0';  // Previously listed entry
 80031ba:	2300      	movs	r3, #0
 80031bc:	753b      	strb	r3, [r7, #20]
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 80031be:	2300      	movs	r3, #0
 80031c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031c4:	e05a      	b.n	800327c <packed_list+0xd8>
    if (!is_dir_prefix(dir, n, path)) continue;
 80031c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80031ca:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f7ff ff8b 	bl	80030ea <is_dir_prefix>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d048      	beq.n	800326c <packed_list+0xc8>
    begin = &path[n + 1];
 80031da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031de:	3301      	adds	r3, #1
 80031e0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80031e4:	4413      	add	r3, r2
 80031e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    end = strchr(begin, '/');
 80031ea:	212f      	movs	r1, #47	; 0x2f
 80031ec:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80031f0:	f010 f955 	bl	801349e <strchr>
 80031f4:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
    if (end == NULL) end = begin + strlen(begin);
 80031f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d109      	bne.n	8003214 <packed_list+0x70>
 8003200:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8003204:	f7fd f8e4 	bl	80003d0 <strlen>
 8003208:	4602      	mov	r2, r0
 800320a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800320e:	4413      	add	r3, r2
 8003210:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    mg_snprintf(buf, sizeof(buf), "%.*s", (int) (end - begin), begin);
 8003214:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003218:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800321c:	1ad2      	subs	r2, r2, r3
 800321e:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8003222:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	4613      	mov	r3, r2
 800322a:	4a1c      	ldr	r2, [pc, #112]	; (800329c <packed_list+0xf8>)
 800322c:	2164      	movs	r1, #100	; 0x64
 800322e:	f004 fcc1 	bl	8007bb4 <mg_snprintf>
    buf[sizeof(buf) - 1] = '\0';
 8003232:	2300      	movs	r3, #0
 8003234:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    // If this entry has been already listed, skip
    // NOTE: we're assuming that file list is sorted alphabetically
    if (strcmp(buf, tmp) == 0) continue;
 8003238:	f107 0214 	add.w	r2, r7, #20
 800323c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003240:	4611      	mov	r1, r2
 8003242:	4618      	mov	r0, r3
 8003244:	f7fd f864 	bl	8000310 <strcmp>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d010      	beq.n	8003270 <packed_list+0xcc>
    fn(buf, userdata);  // Not yet listed, call user function
 800324e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	4610      	mov	r0, r2
 8003258:	4798      	blx	r3
    strcpy(tmp, buf);   // And save this entry as listed
 800325a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800325e:	f107 0314 	add.w	r3, r7, #20
 8003262:	4611      	mov	r1, r2
 8003264:	4618      	mov	r0, r3
 8003266:	f010 f9f1 	bl	801364c <strcpy>
 800326a:	e002      	b.n	8003272 <packed_list+0xce>
    if (!is_dir_prefix(dir, n, path)) continue;
 800326c:	bf00      	nop
 800326e:	e000      	b.n	8003272 <packed_list+0xce>
    if (strcmp(buf, tmp) == 0) continue;
 8003270:	bf00      	nop
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 8003272:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003276:	3301      	adds	r3, #1
 8003278:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800327c:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8003280:	f00a f940 	bl	800d504 <mg_unlist>
 8003284:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
 8003288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d19a      	bne.n	80031c6 <packed_list+0x22>
  }
}
 8003290:	bf00      	nop
 8003292:	bf00      	nop
 8003294:	37f0      	adds	r7, #240	; 0xf0
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	080143a0 	.word	0x080143a0

080032a0 <packed_open>:

static void *packed_open(const char *path, int flags) {
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  size_t size = 0;
 80032aa:	2300      	movs	r3, #0
 80032ac:	60fb      	str	r3, [r7, #12]
  const char *data = mg_unpack(path, &size, NULL);
 80032ae:	f107 030c 	add.w	r3, r7, #12
 80032b2:	2200      	movs	r2, #0
 80032b4:	4619      	mov	r1, r3
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f00a f938 	bl	800d52c <mg_unpack>
 80032bc:	6178      	str	r0, [r7, #20]
  struct packed_file *fp = NULL;
 80032be:	2300      	movs	r3, #0
 80032c0:	613b      	str	r3, [r7, #16]
  if (data == NULL) return NULL;
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <packed_open+0x2c>
 80032c8:	2300      	movs	r3, #0
 80032ca:	e016      	b.n	80032fa <packed_open+0x5a>
  if (flags & MG_FS_WRITE) return NULL;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <packed_open+0x3a>
 80032d6:	2300      	movs	r3, #0
 80032d8:	e00f      	b.n	80032fa <packed_open+0x5a>
  if ((fp = (struct packed_file *) calloc(1, sizeof(*fp))) != NULL) {
 80032da:	210c      	movs	r1, #12
 80032dc:	2001      	movs	r0, #1
 80032de:	f00f fdcd 	bl	8012e7c <calloc>
 80032e2:	4603      	mov	r3, r0
 80032e4:	613b      	str	r3, [r7, #16]
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d005      	beq.n	80032f8 <packed_open+0x58>
    fp->size = size;
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	605a      	str	r2, [r3, #4]
    fp->data = data;
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	601a      	str	r2, [r3, #0]
  }
  return (void *) fp;
 80032f8:	693b      	ldr	r3, [r7, #16]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3718      	adds	r7, #24
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <packed_close>:

static void packed_close(void *fp) {
 8003302:	b580      	push	{r7, lr}
 8003304:	b082      	sub	sp, #8
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  if (fp != NULL) free(fp);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d002      	beq.n	8003316 <packed_close+0x14>
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f00f fdd9 	bl	8012ec8 <free>
}
 8003316:	bf00      	nop
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <packed_read>:

static size_t packed_read(void *fd, void *buf, size_t len) {
 800331e:	b580      	push	{r7, lr}
 8003320:	b086      	sub	sp, #24
 8003322:	af00      	add	r7, sp, #0
 8003324:	60f8      	str	r0, [r7, #12]
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	607a      	str	r2, [r7, #4]
  struct packed_file *fp = (struct packed_file *) fd;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	617b      	str	r3, [r7, #20]
  if (fp->pos + len > fp->size) len = fp->size - fp->pos;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	441a      	add	r2, r3
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	429a      	cmp	r2, r3
 800333c:	d905      	bls.n	800334a <packed_read+0x2c>
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	607b      	str	r3, [r7, #4]
  memcpy(buf, &fp->data[fp->pos], len);
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	4413      	add	r3, r2
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	4619      	mov	r1, r3
 8003358:	68b8      	ldr	r0, [r7, #8]
 800335a:	f010 f97f 	bl	801365c <memcpy>
  fp->pos += len;
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	441a      	add	r2, r3
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	609a      	str	r2, [r3, #8]
  return len;
 800336a:	687b      	ldr	r3, [r7, #4]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3718      	adds	r7, #24
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <packed_write>:

static size_t packed_write(void *fd, const void *buf, size_t len) {
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <packed_seek>:

static size_t packed_seek(void *fd, size_t offset) {
 800338e:	b480      	push	{r7}
 8003390:	b085      	sub	sp, #20
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
 8003396:	6039      	str	r1, [r7, #0]
  struct packed_file *fp = (struct packed_file *) fd;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	60fb      	str	r3, [r7, #12]
  fp->pos = offset;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	609a      	str	r2, [r3, #8]
  if (fp->pos > fp->size) fp->pos = fp->size;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d903      	bls.n	80033b6 <packed_seek+0x28>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	609a      	str	r2, [r3, #8]
  return fp->pos;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	689b      	ldr	r3, [r3, #8]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <packed_rename>:

static bool packed_rename(const char *from, const char *to) {
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
 80033ce:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <packed_remove>:

static bool packed_remove(const char *path) {
 80033de:	b480      	push	{r7}
 80033e0:	b083      	sub	sp, #12
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <packed_mkdir>:

static bool packed_mkdir(const char *path) {
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <p_stat>:
  return mkdir(path, 0775) == 0;
}

#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
 800340a:	b480      	push	{r7}
 800340c:	b085      	sub	sp, #20
 800340e:	af00      	add	r7, sp, #0
 8003410:	60f8      	str	r0, [r7, #12]
 8003412:	60b9      	str	r1, [r7, #8]
 8003414:	607a      	str	r2, [r7, #4]
  (void) path, (void) size, (void) mtime;
  return 0;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
  (void) path, (void) fn, (void) userdata;
}
 8003430:	bf00      	nop
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <p_open>:
static void *p_open(const char *path, int flags) {
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  (void) path, (void) flags;
  return NULL;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <p_close>:
static void p_close(void *fp) {
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  (void) fp;
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
 8003482:	b480      	push	{r7}
 8003484:	b085      	sub	sp, #20
 8003486:	af00      	add	r7, sp, #0
 8003488:	60f8      	str	r0, [r7, #12]
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  (void) fd, (void) offset;
  return (size_t) ~0;
 80034a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <p_rename>:
static bool p_rename(const char *from, const char *to) {
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <p_remove>:
static bool p_remove(const char *path) {
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <p_mkdir>:
static bool p_mkdir(const char *path) {
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	0000      	movs	r0, r0
 80034fc:	0000      	movs	r0, r0
	...

08003500 <mg_to_size_t>:




bool mg_to_size_t(struct mg_str str, size_t *val);
bool mg_to_size_t(struct mg_str str, size_t *val) {
 8003500:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003504:	b08f      	sub	sp, #60	; 0x3c
 8003506:	af00      	add	r7, sp, #0
 8003508:	f107 0318 	add.w	r3, r7, #24
 800350c:	e883 0003 	stmia.w	r3, {r0, r1}
 8003510:	617a      	str	r2, [r7, #20]
  uint64_t result = 0, max = 1844674407370955160 /* (UINT64_MAX-9)/10 */;
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	f04f 0300 	mov.w	r3, #0
 800351a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800351e:	a340      	add	r3, pc, #256	; (adr r3, 8003620 <mg_to_size_t+0x120>)
 8003520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003524:	e9c7 2308 	strd	r2, r3, [r7, #32]
  size_t i = 0;
 8003528:	2300      	movs	r3, #0
 800352a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (i < str.len && (str.ptr[i] == ' ' || str.ptr[i] == '\t')) i++;
 800352c:	e002      	b.n	8003534 <mg_to_size_t+0x34>
 800352e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003530:	3301      	adds	r3, #1
 8003532:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003538:	429a      	cmp	r2, r3
 800353a:	d20b      	bcs.n	8003554 <mg_to_size_t+0x54>
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003540:	4413      	add	r3, r2
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b20      	cmp	r3, #32
 8003546:	d0f2      	beq.n	800352e <mg_to_size_t+0x2e>
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354c:	4413      	add	r3, r2
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b09      	cmp	r3, #9
 8003552:	d0ec      	beq.n	800352e <mg_to_size_t+0x2e>
  if (i < str.len && str.ptr[i] == '-') return false;
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003558:	429a      	cmp	r2, r3
 800355a:	d244      	bcs.n	80035e6 <mg_to_size_t+0xe6>
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003560:	4413      	add	r3, r2
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b2d      	cmp	r3, #45	; 0x2d
 8003566:	d13e      	bne.n	80035e6 <mg_to_size_t+0xe6>
 8003568:	2300      	movs	r3, #0
 800356a:	e050      	b.n	800360e <mg_to_size_t+0x10e>
  while (i < str.len && str.ptr[i] >= '0' && str.ptr[i] <= '9') {
    if (result > max) return false;
 800356c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003570:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003574:	4290      	cmp	r0, r2
 8003576:	eb71 0303 	sbcs.w	r3, r1, r3
 800357a:	d201      	bcs.n	8003580 <mg_to_size_t+0x80>
 800357c:	2300      	movs	r3, #0
 800357e:	e046      	b.n	800360e <mg_to_size_t+0x10e>
    result *= 10;
 8003580:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8003584:	4642      	mov	r2, r8
 8003586:	464b      	mov	r3, r9
 8003588:	f04f 0000 	mov.w	r0, #0
 800358c:	f04f 0100 	mov.w	r1, #0
 8003590:	0099      	lsls	r1, r3, #2
 8003592:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8003596:	0090      	lsls	r0, r2, #2
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	eb12 0408 	adds.w	r4, r2, r8
 80035a0:	eb43 0509 	adc.w	r5, r3, r9
 80035a4:	1923      	adds	r3, r4, r4
 80035a6:	60bb      	str	r3, [r7, #8]
 80035a8:	eb45 0305 	adc.w	r3, r5, r5
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035b2:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    result += (unsigned) (str.ptr[i] - '0');
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ba:	4413      	add	r3, r2
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	3b30      	subs	r3, #48	; 0x30
 80035c0:	461a      	mov	r2, r3
 80035c2:	2300      	movs	r3, #0
 80035c4:	4692      	mov	sl, r2
 80035c6:	469b      	mov	fp, r3
 80035c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80035cc:	eb12 010a 	adds.w	r1, r2, sl
 80035d0:	6039      	str	r1, [r7, #0]
 80035d2:	eb43 030b 	adc.w	r3, r3, fp
 80035d6:	607b      	str	r3, [r7, #4]
 80035d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035dc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    i++;
 80035e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e2:	3301      	adds	r3, #1
 80035e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (i < str.len && str.ptr[i] >= '0' && str.ptr[i] <= '9') {
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d20b      	bcs.n	8003606 <mg_to_size_t+0x106>
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f2:	4413      	add	r3, r2
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	2b2f      	cmp	r3, #47	; 0x2f
 80035f8:	d905      	bls.n	8003606 <mg_to_size_t+0x106>
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fe:	4413      	add	r3, r2
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2b39      	cmp	r3, #57	; 0x39
 8003604:	d9b2      	bls.n	800356c <mg_to_size_t+0x6c>
  }
  *val = (size_t) result;
 8003606:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	601a      	str	r2, [r3, #0]
  return true;
 800360c:	2301      	movs	r3, #1
}
 800360e:	4618      	mov	r0, r3
 8003610:	373c      	adds	r7, #60	; 0x3c
 8003612:	46bd      	mov	sp, r7
 8003614:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	f3af 8000 	nop.w
 8003620:	99999998 	.word	0x99999998
 8003624:	19999999 	.word	0x19999999

08003628 <mg_http_var>:
  } else {
    MG_ERROR(("%lu oom %d->%d ", c->id, (int) c->send.size, (int) need));
  }
}

struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {
 8003628:	b082      	sub	sp, #8
 800362a:	b580      	push	{r7, lr}
 800362c:	b08a      	sub	sp, #40	; 0x28
 800362e:	af00      	add	r7, sp, #0
 8003630:	60f8      	str	r0, [r7, #12]
 8003632:	1d38      	adds	r0, r7, #4
 8003634:	e880 0006 	stmia.w	r0, {r1, r2}
 8003638:	637b      	str	r3, [r7, #52]	; 0x34
  struct mg_str k, v, result = mg_str_n(NULL, 0);
 800363a:	f107 0310 	add.w	r3, r7, #16
 800363e:	2200      	movs	r2, #0
 8003640:	2100      	movs	r1, #0
 8003642:	4618      	mov	r0, r3
 8003644:	f005 f8ad 	bl	80087a2 <mg_str_n>
  while (mg_split(&buf, &k, &v, '&')) {
 8003648:	e015      	b.n	8003676 <mg_http_var+0x4e>
    if (name.len == k.len && mg_ncasecmp(name.ptr, k.ptr, k.len) == 0) {
 800364a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	429a      	cmp	r2, r3
 8003650:	d111      	bne.n	8003676 <mg_http_var+0x4e>
 8003652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003654:	6a39      	ldr	r1, [r7, #32]
 8003656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003658:	4618      	mov	r0, r3
 800365a:	f005 f8d1 	bl	8008800 <mg_ncasecmp>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d108      	bne.n	8003676 <mg_http_var+0x4e>
      result = v;
 8003664:	f107 0310 	add.w	r3, r7, #16
 8003668:	f107 0218 	add.w	r2, r7, #24
 800366c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003670:	e883 0003 	stmia.w	r3, {r0, r1}
      break;
 8003674:	e00a      	b.n	800368c <mg_http_var+0x64>
  while (mg_split(&buf, &k, &v, '&')) {
 8003676:	f107 0218 	add.w	r2, r7, #24
 800367a:	f107 0120 	add.w	r1, r7, #32
 800367e:	1d38      	adds	r0, r7, #4
 8003680:	2326      	movs	r3, #38	; 0x26
 8003682:	f005 fb1e 	bl	8008cc2 <mg_split>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1de      	bne.n	800364a <mg_http_var+0x22>
    }
  }
  return result;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	461a      	mov	r2, r3
 8003690:	f107 0310 	add.w	r3, r7, #16
 8003694:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003698:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	3728      	adds	r7, #40	; 0x28
 80036a0:	46bd      	mov	sp, r7
 80036a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036a6:	b002      	add	sp, #8
 80036a8:	4770      	bx	lr

080036aa <mg_http_get_var>:

int mg_http_get_var(const struct mg_str *buf, const char *name, char *dst,
                    size_t dst_len) {
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b08c      	sub	sp, #48	; 0x30
 80036ae:	af02      	add	r7, sp, #8
 80036b0:	60f8      	str	r0, [r7, #12]
 80036b2:	60b9      	str	r1, [r7, #8]
 80036b4:	607a      	str	r2, [r7, #4]
 80036b6:	603b      	str	r3, [r7, #0]
  int len;
  if (dst == NULL || dst_len == 0) {
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d002      	beq.n	80036c4 <mg_http_get_var+0x1a>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d103      	bne.n	80036cc <mg_http_get_var+0x22>
    len = -2;  // Bad destination
 80036c4:	f06f 0301 	mvn.w	r3, #1
 80036c8:	627b      	str	r3, [r7, #36]	; 0x24
 80036ca:	e036      	b.n	800373a <mg_http_get_var+0x90>
  } else if (buf->ptr == NULL || name == NULL || buf->len == 0) {
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d006      	beq.n	80036e2 <mg_http_get_var+0x38>
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <mg_http_get_var+0x38>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d106      	bne.n	80036f0 <mg_http_get_var+0x46>
    len = -1;  // Bad source
 80036e2:	f04f 33ff 	mov.w	r3, #4294967295
 80036e6:	627b      	str	r3, [r7, #36]	; 0x24
    dst[0] = '\0';
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	701a      	strb	r2, [r3, #0]
 80036ee:	e024      	b.n	800373a <mg_http_get_var+0x90>
  } else {
    struct mg_str v = mg_http_var(*buf, mg_str(name));
 80036f0:	f107 031c 	add.w	r3, r7, #28
 80036f4:	68b9      	ldr	r1, [r7, #8]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f005 f836 	bl	8008768 <mg_str_s>
 80036fc:	f107 0014 	add.w	r0, r7, #20
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	6a3b      	ldr	r3, [r7, #32]
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	ca06      	ldmia	r2, {r1, r2}
 800370a:	f7ff ff8d 	bl	8003628 <mg_http_var>
    if (v.ptr == NULL) {
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d103      	bne.n	800371c <mg_http_get_var+0x72>
      len = -4;  // Name does not exist
 8003714:	f06f 0303 	mvn.w	r3, #3
 8003718:	627b      	str	r3, [r7, #36]	; 0x24
 800371a:	e00e      	b.n	800373a <mg_http_get_var+0x90>
    } else {
      len = mg_url_decode(v.ptr, v.len, dst, dst_len, 1);
 800371c:	6978      	ldr	r0, [r7, #20]
 800371e:	69b9      	ldr	r1, [r7, #24]
 8003720:	2301      	movs	r3, #1
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	f000 f82e 	bl	8003788 <mg_url_decode>
 800372c:	6278      	str	r0, [r7, #36]	; 0x24
      if (len < 0) len = -3;  // Failed to decode
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	2b00      	cmp	r3, #0
 8003732:	da02      	bge.n	800373a <mg_http_get_var+0x90>
 8003734:	f06f 0302 	mvn.w	r3, #2
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  return len;
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800373c:	4618      	mov	r0, r3
 800373e:	3728      	adds	r7, #40	; 0x28
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <isx>:

static bool isx(int c) {
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b2f      	cmp	r3, #47	; 0x2f
 8003750:	dd02      	ble.n	8003758 <isx+0x14>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b39      	cmp	r3, #57	; 0x39
 8003756:	dd0b      	ble.n	8003770 <isx+0x2c>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b60      	cmp	r3, #96	; 0x60
 800375c:	dd02      	ble.n	8003764 <isx+0x20>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b66      	cmp	r3, #102	; 0x66
 8003762:	dd05      	ble.n	8003770 <isx+0x2c>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b40      	cmp	r3, #64	; 0x40
 8003768:	dd04      	ble.n	8003774 <isx+0x30>
         (c >= 'A' && c <= 'F');
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b46      	cmp	r3, #70	; 0x46
 800376e:	dc01      	bgt.n	8003774 <isx+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8003770:	2301      	movs	r3, #1
 8003772:	e000      	b.n	8003776 <isx+0x32>
 8003774:	2300      	movs	r3, #0
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	b2db      	uxtb	r3, r3
}
 800377c:	4618      	mov	r0, r3
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <mg_url_decode>:

int mg_url_decode(const char *src, size_t src_len, char *dst, size_t dst_len,
                  int is_form_url_encoded) {
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8003796:	2300      	movs	r3, #0
 8003798:	613b      	str	r3, [r7, #16]
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	617b      	str	r3, [r7, #20]
 800379e:	e04f      	b.n	8003840 <mg_url_decode+0xb8>
    if (src[i] == '%') {
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	4413      	add	r3, r2
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b25      	cmp	r3, #37	; 0x25
 80037aa:	d12c      	bne.n	8003806 <mg_url_decode+0x7e>
      // Use `i + 2 < src_len`, not `i < src_len - 2`, note small src_len
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	3302      	adds	r3, #2
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d924      	bls.n	8003800 <mg_url_decode+0x78>
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	3301      	adds	r3, #1
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	4413      	add	r3, r2
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff ffbf 	bl	8003744 <isx>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d019      	beq.n	8003800 <mg_url_decode+0x78>
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	3302      	adds	r3, #2
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	4413      	add	r3, r2
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff ffb4 	bl	8003744 <isx>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00e      	beq.n	8003800 <mg_url_decode+0x78>
        mg_unhex(src + i + 1, 2, (uint8_t *) &dst[j]);
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	3301      	adds	r3, #1
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	18d0      	adds	r0, r2, r3
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	4413      	add	r3, r2
 80037f0:	461a      	mov	r2, r3
 80037f2:	2102      	movs	r1, #2
 80037f4:	f005 fb33 	bl	8008e5e <mg_unhex>
        i += 2;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	3302      	adds	r3, #2
 80037fc:	617b      	str	r3, [r7, #20]
 80037fe:	e019      	b.n	8003834 <mg_url_decode+0xac>
      } else {
        return -1;
 8003800:	f04f 33ff 	mov.w	r3, #4294967295
 8003804:	e03a      	b.n	800387c <mg_url_decode+0xf4>
      }
    } else if (is_form_url_encoded && src[i] == '+') {
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00b      	beq.n	8003824 <mg_url_decode+0x9c>
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	4413      	add	r3, r2
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b2b      	cmp	r3, #43	; 0x2b
 8003816:	d105      	bne.n	8003824 <mg_url_decode+0x9c>
      dst[j] = ' ';
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	4413      	add	r3, r2
 800381e:	2220      	movs	r2, #32
 8003820:	701a      	strb	r2, [r3, #0]
 8003822:	e007      	b.n	8003834 <mg_url_decode+0xac>
    } else {
      dst[j] = src[i];
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	441a      	add	r2, r3
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	440b      	add	r3, r1
 8003830:	7812      	ldrb	r2, [r2, #0]
 8003832:	701a      	strb	r2, [r3, #0]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	3301      	adds	r3, #1
 8003838:	617b      	str	r3, [r7, #20]
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	3301      	adds	r3, #1
 800383e:	613b      	str	r3, [r7, #16]
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	429a      	cmp	r2, r3
 8003846:	d204      	bcs.n	8003852 <mg_url_decode+0xca>
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	3301      	adds	r3, #1
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	429a      	cmp	r2, r3
 8003850:	d8a6      	bhi.n	80037a0 <mg_url_decode+0x18>
    }
  }
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d204      	bcs.n	8003864 <mg_url_decode+0xdc>
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	4413      	add	r3, r2
 8003860:	2200      	movs	r2, #0
 8003862:	701a      	strb	r2, [r3, #0]
  return i >= src_len && j < dst_len ? (int) j : -1;
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	429a      	cmp	r2, r3
 800386a:	d305      	bcc.n	8003878 <mg_url_decode+0xf0>
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	d201      	bcs.n	8003878 <mg_url_decode+0xf0>
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	e001      	b.n	800387c <mg_url_decode+0xf4>
 8003878:	f04f 33ff 	mov.w	r3, #4294967295
}
 800387c:	4618      	mov	r0, r3
 800387e:	3718      	adds	r7, #24
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <isok>:

static bool isok(uint8_t c) {
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	71fb      	strb	r3, [r7, #7]
  return c == '\n' || c == '\r' || c >= ' ';
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	2b0a      	cmp	r3, #10
 8003892:	d005      	beq.n	80038a0 <isok+0x1c>
 8003894:	79fb      	ldrb	r3, [r7, #7]
 8003896:	2b0d      	cmp	r3, #13
 8003898:	d002      	beq.n	80038a0 <isok+0x1c>
 800389a:	79fb      	ldrb	r3, [r7, #7]
 800389c:	2b1f      	cmp	r3, #31
 800389e:	d901      	bls.n	80038a4 <isok+0x20>
 80038a0:	2301      	movs	r3, #1
 80038a2:	e000      	b.n	80038a6 <isok+0x22>
 80038a4:	2300      	movs	r3, #0
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	b2db      	uxtb	r3, r3
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <mg_http_get_request_len>:

int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < buf_len; i++) {
 80038c2:	2300      	movs	r3, #0
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	e03c      	b.n	8003942 <mg_http_get_request_len+0x8a>
    if (!isok(buf[i])) return -1;
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	4413      	add	r3, r2
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff ffd7 	bl	8003884 <isok>
 80038d6:	4603      	mov	r3, r0
 80038d8:	f083 0301 	eor.w	r3, r3, #1
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d002      	beq.n	80038e8 <mg_http_get_request_len+0x30>
 80038e2:	f04f 33ff 	mov.w	r3, #4294967295
 80038e6:	e031      	b.n	800394c <mg_http_get_request_len+0x94>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00c      	beq.n	8003908 <mg_http_get_request_len+0x50>
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4413      	add	r3, r2
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	2b0a      	cmp	r3, #10
 80038f8:	d106      	bne.n	8003908 <mg_http_get_request_len+0x50>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	3b01      	subs	r3, #1
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	4413      	add	r3, r2
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	2b0a      	cmp	r3, #10
 8003906:	d016      	beq.n	8003936 <mg_http_get_request_len+0x7e>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2b03      	cmp	r3, #3
 800390c:	d916      	bls.n	800393c <mg_http_get_request_len+0x84>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4413      	add	r3, r2
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	2b0a      	cmp	r3, #10
 8003918:	d110      	bne.n	800393c <mg_http_get_request_len+0x84>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	3b01      	subs	r3, #1
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	4413      	add	r3, r2
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	2b0d      	cmp	r3, #13
 8003926:	d109      	bne.n	800393c <mg_http_get_request_len+0x84>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	3b02      	subs	r3, #2
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	4413      	add	r3, r2
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b0a      	cmp	r3, #10
 8003934:	d102      	bne.n	800393c <mg_http_get_request_len+0x84>
      return (int) i + 1;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	3301      	adds	r3, #1
 800393a:	e007      	b.n	800394c <mg_http_get_request_len+0x94>
  for (i = 0; i < buf_len; i++) {
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	3301      	adds	r3, #1
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	429a      	cmp	r2, r3
 8003948:	d3be      	bcc.n	80038c8 <mg_http_get_request_len+0x10>
  }
  return 0;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <skip>:

static const char *skip(const char *s, const char *e, const char *d,
                        struct mg_str *v) {
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
 8003960:	603b      	str	r3, [r7, #0]
  v->ptr = s;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	601a      	str	r2, [r3, #0]
  while (s < e && *s != '\n' && strchr(d, *s) == NULL) s++;
 8003968:	e002      	b.n	8003970 <skip+0x1c>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	3301      	adds	r3, #1
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	429a      	cmp	r2, r3
 8003976:	d20c      	bcs.n	8003992 <skip+0x3e>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b0a      	cmp	r3, #10
 800397e:	d008      	beq.n	8003992 <skip+0x3e>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	4619      	mov	r1, r3
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f00f fd89 	bl	801349e <strchr>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0eb      	beq.n	800396a <skip+0x16>
  v->len = (size_t) (s - v->ptr);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	461a      	mov	r2, r3
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	605a      	str	r2, [r3, #4]
  while (s < e && strchr(d, *s) != NULL) s++;
 80039a0:	e002      	b.n	80039a8 <skip+0x54>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	3301      	adds	r3, #1
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d208      	bcs.n	80039c2 <skip+0x6e>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	4619      	mov	r1, r3
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f00f fd71 	bl	801349e <strchr>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1ef      	bne.n	80039a2 <skip+0x4e>
  return s;
 80039c2:	68fb      	ldr	r3, [r7, #12]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <mg_http_get_header>:

struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 80039d6:	6838      	ldr	r0, [r7, #0]
 80039d8:	f7fc fcfa 	bl	80003d0 <strlen>
 80039dc:	61b8      	str	r0, [r7, #24]
 80039de:	231e      	movs	r3, #30
 80039e0:	617b      	str	r3, [r7, #20]
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 80039e2:	2300      	movs	r3, #0
 80039e4:	61fb      	str	r3, [r7, #28]
 80039e6:	e01f      	b.n	8003a28 <mg_http_get_header+0x5c>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	3302      	adds	r3, #2
 80039ec:	011b      	lsls	r3, r3, #4
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	4413      	add	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	3328      	adds	r3, #40	; 0x28
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	4413      	add	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]
    if (n == k->len && mg_ncasecmp(k->ptr, name, n) == 0) return v;
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d10b      	bne.n	8003a22 <mg_http_get_header+0x56>
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	6839      	ldr	r1, [r7, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f004 fef4 	bl	8008800 <mg_ncasecmp>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <mg_http_get_header+0x56>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	e010      	b.n	8003a44 <mg_http_get_header+0x78>
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	3301      	adds	r3, #1
 8003a26:	61fb      	str	r3, [r7, #28]
 8003a28:	69fa      	ldr	r2, [r7, #28]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d208      	bcs.n	8003a42 <mg_http_get_header+0x76>
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	3302      	adds	r3, #2
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	4413      	add	r3, r2
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1d2      	bne.n	80039e8 <mg_http_get_header+0x1c>
  }
  return NULL;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3720      	adds	r7, #32
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, int max_headers) {
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b08c      	sub	sp, #48	; 0x30
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
 8003a58:	603b      	str	r3, [r7, #0]
  int i;
  for (i = 0; i < max_headers; i++) {
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a5e:	e04c      	b.n	8003afa <mg_http_parse_headers+0xae>
    struct mg_str k, v, tmp;
    const char *he = skip(s, end, "\r\n", &tmp);
 8003a60:	f107 0310 	add.w	r3, r7, #16
 8003a64:	4a2a      	ldr	r2, [pc, #168]	; (8003b10 <mg_http_parse_headers+0xc4>)
 8003a66:	68b9      	ldr	r1, [r7, #8]
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f7ff ff73 	bl	8003954 <skip>
 8003a6e:	62b8      	str	r0, [r7, #40]	; 0x28
    if (tmp.len == 0) break;  // empty header = EOH
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d046      	beq.n	8003b04 <mg_http_parse_headers+0xb8>
    s = skip(s, he, ": \r\n", &k);
 8003a76:	f107 0320 	add.w	r3, r7, #32
 8003a7a:	4a26      	ldr	r2, [pc, #152]	; (8003b14 <mg_http_parse_headers+0xc8>)
 8003a7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f7ff ff68 	bl	8003954 <skip>
 8003a84:	60f8      	str	r0, [r7, #12]
    s = skip(s, he, "\r\n", &v);
 8003a86:	f107 0318 	add.w	r3, r7, #24
 8003a8a:	4a21      	ldr	r2, [pc, #132]	; (8003b10 <mg_http_parse_headers+0xc4>)
 8003a8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f7ff ff60 	bl	8003954 <skip>
 8003a94:	60f8      	str	r0, [r7, #12]
    if (k.len == tmp.len) continue;
 8003a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d029      	beq.n	8003af2 <mg_http_parse_headers+0xa6>
    while (v.len > 0 && v.ptr[v.len - 1] == ' ') v.len--;  // Trim spaces
 8003a9e:	e002      	b.n	8003aa6 <mg_http_parse_headers+0x5a>
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	61fb      	str	r3, [r7, #28]
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d006      	beq.n	8003aba <mg_http_parse_headers+0x6e>
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	4413      	add	r3, r2
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2b20      	cmp	r3, #32
 8003ab8:	d0f2      	beq.n	8003aa0 <mg_http_parse_headers+0x54>
    if (k.len == 0) return false;                          // empty name
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <mg_http_parse_headers+0x78>
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	e021      	b.n	8003b08 <mg_http_parse_headers+0xbc>
    // MG_INFO(("--HH [%.*s] [%.*s] [%.*s]", (int) tmp.len - 1, tmp.ptr,
    //(int) k.len, k.ptr, (int) v.len, v.ptr));
    h[i].name = k;
 8003ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	4413      	add	r3, r2
 8003acc:	461a      	mov	r2, r3
 8003ace:	f107 0320 	add.w	r3, r7, #32
 8003ad2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003ad6:	e882 0003 	stmia.w	r2, {r0, r1}
    h[i].value = v;
 8003ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	3308      	adds	r3, #8
 8003ae4:	f107 0218 	add.w	r2, r7, #24
 8003ae8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003aec:	e883 0003 	stmia.w	r3, {r0, r1}
 8003af0:	e000      	b.n	8003af4 <mg_http_parse_headers+0xa8>
    if (k.len == tmp.len) continue;
 8003af2:	bf00      	nop
  for (i = 0; i < max_headers; i++) {
 8003af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af6:	3301      	adds	r3, #1
 8003af8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003afa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	dbae      	blt.n	8003a60 <mg_http_parse_headers+0x14>
 8003b02:	e000      	b.n	8003b06 <mg_http_parse_headers+0xba>
    if (tmp.len == 0) break;  // empty header = EOH
 8003b04:	bf00      	nop
  }
  return true;
 8003b06:	2301      	movs	r3, #1
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3730      	adds	r7, #48	; 0x30
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	08014408 	.word	0x08014408
 8003b14:	0801441c 	.word	0x0801441c

08003b18 <mg_http_parse>:

int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08a      	sub	sp, #40	; 0x28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 8003b24:	68b9      	ldr	r1, [r7, #8]
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f7ff fec6 	bl	80038b8 <mg_http_get_request_len>
 8003b2c:	6278      	str	r0, [r7, #36]	; 0x24
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d003      	beq.n	8003b3c <mg_http_parse+0x24>
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	4413      	add	r3, r2
 8003b3a:	e000      	b.n	8003b3e <mg_http_parse+0x26>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	623b      	str	r3, [r7, #32]
  struct mg_str *cl;

  memset(hm, 0, sizeof(*hm));
 8003b40:	f44f 7208 	mov.w	r2, #544	; 0x220
 8003b44:	2100      	movs	r1, #0
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f00f fca1 	bl	801348e <memset>
  if (req_len <= 0) return req_len;
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	dc01      	bgt.n	8003b56 <mg_http_parse+0x3e>
 8003b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b54:	e0e0      	b.n	8003d18 <mg_http_parse+0x200>

  hm->message.ptr = hm->head.ptr = s;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  hm->body.ptr = end;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a3a      	ldr	r2, [r7, #32]
 8003b6e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  hm->head.len = (size_t) req_len;
 8003b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  hm->chunk.ptr = end;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a3a      	ldr	r2, [r7, #32]
 8003b7e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  hm->message.len = hm->body.len = (size_t) ~0;  // Set body length to infinite
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f04f 32ff 	mov.w	r2, #4294967295
 8003b88:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

  // Parse request line
  s = skip(s, end, " ", &hm->method);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a61      	ldr	r2, [pc, #388]	; (8003d20 <mg_http_parse+0x208>)
 8003b9c:	6a39      	ldr	r1, [r7, #32]
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f7ff fed8 	bl	8003954 <skip>
 8003ba4:	60f8      	str	r0, [r7, #12]
  s = skip(s, end, " ", &hm->uri);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	3308      	adds	r3, #8
 8003baa:	4a5d      	ldr	r2, [pc, #372]	; (8003d20 <mg_http_parse+0x208>)
 8003bac:	6a39      	ldr	r1, [r7, #32]
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f7ff fed0 	bl	8003954 <skip>
 8003bb4:	60f8      	str	r0, [r7, #12]
  s = skip(s, end, "\r\n", &hm->proto);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3318      	adds	r3, #24
 8003bba:	4a5a      	ldr	r2, [pc, #360]	; (8003d24 <mg_http_parse+0x20c>)
 8003bbc:	6a39      	ldr	r1, [r7, #32]
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f7ff fec8 	bl	8003954 <skip>
 8003bc4:	60f8      	str	r0, [r7, #12]

  // Sanity check. Allow protocol/reason to be empty
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <mg_http_parse+0xbe>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d102      	bne.n	8003bdc <mg_http_parse+0xc4>
 8003bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bda:	e09d      	b.n	8003d18 <mg_http_parse+0x200>

  // If URI contains '?' character, setup query string
  if ((qs = (const char *) memchr(hm->uri.ptr, '?', hm->uri.len)) != NULL) {
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6898      	ldr	r0, [r3, #8]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	461a      	mov	r2, r3
 8003be6:	213f      	movs	r1, #63	; 0x3f
 8003be8:	f7fc fba2 	bl	8000330 <memchr>
 8003bec:	61f8      	str	r0, [r7, #28]
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d015      	beq.n	8003c20 <mg_http_parse+0x108>
    hm->query.ptr = qs + 1;
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	611a      	str	r2, [r3, #16]
    hm->query.len = (size_t) (&hm->uri.ptr[hm->uri.len] - (qs + 1));
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	441a      	add	r2, r3
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	615a      	str	r2, [r3, #20]
    hm->uri.len = (size_t) (qs - hm->uri.ptr);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	69fa      	ldr	r2, [r7, #28]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	60da      	str	r2, [r3, #12]
  }

  if (!mg_http_parse_headers(s, end, hm->headers,
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f103 0220 	add.w	r2, r3, #32
 8003c26:	231e      	movs	r3, #30
 8003c28:	6a39      	ldr	r1, [r7, #32]
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f7ff ff0e 	bl	8003a4c <mg_http_parse_headers>
 8003c30:	4603      	mov	r3, r0
 8003c32:	f083 0301 	eor.w	r3, r3, #1
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d002      	beq.n	8003c42 <mg_http_parse+0x12a>
                             sizeof(hm->headers) / sizeof(hm->headers[0])))
    return -1;  // error when parsing
 8003c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c40:	e06a      	b.n	8003d18 <mg_http_parse+0x200>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 8003c42:	4939      	ldr	r1, [pc, #228]	; (8003d28 <mg_http_parse+0x210>)
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7ff fec1 	bl	80039cc <mg_http_get_header>
 8003c4a:	61b8      	str	r0, [r7, #24]
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d018      	beq.n	8003c84 <mg_http_parse+0x16c>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f503 7201 	add.w	r2, r3, #516	; 0x204
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003c5e:	f7ff fc4f 	bl	8003500 <mg_to_size_t>
 8003c62:	4603      	mov	r3, r0
 8003c64:	f083 0301 	eor.w	r3, r3, #1
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <mg_http_parse+0x15c>
 8003c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c72:	e051      	b.n	8003d18 <mg_http_parse+0x200>
    hm->message.len = (size_t) req_len + hm->body.len;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	441a      	add	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  // Therefore, if Content-Length is not specified and methods are
  // not one of PUT or POST, set body length to 0.
  //
  // So, if it is HTTP request, and Content-Length is not set,
  // and method is not (PUT or POST) then reset body length to zero.
  is_response = mg_ncasecmp(hm->method.ptr, "HTTP/", 5) == 0;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2205      	movs	r2, #5
 8003c8a:	4928      	ldr	r1, [pc, #160]	; (8003d2c <mg_http_parse+0x214>)
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f004 fdb7 	bl	8008800 <mg_ncasecmp>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	bf0c      	ite	eq
 8003c98:	2301      	moveq	r3, #1
 8003c9a:	2300      	movne	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	617b      	str	r3, [r7, #20]
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003caa:	d11a      	bne.n	8003ce2 <mg_http_parse+0x1ca>
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d117      	bne.n	8003ce2 <mg_http_parse+0x1ca>
      mg_vcasecmp(&hm->method, "PUT") != 0 &&
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	491e      	ldr	r1, [pc, #120]	; (8003d30 <mg_http_parse+0x218>)
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f004 fdf4 	bl	80088a4 <mg_vcasecmp>
 8003cbc:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00f      	beq.n	8003ce2 <mg_http_parse+0x1ca>
      mg_vcasecmp(&hm->method, "POST") != 0) {
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	491b      	ldr	r1, [pc, #108]	; (8003d34 <mg_http_parse+0x21c>)
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f004 fdec 	bl	80088a4 <mg_vcasecmp>
 8003ccc:	4603      	mov	r3, r0
      mg_vcasecmp(&hm->method, "PUT") != 0 &&
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d007      	beq.n	8003ce2 <mg_http_parse+0x1ca>
    hm->body.len = 0;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hm->message.len = (size_t) req_len;
 8003cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  // The 204 (No content) responses also have 0 body length
  if (hm->body.len == (size_t) ~0 && is_response &&
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cec:	d113      	bne.n	8003d16 <mg_http_parse+0x1fe>
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d010      	beq.n	8003d16 <mg_http_parse+0x1fe>
      mg_vcasecmp(&hm->uri, "204") == 0) {
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3308      	adds	r3, #8
 8003cf8:	490f      	ldr	r1, [pc, #60]	; (8003d38 <mg_http_parse+0x220>)
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f004 fdd2 	bl	80088a4 <mg_vcasecmp>
 8003d00:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && is_response &&
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d107      	bne.n	8003d16 <mg_http_parse+0x1fe>
    hm->body.len = 0;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hm->message.len = (size_t) req_len;
 8003d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  return req_len;
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3728      	adds	r7, #40	; 0x28
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	08014424 	.word	0x08014424
 8003d24:	08014408 	.word	0x08014408
 8003d28:	08014428 	.word	0x08014428
 8003d2c:	08014438 	.word	0x08014438
 8003d30:	08014440 	.word	0x08014440
 8003d34:	08014444 	.word	0x08014444
 8003d38:	0801444c 	.word	0x0801444c

08003d3c <mg_http_status_code_str>:
  mg_send(c, "\r\n", 2);
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  switch (status_code) {
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3b64      	subs	r3, #100	; 0x64
 8003d48:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	f200 8469 	bhi.w	8004624 <mg_http_status_code_str+0x8e8>
 8003d52:	a101      	add	r1, pc, #4	; (adr r1, 8003d58 <mg_http_status_code_str+0x1c>)
 8003d54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d58:	08004529 	.word	0x08004529
 8003d5c:	0800452d 	.word	0x0800452d
 8003d60:	08004531 	.word	0x08004531
 8003d64:	08004625 	.word	0x08004625
 8003d68:	08004625 	.word	0x08004625
 8003d6c:	08004625 	.word	0x08004625
 8003d70:	08004625 	.word	0x08004625
 8003d74:	08004625 	.word	0x08004625
 8003d78:	08004625 	.word	0x08004625
 8003d7c:	08004625 	.word	0x08004625
 8003d80:	08004625 	.word	0x08004625
 8003d84:	08004625 	.word	0x08004625
 8003d88:	08004625 	.word	0x08004625
 8003d8c:	08004625 	.word	0x08004625
 8003d90:	08004625 	.word	0x08004625
 8003d94:	08004625 	.word	0x08004625
 8003d98:	08004625 	.word	0x08004625
 8003d9c:	08004625 	.word	0x08004625
 8003da0:	08004625 	.word	0x08004625
 8003da4:	08004625 	.word	0x08004625
 8003da8:	08004625 	.word	0x08004625
 8003dac:	08004625 	.word	0x08004625
 8003db0:	08004625 	.word	0x08004625
 8003db4:	08004625 	.word	0x08004625
 8003db8:	08004625 	.word	0x08004625
 8003dbc:	08004625 	.word	0x08004625
 8003dc0:	08004625 	.word	0x08004625
 8003dc4:	08004625 	.word	0x08004625
 8003dc8:	08004625 	.word	0x08004625
 8003dcc:	08004625 	.word	0x08004625
 8003dd0:	08004625 	.word	0x08004625
 8003dd4:	08004625 	.word	0x08004625
 8003dd8:	08004625 	.word	0x08004625
 8003ddc:	08004625 	.word	0x08004625
 8003de0:	08004625 	.word	0x08004625
 8003de4:	08004625 	.word	0x08004625
 8003de8:	08004625 	.word	0x08004625
 8003dec:	08004625 	.word	0x08004625
 8003df0:	08004625 	.word	0x08004625
 8003df4:	08004625 	.word	0x08004625
 8003df8:	08004625 	.word	0x08004625
 8003dfc:	08004625 	.word	0x08004625
 8003e00:	08004625 	.word	0x08004625
 8003e04:	08004625 	.word	0x08004625
 8003e08:	08004625 	.word	0x08004625
 8003e0c:	08004625 	.word	0x08004625
 8003e10:	08004625 	.word	0x08004625
 8003e14:	08004625 	.word	0x08004625
 8003e18:	08004625 	.word	0x08004625
 8003e1c:	08004625 	.word	0x08004625
 8003e20:	08004625 	.word	0x08004625
 8003e24:	08004625 	.word	0x08004625
 8003e28:	08004625 	.word	0x08004625
 8003e2c:	08004625 	.word	0x08004625
 8003e30:	08004625 	.word	0x08004625
 8003e34:	08004625 	.word	0x08004625
 8003e38:	08004625 	.word	0x08004625
 8003e3c:	08004625 	.word	0x08004625
 8003e40:	08004625 	.word	0x08004625
 8003e44:	08004625 	.word	0x08004625
 8003e48:	08004625 	.word	0x08004625
 8003e4c:	08004625 	.word	0x08004625
 8003e50:	08004625 	.word	0x08004625
 8003e54:	08004625 	.word	0x08004625
 8003e58:	08004625 	.word	0x08004625
 8003e5c:	08004625 	.word	0x08004625
 8003e60:	08004625 	.word	0x08004625
 8003e64:	08004625 	.word	0x08004625
 8003e68:	08004625 	.word	0x08004625
 8003e6c:	08004625 	.word	0x08004625
 8003e70:	08004625 	.word	0x08004625
 8003e74:	08004625 	.word	0x08004625
 8003e78:	08004625 	.word	0x08004625
 8003e7c:	08004625 	.word	0x08004625
 8003e80:	08004625 	.word	0x08004625
 8003e84:	08004625 	.word	0x08004625
 8003e88:	08004625 	.word	0x08004625
 8003e8c:	08004625 	.word	0x08004625
 8003e90:	08004625 	.word	0x08004625
 8003e94:	08004625 	.word	0x08004625
 8003e98:	08004625 	.word	0x08004625
 8003e9c:	08004625 	.word	0x08004625
 8003ea0:	08004625 	.word	0x08004625
 8003ea4:	08004625 	.word	0x08004625
 8003ea8:	08004625 	.word	0x08004625
 8003eac:	08004625 	.word	0x08004625
 8003eb0:	08004625 	.word	0x08004625
 8003eb4:	08004625 	.word	0x08004625
 8003eb8:	08004625 	.word	0x08004625
 8003ebc:	08004625 	.word	0x08004625
 8003ec0:	08004625 	.word	0x08004625
 8003ec4:	08004625 	.word	0x08004625
 8003ec8:	08004625 	.word	0x08004625
 8003ecc:	08004625 	.word	0x08004625
 8003ed0:	08004625 	.word	0x08004625
 8003ed4:	08004625 	.word	0x08004625
 8003ed8:	08004625 	.word	0x08004625
 8003edc:	08004625 	.word	0x08004625
 8003ee0:	08004625 	.word	0x08004625
 8003ee4:	08004625 	.word	0x08004625
 8003ee8:	08004535 	.word	0x08004535
 8003eec:	08004539 	.word	0x08004539
 8003ef0:	0800453d 	.word	0x0800453d
 8003ef4:	08004541 	.word	0x08004541
 8003ef8:	08004545 	.word	0x08004545
 8003efc:	08004549 	.word	0x08004549
 8003f00:	0800454d 	.word	0x0800454d
 8003f04:	08004551 	.word	0x08004551
 8003f08:	08004555 	.word	0x08004555
 8003f0c:	08004625 	.word	0x08004625
 8003f10:	08004625 	.word	0x08004625
 8003f14:	08004625 	.word	0x08004625
 8003f18:	08004625 	.word	0x08004625
 8003f1c:	08004625 	.word	0x08004625
 8003f20:	08004625 	.word	0x08004625
 8003f24:	08004625 	.word	0x08004625
 8003f28:	08004625 	.word	0x08004625
 8003f2c:	08004625 	.word	0x08004625
 8003f30:	08004625 	.word	0x08004625
 8003f34:	08004625 	.word	0x08004625
 8003f38:	08004625 	.word	0x08004625
 8003f3c:	08004625 	.word	0x08004625
 8003f40:	08004625 	.word	0x08004625
 8003f44:	08004625 	.word	0x08004625
 8003f48:	08004625 	.word	0x08004625
 8003f4c:	08004625 	.word	0x08004625
 8003f50:	08004559 	.word	0x08004559
 8003f54:	08004625 	.word	0x08004625
 8003f58:	08004625 	.word	0x08004625
 8003f5c:	08004625 	.word	0x08004625
 8003f60:	08004625 	.word	0x08004625
 8003f64:	08004625 	.word	0x08004625
 8003f68:	08004625 	.word	0x08004625
 8003f6c:	08004625 	.word	0x08004625
 8003f70:	08004625 	.word	0x08004625
 8003f74:	08004625 	.word	0x08004625
 8003f78:	08004625 	.word	0x08004625
 8003f7c:	08004625 	.word	0x08004625
 8003f80:	08004625 	.word	0x08004625
 8003f84:	08004625 	.word	0x08004625
 8003f88:	08004625 	.word	0x08004625
 8003f8c:	08004625 	.word	0x08004625
 8003f90:	08004625 	.word	0x08004625
 8003f94:	08004625 	.word	0x08004625
 8003f98:	08004625 	.word	0x08004625
 8003f9c:	08004625 	.word	0x08004625
 8003fa0:	08004625 	.word	0x08004625
 8003fa4:	08004625 	.word	0x08004625
 8003fa8:	08004625 	.word	0x08004625
 8003fac:	08004625 	.word	0x08004625
 8003fb0:	08004625 	.word	0x08004625
 8003fb4:	08004625 	.word	0x08004625
 8003fb8:	08004625 	.word	0x08004625
 8003fbc:	08004625 	.word	0x08004625
 8003fc0:	08004625 	.word	0x08004625
 8003fc4:	08004625 	.word	0x08004625
 8003fc8:	08004625 	.word	0x08004625
 8003fcc:	08004625 	.word	0x08004625
 8003fd0:	08004625 	.word	0x08004625
 8003fd4:	08004625 	.word	0x08004625
 8003fd8:	08004625 	.word	0x08004625
 8003fdc:	08004625 	.word	0x08004625
 8003fe0:	08004625 	.word	0x08004625
 8003fe4:	08004625 	.word	0x08004625
 8003fe8:	08004625 	.word	0x08004625
 8003fec:	08004625 	.word	0x08004625
 8003ff0:	08004625 	.word	0x08004625
 8003ff4:	08004625 	.word	0x08004625
 8003ff8:	08004625 	.word	0x08004625
 8003ffc:	08004625 	.word	0x08004625
 8004000:	08004625 	.word	0x08004625
 8004004:	08004625 	.word	0x08004625
 8004008:	08004625 	.word	0x08004625
 800400c:	08004625 	.word	0x08004625
 8004010:	08004625 	.word	0x08004625
 8004014:	08004625 	.word	0x08004625
 8004018:	08004625 	.word	0x08004625
 800401c:	08004625 	.word	0x08004625
 8004020:	08004625 	.word	0x08004625
 8004024:	08004625 	.word	0x08004625
 8004028:	08004625 	.word	0x08004625
 800402c:	08004625 	.word	0x08004625
 8004030:	08004625 	.word	0x08004625
 8004034:	08004625 	.word	0x08004625
 8004038:	08004625 	.word	0x08004625
 800403c:	08004625 	.word	0x08004625
 8004040:	08004625 	.word	0x08004625
 8004044:	08004625 	.word	0x08004625
 8004048:	08004625 	.word	0x08004625
 800404c:	08004625 	.word	0x08004625
 8004050:	08004625 	.word	0x08004625
 8004054:	08004625 	.word	0x08004625
 8004058:	08004625 	.word	0x08004625
 800405c:	08004625 	.word	0x08004625
 8004060:	08004625 	.word	0x08004625
 8004064:	08004625 	.word	0x08004625
 8004068:	08004625 	.word	0x08004625
 800406c:	08004625 	.word	0x08004625
 8004070:	08004625 	.word	0x08004625
 8004074:	08004625 	.word	0x08004625
 8004078:	0800455d 	.word	0x0800455d
 800407c:	08004561 	.word	0x08004561
 8004080:	08004565 	.word	0x08004565
 8004084:	08004569 	.word	0x08004569
 8004088:	0800456d 	.word	0x0800456d
 800408c:	08004571 	.word	0x08004571
 8004090:	08004625 	.word	0x08004625
 8004094:	08004575 	.word	0x08004575
 8004098:	08004579 	.word	0x08004579
 800409c:	08004625 	.word	0x08004625
 80040a0:	08004625 	.word	0x08004625
 80040a4:	08004625 	.word	0x08004625
 80040a8:	08004625 	.word	0x08004625
 80040ac:	08004625 	.word	0x08004625
 80040b0:	08004625 	.word	0x08004625
 80040b4:	08004625 	.word	0x08004625
 80040b8:	08004625 	.word	0x08004625
 80040bc:	08004625 	.word	0x08004625
 80040c0:	08004625 	.word	0x08004625
 80040c4:	08004625 	.word	0x08004625
 80040c8:	08004625 	.word	0x08004625
 80040cc:	08004625 	.word	0x08004625
 80040d0:	08004625 	.word	0x08004625
 80040d4:	08004625 	.word	0x08004625
 80040d8:	08004625 	.word	0x08004625
 80040dc:	08004625 	.word	0x08004625
 80040e0:	08004625 	.word	0x08004625
 80040e4:	08004625 	.word	0x08004625
 80040e8:	08004625 	.word	0x08004625
 80040ec:	08004625 	.word	0x08004625
 80040f0:	08004625 	.word	0x08004625
 80040f4:	08004625 	.word	0x08004625
 80040f8:	08004625 	.word	0x08004625
 80040fc:	08004625 	.word	0x08004625
 8004100:	08004625 	.word	0x08004625
 8004104:	08004625 	.word	0x08004625
 8004108:	08004625 	.word	0x08004625
 800410c:	08004625 	.word	0x08004625
 8004110:	08004625 	.word	0x08004625
 8004114:	08004625 	.word	0x08004625
 8004118:	08004625 	.word	0x08004625
 800411c:	08004625 	.word	0x08004625
 8004120:	08004625 	.word	0x08004625
 8004124:	08004625 	.word	0x08004625
 8004128:	08004625 	.word	0x08004625
 800412c:	08004625 	.word	0x08004625
 8004130:	08004625 	.word	0x08004625
 8004134:	08004625 	.word	0x08004625
 8004138:	08004625 	.word	0x08004625
 800413c:	08004625 	.word	0x08004625
 8004140:	08004625 	.word	0x08004625
 8004144:	08004625 	.word	0x08004625
 8004148:	08004625 	.word	0x08004625
 800414c:	08004625 	.word	0x08004625
 8004150:	08004625 	.word	0x08004625
 8004154:	08004625 	.word	0x08004625
 8004158:	08004625 	.word	0x08004625
 800415c:	08004625 	.word	0x08004625
 8004160:	08004625 	.word	0x08004625
 8004164:	08004625 	.word	0x08004625
 8004168:	08004625 	.word	0x08004625
 800416c:	08004625 	.word	0x08004625
 8004170:	08004625 	.word	0x08004625
 8004174:	08004625 	.word	0x08004625
 8004178:	08004625 	.word	0x08004625
 800417c:	08004625 	.word	0x08004625
 8004180:	08004625 	.word	0x08004625
 8004184:	08004625 	.word	0x08004625
 8004188:	08004625 	.word	0x08004625
 800418c:	08004625 	.word	0x08004625
 8004190:	08004625 	.word	0x08004625
 8004194:	08004625 	.word	0x08004625
 8004198:	08004625 	.word	0x08004625
 800419c:	08004625 	.word	0x08004625
 80041a0:	08004625 	.word	0x08004625
 80041a4:	08004625 	.word	0x08004625
 80041a8:	08004625 	.word	0x08004625
 80041ac:	08004625 	.word	0x08004625
 80041b0:	08004625 	.word	0x08004625
 80041b4:	08004625 	.word	0x08004625
 80041b8:	08004625 	.word	0x08004625
 80041bc:	08004625 	.word	0x08004625
 80041c0:	08004625 	.word	0x08004625
 80041c4:	08004625 	.word	0x08004625
 80041c8:	08004625 	.word	0x08004625
 80041cc:	08004625 	.word	0x08004625
 80041d0:	08004625 	.word	0x08004625
 80041d4:	08004625 	.word	0x08004625
 80041d8:	08004625 	.word	0x08004625
 80041dc:	08004625 	.word	0x08004625
 80041e0:	08004625 	.word	0x08004625
 80041e4:	08004625 	.word	0x08004625
 80041e8:	08004625 	.word	0x08004625
 80041ec:	08004625 	.word	0x08004625
 80041f0:	08004625 	.word	0x08004625
 80041f4:	08004625 	.word	0x08004625
 80041f8:	08004625 	.word	0x08004625
 80041fc:	08004625 	.word	0x08004625
 8004200:	08004625 	.word	0x08004625
 8004204:	08004625 	.word	0x08004625
 8004208:	0800457d 	.word	0x0800457d
 800420c:	08004581 	.word	0x08004581
 8004210:	08004585 	.word	0x08004585
 8004214:	08004589 	.word	0x08004589
 8004218:	0800458d 	.word	0x0800458d
 800421c:	08004591 	.word	0x08004591
 8004220:	08004595 	.word	0x08004595
 8004224:	08004599 	.word	0x08004599
 8004228:	0800459d 	.word	0x0800459d
 800422c:	080045a1 	.word	0x080045a1
 8004230:	080045a5 	.word	0x080045a5
 8004234:	080045a9 	.word	0x080045a9
 8004238:	080045ad 	.word	0x080045ad
 800423c:	080045b1 	.word	0x080045b1
 8004240:	080045b5 	.word	0x080045b5
 8004244:	080045b9 	.word	0x080045b9
 8004248:	080045bd 	.word	0x080045bd
 800424c:	080045c1 	.word	0x080045c1
 8004250:	080045c5 	.word	0x080045c5
 8004254:	08004625 	.word	0x08004625
 8004258:	08004625 	.word	0x08004625
 800425c:	080045c9 	.word	0x080045c9
 8004260:	080045cd 	.word	0x080045cd
 8004264:	080045d1 	.word	0x080045d1
 8004268:	080045d5 	.word	0x080045d5
 800426c:	08004625 	.word	0x08004625
 8004270:	080045d9 	.word	0x080045d9
 8004274:	08004625 	.word	0x08004625
 8004278:	080045dd 	.word	0x080045dd
 800427c:	080045e1 	.word	0x080045e1
 8004280:	08004625 	.word	0x08004625
 8004284:	080045e5 	.word	0x080045e5
 8004288:	08004625 	.word	0x08004625
 800428c:	08004625 	.word	0x08004625
 8004290:	08004625 	.word	0x08004625
 8004294:	08004625 	.word	0x08004625
 8004298:	08004625 	.word	0x08004625
 800429c:	08004625 	.word	0x08004625
 80042a0:	08004625 	.word	0x08004625
 80042a4:	08004625 	.word	0x08004625
 80042a8:	08004625 	.word	0x08004625
 80042ac:	08004625 	.word	0x08004625
 80042b0:	08004625 	.word	0x08004625
 80042b4:	08004625 	.word	0x08004625
 80042b8:	080045e9 	.word	0x080045e9
 80042bc:	08004625 	.word	0x08004625
 80042c0:	08004625 	.word	0x08004625
 80042c4:	08004625 	.word	0x08004625
 80042c8:	08004625 	.word	0x08004625
 80042cc:	08004625 	.word	0x08004625
 80042d0:	08004625 	.word	0x08004625
 80042d4:	080045ed 	.word	0x080045ed
 80042d8:	08004625 	.word	0x08004625
 80042dc:	08004625 	.word	0x08004625
 80042e0:	08004625 	.word	0x08004625
 80042e4:	08004625 	.word	0x08004625
 80042e8:	08004625 	.word	0x08004625
 80042ec:	08004625 	.word	0x08004625
 80042f0:	08004625 	.word	0x08004625
 80042f4:	08004625 	.word	0x08004625
 80042f8:	08004625 	.word	0x08004625
 80042fc:	08004625 	.word	0x08004625
 8004300:	08004625 	.word	0x08004625
 8004304:	08004625 	.word	0x08004625
 8004308:	08004625 	.word	0x08004625
 800430c:	08004625 	.word	0x08004625
 8004310:	08004625 	.word	0x08004625
 8004314:	08004625 	.word	0x08004625
 8004318:	08004625 	.word	0x08004625
 800431c:	08004625 	.word	0x08004625
 8004320:	08004625 	.word	0x08004625
 8004324:	08004625 	.word	0x08004625
 8004328:	08004625 	.word	0x08004625
 800432c:	08004625 	.word	0x08004625
 8004330:	08004625 	.word	0x08004625
 8004334:	08004625 	.word	0x08004625
 8004338:	08004625 	.word	0x08004625
 800433c:	08004625 	.word	0x08004625
 8004340:	08004625 	.word	0x08004625
 8004344:	08004625 	.word	0x08004625
 8004348:	08004625 	.word	0x08004625
 800434c:	08004625 	.word	0x08004625
 8004350:	08004625 	.word	0x08004625
 8004354:	08004625 	.word	0x08004625
 8004358:	08004625 	.word	0x08004625
 800435c:	08004625 	.word	0x08004625
 8004360:	08004625 	.word	0x08004625
 8004364:	08004625 	.word	0x08004625
 8004368:	08004625 	.word	0x08004625
 800436c:	08004625 	.word	0x08004625
 8004370:	08004625 	.word	0x08004625
 8004374:	08004625 	.word	0x08004625
 8004378:	08004625 	.word	0x08004625
 800437c:	08004625 	.word	0x08004625
 8004380:	08004625 	.word	0x08004625
 8004384:	08004625 	.word	0x08004625
 8004388:	08004625 	.word	0x08004625
 800438c:	08004625 	.word	0x08004625
 8004390:	08004625 	.word	0x08004625
 8004394:	080045f1 	.word	0x080045f1
 8004398:	080045f5 	.word	0x080045f5
 800439c:	080045f9 	.word	0x080045f9
 80043a0:	080045fd 	.word	0x080045fd
 80043a4:	08004601 	.word	0x08004601
 80043a8:	08004605 	.word	0x08004605
 80043ac:	08004609 	.word	0x08004609
 80043b0:	0800460d 	.word	0x0800460d
 80043b4:	08004611 	.word	0x08004611
 80043b8:	08004615 	.word	0x08004615
 80043bc:	08004625 	.word	0x08004625
 80043c0:	08004619 	.word	0x08004619
 80043c4:	0800461d 	.word	0x0800461d
 80043c8:	08004625 	.word	0x08004625
 80043cc:	08004625 	.word	0x08004625
 80043d0:	08004625 	.word	0x08004625
 80043d4:	08004625 	.word	0x08004625
 80043d8:	08004625 	.word	0x08004625
 80043dc:	08004625 	.word	0x08004625
 80043e0:	08004625 	.word	0x08004625
 80043e4:	08004625 	.word	0x08004625
 80043e8:	08004625 	.word	0x08004625
 80043ec:	08004625 	.word	0x08004625
 80043f0:	08004625 	.word	0x08004625
 80043f4:	08004625 	.word	0x08004625
 80043f8:	08004625 	.word	0x08004625
 80043fc:	08004625 	.word	0x08004625
 8004400:	08004625 	.word	0x08004625
 8004404:	08004625 	.word	0x08004625
 8004408:	08004625 	.word	0x08004625
 800440c:	08004625 	.word	0x08004625
 8004410:	08004625 	.word	0x08004625
 8004414:	08004625 	.word	0x08004625
 8004418:	08004625 	.word	0x08004625
 800441c:	08004625 	.word	0x08004625
 8004420:	08004625 	.word	0x08004625
 8004424:	08004625 	.word	0x08004625
 8004428:	08004625 	.word	0x08004625
 800442c:	08004625 	.word	0x08004625
 8004430:	08004625 	.word	0x08004625
 8004434:	08004625 	.word	0x08004625
 8004438:	08004625 	.word	0x08004625
 800443c:	08004625 	.word	0x08004625
 8004440:	08004625 	.word	0x08004625
 8004444:	08004625 	.word	0x08004625
 8004448:	08004625 	.word	0x08004625
 800444c:	08004625 	.word	0x08004625
 8004450:	08004625 	.word	0x08004625
 8004454:	08004625 	.word	0x08004625
 8004458:	08004625 	.word	0x08004625
 800445c:	08004625 	.word	0x08004625
 8004460:	08004625 	.word	0x08004625
 8004464:	08004625 	.word	0x08004625
 8004468:	08004625 	.word	0x08004625
 800446c:	08004625 	.word	0x08004625
 8004470:	08004625 	.word	0x08004625
 8004474:	08004625 	.word	0x08004625
 8004478:	08004625 	.word	0x08004625
 800447c:	08004625 	.word	0x08004625
 8004480:	08004625 	.word	0x08004625
 8004484:	08004625 	.word	0x08004625
 8004488:	08004625 	.word	0x08004625
 800448c:	08004625 	.word	0x08004625
 8004490:	08004625 	.word	0x08004625
 8004494:	08004625 	.word	0x08004625
 8004498:	08004625 	.word	0x08004625
 800449c:	08004625 	.word	0x08004625
 80044a0:	08004625 	.word	0x08004625
 80044a4:	08004625 	.word	0x08004625
 80044a8:	08004625 	.word	0x08004625
 80044ac:	08004625 	.word	0x08004625
 80044b0:	08004625 	.word	0x08004625
 80044b4:	08004625 	.word	0x08004625
 80044b8:	08004625 	.word	0x08004625
 80044bc:	08004625 	.word	0x08004625
 80044c0:	08004625 	.word	0x08004625
 80044c4:	08004625 	.word	0x08004625
 80044c8:	08004625 	.word	0x08004625
 80044cc:	08004625 	.word	0x08004625
 80044d0:	08004625 	.word	0x08004625
 80044d4:	08004625 	.word	0x08004625
 80044d8:	08004625 	.word	0x08004625
 80044dc:	08004625 	.word	0x08004625
 80044e0:	08004625 	.word	0x08004625
 80044e4:	08004625 	.word	0x08004625
 80044e8:	08004625 	.word	0x08004625
 80044ec:	08004625 	.word	0x08004625
 80044f0:	08004625 	.word	0x08004625
 80044f4:	08004625 	.word	0x08004625
 80044f8:	08004625 	.word	0x08004625
 80044fc:	08004625 	.word	0x08004625
 8004500:	08004625 	.word	0x08004625
 8004504:	08004625 	.word	0x08004625
 8004508:	08004625 	.word	0x08004625
 800450c:	08004625 	.word	0x08004625
 8004510:	08004625 	.word	0x08004625
 8004514:	08004625 	.word	0x08004625
 8004518:	08004625 	.word	0x08004625
 800451c:	08004625 	.word	0x08004625
 8004520:	08004625 	.word	0x08004625
 8004524:	08004621 	.word	0x08004621
    case 100: return "Continue";
 8004528:	4b42      	ldr	r3, [pc, #264]	; (8004634 <mg_http_status_code_str+0x8f8>)
 800452a:	e07c      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 101: return "Switching Protocols";
 800452c:	4b42      	ldr	r3, [pc, #264]	; (8004638 <mg_http_status_code_str+0x8fc>)
 800452e:	e07a      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 102: return "Processing";
 8004530:	4b42      	ldr	r3, [pc, #264]	; (800463c <mg_http_status_code_str+0x900>)
 8004532:	e078      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 200: return "OK";
 8004534:	4b42      	ldr	r3, [pc, #264]	; (8004640 <mg_http_status_code_str+0x904>)
 8004536:	e076      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 201: return "Created";
 8004538:	4b42      	ldr	r3, [pc, #264]	; (8004644 <mg_http_status_code_str+0x908>)
 800453a:	e074      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 202: return "Accepted";
 800453c:	4b42      	ldr	r3, [pc, #264]	; (8004648 <mg_http_status_code_str+0x90c>)
 800453e:	e072      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 203: return "Non-authoritative Information";
 8004540:	4b42      	ldr	r3, [pc, #264]	; (800464c <mg_http_status_code_str+0x910>)
 8004542:	e070      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 204: return "No Content";
 8004544:	4b42      	ldr	r3, [pc, #264]	; (8004650 <mg_http_status_code_str+0x914>)
 8004546:	e06e      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 205: return "Reset Content";
 8004548:	4b42      	ldr	r3, [pc, #264]	; (8004654 <mg_http_status_code_str+0x918>)
 800454a:	e06c      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 206: return "Partial Content";
 800454c:	4b42      	ldr	r3, [pc, #264]	; (8004658 <mg_http_status_code_str+0x91c>)
 800454e:	e06a      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 207: return "Multi-Status";
 8004550:	4b42      	ldr	r3, [pc, #264]	; (800465c <mg_http_status_code_str+0x920>)
 8004552:	e068      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 208: return "Already Reported";
 8004554:	4b42      	ldr	r3, [pc, #264]	; (8004660 <mg_http_status_code_str+0x924>)
 8004556:	e066      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 226: return "IM Used";
 8004558:	4b42      	ldr	r3, [pc, #264]	; (8004664 <mg_http_status_code_str+0x928>)
 800455a:	e064      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 300: return "Multiple Choices";
 800455c:	4b42      	ldr	r3, [pc, #264]	; (8004668 <mg_http_status_code_str+0x92c>)
 800455e:	e062      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 301: return "Moved Permanently";
 8004560:	4b42      	ldr	r3, [pc, #264]	; (800466c <mg_http_status_code_str+0x930>)
 8004562:	e060      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 302: return "Found";
 8004564:	4b42      	ldr	r3, [pc, #264]	; (8004670 <mg_http_status_code_str+0x934>)
 8004566:	e05e      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 303: return "See Other";
 8004568:	4b42      	ldr	r3, [pc, #264]	; (8004674 <mg_http_status_code_str+0x938>)
 800456a:	e05c      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 304: return "Not Modified";
 800456c:	4b42      	ldr	r3, [pc, #264]	; (8004678 <mg_http_status_code_str+0x93c>)
 800456e:	e05a      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 305: return "Use Proxy";
 8004570:	4b42      	ldr	r3, [pc, #264]	; (800467c <mg_http_status_code_str+0x940>)
 8004572:	e058      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 307: return "Temporary Redirect";
 8004574:	4b42      	ldr	r3, [pc, #264]	; (8004680 <mg_http_status_code_str+0x944>)
 8004576:	e056      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 308: return "Permanent Redirect";
 8004578:	4b42      	ldr	r3, [pc, #264]	; (8004684 <mg_http_status_code_str+0x948>)
 800457a:	e054      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 400: return "Bad Request";
 800457c:	4b42      	ldr	r3, [pc, #264]	; (8004688 <mg_http_status_code_str+0x94c>)
 800457e:	e052      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 401: return "Unauthorized";
 8004580:	4b42      	ldr	r3, [pc, #264]	; (800468c <mg_http_status_code_str+0x950>)
 8004582:	e050      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 402: return "Payment Required";
 8004584:	4b42      	ldr	r3, [pc, #264]	; (8004690 <mg_http_status_code_str+0x954>)
 8004586:	e04e      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 403: return "Forbidden";
 8004588:	4b42      	ldr	r3, [pc, #264]	; (8004694 <mg_http_status_code_str+0x958>)
 800458a:	e04c      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 404: return "Not Found";
 800458c:	4b42      	ldr	r3, [pc, #264]	; (8004698 <mg_http_status_code_str+0x95c>)
 800458e:	e04a      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 405: return "Method Not Allowed";
 8004590:	4b42      	ldr	r3, [pc, #264]	; (800469c <mg_http_status_code_str+0x960>)
 8004592:	e048      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 406: return "Not Acceptable";
 8004594:	4b42      	ldr	r3, [pc, #264]	; (80046a0 <mg_http_status_code_str+0x964>)
 8004596:	e046      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 407: return "Proxy Authentication Required";
 8004598:	4b42      	ldr	r3, [pc, #264]	; (80046a4 <mg_http_status_code_str+0x968>)
 800459a:	e044      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 408: return "Request Timeout";
 800459c:	4b42      	ldr	r3, [pc, #264]	; (80046a8 <mg_http_status_code_str+0x96c>)
 800459e:	e042      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 409: return "Conflict";
 80045a0:	4b42      	ldr	r3, [pc, #264]	; (80046ac <mg_http_status_code_str+0x970>)
 80045a2:	e040      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 410: return "Gone";
 80045a4:	4b42      	ldr	r3, [pc, #264]	; (80046b0 <mg_http_status_code_str+0x974>)
 80045a6:	e03e      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 411: return "Length Required";
 80045a8:	4b42      	ldr	r3, [pc, #264]	; (80046b4 <mg_http_status_code_str+0x978>)
 80045aa:	e03c      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 412: return "Precondition Failed";
 80045ac:	4b42      	ldr	r3, [pc, #264]	; (80046b8 <mg_http_status_code_str+0x97c>)
 80045ae:	e03a      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 413: return "Payload Too Large";
 80045b0:	4b42      	ldr	r3, [pc, #264]	; (80046bc <mg_http_status_code_str+0x980>)
 80045b2:	e038      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 414: return "Request-URI Too Long";
 80045b4:	4b42      	ldr	r3, [pc, #264]	; (80046c0 <mg_http_status_code_str+0x984>)
 80045b6:	e036      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 415: return "Unsupported Media Type";
 80045b8:	4b42      	ldr	r3, [pc, #264]	; (80046c4 <mg_http_status_code_str+0x988>)
 80045ba:	e034      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 416: return "Requested Range Not Satisfiable";
 80045bc:	4b42      	ldr	r3, [pc, #264]	; (80046c8 <mg_http_status_code_str+0x98c>)
 80045be:	e032      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 417: return "Expectation Failed";
 80045c0:	4b42      	ldr	r3, [pc, #264]	; (80046cc <mg_http_status_code_str+0x990>)
 80045c2:	e030      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 418: return "I'm a teapot";
 80045c4:	4b42      	ldr	r3, [pc, #264]	; (80046d0 <mg_http_status_code_str+0x994>)
 80045c6:	e02e      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 421: return "Misdirected Request";
 80045c8:	4b42      	ldr	r3, [pc, #264]	; (80046d4 <mg_http_status_code_str+0x998>)
 80045ca:	e02c      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 422: return "Unprocessable Entity";
 80045cc:	4b42      	ldr	r3, [pc, #264]	; (80046d8 <mg_http_status_code_str+0x99c>)
 80045ce:	e02a      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 423: return "Locked";
 80045d0:	4b42      	ldr	r3, [pc, #264]	; (80046dc <mg_http_status_code_str+0x9a0>)
 80045d2:	e028      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 424: return "Failed Dependency";
 80045d4:	4b42      	ldr	r3, [pc, #264]	; (80046e0 <mg_http_status_code_str+0x9a4>)
 80045d6:	e026      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 426: return "Upgrade Required";
 80045d8:	4b42      	ldr	r3, [pc, #264]	; (80046e4 <mg_http_status_code_str+0x9a8>)
 80045da:	e024      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 428: return "Precondition Required";
 80045dc:	4b42      	ldr	r3, [pc, #264]	; (80046e8 <mg_http_status_code_str+0x9ac>)
 80045de:	e022      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 429: return "Too Many Requests";
 80045e0:	4b42      	ldr	r3, [pc, #264]	; (80046ec <mg_http_status_code_str+0x9b0>)
 80045e2:	e020      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 431: return "Request Header Fields Too Large";
 80045e4:	4b42      	ldr	r3, [pc, #264]	; (80046f0 <mg_http_status_code_str+0x9b4>)
 80045e6:	e01e      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 444: return "Connection Closed Without Response";
 80045e8:	4b42      	ldr	r3, [pc, #264]	; (80046f4 <mg_http_status_code_str+0x9b8>)
 80045ea:	e01c      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 451: return "Unavailable For Legal Reasons";
 80045ec:	4b42      	ldr	r3, [pc, #264]	; (80046f8 <mg_http_status_code_str+0x9bc>)
 80045ee:	e01a      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 499: return "Client Closed Request";
 80045f0:	4b42      	ldr	r3, [pc, #264]	; (80046fc <mg_http_status_code_str+0x9c0>)
 80045f2:	e018      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 500: return "Internal Server Error";
 80045f4:	4b42      	ldr	r3, [pc, #264]	; (8004700 <mg_http_status_code_str+0x9c4>)
 80045f6:	e016      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 501: return "Not Implemented";
 80045f8:	4b42      	ldr	r3, [pc, #264]	; (8004704 <mg_http_status_code_str+0x9c8>)
 80045fa:	e014      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 502: return "Bad Gateway";
 80045fc:	4b42      	ldr	r3, [pc, #264]	; (8004708 <mg_http_status_code_str+0x9cc>)
 80045fe:	e012      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 503: return "Service Unavailable";
 8004600:	4b42      	ldr	r3, [pc, #264]	; (800470c <mg_http_status_code_str+0x9d0>)
 8004602:	e010      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 504: return "Gateway Timeout";
 8004604:	4b42      	ldr	r3, [pc, #264]	; (8004710 <mg_http_status_code_str+0x9d4>)
 8004606:	e00e      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 505: return "HTTP Version Not Supported";
 8004608:	4b42      	ldr	r3, [pc, #264]	; (8004714 <mg_http_status_code_str+0x9d8>)
 800460a:	e00c      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 506: return "Variant Also Negotiates";
 800460c:	4b42      	ldr	r3, [pc, #264]	; (8004718 <mg_http_status_code_str+0x9dc>)
 800460e:	e00a      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 507: return "Insufficient Storage";
 8004610:	4b42      	ldr	r3, [pc, #264]	; (800471c <mg_http_status_code_str+0x9e0>)
 8004612:	e008      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 508: return "Loop Detected";
 8004614:	4b42      	ldr	r3, [pc, #264]	; (8004720 <mg_http_status_code_str+0x9e4>)
 8004616:	e006      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 510: return "Not Extended";
 8004618:	4b42      	ldr	r3, [pc, #264]	; (8004724 <mg_http_status_code_str+0x9e8>)
 800461a:	e004      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 511: return "Network Authentication Required";
 800461c:	4b42      	ldr	r3, [pc, #264]	; (8004728 <mg_http_status_code_str+0x9ec>)
 800461e:	e002      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    case 599: return "Network Connect Timeout Error";
 8004620:	4b42      	ldr	r3, [pc, #264]	; (800472c <mg_http_status_code_str+0x9f0>)
 8004622:	e000      	b.n	8004626 <mg_http_status_code_str+0x8ea>
    default: return "";
 8004624:	4b42      	ldr	r3, [pc, #264]	; (8004730 <mg_http_status_code_str+0x9f4>)
  }
}
 8004626:	4618      	mov	r0, r3
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	0801446c 	.word	0x0801446c
 8004638:	08014478 	.word	0x08014478
 800463c:	0801448c 	.word	0x0801448c
 8004640:	08014498 	.word	0x08014498
 8004644:	0801449c 	.word	0x0801449c
 8004648:	080144a4 	.word	0x080144a4
 800464c:	080144b0 	.word	0x080144b0
 8004650:	080144d0 	.word	0x080144d0
 8004654:	080144dc 	.word	0x080144dc
 8004658:	080144ec 	.word	0x080144ec
 800465c:	080144fc 	.word	0x080144fc
 8004660:	0801450c 	.word	0x0801450c
 8004664:	08014520 	.word	0x08014520
 8004668:	08014528 	.word	0x08014528
 800466c:	0801453c 	.word	0x0801453c
 8004670:	08014550 	.word	0x08014550
 8004674:	08014558 	.word	0x08014558
 8004678:	08014564 	.word	0x08014564
 800467c:	08014574 	.word	0x08014574
 8004680:	08014580 	.word	0x08014580
 8004684:	08014594 	.word	0x08014594
 8004688:	080145a8 	.word	0x080145a8
 800468c:	080145b4 	.word	0x080145b4
 8004690:	080145c4 	.word	0x080145c4
 8004694:	080145d8 	.word	0x080145d8
 8004698:	080145e4 	.word	0x080145e4
 800469c:	080145f0 	.word	0x080145f0
 80046a0:	08014604 	.word	0x08014604
 80046a4:	08014614 	.word	0x08014614
 80046a8:	08014634 	.word	0x08014634
 80046ac:	08014644 	.word	0x08014644
 80046b0:	08014650 	.word	0x08014650
 80046b4:	08014658 	.word	0x08014658
 80046b8:	08014668 	.word	0x08014668
 80046bc:	0801467c 	.word	0x0801467c
 80046c0:	08014690 	.word	0x08014690
 80046c4:	080146a8 	.word	0x080146a8
 80046c8:	080146c0 	.word	0x080146c0
 80046cc:	080146e0 	.word	0x080146e0
 80046d0:	080146f4 	.word	0x080146f4
 80046d4:	08014704 	.word	0x08014704
 80046d8:	08014718 	.word	0x08014718
 80046dc:	08014730 	.word	0x08014730
 80046e0:	08014738 	.word	0x08014738
 80046e4:	0801474c 	.word	0x0801474c
 80046e8:	08014760 	.word	0x08014760
 80046ec:	08014778 	.word	0x08014778
 80046f0:	0801478c 	.word	0x0801478c
 80046f4:	080147ac 	.word	0x080147ac
 80046f8:	080147d0 	.word	0x080147d0
 80046fc:	080147f0 	.word	0x080147f0
 8004700:	08014808 	.word	0x08014808
 8004704:	08014820 	.word	0x08014820
 8004708:	08014830 	.word	0x08014830
 800470c:	0801483c 	.word	0x0801483c
 8004710:	08014850 	.word	0x08014850
 8004714:	08014860 	.word	0x08014860
 8004718:	0801487c 	.word	0x0801487c
 800471c:	08014894 	.word	0x08014894
 8004720:	080148ac 	.word	0x080148ac
 8004724:	080148bc 	.word	0x080148bc
 8004728:	080148cc 	.word	0x080148cc
 800472c:	080148ec 	.word	0x080148ec
 8004730:	0801490c 	.word	0x0801490c

08004734 <mg_http_reply>:
// clang-format on

void mg_http_reply(struct mg_connection *c, int code, const char *headers,
                   const char *fmt, ...) {
 8004734:	b408      	push	{r3}
 8004736:	b580      	push	{r7, lr}
 8004738:	b08b      	sub	sp, #44	; 0x2c
 800473a:	af02      	add	r7, sp, #8
 800473c:	60f8      	str	r0, [r7, #12]
 800473e:	60b9      	str	r1, [r7, #8]
 8004740:	607a      	str	r2, [r7, #4]
  va_list ap;
  size_t len;
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 8004742:	68b8      	ldr	r0, [r7, #8]
 8004744:	f7ff fafa 	bl	8003d3c <mg_http_status_code_str>
 8004748:	4602      	mov	r2, r0
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <mg_http_reply+0x20>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	e000      	b.n	8004756 <mg_http_reply+0x22>
 8004754:	4b1f      	ldr	r3, [pc, #124]	; (80047d4 <mg_http_reply+0xa0>)
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	4613      	mov	r3, r2
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	491e      	ldr	r1, [pc, #120]	; (80047d8 <mg_http_reply+0xa4>)
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f002 fd52 	bl	8007208 <mg_printf>
            mg_http_status_code_str(code), headers == NULL ? "" : headers);
  len = c->send.len;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004768:	61fb      	str	r3, [r7, #28]
  va_start(ap, fmt);
 800476a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800476e:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8004776:	f107 0314 	add.w	r3, r7, #20
 800477a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800477c:	4817      	ldr	r0, [pc, #92]	; (80047dc <mg_http_reply+0xa8>)
 800477e:	f7fe f8d3 	bl	8002928 <mg_vxprintf>
  va_end(ap);
  if (c->send.len > 16) {
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004786:	2b10      	cmp	r3, #16
 8004788:	d916      	bls.n	80047b8 <mg_http_reply+0x84>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	3b0f      	subs	r3, #15
 8004792:	18d0      	adds	r0, r2, r3
                           (unsigned long) (c->send.len - len));
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	1ad3      	subs	r3, r2, r3
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 800479c:	4a10      	ldr	r2, [pc, #64]	; (80047e0 <mg_http_reply+0xac>)
 800479e:	210b      	movs	r1, #11
 80047a0:	f003 fa08 	bl	8007bb4 <mg_snprintf>
 80047a4:	61b8      	str	r0, [r7, #24]
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047aa:	69f9      	ldr	r1, [r7, #28]
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	440b      	add	r3, r1
 80047b0:	3b0f      	subs	r3, #15
 80047b2:	4413      	add	r3, r2
 80047b4:	2220      	movs	r2, #32
 80047b6:	701a      	strb	r2, [r3, #0]
  }
  c->is_resp = 0;
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 80047be:	f36f 13c7 	bfc	r3, #7, #1
 80047c2:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
}
 80047c6:	bf00      	nop
 80047c8:	3724      	adds	r7, #36	; 0x24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047d0:	b001      	add	sp, #4
 80047d2:	4770      	bx	lr
 80047d4:	0801490c 	.word	0x0801490c
 80047d8:	08014910 	.word	0x08014910
 80047dc:	08007b45 	.word	0x08007b45
 80047e0:	08014944 	.word	0x08014944

080047e4 <restore_http_cb>:

static void http_cb(struct mg_connection *, int, void *, void *);
static void restore_http_cb(struct mg_connection *c) {
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  mg_fs_close((struct mg_fd *) c->pfn_data);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7fe fc65 	bl	80030c0 <mg_fs_close>
  c->pfn_data = NULL;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	665a      	str	r2, [r3, #100]	; 0x64
  c->pfn = http_cb;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a06      	ldr	r2, [pc, #24]	; (8004818 <restore_http_cb+0x34>)
 8004800:	661a      	str	r2, [r3, #96]	; 0x60
  c->is_resp = 0;
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8004808:	f36f 13c7 	bfc	r3, #7, #1
 800480c:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
}
 8004810:	bf00      	nop
 8004812:	3708      	adds	r7, #8
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	08005c89 	.word	0x08005c89

0800481c <mg_http_etag>:

char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime);
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 800481c:	b5b0      	push	{r4, r5, r7, lr}
 800481e:	b088      	sub	sp, #32
 8004820:	af04      	add	r7, sp, #16
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	461c      	mov	r4, r3
 800482e:	4615      	mov	r5, r2
 8004830:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004834:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004838:	e9cd 2300 	strd	r2, r3, [sp]
 800483c:	4a04      	ldr	r2, [pc, #16]	; (8004850 <mg_http_etag+0x34>)
 800483e:	68b9      	ldr	r1, [r7, #8]
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f003 f9b7 	bl	8007bb4 <mg_snprintf>
  return buf;
 8004846:	68fb      	ldr	r3, [r7, #12]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bdb0      	pop	{r4, r5, r7, pc}
 8004850:	0801494c 	.word	0x0801494c

08004854 <static_cb>:

static void static_cb(struct mg_connection *c, int ev, void *ev_data,
                      void *fn_data) {
 8004854:	b580      	push	{r7, lr}
 8004856:	b08a      	sub	sp, #40	; 0x28
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
 8004860:	603b      	str	r3, [r7, #0]
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2b08      	cmp	r3, #8
 8004866:	d002      	beq.n	800486e <static_cb+0x1a>
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2b02      	cmp	r3, #2
 800486c:	d146      	bne.n	80048fc <static_cb+0xa8>
    struct mg_fd *fd = (struct mg_fd *) fn_data;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	623b      	str	r3, [r7, #32]
    // Read to send IO buffer directly, avoid extra on-stack buffer
    size_t n, max = MG_IO_SIZE, space;
 8004872:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004876:	61fb      	str	r3, [r7, #28]
    size_t *cl = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	3384      	adds	r3, #132	; 0x84
 800487c:	61bb      	str	r3, [r7, #24]
                                     sizeof(size_t) * sizeof(size_t)];
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004882:	69fa      	ldr	r2, [r7, #28]
 8004884:	429a      	cmp	r2, r3
 8004886:	d905      	bls.n	8004894 <static_cb+0x40>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	3348      	adds	r3, #72	; 0x48
 800488c:	69f9      	ldr	r1, [r7, #28]
 800488e:	4618      	mov	r0, r3
 8004890:	f001 fb6c 	bl	8005f6c <mg_iobuf_resize>
    if (c->send.len >= c->send.size) return;  // Rate limit
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800489c:	429a      	cmp	r2, r3
 800489e:	d234      	bcs.n	800490a <static_cb+0xb6>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	627b      	str	r3, [r7, #36]	; 0x24
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d902      	bls.n	80048bc <static_cb+0x68>
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	627b      	str	r3, [r7, #36]	; 0x24
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 80048bc:	6a3b      	ldr	r3, [r7, #32]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	6a3a      	ldr	r2, [r7, #32]
 80048c4:	6810      	ldr	r0, [r2, #0]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80048ce:	4411      	add	r1, r2
 80048d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d2:	4798      	blx	r3
 80048d4:	6178      	str	r0, [r7, #20]
    c->send.len += n;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	441a      	add	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	651a      	str	r2, [r3, #80]	; 0x50
    *cl -= n;
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	1ad2      	subs	r2, r2, r3
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	601a      	str	r2, [r3, #0]
    if (n == 0) restore_http_cb(c);
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10c      	bne.n	800490e <static_cb+0xba>
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f7ff ff75 	bl	80047e4 <restore_http_cb>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 80048fa:	e008      	b.n	800490e <static_cb+0xba>
  } else if (ev == MG_EV_CLOSE) {
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	2b09      	cmp	r3, #9
 8004900:	d106      	bne.n	8004910 <static_cb+0xbc>
    restore_http_cb(c);
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f7ff ff6e 	bl	80047e4 <restore_http_cb>
 8004908:	e002      	b.n	8004910 <static_cb+0xbc>
    if (c->send.len >= c->send.size) return;  // Rate limit
 800490a:	bf00      	nop
 800490c:	e000      	b.n	8004910 <static_cb+0xbc>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 800490e:	bf00      	nop
  }
  (void) ev_data;
}
 8004910:	3728      	adds	r7, #40	; 0x28
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
	...

08004918 <guess_content_type>:
    MG_C_STR("3gp"), MG_C_STR("video/3gpp"),
    {0, 0},
};
// clang-format on

static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 8004918:	b590      	push	{r4, r7, lr}
 800491a:	b08d      	sub	sp, #52	; 0x34
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	1d38      	adds	r0, r7, #4
 8004922:	e880 0006 	stmia.w	r0, {r1, r2}
 8004926:	603b      	str	r3, [r7, #0]
  struct mg_str k, v, s = mg_str(extra);
 8004928:	f107 0314 	add.w	r3, r7, #20
 800492c:	6839      	ldr	r1, [r7, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f003 ff1a 	bl	8008768 <mg_str_s>
  size_t i = 0;
 8004934:	2300      	movs	r3, #0
 8004936:	62fb      	str	r3, [r7, #44]	; 0x2c

  // Shrink path to its extension only
  while (i < path.len && path.ptr[path.len - i - 1] != '.') i++;
 8004938:	e002      	b.n	8004940 <guess_content_type+0x28>
 800493a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493c:	3301      	adds	r3, #1
 800493e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004944:	429a      	cmp	r2, r3
 8004946:	d208      	bcs.n	800495a <guess_content_type+0x42>
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	68b9      	ldr	r1, [r7, #8]
 800494c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494e:	1acb      	subs	r3, r1, r3
 8004950:	3b01      	subs	r3, #1
 8004952:	4413      	add	r3, r2
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	2b2e      	cmp	r3, #46	; 0x2e
 8004958:	d1ef      	bne.n	800493a <guess_content_type+0x22>
  path.ptr += path.len - i;
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	68b9      	ldr	r1, [r7, #8]
 800495e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004960:	1acb      	subs	r3, r1, r3
 8004962:	4413      	add	r3, r2
 8004964:	607b      	str	r3, [r7, #4]
  path.len = i;
 8004966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004968:	60bb      	str	r3, [r7, #8]

  // Process user-provided mime type overrides, if any
  while (mg_commalist(&s, &k, &v)) {
 800496a:	e012      	b.n	8004992 <guess_content_type+0x7a>
    if (mg_strcmp(path, k) == 0) return v;
 800496c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004970:	cb0c      	ldmia	r3, {r2, r3}
 8004972:	1d39      	adds	r1, r7, #4
 8004974:	c903      	ldmia	r1, {r0, r1}
 8004976:	f003 ffb9 	bl	80088ec <mg_strcmp>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d108      	bne.n	8004992 <guess_content_type+0x7a>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	461a      	mov	r2, r3
 8004984:	f107 031c 	add.w	r3, r7, #28
 8004988:	e893 0003 	ldmia.w	r3, {r0, r1}
 800498c:	e882 0003 	stmia.w	r2, {r0, r1}
 8004990:	e034      	b.n	80049fc <guess_content_type+0xe4>
  while (mg_commalist(&s, &k, &v)) {
 8004992:	f107 021c 	add.w	r2, r7, #28
 8004996:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800499a:	f107 0314 	add.w	r3, r7, #20
 800499e:	4618      	mov	r0, r3
 80049a0:	f004 fa03 	bl	8008daa <mg_commalist>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1e0      	bne.n	800496c <guess_content_type+0x54>
  }

  // Process built-in mime types
  for (i = 0; s_known_types[i].ptr != NULL; i += 2) {
 80049aa:	2300      	movs	r3, #0
 80049ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049ae:	e01a      	b.n	80049e6 <guess_content_type+0xce>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 80049b0:	4a14      	ldr	r2, [pc, #80]	; (8004a04 <guess_content_type+0xec>)
 80049b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	4413      	add	r3, r2
 80049b8:	cb0c      	ldmia	r3, {r2, r3}
 80049ba:	1d39      	adds	r1, r7, #4
 80049bc:	c903      	ldmia	r1, {r0, r1}
 80049be:	f003 ff95 	bl	80088ec <mg_strcmp>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10b      	bne.n	80049e0 <guess_content_type+0xc8>
 80049c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ca:	3301      	adds	r3, #1
 80049cc:	68f9      	ldr	r1, [r7, #12]
 80049ce:	4a0d      	ldr	r2, [pc, #52]	; (8004a04 <guess_content_type+0xec>)
 80049d0:	460c      	mov	r4, r1
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	4413      	add	r3, r2
 80049d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80049da:	e884 0003 	stmia.w	r4, {r0, r1}
 80049de:	e00d      	b.n	80049fc <guess_content_type+0xe4>
  for (i = 0; s_known_types[i].ptr != NULL; i += 2) {
 80049e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e2:	3302      	adds	r3, #2
 80049e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049e6:	4a07      	ldr	r2, [pc, #28]	; (8004a04 <guess_content_type+0xec>)
 80049e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ea:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1de      	bne.n	80049b0 <guess_content_type+0x98>
  }

  return mg_str("text/plain; charset=utf-8");
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	4904      	ldr	r1, [pc, #16]	; (8004a08 <guess_content_type+0xf0>)
 80049f6:	4618      	mov	r0, r3
 80049f8:	f003 feb6 	bl	8008768 <mg_str_s>
}
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	3734      	adds	r7, #52	; 0x34
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd90      	pop	{r4, r7, pc}
 8004a04:	24000050 	.word	0x24000050
 8004a08:	08014a34 	.word	0x08014a34

08004a0c <getrange>:

static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b088      	sub	sp, #32
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
  size_t i, numparsed = 0;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	61bb      	str	r3, [r7, #24]
  // MG_INFO(("%.*s", (int) s->len, s->ptr));
  for (i = 0; i + 6 < s->len; i++) {
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	61fb      	str	r3, [r7, #28]
 8004a20:	e076      	b.n	8004b10 <getrange+0x104>
    if (memcmp(&s->ptr[i], "bytes=", 6) == 0) {
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	4413      	add	r3, r2
 8004a2a:	2206      	movs	r2, #6
 8004a2c:	493f      	ldr	r1, [pc, #252]	; (8004b2c <getrange+0x120>)
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f00e fd03 	bl	801343a <memcmp>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d167      	bne.n	8004b0a <getrange+0xfe>
      struct mg_str p = mg_str_n(s->ptr + i + 6, s->len - i - 6);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	3306      	adds	r3, #6
 8004a42:	18d1      	adds	r1, r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	1f9a      	subs	r2, r3, #6
 8004a4e:	f107 0310 	add.w	r3, r7, #16
 8004a52:	4618      	mov	r0, r3
 8004a54:	f003 fea5 	bl	80087a2 <mg_str_n>
      if (p.len > 0 && p.ptr[0] >= '0' && p.ptr[0] <= '9') numparsed++;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <getrange+0x68>
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	2b2f      	cmp	r3, #47	; 0x2f
 8004a64:	d906      	bls.n	8004a74 <getrange+0x68>
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	2b39      	cmp	r3, #57	; 0x39
 8004a6c:	d802      	bhi.n	8004a74 <getrange+0x68>
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	3301      	adds	r3, #1
 8004a72:	61bb      	str	r3, [r7, #24]
      if (!mg_to_size_t(p, a)) return 0;
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	f107 0310 	add.w	r3, r7, #16
 8004a7a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004a7e:	f7fe fd3f 	bl	8003500 <mg_to_size_t>
 8004a82:	4603      	mov	r3, r0
 8004a84:	f083 0301 	eor.w	r3, r3, #1
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d007      	beq.n	8004a9e <getrange+0x92>
 8004a8e:	2300      	movs	r3, #0
 8004a90:	e047      	b.n	8004b22 <getrange+0x116>
      // MG_INFO(("PPP [%.*s] %d", (int) p.len, p.ptr, numparsed));
      while (p.len && p.ptr[0] >= '0' && p.ptr[0] <= '9') p.ptr++, p.len--;
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	3301      	adds	r3, #1
 8004a96:	613b      	str	r3, [r7, #16]
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	617b      	str	r3, [r7, #20]
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d007      	beq.n	8004ab4 <getrange+0xa8>
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	2b2f      	cmp	r3, #47	; 0x2f
 8004aaa:	d903      	bls.n	8004ab4 <getrange+0xa8>
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	2b39      	cmp	r3, #57	; 0x39
 8004ab2:	d9ee      	bls.n	8004a92 <getrange+0x86>
      if (p.len && p.ptr[0] == '-') p.ptr++, p.len--;
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d009      	beq.n	8004ace <getrange+0xc2>
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	2b2d      	cmp	r3, #45	; 0x2d
 8004ac0:	d105      	bne.n	8004ace <getrange+0xc2>
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	613b      	str	r3, [r7, #16]
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	3b01      	subs	r3, #1
 8004acc:	617b      	str	r3, [r7, #20]
      if (!mg_to_size_t(p, b)) return 0;
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	f107 0310 	add.w	r3, r7, #16
 8004ad4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004ad8:	f7fe fd12 	bl	8003500 <mg_to_size_t>
 8004adc:	4603      	mov	r3, r0
 8004ade:	f083 0301 	eor.w	r3, r3, #1
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <getrange+0xe0>
 8004ae8:	2300      	movs	r3, #0
 8004aea:	e01a      	b.n	8004b22 <getrange+0x116>
      if (p.len > 0 && p.ptr[0] >= '0' && p.ptr[0] <= '9') numparsed++;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d015      	beq.n	8004b1e <getrange+0x112>
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	2b2f      	cmp	r3, #47	; 0x2f
 8004af8:	d911      	bls.n	8004b1e <getrange+0x112>
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	2b39      	cmp	r3, #57	; 0x39
 8004b00:	d80d      	bhi.n	8004b1e <getrange+0x112>
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	3301      	adds	r3, #1
 8004b06:	61bb      	str	r3, [r7, #24]
 8004b08:	e00a      	b.n	8004b20 <getrange+0x114>
  for (i = 0; i + 6 < s->len; i++) {
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	61fb      	str	r3, [r7, #28]
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	1d9a      	adds	r2, r3, #6
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d382      	bcc.n	8004a22 <getrange+0x16>
 8004b1c:	e000      	b.n	8004b20 <getrange+0x114>
      // MG_INFO(("PPP [%.*s] %d", (int) p.len, p.ptr, numparsed));
      break;
 8004b1e:	bf00      	nop
    }
  }
  return (int) numparsed;
 8004b20:	69bb      	ldr	r3, [r7, #24]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3720      	adds	r7, #32
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	08014bb8 	.word	0x08014bb8

08004b30 <mg_http_serve_file>:

void mg_http_serve_file(struct mg_connection *c, struct mg_http_message *hm,
                        const char *path,
                        const struct mg_http_serve_opts *opts) {
 8004b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b34:	b0ef      	sub	sp, #444	; 0x1bc
 8004b36:	af0a      	add	r7, sp, #40	; 0x28
 8004b38:	f507 74c8 	add.w	r4, r7, #400	; 0x190
 8004b3c:	f5a4 74b6 	sub.w	r4, r4, #364	; 0x16c
 8004b40:	6020      	str	r0, [r4, #0]
 8004b42:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8004b46:	f5a0 70b8 	sub.w	r0, r0, #368	; 0x170
 8004b4a:	6001      	str	r1, [r0, #0]
 8004b4c:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 8004b50:	f5a1 71ba 	sub.w	r1, r1, #372	; 0x174
 8004b54:	600a      	str	r2, [r1, #0]
 8004b56:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8004b5a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004b5e:	6013      	str	r3, [r2, #0]
  char etag[64], tmp[MG_PATH_MAX];
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8004b60:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004b64:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d006      	beq.n	8004b7e <mg_http_serve_file+0x4e>
 8004b70:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004b74:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	e000      	b.n	8004b80 <mg_http_serve_file+0x50>
 8004b7e:	4bcd      	ldr	r3, [pc, #820]	; (8004eb4 <mg_http_serve_file+0x384>)
 8004b80:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  struct mg_fd *fd = NULL;
 8004b84:	2300      	movs	r3, #0
 8004b86:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  size_t size = 0;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  time_t mtime = 0;
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
  struct mg_str *inm = NULL;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 8004ba2:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8004ba6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004baa:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004bae:	6819      	ldr	r1, [r3, #0]
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	f003 fdd9 	bl	8008768 <mg_str_s>
 8004bb6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004bba:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8004bc6:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8004bca:	ca06      	ldmia	r2, {r1, r2}
 8004bcc:	f7ff fea4 	bl	8004918 <guess_content_type>
  bool gzip = false;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b

  if (path != NULL) {
 8004bd6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004bda:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d051      	beq.n	8004c88 <mg_http_serve_file+0x158>
    // If a browser sends us "Accept-Encoding: gzip", try to open .gz first
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 8004be4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004be8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004bec:	49b2      	ldr	r1, [pc, #712]	; (8004eb8 <mg_http_serve_file+0x388>)
 8004bee:	6818      	ldr	r0, [r3, #0]
 8004bf0:	f7fe feec 	bl	80039cc <mg_http_get_header>
 8004bf4:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
    if (ae != NULL && mg_strstr(*ae, mg_str("gzip")) != NULL) {
 8004bf8:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d033      	beq.n	8004c68 <mg_http_serve_file+0x138>
 8004c00:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004c04:	49ad      	ldr	r1, [pc, #692]	; (8004ebc <mg_http_serve_file+0x38c>)
 8004c06:	4618      	mov	r0, r3
 8004c08:	f003 fdae 	bl	8008768 <mg_str_s>
 8004c0c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004c10:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004c14:	cb0c      	ldmia	r3, {r2, r3}
 8004c16:	c903      	ldmia	r1, {r0, r1}
 8004c18:	f003 feaa 	bl	8008970 <mg_strstr>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d022      	beq.n	8004c68 <mg_http_serve_file+0x138>
      mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 8004c22:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004c26:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004c2a:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4aa3      	ldr	r2, [pc, #652]	; (8004ec0 <mg_http_serve_file+0x390>)
 8004c32:	2164      	movs	r1, #100	; 0x64
 8004c34:	f002 ffbe 	bl	8007bb4 <mg_snprintf>
      fd = mg_fs_open(fs, tmp, MG_FS_READ);
 8004c38:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	4619      	mov	r1, r3
 8004c40:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 8004c44:	f7fe fa14 	bl	8003070 <mg_fs_open>
 8004c48:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
      if (fd != NULL) gzip = true, path = tmp;
 8004c4c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d009      	beq.n	8004c68 <mg_http_serve_file+0x138>
 8004c54:	2301      	movs	r3, #1
 8004c56:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
 8004c5a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004c5e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004c62:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004c66:	601a      	str	r2, [r3, #0]
    }
    // No luck opening .gz? Open what we've told to open
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 8004c68:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10b      	bne.n	8004c88 <mg_http_serve_file+0x158>
 8004c70:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004c74:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004c78:	2201      	movs	r2, #1
 8004c7a:	6819      	ldr	r1, [r3, #0]
 8004c7c:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 8004c80:	f7fe f9f6 	bl	8003070 <mg_fs_open>
 8004c84:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
  }

  // Failed to open, and page404 is configured? Open it, then
  if (fd == NULL && opts->page404 != NULL) {
 8004c88:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d141      	bne.n	8004d14 <mg_http_serve_file+0x1e4>
 8004c90:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004c94:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d039      	beq.n	8004d14 <mg_http_serve_file+0x1e4>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 8004ca0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004ca4:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	2201      	movs	r2, #1
 8004cae:	4619      	mov	r1, r3
 8004cb0:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 8004cb4:	f7fe f9dc 	bl	8003070 <mg_fs_open>
 8004cb8:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
    mime = guess_content_type(mg_str(path), opts->mime_types);
 8004cbc:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004cc0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004cc4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004cc8:	6819      	ldr	r1, [r3, #0]
 8004cca:	4610      	mov	r0, r2
 8004ccc:	f003 fd4c 	bl	8008768 <mg_str_s>
 8004cd0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004cd4:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	f107 0010 	add.w	r0, r7, #16
 8004ce0:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004ce4:	ca06      	ldmia	r2, {r1, r2}
 8004ce6:	f7ff fe17 	bl	8004918 <guess_content_type>
 8004cea:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004cee:	f5a3 72c0 	sub.w	r2, r3, #384	; 0x180
 8004cf2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004cf6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004cfa:	e883 0003 	stmia.w	r3, {r0, r1}
    path = opts->page404;
 8004cfe:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004d02:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004d06:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8004d0a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004d0e:	6812      	ldr	r2, [r2, #0]
 8004d10:	6912      	ldr	r2, [r2, #16]
 8004d12:	601a      	str	r2, [r3, #0]
  }

  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 8004d14:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00f      	beq.n	8004d3c <mg_http_serve_file+0x20c>
 8004d1c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8004d20:	681c      	ldr	r4, [r3, #0]
 8004d22:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8004d26:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8004d2a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004d2e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004d32:	6818      	ldr	r0, [r3, #0]
 8004d34:	47a0      	blx	r4
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d114      	bne.n	8004d66 <mg_http_serve_file+0x236>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 8004d3c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004d40:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	689a      	ldr	r2, [r3, #8]
 8004d48:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004d4c:	f5a3 70b6 	sub.w	r0, r3, #364	; 0x16c
 8004d50:	4b5c      	ldr	r3, [pc, #368]	; (8004ec4 <mg_http_serve_file+0x394>)
 8004d52:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8004d56:	6800      	ldr	r0, [r0, #0]
 8004d58:	f7ff fcec 	bl	8004734 <mg_http_reply>
    mg_fs_close(fd);
 8004d5c:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 8004d60:	f7fe f9ae 	bl	80030c0 <mg_fs_close>
 8004d64:	e173      	b.n	800504e <mg_http_serve_file+0x51e>
    // NOTE: mg_http_etag() call should go first!
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8004d66:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8004d6a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8004d6e:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8004d72:	e9cd 2300 	strd	r2, r3, [sp]
 8004d76:	460a      	mov	r2, r1
 8004d78:	2140      	movs	r1, #64	; 0x40
 8004d7a:	f7ff fd4f 	bl	800481c <mg_http_etag>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d02c      	beq.n	8004dde <mg_http_serve_file+0x2ae>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8004d84:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004d88:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004d8c:	494e      	ldr	r1, [pc, #312]	; (8004ec8 <mg_http_serve_file+0x398>)
 8004d8e:	6818      	ldr	r0, [r3, #0]
 8004d90:	f7fe fe1c 	bl	80039cc <mg_http_get_header>
 8004d94:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8004d98:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d01e      	beq.n	8004dde <mg_http_serve_file+0x2ae>
             mg_vcasecmp(inm, etag) == 0) {
 8004da0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004da4:	4619      	mov	r1, r3
 8004da6:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
 8004daa:	f003 fd7b 	bl	80088a4 <mg_vcasecmp>
 8004dae:	4603      	mov	r3, r0
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d114      	bne.n	8004dde <mg_http_serve_file+0x2ae>
    mg_fs_close(fd);
 8004db4:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 8004db8:	f7fe f982 	bl	80030c0 <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 8004dbc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004dc0:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004dcc:	f5a3 70b6 	sub.w	r0, r3, #364	; 0x16c
 8004dd0:	4b3e      	ldr	r3, [pc, #248]	; (8004ecc <mg_http_serve_file+0x39c>)
 8004dd2:	f44f 7198 	mov.w	r1, #304	; 0x130
 8004dd6:	6800      	ldr	r0, [r0, #0]
 8004dd8:	f7ff fcac 	bl	8004734 <mg_http_reply>
 8004ddc:	e137      	b.n	800504e <mg_http_serve_file+0x51e>
  } else {
    int n, status = 200;
 8004dde:	23c8      	movs	r3, #200	; 0xc8
 8004de0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    char range[100];
    size_t r1 = 0, r2 = 0, cl = size;
 8004de4:	2300      	movs	r3, #0
 8004de6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004dea:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004dee:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004df2:	2200      	movs	r2, #0
 8004df4:	601a      	str	r2, [r3, #0]
 8004df6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004dfa:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

    // Handle Range header
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 8004dfe:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004e02:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004e06:	4932      	ldr	r1, [pc, #200]	; (8004ed0 <mg_http_serve_file+0x3a0>)
 8004e08:	6818      	ldr	r0, [r3, #0]
 8004e0a:	f7fe fddf 	bl	80039cc <mg_http_get_header>
 8004e0e:	f8c7 0170 	str.w	r0, [r7, #368]	; 0x170
    range[0] = '\0';
 8004e12:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004e16:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	701a      	strb	r2, [r3, #0]
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 8004e1e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 8092 	beq.w	8004f4c <mg_http_serve_file+0x41c>
 8004e28:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8004e2c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004e30:	4619      	mov	r1, r3
 8004e32:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 8004e36:	f7ff fde9 	bl	8004a0c <getrange>
 8004e3a:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
 8004e3e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f340 8082 	ble.w	8004f4c <mg_http_serve_file+0x41c>
      // If range is specified like "400-", set second limit to content len
      if (n == 1) r2 = cl - 1;
 8004e48:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d107      	bne.n	8004e60 <mg_http_serve_file+0x330>
 8004e50:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004e54:	1e5a      	subs	r2, r3, #1
 8004e56:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004e5a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004e5e:	601a      	str	r2, [r3, #0]
      if (r1 > r2 || r2 >= cl) {
 8004e60:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e64:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004e68:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d808      	bhi.n	8004e84 <mg_http_serve_file+0x354>
 8004e72:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004e76:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d829      	bhi.n	8004ed8 <mg_http_serve_file+0x3a8>
        status = 416;
 8004e84:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8004e88:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
        cl = 0;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 8004e92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004e96:	2200      	movs	r2, #0
 8004e98:	60bb      	str	r3, [r7, #8]
 8004e9a:	60fa      	str	r2, [r7, #12]
 8004e9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ea0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004ea4:	e9cd 1200 	strd	r1, r2, [sp]
 8004ea8:	4a0a      	ldr	r2, [pc, #40]	; (8004ed4 <mg_http_serve_file+0x3a4>)
 8004eaa:	2164      	movs	r1, #100	; 0x64
 8004eac:	4618      	mov	r0, r3
 8004eae:	f002 fe81 	bl	8007bb4 <mg_snprintf>
 8004eb2:	e04b      	b.n	8004f4c <mg_http_serve_file+0x41c>
 8004eb4:	24000028 	.word	0x24000028
 8004eb8:	08014bc0 	.word	0x08014bc0
 8004ebc:	08014bd0 	.word	0x08014bd0
 8004ec0:	08014bd8 	.word	0x08014bd8
 8004ec4:	08014be0 	.word	0x08014be0
 8004ec8:	08014bec 	.word	0x08014bec
 8004ecc:	0801490c 	.word	0x0801490c
 8004ed0:	08014bfc 	.word	0x08014bfc
 8004ed4:	08014c04 	.word	0x08014c04
                    (int64_t) size);
      } else {
        status = 206;
 8004ed8:	23ce      	movs	r3, #206	; 0xce
 8004eda:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
        cl = r2 - r1 + 1;
 8004ede:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004ee2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	3301      	adds	r3, #1
 8004ef0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
        mg_snprintf(range, sizeof(range),
 8004ef4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004ef8:	2200      	movs	r2, #0
 8004efa:	469a      	mov	sl, r3
 8004efc:	4693      	mov	fp, r2
                    "Content-Range: bytes %llu-%llu/%llu\r\n", (uint64_t) r1,
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 8004efe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f02:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004f06:	4413      	add	r3, r2
 8004f08:	3b01      	subs	r3, #1
        mg_snprintf(range, sizeof(range),
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	461d      	mov	r5, r3
 8004f0e:	4616      	mov	r6, r2
 8004f10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004f14:	2200      	movs	r2, #0
 8004f16:	603b      	str	r3, [r7, #0]
 8004f18:	607a      	str	r2, [r7, #4]
 8004f1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f1e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004f22:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8004f26:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8004f2a:	e9cd ab00 	strd	sl, fp, [sp]
 8004f2e:	4a4b      	ldr	r2, [pc, #300]	; (800505c <mg_http_serve_file+0x52c>)
 8004f30:	2164      	movs	r1, #100	; 0x64
 8004f32:	4618      	mov	r0, r3
 8004f34:	f002 fe3e 	bl	8007bb4 <mg_snprintf>
        fs->sk(fd->fd, r1);
 8004f38:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8004f42:	6812      	ldr	r2, [r2, #0]
 8004f44:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8004f48:	4610      	mov	r0, r2
 8004f4a:	4798      	blx	r3
      }
    }
    mg_printf(c,
 8004f4c:	f8d7 0184 	ldr.w	r0, [r7, #388]	; 0x184
 8004f50:	f7fe fef4 	bl	8003d3c <mg_http_status_code_str>
 8004f54:	4604      	mov	r4, r0
              "HTTP/1.1 %d %s\r\n"
              "Content-Type: %.*s\r\n"
              "Etag: %s\r\n"
              "Content-Length: %llu\r\n"
              "%s%s%s\r\n",
              status, mg_http_status_code_str(status), (int) mime.len, mime.ptr,
 8004f56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
    mg_printf(c,
 8004f5a:	461d      	mov	r5, r3
 8004f5c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004f60:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004f64:	2100      	movs	r1, #0
 8004f66:	4698      	mov	r8, r3
 8004f68:	4689      	mov	r9, r1
 8004f6a:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <mg_http_serve_file+0x446>
 8004f72:	493b      	ldr	r1, [pc, #236]	; (8005060 <mg_http_serve_file+0x530>)
 8004f74:	e000      	b.n	8004f78 <mg_http_serve_file+0x448>
 8004f76:	493b      	ldr	r1, [pc, #236]	; (8005064 <mg_http_serve_file+0x534>)
              etag, (uint64_t) cl, gzip ? "Content-Encoding: gzip\r\n" : "",
              range, opts->extra_headers ? opts->extra_headers : "");
 8004f78:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004f7c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
    mg_printf(c,
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d006      	beq.n	8004f96 <mg_http_serve_file+0x466>
 8004f88:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004f8c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	e000      	b.n	8004f98 <mg_http_serve_file+0x468>
 8004f96:	4b33      	ldr	r3, [pc, #204]	; (8005064 <mg_http_serve_file+0x534>)
 8004f98:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8004f9c:	f5a0 70b6 	sub.w	r0, r0, #364	; 0x16c
 8004fa0:	9308      	str	r3, [sp, #32]
 8004fa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004fa6:	9307      	str	r3, [sp, #28]
 8004fa8:	9106      	str	r1, [sp, #24]
 8004faa:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8004fae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004fb2:	9302      	str	r3, [sp, #8]
 8004fb4:	9201      	str	r2, [sp, #4]
 8004fb6:	9500      	str	r5, [sp, #0]
 8004fb8:	4623      	mov	r3, r4
 8004fba:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8004fbe:	492a      	ldr	r1, [pc, #168]	; (8005068 <mg_http_serve_file+0x538>)
 8004fc0:	6800      	ldr	r0, [r0, #0]
 8004fc2:	f002 f921 	bl	8007208 <mg_printf>
    if (mg_vcasecmp(&hm->method, "HEAD") == 0) {
 8004fc6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004fca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4926      	ldr	r1, [pc, #152]	; (800506c <mg_http_serve_file+0x53c>)
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f003 fc66 	bl	80088a4 <mg_vcasecmp>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d11a      	bne.n	8005014 <mg_http_serve_file+0x4e4>
      c->is_draining = 1;
 8004fde:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004fe2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8004fec:	f043 0310 	orr.w	r3, r3, #16
 8004ff0:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
      c->is_resp = 0;
 8004ff4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004ff8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8005002:	f36f 13c7 	bfc	r3, #7, #1
 8005006:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
      mg_fs_close(fd);
 800500a:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 800500e:	f7fe f857 	bl	80030c0 <mg_fs_close>
      c->pfn = static_cb;
      c->pfn_data = fd;
      *clp = cl;
    }
  }
}
 8005012:	e01c      	b.n	800504e <mg_http_serve_file+0x51e>
      size_t *clp = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 8005014:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8005018:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	3384      	adds	r3, #132	; 0x84
 8005020:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
      c->pfn = static_cb;
 8005024:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8005028:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a10      	ldr	r2, [pc, #64]	; (8005070 <mg_http_serve_file+0x540>)
 8005030:	661a      	str	r2, [r3, #96]	; 0x60
      c->pfn_data = fd;
 8005032:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8005036:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8005040:	665a      	str	r2, [r3, #100]	; 0x64
      *clp = cl;
 8005042:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005046:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800504a:	601a      	str	r2, [r3, #0]
}
 800504c:	e7ff      	b.n	800504e <mg_http_serve_file+0x51e>
 800504e:	bf00      	nop
 8005050:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8005054:	46bd      	mov	sp, r7
 8005056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800505a:	bf00      	nop
 800505c:	08014c24 	.word	0x08014c24
 8005060:	08014c4c 	.word	0x08014c4c
 8005064:	0801490c 	.word	0x0801490c
 8005068:	08014c68 	.word	0x08014c68
 800506c:	08014cb8 	.word	0x08014cb8
 8005070:	08004855 	.word	0x08004855

08005074 <uri_to_path2>:
#endif

// Resolve requested file into `path` and return its fs->st() result
static int uri_to_path2(struct mg_connection *c, struct mg_http_message *hm,
                        struct mg_fs *fs, struct mg_str url, struct mg_str dir,
                        char *path, size_t path_size) {
 8005074:	b082      	sub	sp, #8
 8005076:	b590      	push	{r4, r7, lr}
 8005078:	b08b      	sub	sp, #44	; 0x2c
 800507a:	af02      	add	r7, sp, #8
 800507c:	60f8      	str	r0, [r7, #12]
 800507e:	60b9      	str	r1, [r7, #8]
 8005080:	607a      	str	r2, [r7, #4]
 8005082:	637b      	str	r3, [r7, #52]	; 0x34
  int flags, tmp;
  // Append URI to the root_dir, and sanitize it
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.ptr);
 8005084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005086:	461a      	mov	r2, r3
 8005088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	4613      	mov	r3, r2
 800508e:	4a97      	ldr	r2, [pc, #604]	; (80052ec <uri_to_path2+0x278>)
 8005090:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005092:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005094:	f002 fd8e 	bl	8007bb4 <mg_snprintf>
 8005098:	6178      	str	r0, [r7, #20]
  if (n > path_size) {
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800509e:	429a      	cmp	r2, r3
 80050a0:	d909      	bls.n	80050b6 <uri_to_path2+0x42>
    mg_http_reply(c, 400, "", "Exceeded path size");
 80050a2:	4b93      	ldr	r3, [pc, #588]	; (80052f0 <uri_to_path2+0x27c>)
 80050a4:	4a93      	ldr	r2, [pc, #588]	; (80052f4 <uri_to_path2+0x280>)
 80050a6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f7ff fb42 	bl	8004734 <mg_http_reply>
    return -1;
 80050b0:	f04f 33ff 	mov.w	r3, #4294967295
 80050b4:	e113      	b.n	80052de <uri_to_path2+0x26a>
  }
  path[path_size - 1] = '\0';
 80050b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050b8:	3b01      	subs	r3, #1
 80050ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050bc:	4413      	add	r3, r2
 80050be:	2200      	movs	r2, #0
 80050c0:	701a      	strb	r2, [r3, #0]
  // Terminate root dir with /
  if (n + 2 < path_size && path[n-1] != '/') path[n++] = '/', path[n] = '\0';
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	3302      	adds	r3, #2
 80050c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d912      	bls.n	80050f2 <uri_to_path2+0x7e>
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	3b01      	subs	r3, #1
 80050d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050d2:	4413      	add	r3, r2
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	2b2f      	cmp	r3, #47	; 0x2f
 80050d8:	d00b      	beq.n	80050f2 <uri_to_path2+0x7e>
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	617a      	str	r2, [r7, #20]
 80050e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050e2:	4413      	add	r3, r2
 80050e4:	222f      	movs	r2, #47	; 0x2f
 80050e6:	701a      	strb	r2, [r3, #0]
 80050e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	4413      	add	r3, r2
 80050ee:	2200      	movs	r2, #0
 80050f0:	701a      	strb	r2, [r3, #0]
  mg_url_decode(hm->uri.ptr + url.len, hm->uri.len - url.len, path + n,
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	689a      	ldr	r2, [r3, #8]
 80050f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f8:	18d0      	adds	r0, r2, r3
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	68da      	ldr	r2, [r3, #12]
 80050fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005100:	1ad1      	subs	r1, r2, r3
 8005102:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	18d4      	adds	r4, r2, r3
 8005108:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2200      	movs	r2, #0
 8005110:	9200      	str	r2, [sp, #0]
 8005112:	4622      	mov	r2, r4
 8005114:	f7fe fb38 	bl	8003788 <mg_url_decode>
                path_size - n, 0);
  path[path_size - 1] = '\0';  // Double-check
 8005118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800511a:	3b01      	subs	r3, #1
 800511c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800511e:	4413      	add	r3, r2
 8005120:	2200      	movs	r2, #0
 8005122:	701a      	strb	r2, [r3, #0]
  if (!mg_path_is_sane(path)) {
 8005124:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005126:	f003 febd 	bl	8008ea4 <mg_path_is_sane>
 800512a:	4603      	mov	r3, r0
 800512c:	f083 0301 	eor.w	r3, r3, #1
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d009      	beq.n	800514a <uri_to_path2+0xd6>
    mg_http_reply(c, 400, "", "Invalid path");
 8005136:	4b70      	ldr	r3, [pc, #448]	; (80052f8 <uri_to_path2+0x284>)
 8005138:	4a6e      	ldr	r2, [pc, #440]	; (80052f4 <uri_to_path2+0x280>)
 800513a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f7ff faf8 	bl	8004734 <mg_http_reply>
    return -1;
 8005144:	f04f 33ff 	mov.w	r3, #4294967295
 8005148:	e0c9      	b.n	80052de <uri_to_path2+0x26a>
  }
  n = strlen(path);
 800514a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800514c:	f7fb f940 	bl	80003d0 <strlen>
 8005150:	6178      	str	r0, [r7, #20]
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 8005152:	e007      	b.n	8005164 <uri_to_path2+0xf0>
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	3b01      	subs	r3, #1
 8005158:	617b      	str	r3, [r7, #20]
 800515a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	4413      	add	r3, r2
 8005160:	2200      	movs	r2, #0
 8005162:	701a      	strb	r2, [r3, #0]
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d906      	bls.n	8005178 <uri_to_path2+0x104>
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	3b01      	subs	r3, #1
 800516e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005170:	4413      	add	r3, r2
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	2b2f      	cmp	r3, #47	; 0x2f
 8005176:	d0ed      	beq.n	8005154 <uri_to_path2+0xe0>
  flags = mg_vcmp(&hm->uri, "/") == 0 ? MG_FS_DIR : fs->st(path, NULL, NULL);
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	3308      	adds	r3, #8
 800517c:	495f      	ldr	r1, [pc, #380]	; (80052fc <uri_to_path2+0x288>)
 800517e:	4618      	mov	r0, r3
 8005180:	f003 fb6c 	bl	800885c <mg_vcmp>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d007      	beq.n	800519a <uri_to_path2+0x126>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2200      	movs	r2, #0
 8005190:	2100      	movs	r1, #0
 8005192:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005194:	4798      	blx	r3
 8005196:	4603      	mov	r3, r0
 8005198:	e000      	b.n	800519c <uri_to_path2+0x128>
 800519a:	2304      	movs	r3, #4
 800519c:	61fb      	str	r3, [r7, #28]
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.ptr, path,
 800519e:	4b58      	ldr	r3, [pc, #352]	; (8005300 <uri_to_path2+0x28c>)
 80051a0:	f240 72bd 	movw	r2, #1981	; 0x7bd
 80051a4:	4957      	ldr	r1, [pc, #348]	; (8005304 <uri_to_path2+0x290>)
 80051a6:	2004      	movs	r0, #4
 80051a8:	f001 fed0 	bl	8006f4c <mg_log_prefix>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00f      	beq.n	80051d2 <uri_to_path2+0x15e>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	4618      	mov	r0, r3
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	689a      	ldr	r2, [r3, #8]
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	9301      	str	r3, [sp, #4]
 80051c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	4613      	mov	r3, r2
 80051ca:	4602      	mov	r2, r0
 80051cc:	484e      	ldr	r0, [pc, #312]	; (8005308 <uri_to_path2+0x294>)
 80051ce:	f001 ff17 	bl	8007000 <mg_log>
              flags));
  if (flags == 0) {
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f000 8081 	beq.w	80052dc <uri_to_path2+0x268>
    // Do nothing - let's caller decide
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	f003 0304 	and.w	r3, r3, #4
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d020      	beq.n	8005226 <uri_to_path2+0x1b2>
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d01c      	beq.n	8005226 <uri_to_path2+0x1b2>
             hm->uri.ptr[hm->uri.len - 1] != '/') {
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	3b01      	subs	r3, #1
 80051f6:	4413      	add	r3, r2
 80051f8:	781b      	ldrb	r3, [r3, #0]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 80051fa:	2b2f      	cmp	r3, #47	; 0x2f
 80051fc:	d013      	beq.n	8005226 <uri_to_path2+0x1b2>
    mg_printf(c,
              "HTTP/1.1 301 Moved\r\n"
              "Location: %.*s/\r\n"
              "Content-Length: 0\r\n"
              "\r\n",
              (int) hm->uri.len, hm->uri.ptr);
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	68db      	ldr	r3, [r3, #12]
    mg_printf(c,
 8005202:	461a      	mov	r2, r3
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	4940      	ldr	r1, [pc, #256]	; (800530c <uri_to_path2+0x298>)
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f001 fffc 	bl	8007208 <mg_printf>
    c->is_resp = 0;
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8005216:	f36f 13c7 	bfc	r3, #7, #1
 800521a:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
    flags = -1;
 800521e:	f04f 33ff 	mov.w	r3, #4294967295
 8005222:	61fb      	str	r3, [r7, #28]
 8005224:	e05a      	b.n	80052dc <uri_to_path2+0x268>
  } else if (flags & MG_FS_DIR) {
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	f003 0304 	and.w	r3, r3, #4
 800522c:	2b00      	cmp	r3, #0
 800522e:	d055      	beq.n	80052dc <uri_to_path2+0x268>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8005230:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	18d0      	adds	r0, r2, r3
 8005236:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	4a34      	ldr	r2, [pc, #208]	; (8005310 <uri_to_path2+0x29c>)
 800523e:	4619      	mov	r1, r3
 8005240:	f002 fcb8 	bl	8007bb4 <mg_snprintf>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d009      	beq.n	800525e <uri_to_path2+0x1ea>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2200      	movs	r2, #0
 8005250:	2100      	movs	r1, #0
 8005252:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005254:	4798      	blx	r3
 8005256:	61b8      	str	r0, [r7, #24]
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d116      	bne.n	800528c <uri_to_path2+0x218>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 800525e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	18d0      	adds	r0, r2, r3
 8005264:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	4a2a      	ldr	r2, [pc, #168]	; (8005314 <uri_to_path2+0x2a0>)
 800526c:	4619      	mov	r1, r3
 800526e:	f002 fca1 	bl	8007bb4 <mg_snprintf>
 8005272:	4603      	mov	r3, r0
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00c      	beq.n	8005292 <uri_to_path2+0x21e>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2200      	movs	r2, #0
 800527e:	2100      	movs	r1, #0
 8005280:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005282:	4798      	blx	r3
 8005284:	61b8      	str	r0, [r7, #24]
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d002      	beq.n	8005292 <uri_to_path2+0x21e>
      flags = tmp;
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	61fb      	str	r3, [r7, #28]
 8005290:	e024      	b.n	80052dc <uri_to_path2+0x268>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 8005292:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	18d0      	adds	r0, r2, r3
 8005298:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	4a1e      	ldr	r2, [pc, #120]	; (8005318 <uri_to_path2+0x2a4>)
 80052a0:	4619      	mov	r1, r3
 80052a2:	f002 fc87 	bl	8007bb4 <mg_snprintf>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d012      	beq.n	80052d2 <uri_to_path2+0x25e>
                    0 &&
                (tmp = fs->st(path, NULL, NULL)) !=
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2200      	movs	r2, #0
 80052b2:	2100      	movs	r1, #0
 80052b4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80052b6:	4798      	blx	r3
 80052b8:	61b8      	str	r0, [r7, #24]
                    0 &&
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d008      	beq.n	80052d2 <uri_to_path2+0x25e>
                    0)) {  // check for gzipped index
      flags = tmp;
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	61fb      	str	r3, [r7, #28]
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	330b      	adds	r3, #11
 80052c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052ca:	4413      	add	r3, r2
 80052cc:	2200      	movs	r2, #0
 80052ce:	701a      	strb	r2, [r3, #0]
 80052d0:	e004      	b.n	80052dc <uri_to_path2+0x268>
          '\0';  // Remove appended .gz in index file name
    } else {
      path[n] = '\0';  // Remove appended index file name
 80052d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	4413      	add	r3, r2
 80052d8:	2200      	movs	r2, #0
 80052da:	701a      	strb	r2, [r3, #0]
    }
  }
  return flags;
 80052dc:	69fb      	ldr	r3, [r7, #28]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3724      	adds	r7, #36	; 0x24
 80052e2:	46bd      	mov	sp, r7
 80052e4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80052e8:	b002      	add	sp, #8
 80052ea:	4770      	bx	lr
 80052ec:	080143a0 	.word	0x080143a0
 80052f0:	08014cc0 	.word	0x08014cc0
 80052f4:	0801490c 	.word	0x0801490c
 80052f8:	08014cd4 	.word	0x08014cd4
 80052fc:	08014ce4 	.word	0x08014ce4
 8005300:	080161d0 	.word	0x080161d0
 8005304:	08014270 	.word	0x08014270
 8005308:	08014ce8 	.word	0x08014ce8
 800530c:	08014cfc 	.word	0x08014cfc
 8005310:	08014d38 	.word	0x08014d38
 8005314:	08014d44 	.word	0x08014d44
 8005318:	08014d54 	.word	0x08014d54

0800531c <uri_to_path>:

static int uri_to_path(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts, char *path,
                       size_t path_size) {
 800531c:	b580      	push	{r7, lr}
 800531e:	b09a      	sub	sp, #104	; 0x68
 8005320:	af06      	add	r7, sp, #24
 8005322:	6178      	str	r0, [r7, #20]
 8005324:	6139      	str	r1, [r7, #16]
 8005326:	60fa      	str	r2, [r7, #12]
 8005328:	60bb      	str	r3, [r7, #8]
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d002      	beq.n	8005338 <uri_to_path+0x1c>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	e000      	b.n	800533a <uri_to_path+0x1e>
 8005338:	4b3b      	ldr	r3, [pc, #236]	; (8005428 <uri_to_path+0x10c>)
 800533a:	64fb      	str	r3, [r7, #76]	; 0x4c
  struct mg_str k, v, s = mg_str(opts->root_dir), u = {0, 0}, p = {0, 0};
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005344:	4611      	mov	r1, r2
 8005346:	4618      	mov	r0, r3
 8005348:	f003 fa0e 	bl	8008768 <mg_str_s>
 800534c:	2300      	movs	r3, #0
 800534e:	627b      	str	r3, [r7, #36]	; 0x24
 8005350:	2300      	movs	r3, #0
 8005352:	62bb      	str	r3, [r7, #40]	; 0x28
 8005354:	2300      	movs	r3, #0
 8005356:	61fb      	str	r3, [r7, #28]
 8005358:	2300      	movs	r3, #0
 800535a:	623b      	str	r3, [r7, #32]
  while (mg_commalist(&s, &k, &v)) {
 800535c:	e040      	b.n	80053e0 <uri_to_path+0xc4>
    if (v.len == 0) v = k, k = mg_str("/");
 800535e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005360:	2b00      	cmp	r3, #0
 8005362:	d113      	bne.n	800538c <uri_to_path+0x70>
 8005364:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005368:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800536c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005370:	e883 0003 	stmia.w	r3, {r0, r1}
 8005374:	463b      	mov	r3, r7
 8005376:	492d      	ldr	r1, [pc, #180]	; (800542c <uri_to_path+0x110>)
 8005378:	4618      	mov	r0, r3
 800537a:	f003 f9f5 	bl	8008768 <mg_str_s>
 800537e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005382:	463a      	mov	r2, r7
 8005384:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005388:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	68da      	ldr	r2, [r3, #12]
 8005390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005392:	429a      	cmp	r2, r3
 8005394:	d200      	bcs.n	8005398 <uri_to_path+0x7c>
 8005396:	e023      	b.n	80053e0 <uri_to_path+0xc4>
    if (mg_strcmp(k, mg_str_n(hm->uri.ptr, k.len)) != 0) continue;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	6899      	ldr	r1, [r3, #8]
 800539c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800539e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80053a2:	4618      	mov	r0, r3
 80053a4:	f003 f9fd 	bl	80087a2 <mg_str_n>
 80053a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80053ac:	cb0c      	ldmia	r3, {r2, r3}
 80053ae:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80053b2:	c903      	ldmia	r1, {r0, r1}
 80053b4:	f003 fa9a 	bl	80088ec <mg_strcmp>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d000      	beq.n	80053c0 <uri_to_path+0xa4>
 80053be:	e00f      	b.n	80053e0 <uri_to_path+0xc4>
    u = k, p = v;
 80053c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053c4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80053c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80053cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80053d0:	f107 031c 	add.w	r3, r7, #28
 80053d4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80053d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80053dc:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_commalist(&s, &k, &v)) {
 80053e0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80053e4:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80053e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80053ec:	4618      	mov	r0, r3
 80053ee:	f003 fcdc 	bl	8008daa <mg_commalist>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1b2      	bne.n	800535e <uri_to_path+0x42>
  }
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 80053f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053fa:	9304      	str	r3, [sp, #16]
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	9303      	str	r3, [sp, #12]
 8005400:	aa01      	add	r2, sp, #4
 8005402:	f107 031c 	add.w	r3, r7, #28
 8005406:	e893 0003 	ldmia.w	r3, {r0, r1}
 800540a:	e882 0003 	stmia.w	r2, {r0, r1}
 800540e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005414:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005416:	6939      	ldr	r1, [r7, #16]
 8005418:	6978      	ldr	r0, [r7, #20]
 800541a:	f7ff fe2b 	bl	8005074 <uri_to_path2>
 800541e:	4603      	mov	r3, r0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3750      	adds	r7, #80	; 0x50
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	24000028 	.word	0x24000028
 800542c:	08014ce4 	.word	0x08014ce4

08005430 <mg_http_serve_dir>:

void mg_http_serve_dir(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts) {
 8005430:	b590      	push	{r4, r7, lr}
 8005432:	b0a3      	sub	sp, #140	; 0x8c
 8005434:	af02      	add	r7, sp, #8
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
  char path[MG_PATH_MAX];
  const char *sp = opts->ssi_pattern;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	67fb      	str	r3, [r7, #124]	; 0x7c
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 8005442:	f107 0314 	add.w	r3, r7, #20
 8005446:	2264      	movs	r2, #100	; 0x64
 8005448:	9200      	str	r2, [sp, #0]
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	68b9      	ldr	r1, [r7, #8]
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f7ff ff64 	bl	800531c <uri_to_path>
 8005454:	67b8      	str	r0, [r7, #120]	; 0x78
  if (flags < 0) {
 8005456:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005458:	2b00      	cmp	r3, #0
 800545a:	db35      	blt.n	80054c8 <mg_http_serve_dir+0x98>
    // Do nothing: the response has already been sent by uri_to_path()
  } else if (flags & MG_FS_DIR) {
 800545c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800545e:	f003 0304 	and.w	r3, r3, #4
 8005462:	2b00      	cmp	r3, #0
 8005464:	d007      	beq.n	8005476 <mg_http_serve_dir+0x46>
#if MG_ENABLE_DIRLIST
    listdir(c, hm, opts, path);
#else
    mg_http_reply(c, 403, "", "Forbidden\n");
 8005466:	4b1a      	ldr	r3, [pc, #104]	; (80054d0 <mg_http_serve_dir+0xa0>)
 8005468:	4a1a      	ldr	r2, [pc, #104]	; (80054d4 <mg_http_serve_dir+0xa4>)
 800546a:	f240 1193 	movw	r1, #403	; 0x193
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f7ff f960 	bl	8004734 <mg_http_reply>
             mg_globmatch(sp, strlen(sp), path, strlen(path))) {
    mg_http_serve_ssi(c, opts->root_dir, path);
  } else {
    mg_http_serve_file(c, hm, path, opts);
  }
}
 8005474:	e028      	b.n	80054c8 <mg_http_serve_dir+0x98>
  } else if (flags && sp != NULL &&
 8005476:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005478:	2b00      	cmp	r3, #0
 800547a:	d01e      	beq.n	80054ba <mg_http_serve_dir+0x8a>
 800547c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800547e:	2b00      	cmp	r3, #0
 8005480:	d01b      	beq.n	80054ba <mg_http_serve_dir+0x8a>
             mg_globmatch(sp, strlen(sp), path, strlen(path))) {
 8005482:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8005484:	f7fa ffa4 	bl	80003d0 <strlen>
 8005488:	4604      	mov	r4, r0
 800548a:	f107 0314 	add.w	r3, r7, #20
 800548e:	4618      	mov	r0, r3
 8005490:	f7fa ff9e 	bl	80003d0 <strlen>
 8005494:	4603      	mov	r3, r0
 8005496:	f107 0214 	add.w	r2, r7, #20
 800549a:	4621      	mov	r1, r4
 800549c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800549e:	f003 fb83 	bl	8008ba8 <mg_globmatch>
 80054a2:	4603      	mov	r3, r0
  } else if (flags && sp != NULL &&
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d008      	beq.n	80054ba <mg_http_serve_dir+0x8a>
    mg_http_serve_ssi(c, opts->root_dir, path);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f107 0214 	add.w	r2, r7, #20
 80054b0:	4619      	mov	r1, r3
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f003 f944 	bl	8008740 <mg_http_serve_ssi>
}
 80054b8:	e006      	b.n	80054c8 <mg_http_serve_dir+0x98>
    mg_http_serve_file(c, hm, path, opts);
 80054ba:	f107 0214 	add.w	r2, r7, #20
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	68b9      	ldr	r1, [r7, #8]
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f7ff fb34 	bl	8004b30 <mg_http_serve_file>
}
 80054c8:	bf00      	nop
 80054ca:	3784      	adds	r7, #132	; 0x84
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd90      	pop	{r4, r7, pc}
 80054d0:	08014d64 	.word	0x08014d64
 80054d4:	0801490c 	.word	0x0801490c

080054d8 <mg_http_creds>:
  if (len > 0) buf[len - 1] = '\0';           // Always.
  return n;
}

void mg_http_creds(struct mg_http_message *hm, char *user, size_t userlen,
                   char *pass, size_t passlen) {
 80054d8:	b590      	push	{r4, r7, lr}
 80054da:	b0cf      	sub	sp, #316	; 0x13c
 80054dc:	af02      	add	r7, sp, #8
 80054de:	f507 7498 	add.w	r4, r7, #304	; 0x130
 80054e2:	f5a4 7492 	sub.w	r4, r4, #292	; 0x124
 80054e6:	6020      	str	r0, [r4, #0]
 80054e8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80054ec:	f5a0 7094 	sub.w	r0, r0, #296	; 0x128
 80054f0:	6001      	str	r1, [r0, #0]
 80054f2:	f507 7198 	add.w	r1, r7, #304	; 0x130
 80054f6:	f5a1 7196 	sub.w	r1, r1, #300	; 0x12c
 80054fa:	600a      	str	r2, [r1, #0]
 80054fc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005500:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8005504:	6013      	str	r3, [r2, #0]
  struct mg_str *v = mg_http_get_header(hm, "Authorization");
 8005506:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800550a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800550e:	497a      	ldr	r1, [pc, #488]	; (80056f8 <mg_http_creds+0x220>)
 8005510:	6818      	ldr	r0, [r3, #0]
 8005512:	f7fe fa5b 	bl	80039cc <mg_http_get_header>
 8005516:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
  user[0] = pass[0] = '\0';
 800551a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800551e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2200      	movs	r2, #0
 8005526:	701a      	strb	r2, [r3, #0]
 8005528:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800552c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	781a      	ldrb	r2, [r3, #0]
 8005534:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005538:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	701a      	strb	r2, [r3, #0]
  if (v != NULL && v->len > 6 && memcmp(v->ptr, "Basic ", 6) == 0) {
 8005540:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005544:	2b00      	cmp	r3, #0
 8005546:	d05f      	beq.n	8005608 <mg_http_creds+0x130>
 8005548:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	2b06      	cmp	r3, #6
 8005550:	d95a      	bls.n	8005608 <mg_http_creds+0x130>
 8005552:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2206      	movs	r2, #6
 800555a:	4968      	ldr	r1, [pc, #416]	; (80056fc <mg_http_creds+0x224>)
 800555c:	4618      	mov	r0, r3
 800555e:	f00d ff6c 	bl	801343a <memcmp>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d14f      	bne.n	8005608 <mg_http_creds+0x130>
    char buf[256];
    int n = mg_base64_decode(v->ptr + 6, (int) v->len - 6, buf);
 8005568:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	1d98      	adds	r0, r3, #6
 8005570:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	3b06      	subs	r3, #6
 8005578:	f107 0214 	add.w	r2, r7, #20
 800557c:	4619      	mov	r1, r3
 800557e:	f7fb fec4 	bl	800130a <mg_base64_decode>
 8005582:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
    const char *p = (const char *) memchr(buf, ':', n > 0 ? (size_t) n : 0);
 8005586:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800558a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800558e:	461a      	mov	r2, r3
 8005590:	f107 0314 	add.w	r3, r7, #20
 8005594:	213a      	movs	r1, #58	; 0x3a
 8005596:	4618      	mov	r0, r3
 8005598:	f7fa feca 	bl	8000330 <memchr>
 800559c:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
    if (p != NULL) {
 80055a0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 80a1 	beq.w	80056ec <mg_http_creds+0x214>
      mg_snprintf(user, userlen, "%.*s", (int) (p - buf), buf);
 80055aa:	f107 0314 	add.w	r3, r7, #20
 80055ae:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80055b2:	1ad2      	subs	r2, r2, r3
 80055b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055b8:	f5a3 7196 	sub.w	r1, r3, #300	; 0x12c
 80055bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055c0:	f5a3 7094 	sub.w	r0, r3, #296	; 0x128
 80055c4:	f107 0314 	add.w	r3, r7, #20
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	4613      	mov	r3, r2
 80055cc:	4a4c      	ldr	r2, [pc, #304]	; (8005700 <mg_http_creds+0x228>)
 80055ce:	6809      	ldr	r1, [r1, #0]
 80055d0:	6800      	ldr	r0, [r0, #0]
 80055d2:	f002 faef 	bl	8007bb4 <mg_snprintf>
      mg_snprintf(pass, passlen, "%.*s", n - (int) (p - buf) - 1, p + 1);
 80055d6:	f107 0314 	add.w	r3, r7, #20
 80055da:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	1e5a      	subs	r2, r3, #1
 80055e8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80055ec:	3301      	adds	r3, #1
 80055ee:	f507 7198 	add.w	r1, r7, #304	; 0x130
 80055f2:	f5a1 7098 	sub.w	r0, r1, #304	; 0x130
 80055f6:	9300      	str	r3, [sp, #0]
 80055f8:	4613      	mov	r3, r2
 80055fa:	4a41      	ldr	r2, [pc, #260]	; (8005700 <mg_http_creds+0x228>)
 80055fc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005600:	6800      	ldr	r0, [r0, #0]
 8005602:	f002 fad7 	bl	8007bb4 <mg_snprintf>
  if (v != NULL && v->len > 6 && memcmp(v->ptr, "Basic ", 6) == 0) {
 8005606:	e071      	b.n	80056ec <mg_http_creds+0x214>
    }
  } else if (v != NULL && v->len > 7 && memcmp(v->ptr, "Bearer ", 7) == 0) {
 8005608:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800560c:	2b00      	cmp	r3, #0
 800560e:	d024      	beq.n	800565a <mg_http_creds+0x182>
 8005610:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	2b07      	cmp	r3, #7
 8005618:	d91f      	bls.n	800565a <mg_http_creds+0x182>
 800561a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2207      	movs	r2, #7
 8005622:	4938      	ldr	r1, [pc, #224]	; (8005704 <mg_http_creds+0x22c>)
 8005624:	4618      	mov	r0, r3
 8005626:	f00d ff08 	bl	801343a <memcmp>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d114      	bne.n	800565a <mg_http_creds+0x182>
    mg_snprintf(pass, passlen, "%.*s", (int) v->len - 7, v->ptr + 7);
 8005630:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	1fda      	subs	r2, r3, #7
 8005638:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	3307      	adds	r3, #7
 8005640:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8005644:	f5a1 7098 	sub.w	r0, r1, #304	; 0x130
 8005648:	9300      	str	r3, [sp, #0]
 800564a:	4613      	mov	r3, r2
 800564c:	4a2c      	ldr	r2, [pc, #176]	; (8005700 <mg_http_creds+0x228>)
 800564e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005652:	6800      	ldr	r0, [r0, #0]
 8005654:	f002 faae 	bl	8007bb4 <mg_snprintf>
 8005658:	e049      	b.n	80056ee <mg_http_creds+0x216>
  } else if ((v = mg_http_get_header(hm, "Cookie")) != NULL) {
 800565a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800565e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005662:	4929      	ldr	r1, [pc, #164]	; (8005708 <mg_http_creds+0x230>)
 8005664:	6818      	ldr	r0, [r3, #0]
 8005666:	f7fe f9b1 	bl	80039cc <mg_http_get_header>
 800566a:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
 800566e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005672:	2b00      	cmp	r3, #0
 8005674:	d028      	beq.n	80056c8 <mg_http_creds+0x1f0>
    struct mg_str t = mg_http_get_header_var(*v, mg_str_n("access_token", 12));
 8005676:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800567a:	220c      	movs	r2, #12
 800567c:	4923      	ldr	r1, [pc, #140]	; (800570c <mg_http_creds+0x234>)
 800567e:	4618      	mov	r0, r3
 8005680:	f003 f88f 	bl	80087a2 <mg_str_n>
 8005684:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8005688:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800568c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005696:	ca06      	ldmia	r2, {r1, r2}
 8005698:	f000 f863 	bl	8005762 <mg_http_get_header_var>
    if (t.len > 0) mg_snprintf(pass, passlen, "%.*s", (int) t.len, t.ptr);
 800569c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d024      	beq.n	80056ee <mg_http_creds+0x216>
 80056a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80056a8:	4619      	mov	r1, r3
 80056aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80056b2:	f5a2 7098 	sub.w	r0, r2, #304	; 0x130
 80056b6:	9300      	str	r3, [sp, #0]
 80056b8:	460b      	mov	r3, r1
 80056ba:	4a11      	ldr	r2, [pc, #68]	; (8005700 <mg_http_creds+0x228>)
 80056bc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80056c0:	6800      	ldr	r0, [r0, #0]
 80056c2:	f002 fa77 	bl	8007bb4 <mg_snprintf>
  } else {
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
  }
}
 80056c6:	e012      	b.n	80056ee <mg_http_creds+0x216>
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
 80056c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056cc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f103 0010 	add.w	r0, r3, #16
 80056d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056da:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 80056de:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80056e2:	6812      	ldr	r2, [r2, #0]
 80056e4:	4909      	ldr	r1, [pc, #36]	; (800570c <mg_http_creds+0x234>)
 80056e6:	f7fd ffe0 	bl	80036aa <mg_http_get_var>
}
 80056ea:	e000      	b.n	80056ee <mg_http_creds+0x216>
  if (v != NULL && v->len > 6 && memcmp(v->ptr, "Basic ", 6) == 0) {
 80056ec:	bf00      	nop
}
 80056ee:	bf00      	nop
 80056f0:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd90      	pop	{r4, r7, pc}
 80056f8:	08014d70 	.word	0x08014d70
 80056fc:	08014d80 	.word	0x08014d80
 8005700:	080143a0 	.word	0x080143a0
 8005704:	08014d88 	.word	0x08014d88
 8005708:	08014d90 	.word	0x08014d90
 800570c:	08014d98 	.word	0x08014d98

08005710 <stripquotes>:

static struct mg_str stripquotes(struct mg_str s) {
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	1d3b      	adds	r3, r7, #4
 800571a:	e883 0006 	stmia.w	r3, {r1, r2}
  return s.len > 1 && s.ptr[0] == '"' && s.ptr[s.len - 1] == '"'
 800571e:	68bb      	ldr	r3, [r7, #8]
             ? mg_str_n(s.ptr + 1, s.len - 2)
             : s;
 8005720:	2b01      	cmp	r3, #1
 8005722:	d913      	bls.n	800574c <stripquotes+0x3c>
  return s.len > 1 && s.ptr[0] == '"' && s.ptr[s.len - 1] == '"'
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	2b22      	cmp	r3, #34	; 0x22
 800572a:	d10f      	bne.n	800574c <stripquotes+0x3c>
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	3b01      	subs	r3, #1
 8005732:	4413      	add	r3, r2
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	2b22      	cmp	r3, #34	; 0x22
 8005738:	d108      	bne.n	800574c <stripquotes+0x3c>
             ? mg_str_n(s.ptr + 1, s.len - 2)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	1c59      	adds	r1, r3, #1
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	1e9a      	subs	r2, r3, #2
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	4618      	mov	r0, r3
 8005746:	f003 f82c 	bl	80087a2 <mg_str_n>
             : s;
 800574a:	e006      	b.n	800575a <stripquotes+0x4a>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	461a      	mov	r2, r3
 8005750:	1d3b      	adds	r3, r7, #4
 8005752:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005756:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <mg_http_get_header_var>:

struct mg_str mg_http_get_header_var(struct mg_str s, struct mg_str v) {
 8005762:	b082      	sub	sp, #8
 8005764:	b580      	push	{r7, lr}
 8005766:	b08c      	sub	sp, #48	; 0x30
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	1d38      	adds	r0, r7, #4
 800576e:	e880 0006 	stmia.w	r0, {r1, r2}
 8005772:	63fb      	str	r3, [r7, #60]	; 0x3c
  size_t i;
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 8005774:	2300      	movs	r3, #0
 8005776:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005778:	e072      	b.n	8005860 <mg_http_get_header_var+0xfe>
    if (s.ptr[i + v.len] == '=' && memcmp(&s.ptr[i], v.ptr, v.len) == 0) {
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800577e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005780:	440b      	add	r3, r1
 8005782:	4413      	add	r3, r2
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	2b3d      	cmp	r3, #61	; 0x3d
 8005788:	d167      	bne.n	800585a <mg_http_get_header_var+0xf8>
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578e:	4413      	add	r3, r2
 8005790:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005792:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005794:	4618      	mov	r0, r3
 8005796:	f00d fe50 	bl	801343a <memcmp>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d15c      	bne.n	800585a <mg_http_get_header_var+0xf8>
      const char *p = &s.ptr[i + v.len + 1], *b = p, *x = &s.ptr[s.len];
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a6:	440b      	add	r3, r1
 80057a8:	3301      	adds	r3, #1
 80057aa:	4413      	add	r3, r2
 80057ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80057ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b0:	627b      	str	r3, [r7, #36]	; 0x24
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	4413      	add	r3, r2
 80057b8:	623b      	str	r3, [r7, #32]
      int q = p < x && *p == '"' ? 1 : 0;
 80057ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d205      	bcs.n	80057ce <mg_http_get_header_var+0x6c>
 80057c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	2b22      	cmp	r3, #34	; 0x22
 80057c8:	d101      	bne.n	80057ce <mg_http_get_header_var+0x6c>
 80057ca:	2301      	movs	r3, #1
 80057cc:	e000      	b.n	80057d0 <mg_http_get_header_var+0x6e>
 80057ce:	2300      	movs	r3, #0
 80057d0:	61fb      	str	r3, [r7, #28]
      while (p < x &&
 80057d2:	e002      	b.n	80057da <mg_http_get_header_var+0x78>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
        p++;
 80057d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d6:	3301      	adds	r3, #1
 80057d8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (p < x &&
 80057da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057dc:	6a3b      	ldr	r3, [r7, #32]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d227      	bcs.n	8005832 <mg_http_get_header_var+0xd0>
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d010      	beq.n	800580a <mg_http_get_header_var+0xa8>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 80057e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d003      	beq.n	80057f8 <mg_http_get_header_var+0x96>
 80057f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	2b22      	cmp	r3, #34	; 0x22
 80057f6:	d001      	beq.n	80057fc <mg_http_get_header_var+0x9a>
 80057f8:	2301      	movs	r3, #1
 80057fa:	e000      	b.n	80057fe <mg_http_get_header_var+0x9c>
 80057fc:	2300      	movs	r3, #0
      while (p < x &&
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1e5      	bne.n	80057d4 <mg_http_get_header_var+0x72>
 8005808:	e013      	b.n	8005832 <mg_http_get_header_var+0xd0>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 800580a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	2b3b      	cmp	r3, #59	; 0x3b
 8005810:	d009      	beq.n	8005826 <mg_http_get_header_var+0xc4>
 8005812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	2b20      	cmp	r3, #32
 8005818:	d005      	beq.n	8005826 <mg_http_get_header_var+0xc4>
 800581a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	2b2c      	cmp	r3, #44	; 0x2c
 8005820:	d001      	beq.n	8005826 <mg_http_get_header_var+0xc4>
 8005822:	2301      	movs	r3, #1
 8005824:	e000      	b.n	8005828 <mg_http_get_header_var+0xc6>
 8005826:	2300      	movs	r3, #0
      while (p < x &&
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1d0      	bne.n	80057d4 <mg_http_get_header_var+0x72>
      // MG_INFO(("[%.*s] [%.*s] [%.*s]", (int) s.len, s.ptr, (int) v.len,
      // v.ptr, (int) (p - b), b));
      return stripquotes(mg_str_n(b, (size_t) (p - b + q)));
 8005832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	1ad2      	subs	r2, r2, r3
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	4413      	add	r3, r2
 800583c:	461a      	mov	r2, r3
 800583e:	f107 0314 	add.w	r3, r7, #20
 8005842:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005844:	4618      	mov	r0, r3
 8005846:	f002 ffac 	bl	80087a2 <mg_str_n>
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f107 0314 	add.w	r3, r7, #20
 8005850:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005854:	f7ff ff5c 	bl	8005710 <stripquotes>
 8005858:	e012      	b.n	8005880 <mg_http_get_header_var+0x11e>
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 800585a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585c:	3301      	adds	r3, #1
 800585e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005862:	2b00      	cmp	r3, #0
 8005864:	d006      	beq.n	8005874 <mg_http_get_header_var+0x112>
 8005866:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586a:	4413      	add	r3, r2
 800586c:	1c9a      	adds	r2, r3, #2
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	429a      	cmp	r2, r3
 8005872:	d382      	bcc.n	800577a <mg_http_get_header_var+0x18>
    }
  }
  return mg_str_n(NULL, 0);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	2100      	movs	r1, #0
 800587a:	4618      	mov	r0, r3
 800587c:	f002 ff91 	bl	80087a2 <mg_str_n>
}
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	3730      	adds	r7, #48	; 0x30
 8005884:	46bd      	mov	sp, r7
 8005886:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800588a:	b002      	add	sp, #8
 800588c:	4770      	bx	lr

0800588e <mg_http_match_uri>:

bool mg_http_match_uri(const struct mg_http_message *hm, const char *glob) {
 800588e:	b580      	push	{r7, lr}
 8005890:	b086      	sub	sp, #24
 8005892:	af02      	add	r7, sp, #8
 8005894:	6078      	str	r0, [r7, #4]
 8005896:	6039      	str	r1, [r7, #0]
  return mg_match(hm->uri, mg_str(glob), NULL);
 8005898:	f107 0308 	add.w	r3, r7, #8
 800589c:	6839      	ldr	r1, [r7, #0]
 800589e:	4618      	mov	r0, r3
 80058a0:	f002 ff62 	bl	8008768 <mg_str_s>
 80058a4:	6879      	ldr	r1, [r7, #4]
 80058a6:	2300      	movs	r3, #0
 80058a8:	9300      	str	r3, [sp, #0]
 80058aa:	f107 0308 	add.w	r3, r7, #8
 80058ae:	cb0c      	ldmia	r3, {r2, r3}
 80058b0:	3108      	adds	r1, #8
 80058b2:	c903      	ldmia	r1, {r0, r1}
 80058b4:	f003 f891 	bl	80089da <mg_match>
 80058b8:	4603      	mov	r3, r0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <getchunk>:
// MG_EV_HTTP_CHUNK events for every received piece of data, and then we fire
// MG_EV_HTTP_MSG event in the end.
//
// We track total processed length in the c->pfn_data, which is a void *
// pointer: we store a size_t value there.
static bool getchunk(struct mg_str s, size_t *prefixlen, size_t *datalen) {
 80058c2:	b590      	push	{r4, r7, lr}
 80058c4:	b087      	sub	sp, #28
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	f107 0408 	add.w	r4, r7, #8
 80058cc:	e884 0003 	stmia.w	r4, {r0, r1}
 80058d0:	607a      	str	r2, [r7, #4]
 80058d2:	603b      	str	r3, [r7, #0]
  size_t i = 0, n;
 80058d4:	2300      	movs	r3, #0
 80058d6:	617b      	str	r3, [r7, #20]
  while (i < s.len && s.ptr[i] != '\r' && s.ptr[i] != '\n') i++;
 80058d8:	e002      	b.n	80058e0 <getchunk+0x1e>
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	3301      	adds	r3, #1
 80058de:	617b      	str	r3, [r7, #20]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d20b      	bcs.n	8005900 <getchunk+0x3e>
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	4413      	add	r3, r2
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	2b0d      	cmp	r3, #13
 80058f2:	d005      	beq.n	8005900 <getchunk+0x3e>
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	4413      	add	r3, r2
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	2b0a      	cmp	r3, #10
 80058fe:	d1ec      	bne.n	80058da <getchunk+0x18>
  n = mg_unhexn(s.ptr, i);
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	6979      	ldr	r1, [r7, #20]
 8005904:	4618      	mov	r0, r3
 8005906:	f003 fa83 	bl	8008e10 <mg_unhexn>
 800590a:	6138      	str	r0, [r7, #16]
  // MG_INFO(("%d %d", (int) (i + n + 4), (int) s.len));
  if (s.len < i + n + 4) return false;  // Chunk not yet fully buffered
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	6979      	ldr	r1, [r7, #20]
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	440b      	add	r3, r1
 8005914:	3304      	adds	r3, #4
 8005916:	429a      	cmp	r2, r3
 8005918:	d201      	bcs.n	800591e <getchunk+0x5c>
 800591a:	2300      	movs	r3, #0
 800591c:	e02a      	b.n	8005974 <getchunk+0xb2>
  if (s.ptr[i] != '\r' || s.ptr[i + 1] != '\n') return false;
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	4413      	add	r3, r2
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	2b0d      	cmp	r3, #13
 8005928:	d106      	bne.n	8005938 <getchunk+0x76>
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	3301      	adds	r3, #1
 8005930:	4413      	add	r3, r2
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	2b0a      	cmp	r3, #10
 8005936:	d001      	beq.n	800593c <getchunk+0x7a>
 8005938:	2300      	movs	r3, #0
 800593a:	e01b      	b.n	8005974 <getchunk+0xb2>
  if (s.ptr[i + n + 2] != '\r' || s.ptr[i + n + 3] != '\n') return false;
 800593c:	68ba      	ldr	r2, [r7, #8]
 800593e:	6979      	ldr	r1, [r7, #20]
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	440b      	add	r3, r1
 8005944:	3302      	adds	r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	2b0d      	cmp	r3, #13
 800594c:	d108      	bne.n	8005960 <getchunk+0x9e>
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	6979      	ldr	r1, [r7, #20]
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	440b      	add	r3, r1
 8005956:	3303      	adds	r3, #3
 8005958:	4413      	add	r3, r2
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	2b0a      	cmp	r3, #10
 800595e:	d001      	beq.n	8005964 <getchunk+0xa2>
 8005960:	2300      	movs	r3, #0
 8005962:	e007      	b.n	8005974 <getchunk+0xb2>
  *prefixlen = i + 2;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	1c9a      	adds	r2, r3, #2
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	601a      	str	r2, [r3, #0]
  *datalen = n;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	601a      	str	r2, [r3, #0]
  return true;
 8005972:	2301      	movs	r3, #1
}
 8005974:	4618      	mov	r0, r3
 8005976:	371c      	adds	r7, #28
 8005978:	46bd      	mov	sp, r7
 800597a:	bd90      	pop	{r4, r7, pc}

0800597c <mg_is_chunked>:

static bool mg_is_chunked(struct mg_http_message *hm) {
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  const char *needle = "chunked";
 8005984:	4b0d      	ldr	r3, [pc, #52]	; (80059bc <mg_is_chunked+0x40>)
 8005986:	60fb      	str	r3, [r7, #12]
  struct mg_str *te = mg_http_get_header(hm, "Transfer-Encoding");
 8005988:	490d      	ldr	r1, [pc, #52]	; (80059c0 <mg_is_chunked+0x44>)
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7fe f81e 	bl	80039cc <mg_http_get_header>
 8005990:	60b8      	str	r0, [r7, #8]
  return te != NULL && mg_vcasecmp(te, needle) == 0;
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d008      	beq.n	80059aa <mg_is_chunked+0x2e>
 8005998:	68f9      	ldr	r1, [r7, #12]
 800599a:	68b8      	ldr	r0, [r7, #8]
 800599c:	f002 ff82 	bl	80088a4 <mg_vcasecmp>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <mg_is_chunked+0x2e>
 80059a6:	2301      	movs	r3, #1
 80059a8:	e000      	b.n	80059ac <mg_is_chunked+0x30>
 80059aa:	2300      	movs	r3, #0
 80059ac:	f003 0301 	and.w	r3, r3, #1
 80059b0:	b2db      	uxtb	r3, r3
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	08014e1c 	.word	0x08014e1c
 80059c0:	08014e24 	.word	0x08014e24

080059c4 <deliver_chunked_chunks>:
  mg_iobuf_del(&c->recv, ofs, hm->chunk.len);
  c->pfn_data = (void *) ((size_t) c->pfn_data | MG_DMARK);
}

static void deliver_chunked_chunks(struct mg_connection *c, size_t hlen,
                                   struct mg_http_message *hm, bool *next) {
 80059c4:	b590      	push	{r4, r7, lr}
 80059c6:	b095      	sub	sp, #84	; 0x54
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6178      	str	r0, [r7, #20]
 80059cc:	6139      	str	r1, [r7, #16]
 80059ce:	60fa      	str	r2, [r7, #12]
 80059d0:	60bb      	str	r3, [r7, #8]
  //  |  ... headers ... | HEXNUM\r\n ..data.. \r\n | ......
  //  +------------------+--------------------------+----
  //  |      hlen        |           chunk1         | ......
  char *buf = (char *) &c->recv.buf[hlen], *p = buf;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	4413      	add	r3, r2
 80059da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059de:	637b      	str	r3, [r7, #52]	; 0x34
  size_t len = c->recv.len - hlen;
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	64bb      	str	r3, [r7, #72]	; 0x48
  size_t processed = ((size_t) c->pfn_data) & ~MG_DMARK;
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059f2:	647b      	str	r3, [r7, #68]	; 0x44
  size_t mark, pl, dl, del = 0, ofs = 0;
 80059f4:	2300      	movs	r3, #0
 80059f6:	643b      	str	r3, [r7, #64]	; 0x40
 80059f8:	2300      	movs	r3, #0
 80059fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  bool last = false;
 80059fc:	2300      	movs	r3, #0
 80059fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  if (processed <= len) len -= processed, buf += processed;
 8005a02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d851      	bhi.n	8005aae <deliver_chunked_chunks+0xea>
 8005a0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a16:	4413      	add	r3, r2
 8005a18:	64fb      	str	r3, [r7, #76]	; 0x4c
  while (!last && getchunk(mg_str_n(buf + ofs, len - ofs), &pl, &dl)) {
 8005a1a:	e048      	b.n	8005aae <deliver_chunked_chunks+0xea>
    size_t saved = c->recv.len;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a20:	633b      	str	r3, [r7, #48]	; 0x30
    memmove(p + processed, buf + ofs + pl, dl);
 8005a22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a26:	18d0      	adds	r0, r2, r3
 8005a28:	6a3a      	ldr	r2, [r7, #32]
 8005a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a2c:	4413      	add	r3, r2
 8005a2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a30:	4413      	add	r3, r2
 8005a32:	69fa      	ldr	r2, [r7, #28]
 8005a34:	4619      	mov	r1, r3
 8005a36:	f00d fd10 	bl	801345a <memmove>
    // MG_INFO(("P2 [%.*s]", (int) (processed + dl), p));
    hm->chunk = mg_str_n(p + processed, dl);
 8005a3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a3e:	18d1      	adds	r1, r2, r3
 8005a40:	69fa      	ldr	r2, [r7, #28]
 8005a42:	68fc      	ldr	r4, [r7, #12]
 8005a44:	463b      	mov	r3, r7
 8005a46:	4618      	mov	r0, r3
 8005a48:	f002 feab 	bl	80087a2 <mg_str_n>
 8005a4c:	f504 7304 	add.w	r3, r4, #528	; 0x210
 8005a50:	463a      	mov	r2, r7
 8005a52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005a56:	e883 0003 	stmia.w	r3, {r0, r1}
    mg_call(c, MG_EV_HTTP_CHUNK, hm);
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	210b      	movs	r1, #11
 8005a5e:	6978      	ldr	r0, [r7, #20]
 8005a60:	f7fc fa94 	bl	8001f8c <mg_call>
    ofs += pl + dl + 2, del += pl + 2;  // 2 is for \r\n suffix
 8005a64:	6a3a      	ldr	r2, [r7, #32]
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	441a      	add	r2, r3
 8005a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a6c:	4413      	add	r3, r2
 8005a6e:	3302      	adds	r3, #2
 8005a70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a72:	6a3a      	ldr	r2, [r7, #32]
 8005a74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a76:	4413      	add	r3, r2
 8005a78:	3302      	adds	r3, #2
 8005a7a:	643b      	str	r3, [r7, #64]	; 0x40
    processed += dl;
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a80:	4413      	add	r3, r2
 8005a82:	647b      	str	r3, [r7, #68]	; 0x44
    if (c->recv.len != saved) processed -= dl, buf -= dl;
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d008      	beq.n	8005aa0 <deliver_chunked_chunks+0xdc>
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	647b      	str	r3, [r7, #68]	; 0x44
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	425b      	negs	r3, r3
 8005a9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a9c:	4413      	add	r3, r2
 8005a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
    // mg_hexdump(c->recv.buf, hlen + processed);
    last = (dl == 0);
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	bf0c      	ite	eq
 8005aa6:	2301      	moveq	r3, #1
 8005aa8:	2300      	movne	r3, #0
 8005aaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  while (!last && getchunk(mg_str_n(buf + ofs, len - ofs), &pl, &dl)) {
 8005aae:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005ab2:	f083 0301 	eor.w	r3, r3, #1
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d016      	beq.n	8005aea <deliver_chunked_chunks+0x126>
 8005abc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ac0:	18d1      	adds	r1, r2, r3
 8005ac2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ac6:	1ad2      	subs	r2, r2, r3
 8005ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005acc:	4618      	mov	r0, r3
 8005ace:	f002 fe68 	bl	80087a2 <mg_str_n>
 8005ad2:	f107 031c 	add.w	r3, r7, #28
 8005ad6:	f107 0220 	add.w	r2, r7, #32
 8005ada:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8005ade:	c903      	ldmia	r1, {r0, r1}
 8005ae0:	f7ff feef 	bl	80058c2 <getchunk>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d198      	bne.n	8005a1c <deliver_chunked_chunks+0x58>
  }
  mg_iobuf_del(&c->recv, hlen + processed, del);
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005af4:	4413      	add	r3, r2
 8005af6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005af8:	4619      	mov	r1, r3
 8005afa:	f000 fb13 	bl	8006124 <mg_iobuf_del>
  mark = ((size_t) c->pfn_data) & MG_DMARK;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  c->pfn_data = (void *) (processed | mark);
 8005b08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	461a      	mov	r2, r3
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	665a      	str	r2, [r3, #100]	; 0x64
  if (last) {
 8005b14:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d019      	beq.n	8005b50 <deliver_chunked_chunks+0x18c>
    hm->body.len = processed;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b20:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hm->message.len = hlen + processed;
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b28:	441a      	add	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    c->pfn_data = NULL;
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	2200      	movs	r2, #0
 8005b34:	665a      	str	r2, [r3, #100]	; 0x64
    if (mark) mg_iobuf_del(&c->recv, 0, hlen), *next = true;
 8005b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d009      	beq.n	8005b50 <deliver_chunked_chunks+0x18c>
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	3338      	adds	r3, #56	; 0x38
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	2100      	movs	r1, #0
 8005b44:	4618      	mov	r0, r3
 8005b46:	f000 faed 	bl	8006124 <mg_iobuf_del>
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	701a      	strb	r2, [r3, #0]
    // MG_INFO(("LAST, mark: %lx", mark));
    // mg_hexdump(c->recv.buf, c->recv.len);
  }
}
 8005b50:	bf00      	nop
 8005b52:	3754      	adds	r7, #84	; 0x54
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd90      	pop	{r4, r7, pc}

08005b58 <deliver_normal_chunks>:

static void deliver_normal_chunks(struct mg_connection *c, size_t hlen,
                                  struct mg_http_message *hm, bool *next) {
 8005b58:	b590      	push	{r4, r7, lr}
 8005b5a:	b08b      	sub	sp, #44	; 0x2c
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6178      	str	r0, [r7, #20]
 8005b60:	6139      	str	r1, [r7, #16]
 8005b62:	60fa      	str	r2, [r7, #12]
 8005b64:	60bb      	str	r3, [r7, #8]
  size_t left, processed = ((size_t) c->pfn_data) & ~MG_DMARK;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b6e:	627b      	str	r3, [r7, #36]	; 0x24
  size_t deleted = ((size_t) c->pfn_data) & MG_DMARK;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b78:	623b      	str	r3, [r7, #32]
  hm->chunk = mg_str_n((char *) &c->recv.buf[hlen], c->recv.len - hlen);
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	18d1      	adds	r1, r2, r3
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	1ad2      	subs	r2, r2, r3
 8005b8a:	68fc      	ldr	r4, [r7, #12]
 8005b8c:	463b      	mov	r3, r7
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f002 fe07 	bl	80087a2 <mg_str_n>
 8005b94:	f504 7304 	add.w	r3, r4, #528	; 0x210
 8005b98:	463a      	mov	r2, r7
 8005b9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b9e:	e883 0003 	stmia.w	r3, {r0, r1}
  if (processed <= hm->chunk.len && !deleted) {
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d812      	bhi.n	8005bd4 <deliver_normal_chunks+0x7c>
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10f      	bne.n	8005bd4 <deliver_normal_chunks+0x7c>
    hm->chunk.len -= processed;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	1ad2      	subs	r2, r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hm->chunk.ptr += processed;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	441a      	add	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  left = hm->body.len < processed ? 0 : hm->body.len - processed;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d805      	bhi.n	8005bec <deliver_normal_chunks+0x94>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	e000      	b.n	8005bee <deliver_normal_chunks+0x96>
 8005bec:	2300      	movs	r3, #0
 8005bee:	61fb      	str	r3, [r7, #28]
  if (hm->chunk.len > left) hm->chunk.len = left;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005bf6:	69fa      	ldr	r2, [r7, #28]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d203      	bcs.n	8005c04 <deliver_normal_chunks+0xac>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	69fa      	ldr	r2, [r7, #28]
 8005c00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  if (hm->chunk.len > 0) mg_call(c, MG_EV_HTTP_CHUNK, hm);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d004      	beq.n	8005c18 <deliver_normal_chunks+0xc0>
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	210b      	movs	r1, #11
 8005c12:	6978      	ldr	r0, [r7, #20]
 8005c14:	f7fc f9ba 	bl	8001f8c <mg_call>
  processed += hm->chunk.len;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c20:	4413      	add	r3, r2
 8005c22:	627b      	str	r3, [r7, #36]	; 0x24
  deleted = ((size_t) c->pfn_data) & MG_DMARK;  // Re-evaluate after user call
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c2c:	623b      	str	r3, [r7, #32]
  if (processed >= hm->body.len) {              // Last, 0-len chunk
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d31c      	bcc.n	8005c74 <deliver_normal_chunks+0x11c>
    hm->chunk.len = 0;                          // Reset length
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    mg_call(c, MG_EV_HTTP_CHUNK, hm);           // Call user handler
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	210b      	movs	r1, #11
 8005c46:	6978      	ldr	r0, [r7, #20]
 8005c48:	f7fc f9a0 	bl	8001f8c <mg_call>
    c->pfn_data = NULL;                         // Reset processed counter
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	665a      	str	r2, [r3, #100]	; 0x64
    if (processed && deleted) mg_iobuf_del(&c->recv, 0, hlen), *next = true;
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d013      	beq.n	8005c80 <deliver_normal_chunks+0x128>
 8005c58:	6a3b      	ldr	r3, [r7, #32]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d010      	beq.n	8005c80 <deliver_normal_chunks+0x128>
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	3338      	adds	r3, #56	; 0x38
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	2100      	movs	r1, #0
 8005c66:	4618      	mov	r0, r3
 8005c68:	f000 fa5c 	bl	8006124 <mg_iobuf_del>
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	701a      	strb	r2, [r3, #0]
  } else {
    c->pfn_data = (void *) (processed | deleted);  // if it is set
  }
}
 8005c72:	e005      	b.n	8005c80 <deliver_normal_chunks+0x128>
    c->pfn_data = (void *) (processed | deleted);  // if it is set
 8005c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c76:	6a3b      	ldr	r3, [r7, #32]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005c80:	bf00      	nop
 8005c82:	372c      	adds	r7, #44	; 0x2c
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd90      	pop	{r4, r7, pc}

08005c88 <http_cb>:

static void http_cb(struct mg_connection *c, int ev, void *evd, void *fnd) {
 8005c88:	b590      	push	{r4, r7, lr}
 8005c8a:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	f507 740e 	add.w	r4, r7, #568	; 0x238
 8005c94:	f5a4 740b 	sub.w	r4, r4, #556	; 0x22c
 8005c98:	6020      	str	r0, [r4, #0]
 8005c9a:	f507 700e 	add.w	r0, r7, #568	; 0x238
 8005c9e:	f5a0 700c 	sub.w	r0, r0, #560	; 0x230
 8005ca2:	6001      	str	r1, [r0, #0]
 8005ca4:	f507 710e 	add.w	r1, r7, #568	; 0x238
 8005ca8:	f5a1 710d 	sub.w	r1, r1, #564	; 0x234
 8005cac:	600a      	str	r2, [r1, #0]
 8005cae:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8005cb2:	f5a2 720e 	sub.w	r2, r2, #568	; 0x238
 8005cb6:	6013      	str	r3, [r2, #0]
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE) {
 8005cb8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005cbc:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2b07      	cmp	r3, #7
 8005cc4:	f000 80e9 	beq.w	8005e9a <http_cb+0x212>
 8005cc8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005ccc:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2b09      	cmp	r3, #9
 8005cd4:	f040 80f2 	bne.w	8005ebc <http_cb+0x234>
    struct mg_http_message hm;
    // mg_hexdump(c->recv.buf, c->recv.len);
    while (c->recv.buf != NULL && c->recv.len > 0) {
 8005cd8:	e0df      	b.n	8005e9a <http_cb+0x212>
      bool next = false;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	f887 3233 	strb.w	r3, [r7, #563]	; 0x233
      int hlen = mg_http_parse((char *) c->recv.buf, c->recv.len, &hm);
 8005ce0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005ce4:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005cec:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005cf0:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf8:	f107 0210 	add.w	r2, r7, #16
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	f7fd ff0b 	bl	8003b18 <mg_http_parse>
 8005d02:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234
      if (hlen < 0) {
 8005d06:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	da17      	bge.n	8005d3e <http_cb+0xb6>
        mg_error(c, "HTTP parse:\n%.*s", (int) c->recv.len, c->recv.buf);
 8005d0e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005d12:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005d20:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d28:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8005d2c:	f5a2 700b 	sub.w	r0, r2, #556	; 0x22c
 8005d30:	460a      	mov	r2, r1
 8005d32:	4965      	ldr	r1, [pc, #404]	; (8005ec8 <http_cb+0x240>)
 8005d34:	6800      	ldr	r0, [r0, #0]
 8005d36:	f7fc f94b 	bl	8001fd0 <mg_error>
        break;
 8005d3a:	bf00      	nop
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
      mg_iobuf_del(&c->recv, 0, hm.message.len);
    }
  }
  (void) evd, (void) fnd;
}
 8005d3c:	e0be      	b.n	8005ebc <http_cb+0x234>
      if (c->is_resp) break;           // Response is still generated
 8005d3e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005d42:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8005d4c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f040 809b 	bne.w	8005e8e <http_cb+0x206>
      if (hlen == 0) break;            // Request is not buffered yet
 8005d58:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f000 8098 	beq.w	8005e92 <http_cb+0x20a>
      if (ev == MG_EV_CLOSE) {         // If client did not set Content-Length
 8005d62:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005d66:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2b09      	cmp	r3, #9
 8005d6e:	d125      	bne.n	8005dbc <http_cb+0x134>
        hm.message.len = c->recv.len;  // and closes now, deliver a MSG
 8005d70:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005d74:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d7c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005d80:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8005d84:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
        hm.body.len = hm.message.len - (size_t) (hm.body.ptr - hm.message.ptr);
 8005d88:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005d8c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8005d90:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005d94:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8005d98:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 8005d9c:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 8005da0:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8005da4:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 8005da8:	f8d2 2218 	ldr.w	r2, [r2, #536]	; 0x218
 8005dac:	1a8a      	subs	r2, r1, r2
 8005dae:	1a9a      	subs	r2, r3, r2
 8005db0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005db4:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8005db8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      if (mg_is_chunked(&hm)) {
 8005dbc:	f107 0310 	add.w	r3, r7, #16
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7ff fddb 	bl	800597c <mg_is_chunked>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00d      	beq.n	8005de8 <http_cb+0x160>
        deliver_chunked_chunks(c, (size_t) hlen, &hm, &next);
 8005dcc:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 8005dd0:	f207 2333 	addw	r3, r7, #563	; 0x233
 8005dd4:	f107 0210 	add.w	r2, r7, #16
 8005dd8:	f507 700e 	add.w	r0, r7, #568	; 0x238
 8005ddc:	f5a0 700b 	sub.w	r0, r0, #556	; 0x22c
 8005de0:	6800      	ldr	r0, [r0, #0]
 8005de2:	f7ff fdef 	bl	80059c4 <deliver_chunked_chunks>
 8005de6:	e00c      	b.n	8005e02 <http_cb+0x17a>
        deliver_normal_chunks(c, (size_t) hlen, &hm, &next);
 8005de8:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 8005dec:	f207 2333 	addw	r3, r7, #563	; 0x233
 8005df0:	f107 0210 	add.w	r2, r7, #16
 8005df4:	f507 700e 	add.w	r0, r7, #568	; 0x238
 8005df8:	f5a0 700b 	sub.w	r0, r0, #556	; 0x22c
 8005dfc:	6800      	ldr	r0, [r0, #0]
 8005dfe:	f7ff feab 	bl	8005b58 <deliver_normal_chunks>
      if (next) continue;  // Chunks & request were deleted
 8005e02:	f897 3233 	ldrb.w	r3, [r7, #563]	; 0x233
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d000      	beq.n	8005e0c <http_cb+0x184>
 8005e0a:	e046      	b.n	8005e9a <http_cb+0x212>
      if (c->recv.len < hm.message.len) break;
 8005e0c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005e10:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e18:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005e1c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8005e20:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d336      	bcc.n	8005e96 <http_cb+0x20e>
      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 8005e28:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005e2c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8005e36:	f003 0304 	and.w	r3, r3, #4
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00a      	beq.n	8005e56 <http_cb+0x1ce>
 8005e40:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005e44:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8005e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e52:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 8005e56:	f107 0210 	add.w	r2, r7, #16
 8005e5a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005e5e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005e62:	210a      	movs	r1, #10
 8005e64:	6818      	ldr	r0, [r3, #0]
 8005e66:	f7fc f891 	bl	8001f8c <mg_call>
      mg_iobuf_del(&c->recv, 0, hm.message.len);
 8005e6a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005e6e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005e78:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005e7c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8005e80:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005e84:	461a      	mov	r2, r3
 8005e86:	2100      	movs	r1, #0
 8005e88:	f000 f94c 	bl	8006124 <mg_iobuf_del>
 8005e8c:	e005      	b.n	8005e9a <http_cb+0x212>
      if (c->is_resp) break;           // Response is still generated
 8005e8e:	bf00      	nop
 8005e90:	e014      	b.n	8005ebc <http_cb+0x234>
      if (hlen == 0) break;            // Request is not buffered yet
 8005e92:	bf00      	nop
 8005e94:	e012      	b.n	8005ebc <http_cb+0x234>
      if (c->recv.len < hm.message.len) break;
 8005e96:	bf00      	nop
}
 8005e98:	e010      	b.n	8005ebc <http_cb+0x234>
    while (c->recv.buf != NULL && c->recv.len > 0) {
 8005e9a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005e9e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d008      	beq.n	8005ebc <http_cb+0x234>
 8005eaa:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005eae:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f47f af0f 	bne.w	8005cda <http_cb+0x52>
}
 8005ebc:	bf00      	nop
 8005ebe:	f507 770f 	add.w	r7, r7, #572	; 0x23c
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd90      	pop	{r4, r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	08014e38 	.word	0x08014e38

08005ecc <mg_http_listen>:
  if (c != NULL) c->pfn = http_cb;
  return c;
}

struct mg_connection *mg_http_listen(struct mg_mgr *mgr, const char *url,
                                     mg_event_handler_t fn, void *fn_data) {
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	68b9      	ldr	r1, [r7, #8]
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f001 fcfd 	bl	80078e0 <mg_listen>
 8005ee6:	6178      	str	r0, [r7, #20]
  if (c != NULL) c->pfn = http_cb;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d002      	beq.n	8005ef4 <mg_http_listen+0x28>
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	4a03      	ldr	r2, [pc, #12]	; (8005f00 <mg_http_listen+0x34>)
 8005ef2:	661a      	str	r2, [r3, #96]	; 0x60
  return c;
 8005ef4:	697b      	ldr	r3, [r7, #20]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	08005c89 	.word	0x08005c89

08005f04 <zeromem>:



// Not using memset for zeroing memory, cause it can be dropped by compiler
// See https://github.com/cesanta/mongoose/pull/1265
static void zeromem(volatile unsigned char *buf, size_t len) {
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  if (buf != NULL) {
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00a      	beq.n	8005f2a <zeromem+0x26>
    while (len--) *buf++ = 0;
 8005f14:	e004      	b.n	8005f20 <zeromem+0x1c>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	1c5a      	adds	r2, r3, #1
 8005f1a:	607a      	str	r2, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	701a      	strb	r2, [r3, #0]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	1e5a      	subs	r2, r3, #1
 8005f24:	603a      	str	r2, [r7, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1f5      	bne.n	8005f16 <zeromem+0x12>
  }
}
 8005f2a:	bf00      	nop
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <roundup>:

static size_t roundup(size_t size, size_t align) {
 8005f36:	b480      	push	{r7}
 8005f38:	b083      	sub	sp, #12
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
 8005f3e:	6039      	str	r1, [r7, #0]
  return align == 0 ? size : (size + align - 1) / align * align;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00a      	beq.n	8005f5c <roundup+0x26>
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	1e5a      	subs	r2, r3, #1
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f54:	683a      	ldr	r2, [r7, #0]
 8005f56:	fb02 f303 	mul.w	r3, r2, r3
 8005f5a:	e000      	b.n	8005f5e <roundup+0x28>
 8005f5c:	687b      	ldr	r3, [r7, #4]
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	370c      	adds	r7, #12
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
	...

08005f6c <mg_iobuf_resize>:

int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 8005f6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005f70:	b088      	sub	sp, #32
 8005f72:	af02      	add	r7, sp, #8
 8005f74:	6078      	str	r0, [r7, #4]
 8005f76:	6039      	str	r1, [r7, #0]
  int ok = 1;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	617b      	str	r3, [r7, #20]
  new_size = roundup(new_size, io->align);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	4619      	mov	r1, r3
 8005f82:	6838      	ldr	r0, [r7, #0]
 8005f84:	f7ff ffd7 	bl	8005f36 <roundup>
 8005f88:	6038      	str	r0, [r7, #0]
  if (new_size == 0) {
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d117      	bne.n	8005fc0 <mg_iobuf_resize+0x54>
    zeromem(io->buf, io->size);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	4619      	mov	r1, r3
 8005f9a:	4610      	mov	r0, r2
 8005f9c:	f7ff ffb2 	bl	8005f04 <zeromem>
    free(io->buf);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f00c ff8f 	bl	8012ec8 <free>
    io->buf = NULL;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	601a      	str	r2, [r3, #0]
    io->len = io->size = 0;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	605a      	str	r2, [r3, #4]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685a      	ldr	r2, [r3, #4]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	609a      	str	r2, [r3, #8]
 8005fbe:	e052      	b.n	8006066 <mg_iobuf_resize+0xfa>
  } else if (new_size != io->size) {
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	683a      	ldr	r2, [r7, #0]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d04d      	beq.n	8006066 <mg_iobuf_resize+0xfa>
    // NOTE(lsm): do not use realloc here. Use calloc/free only, to ease the
    // porting to some obscure platforms like FreeRTOS
    void *p = calloc(1, new_size);
 8005fca:	6839      	ldr	r1, [r7, #0]
 8005fcc:	2001      	movs	r0, #1
 8005fce:	f00c ff55 	bl	8012e7c <calloc>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	613b      	str	r3, [r7, #16]
    if (p != NULL) {
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d028      	beq.n	800602e <mg_iobuf_resize+0xc2>
      size_t len = new_size < io->len ? new_size : io->len;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	683a      	ldr	r2, [r7, #0]
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	bf28      	it	cs
 8005fe6:	4613      	movcs	r3, r2
 8005fe8:	60fb      	str	r3, [r7, #12]
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00a      	beq.n	8006006 <mg_iobuf_resize+0x9a>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d006      	beq.n	8006006 <mg_iobuf_resize+0x9a>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	4619      	mov	r1, r3
 8006000:	6938      	ldr	r0, [r7, #16]
 8006002:	f00d fa2a 	bl	801345a <memmove>
      zeromem(io->buf, io->size);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	4619      	mov	r1, r3
 8006010:	4610      	mov	r0, r2
 8006012:	f7ff ff77 	bl	8005f04 <zeromem>
      free(io->buf);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4618      	mov	r0, r3
 800601c:	f00c ff54 	bl	8012ec8 <free>
      io->buf = (unsigned char *) p;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	601a      	str	r2, [r3, #0]
      io->size = new_size;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	683a      	ldr	r2, [r7, #0]
 800602a:	605a      	str	r2, [r3, #4]
 800602c:	e01b      	b.n	8006066 <mg_iobuf_resize+0xfa>
    } else {
      ok = 0;
 800602e:	2300      	movs	r3, #0
 8006030:	617b      	str	r3, [r7, #20]
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 8006032:	4b10      	ldr	r3, [pc, #64]	; (8006074 <mg_iobuf_resize+0x108>)
 8006034:	f640 1246 	movw	r2, #2374	; 0x946
 8006038:	490f      	ldr	r1, [pc, #60]	; (8006078 <mg_iobuf_resize+0x10c>)
 800603a:	2001      	movs	r0, #1
 800603c:	f000 ff86 	bl	8006f4c <mg_log_prefix>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00f      	beq.n	8006066 <mg_iobuf_resize+0xfa>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	4698      	mov	r8, r3
 800604e:	4691      	mov	r9, r2
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	2200      	movs	r2, #0
 8006054:	461c      	mov	r4, r3
 8006056:	4615      	mov	r5, r2
 8006058:	e9cd 4500 	strd	r4, r5, [sp]
 800605c:	4642      	mov	r2, r8
 800605e:	464b      	mov	r3, r9
 8006060:	4806      	ldr	r0, [pc, #24]	; (800607c <mg_iobuf_resize+0x110>)
 8006062:	f000 ffcd 	bl	8007000 <mg_log>
    }
  }
  return ok;
 8006066:	697b      	ldr	r3, [r7, #20]
}
 8006068:	4618      	mov	r0, r3
 800606a:	3718      	adds	r7, #24
 800606c:	46bd      	mov	sp, r7
 800606e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006072:	bf00      	nop
 8006074:	080161e0 	.word	0x080161e0
 8006078:	08014270 	.word	0x08014270
 800607c:	08014e84 	.word	0x08014e84

08006080 <mg_iobuf_add>:
  io->size = io->len = 0;
  return mg_iobuf_resize(io, size);
}

size_t mg_iobuf_add(struct mg_iobuf *io, size_t ofs, const void *buf,
                    size_t len) {
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
 800608c:	603b      	str	r3, [r7, #0]
  size_t new_size = roundup(io->len + len, io->align);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	689a      	ldr	r2, [r3, #8]
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	441a      	add	r2, r3
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	4619      	mov	r1, r3
 800609c:	4610      	mov	r0, r2
 800609e:	f7ff ff4a 	bl	8005f36 <roundup>
 80060a2:	6178      	str	r0, [r7, #20]
  mg_iobuf_resize(io, new_size);      // Attempt to resize
 80060a4:	6979      	ldr	r1, [r7, #20]
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f7ff ff60 	bl	8005f6c <mg_iobuf_resize>
  if (new_size != io->size) len = 0;  // Resize failure, append nothing
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d001      	beq.n	80060ba <mg_iobuf_add+0x3a>
 80060b6:	2300      	movs	r3, #0
 80060b8:	603b      	str	r3, [r7, #0]
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d210      	bcs.n	80060e6 <mg_iobuf_add+0x66>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	68b9      	ldr	r1, [r7, #8]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	440b      	add	r3, r1
 80060ce:	18d0      	adds	r0, r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	18d1      	adds	r1, r2, r3
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	689a      	ldr	r2, [r3, #8]
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	461a      	mov	r2, r3
 80060e2:	f00d f9ba 	bl	801345a <memmove>
  if (buf != NULL) memmove(io->buf + ofs, buf, len);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d008      	beq.n	80060fe <mg_iobuf_add+0x7e>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	4413      	add	r3, r2
 80060f4:	683a      	ldr	r2, [r7, #0]
 80060f6:	6879      	ldr	r1, [r7, #4]
 80060f8:	4618      	mov	r0, r3
 80060fa:	f00d f9ae 	bl	801345a <memmove>
  if (ofs > io->len) io->len += ofs - io->len;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	429a      	cmp	r2, r3
 8006106:	d902      	bls.n	800610e <mg_iobuf_add+0x8e>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	609a      	str	r2, [r3, #8]
  io->len += len;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	689a      	ldr	r2, [r3, #8]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	441a      	add	r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	609a      	str	r2, [r3, #8]
  return len;
 800611a:	683b      	ldr	r3, [r7, #0]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3718      	adds	r7, #24
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <mg_iobuf_del>:

size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
  if (ofs > io->len) ofs = io->len;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	429a      	cmp	r2, r3
 8006138:	d902      	bls.n	8006140 <mg_iobuf_del+0x1c>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	60bb      	str	r3, [r7, #8]
  if (ofs + len > io->len) len = io->len - ofs;
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	441a      	add	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	429a      	cmp	r2, r3
 800614c:	d904      	bls.n	8006158 <mg_iobuf_del+0x34>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	689a      	ldr	r2, [r3, #8]
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	607b      	str	r3, [r7, #4]
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d012      	beq.n	8006186 <mg_iobuf_del+0x62>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	18d0      	adds	r0, r2, r3
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	68b9      	ldr	r1, [r7, #8]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	440b      	add	r3, r1
 8006172:	18d1      	adds	r1, r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	689a      	ldr	r2, [r3, #8]
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	1ad2      	subs	r2, r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	461a      	mov	r2, r3
 8006182:	f00d f96a 	bl	801345a <memmove>
  if (io->buf) zeromem(io->buf + io->len - len, len);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00a      	beq.n	80061a4 <mg_iobuf_del+0x80>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6899      	ldr	r1, [r3, #8]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	1acb      	subs	r3, r1, r3
 800619a:	4413      	add	r3, r2
 800619c:	6879      	ldr	r1, [r7, #4]
 800619e:	4618      	mov	r0, r3
 80061a0:	f7ff feb0 	bl	8005f04 <zeromem>
  io->len -= len;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	689a      	ldr	r2, [r3, #8]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	1ad2      	subs	r2, r2, r3
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	609a      	str	r2, [r3, #8]
  return len;
 80061b0:	687b      	ldr	r3, [r7, #4]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <mg_iobuf_free>:

void mg_iobuf_free(struct mg_iobuf *io) {
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b082      	sub	sp, #8
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  mg_iobuf_resize(io, 0);
 80061c2:	2100      	movs	r1, #0
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f7ff fed1 	bl	8005f6c <mg_iobuf_resize>
}
 80061ca:	bf00      	nop
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
	...

080061d4 <escapeseq>:
#endif




static const char *escapeseq(int esc) {
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d001      	beq.n	80061e6 <escapeseq+0x12>
 80061e2:	4b04      	ldr	r3, [pc, #16]	; (80061f4 <escapeseq+0x20>)
 80061e4:	e000      	b.n	80061e8 <escapeseq+0x14>
 80061e6:	4b04      	ldr	r3, [pc, #16]	; (80061f8 <escapeseq+0x24>)
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr
 80061f4:	08014e90 	.word	0x08014e90
 80061f8:	08014e98 	.word	0x08014e98

080061fc <json_esc>:

static char json_esc(int c, int esc) {
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b086      	sub	sp, #24
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 8006206:	6838      	ldr	r0, [r7, #0]
 8006208:	f7ff ffe4 	bl	80061d4 <escapeseq>
 800620c:	6138      	str	r0, [r7, #16]
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	bf0c      	ite	eq
 8006214:	2301      	moveq	r3, #1
 8006216:	2300      	movne	r3, #0
 8006218:	b2db      	uxtb	r3, r3
 800621a:	4618      	mov	r0, r3
 800621c:	f7ff ffda 	bl	80061d4 <escapeseq>
 8006220:	60f8      	str	r0, [r7, #12]
  for (p = esc1; *p != '\0'; p++) {
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	617b      	str	r3, [r7, #20]
 8006226:	e010      	b.n	800624a <json_esc+0x4e>
    if (*p == c) return esc2[p - esc1];
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	461a      	mov	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4293      	cmp	r3, r2
 8006232:	d107      	bne.n	8006244 <json_esc+0x48>
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	461a      	mov	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	4413      	add	r3, r2
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	e007      	b.n	8006254 <json_esc+0x58>
  for (p = esc1; *p != '\0'; p++) {
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	3301      	adds	r3, #1
 8006248:	617b      	str	r3, [r7, #20]
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1ea      	bne.n	8006228 <json_esc+0x2c>
  }
  return 0;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3718      	adds	r7, #24
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < len; i++) {
 8006266:	2300      	movs	r3, #0
 8006268:	60fb      	str	r3, [r7, #12]
 800626a:	e02e      	b.n	80062ca <mg_pass_string+0x6e>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	4413      	add	r3, r2
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	2b5c      	cmp	r3, #92	; 0x5c
 8006276:	d114      	bne.n	80062a2 <mg_pass_string+0x46>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	3301      	adds	r3, #1
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	429a      	cmp	r2, r3
 8006280:	dd0f      	ble.n	80062a2 <mg_pass_string+0x46>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	3301      	adds	r3, #1
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	4413      	add	r3, r2
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	2101      	movs	r1, #1
 800628e:	4618      	mov	r0, r3
 8006290:	f7ff ffb4 	bl	80061fc <json_esc>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <mg_pass_string+0x46>
      i++;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	3301      	adds	r3, #1
 800629e:	60fb      	str	r3, [r7, #12]
 80062a0:	e010      	b.n	80062c4 <mg_pass_string+0x68>
    } else if (s[i] == '\0') {
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	4413      	add	r3, r2
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d102      	bne.n	80062b4 <mg_pass_string+0x58>
      return MG_JSON_INVALID;
 80062ae:	f06f 0301 	mvn.w	r3, #1
 80062b2:	e010      	b.n	80062d6 <mg_pass_string+0x7a>
    } else if (s[i] == '"') {
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	4413      	add	r3, r2
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	2b22      	cmp	r3, #34	; 0x22
 80062be:	d101      	bne.n	80062c4 <mg_pass_string+0x68>
      return i;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	e008      	b.n	80062d6 <mg_pass_string+0x7a>
  for (i = 0; i < len; i++) {
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	3301      	adds	r3, #1
 80062c8:	60fb      	str	r3, [r7, #12]
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	dbcc      	blt.n	800626c <mg_pass_string+0x10>
    }
  }
  return MG_JSON_INVALID;
 80062d2:	f06f 0301 	mvn.w	r3, #1
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
	...

080062e0 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 80062e0:	b480      	push	{r7}
 80062e2:	b091      	sub	sp, #68	; 0x44
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
  double d = 0.0;
 80062ec:	f04f 0200 	mov.w	r2, #0
 80062f0:	f04f 0300 	mov.w	r3, #0
 80062f4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  int i = 0, sign = 1;
 80062f8:	2300      	movs	r3, #0
 80062fa:	637b      	str	r3, [r7, #52]	; 0x34
 80062fc:	2301      	movs	r3, #1
 80062fe:	633b      	str	r3, [r7, #48]	; 0x30

  // Sign
  if (i < len && *p == '-') {
 8006300:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	429a      	cmp	r2, r3
 8006306:	da0a      	bge.n	800631e <mg_atod+0x3e>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	2b2d      	cmp	r3, #45	; 0x2d
 800630e:	d106      	bne.n	800631e <mg_atod+0x3e>
    sign = -1, i++;
 8006310:	f04f 33ff 	mov.w	r3, #4294967295
 8006314:	633b      	str	r3, [r7, #48]	; 0x30
 8006316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006318:	3301      	adds	r3, #1
 800631a:	637b      	str	r3, [r7, #52]	; 0x34
 800631c:	e00a      	b.n	8006334 <mg_atod+0x54>
  } else if (i < len && *p == '+') {
 800631e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	429a      	cmp	r2, r3
 8006324:	da21      	bge.n	800636a <mg_atod+0x8a>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	2b2b      	cmp	r3, #43	; 0x2b
 800632c:	d11d      	bne.n	800636a <mg_atod+0x8a>
    i++;
 800632e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006330:	3301      	adds	r3, #1
 8006332:	637b      	str	r3, [r7, #52]	; 0x34
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8006334:	e019      	b.n	800636a <mg_atod+0x8a>
    d *= 10.0;
 8006336:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800633a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800633e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006342:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    d += p[i] - '0';
 8006346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	4413      	add	r3, r2
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	3b30      	subs	r3, #48	; 0x30
 8006350:	ee07 3a90 	vmov	s15, r3
 8006354:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006358:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 800635c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006360:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8006364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006366:	3301      	adds	r3, #1
 8006368:	637b      	str	r3, [r7, #52]	; 0x34
 800636a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	429a      	cmp	r2, r3
 8006370:	da0b      	bge.n	800638a <mg_atod+0xaa>
 8006372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	4413      	add	r3, r2
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	2b2f      	cmp	r3, #47	; 0x2f
 800637c:	d905      	bls.n	800638a <mg_atod+0xaa>
 800637e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	4413      	add	r3, r2
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	2b39      	cmp	r3, #57	; 0x39
 8006388:	d9d5      	bls.n	8006336 <mg_atod+0x56>
  }
  d *= sign;
 800638a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638c:	ee07 3a90 	vmov	s15, r3
 8006390:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006394:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 8006398:	ee26 7b07 	vmul.f64	d7, d6, d7
 800639c:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38

  // Fractional
  if (i < len && p[i] == '.') {
 80063a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	da51      	bge.n	800644c <mg_atod+0x16c>
 80063a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	4413      	add	r3, r2
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	2b2e      	cmp	r3, #46	; 0x2e
 80063b2:	d14b      	bne.n	800644c <mg_atod+0x16c>
    double frac = 0.0, base = 0.1;
 80063b4:	f04f 0200 	mov.w	r2, #0
 80063b8:	f04f 0300 	mov.w	r3, #0
 80063bc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80063c0:	a36d      	add	r3, pc, #436	; (adr r3, 8006578 <mg_atod+0x298>)
 80063c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    i++;
 80063ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063cc:	3301      	adds	r3, #1
 80063ce:	637b      	str	r3, [r7, #52]	; 0x34
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 80063d0:	e01d      	b.n	800640e <mg_atod+0x12e>
      frac += base * (p[i] - '0');
 80063d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	4413      	add	r3, r2
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	3b30      	subs	r3, #48	; 0x30
 80063dc:	ee07 3a90 	vmov	s15, r3
 80063e0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80063e4:	ed97 7b08 	vldr	d7, [r7, #32]
 80063e8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80063ec:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 80063f0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80063f4:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
      base /= 10.0;
 80063f8:	ed97 6b08 	vldr	d6, [r7, #32]
 80063fc:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8006400:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006404:	ed87 7b08 	vstr	d7, [r7, #32]
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8006408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800640a:	3301      	adds	r3, #1
 800640c:	637b      	str	r3, [r7, #52]	; 0x34
 800640e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	429a      	cmp	r2, r3
 8006414:	da0b      	bge.n	800642e <mg_atod+0x14e>
 8006416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	4413      	add	r3, r2
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	2b2f      	cmp	r3, #47	; 0x2f
 8006420:	d905      	bls.n	800642e <mg_atod+0x14e>
 8006422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	4413      	add	r3, r2
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	2b39      	cmp	r3, #57	; 0x39
 800642c:	d9d1      	bls.n	80063d2 <mg_atod+0xf2>
    }
    d += frac * sign;
 800642e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006430:	ee07 3a90 	vmov	s15, r3
 8006434:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8006438:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800643c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006440:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 8006444:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006448:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 800644c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	429a      	cmp	r2, r3
 8006452:	da7e      	bge.n	8006552 <mg_atod+0x272>
 8006454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	4413      	add	r3, r2
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	2b65      	cmp	r3, #101	; 0x65
 800645e:	d005      	beq.n	800646c <mg_atod+0x18c>
 8006460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	4413      	add	r3, r2
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	2b45      	cmp	r3, #69	; 0x45
 800646a:	d172      	bne.n	8006552 <mg_atod+0x272>
    int j, exp = 0, minus = 0;
 800646c:	2300      	movs	r3, #0
 800646e:	61bb      	str	r3, [r7, #24]
 8006470:	2300      	movs	r3, #0
 8006472:	617b      	str	r3, [r7, #20]
    i++;
 8006474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006476:	3301      	adds	r3, #1
 8006478:	637b      	str	r3, [r7, #52]	; 0x34
    if (i < len && p[i] == '-') minus = 1, i++;
 800647a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	429a      	cmp	r2, r3
 8006480:	da0a      	bge.n	8006498 <mg_atod+0x1b8>
 8006482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	4413      	add	r3, r2
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	2b2d      	cmp	r3, #45	; 0x2d
 800648c:	d104      	bne.n	8006498 <mg_atod+0x1b8>
 800648e:	2301      	movs	r3, #1
 8006490:	617b      	str	r3, [r7, #20]
 8006492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006494:	3301      	adds	r3, #1
 8006496:	637b      	str	r3, [r7, #52]	; 0x34
    if (i < len && p[i] == '+') i++;
 8006498:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	429a      	cmp	r2, r3
 800649e:	da19      	bge.n	80064d4 <mg_atod+0x1f4>
 80064a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	4413      	add	r3, r2
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	2b2b      	cmp	r3, #43	; 0x2b
 80064aa:	d113      	bne.n	80064d4 <mg_atod+0x1f4>
 80064ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ae:	3301      	adds	r3, #1
 80064b0:	637b      	str	r3, [r7, #52]	; 0x34
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 80064b2:	e00f      	b.n	80064d4 <mg_atod+0x1f4>
      exp = exp * 10 + (p[i++] - '0');
 80064b4:	69ba      	ldr	r2, [r7, #24]
 80064b6:	4613      	mov	r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4413      	add	r3, r2
 80064bc:	005b      	lsls	r3, r3, #1
 80064be:	4619      	mov	r1, r3
 80064c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c2:	1c5a      	adds	r2, r3, #1
 80064c4:	637a      	str	r2, [r7, #52]	; 0x34
 80064c6:	461a      	mov	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	4413      	add	r3, r2
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	3b30      	subs	r3, #48	; 0x30
 80064d0:	440b      	add	r3, r1
 80064d2:	61bb      	str	r3, [r7, #24]
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 80064d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	429a      	cmp	r2, r3
 80064da:	da0f      	bge.n	80064fc <mg_atod+0x21c>
 80064dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	4413      	add	r3, r2
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	2b2f      	cmp	r3, #47	; 0x2f
 80064e6:	d909      	bls.n	80064fc <mg_atod+0x21c>
 80064e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	4413      	add	r3, r2
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	2b39      	cmp	r3, #57	; 0x39
 80064f2:	d803      	bhi.n	80064fc <mg_atod+0x21c>
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80064fa:	dbdb      	blt.n	80064b4 <mg_atod+0x1d4>
    if (minus) exp = -exp;
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d002      	beq.n	8006508 <mg_atod+0x228>
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	425b      	negs	r3, r3
 8006506:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < exp; j++) d *= 10.0;
 8006508:	2300      	movs	r3, #0
 800650a:	61fb      	str	r3, [r7, #28]
 800650c:	e00a      	b.n	8006524 <mg_atod+0x244>
 800650e:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8006512:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006516:	ee27 7b06 	vmul.f64	d7, d7, d6
 800651a:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	3301      	adds	r3, #1
 8006522:	61fb      	str	r3, [r7, #28]
 8006524:	69fa      	ldr	r2, [r7, #28]
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	429a      	cmp	r2, r3
 800652a:	dbf0      	blt.n	800650e <mg_atod+0x22e>
    for (j = 0; j < -exp; j++) d /= 10.0;
 800652c:	2300      	movs	r3, #0
 800652e:	61fb      	str	r3, [r7, #28]
 8006530:	e00a      	b.n	8006548 <mg_atod+0x268>
 8006532:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 8006536:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 800653a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800653e:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	3301      	adds	r3, #1
 8006546:	61fb      	str	r3, [r7, #28]
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	425b      	negs	r3, r3
 800654c:	69fa      	ldr	r2, [r7, #28]
 800654e:	429a      	cmp	r2, r3
 8006550:	dbef      	blt.n	8006532 <mg_atod+0x252>
  }

  if (numlen != NULL) *numlen = i;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d002      	beq.n	800655e <mg_atod+0x27e>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800655c:	601a      	str	r2, [r3, #0]
  return d;
 800655e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006562:	ec43 2b17 	vmov	d7, r2, r3
}
 8006566:	eeb0 0b47 	vmov.f64	d0, d7
 800656a:	3744      	adds	r7, #68	; 0x44
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr
 8006574:	f3af 8000 	nop.w
 8006578:	9999999a 	.word	0x9999999a
 800657c:	3fb99999 	.word	0x3fb99999

08006580 <mg_json_get>:

int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 8006580:	b590      	push	{r4, r7, lr}
 8006582:	b09b      	sub	sp, #108	; 0x6c
 8006584:	af00      	add	r7, sp, #0
 8006586:	f107 0408 	add.w	r4, r7, #8
 800658a:	e884 0003 	stmia.w	r4, {r0, r1}
 800658e:	607a      	str	r2, [r7, #4]
 8006590:	603b      	str	r3, [r7, #0]
  const char *s = json.ptr;
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	647b      	str	r3, [r7, #68]	; 0x44
  int len = (int) json.len;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	643b      	str	r3, [r7, #64]	; 0x40
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 800659a:	2300      	movs	r3, #0
 800659c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  unsigned char nesting[MG_JSON_MAX_DEPTH];
  int i = 0;             // Current offset in `s`
 80065a0:	2300      	movs	r3, #0
 80065a2:	663b      	str	r3, [r7, #96]	; 0x60
  int j = 0;             // Offset in `s` we're looking for (return value)
 80065a4:	2300      	movs	r3, #0
 80065a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  int depth = 0;         // Current depth (nesting level)
 80065a8:	2300      	movs	r3, #0
 80065aa:	65bb      	str	r3, [r7, #88]	; 0x58
  int ed = 0;            // Expected depth
 80065ac:	2300      	movs	r3, #0
 80065ae:	657b      	str	r3, [r7, #84]	; 0x54
  int pos = 1;           // Current position in `path`
 80065b0:	2301      	movs	r3, #1
 80065b2:	653b      	str	r3, [r7, #80]	; 0x50
  int ci = -1, ei = -1;  // Current and expected index in array
 80065b4:	f04f 33ff 	mov.w	r3, #4294967295
 80065b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065ba:	f04f 33ff 	mov.w	r3, #4294967295
 80065be:	64bb      	str	r3, [r7, #72]	; 0x48

  if (toklen) *toklen = 0;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d002      	beq.n	80065cc <mg_json_get+0x4c>
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	2200      	movs	r2, #0
 80065ca:	601a      	str	r2, [r3, #0]
  if (path[0] != '$') return MG_JSON_INVALID;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	2b24      	cmp	r3, #36	; 0x24
 80065d2:	d002      	beq.n	80065da <mg_json_get+0x5a>
 80065d4:	f06f 0301 	mvn.w	r3, #1
 80065d8:	e2e2      	b.n	8006ba0 <mg_json_get+0x620>
    if (c != nesting[depth - 1] + 2) return MG_JSON_INVALID; \
    depth--;                                                 \
    MG_CHECKRET(x);                                          \
  } while (0)

  for (i = 0; i < len; i++) {
 80065da:	2300      	movs	r3, #0
 80065dc:	663b      	str	r3, [r7, #96]	; 0x60
 80065de:	e2d8      	b.n	8006b92 <mg_json_get+0x612>
    unsigned char c = ((unsigned char *) s)[i];
 80065e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065e4:	4413      	add	r3, r2
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 80065ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80065f0:	2b20      	cmp	r3, #32
 80065f2:	f000 82c8 	beq.w	8006b86 <mg_json_get+0x606>
 80065f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80065fa:	2b09      	cmp	r3, #9
 80065fc:	f000 82c3 	beq.w	8006b86 <mg_json_get+0x606>
 8006600:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006604:	2b0a      	cmp	r3, #10
 8006606:	f000 82be 	beq.w	8006b86 <mg_json_get+0x606>
 800660a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800660e:	2b0d      	cmp	r3, #13
 8006610:	f000 82b9 	beq.w	8006b86 <mg_json_get+0x606>
    switch (expecting) {
 8006614:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006618:	2b03      	cmp	r3, #3
 800661a:	f200 82b7 	bhi.w	8006b8c <mg_json_get+0x60c>
 800661e:	a201      	add	r2, pc, #4	; (adr r2, 8006624 <mg_json_get+0xa4>)
 8006620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006624:	08006635 	.word	0x08006635
 8006628:	0800691d 	.word	0x0800691d
 800662c:	08006aa7 	.word	0x08006aa7
 8006630:	08006abd 	.word	0x08006abd
      case S_VALUE:
        // p("V %s [%.*s] %d %d %d %d\n", path, pos, path, depth, ed, ci, ei);
        if (depth == ed) j = i;
 8006634:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006638:	429a      	cmp	r2, r3
 800663a:	d101      	bne.n	8006640 <mg_json_get+0xc0>
 800663c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800663e:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (c == '{') {
 8006640:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006644:	2b7b      	cmp	r3, #123	; 0x7b
 8006646:	d12b      	bne.n	80066a0 <mg_json_get+0x120>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8006648:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800664a:	2b1d      	cmp	r3, #29
 800664c:	dd02      	ble.n	8006654 <mg_json_get+0xd4>
 800664e:	f04f 33ff 	mov.w	r3, #4294967295
 8006652:	e2a5      	b.n	8006ba0 <mg_json_get+0x620>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 8006654:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006658:	429a      	cmp	r2, r3
 800665a:	d114      	bne.n	8006686 <mg_json_get+0x106>
 800665c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	4413      	add	r3, r2
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	2b2e      	cmp	r3, #46	; 0x2e
 8006666:	d10e      	bne.n	8006686 <mg_json_get+0x106>
 8006668:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800666a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800666c:	429a      	cmp	r2, r3
 800666e:	d10a      	bne.n	8006686 <mg_json_get+0x106>
            // If we start the object, reset array indices
            ed++, pos++, ci = ei = -1;
 8006670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006672:	3301      	adds	r3, #1
 8006674:	657b      	str	r3, [r7, #84]	; 0x54
 8006676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006678:	3301      	adds	r3, #1
 800667a:	653b      	str	r3, [r7, #80]	; 0x50
 800667c:	f04f 33ff 	mov.w	r3, #4294967295
 8006680:	64bb      	str	r3, [r7, #72]	; 0x48
 8006682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006684:	64fb      	str	r3, [r7, #76]	; 0x4c
          }
          nesting[depth++] = c;
 8006686:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006688:	1c5a      	adds	r2, r3, #1
 800668a:	65ba      	str	r2, [r7, #88]	; 0x58
 800668c:	3368      	adds	r3, #104	; 0x68
 800668e:	443b      	add	r3, r7
 8006690:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006694:	f803 2c54 	strb.w	r2, [r3, #-84]
          expecting = S_KEY;
 8006698:	2301      	movs	r3, #1
 800669a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          break;
 800669e:	e275      	b.n	8006b8c <mg_json_get+0x60c>
        } else if (c == '[') {
 80066a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80066a4:	2b5b      	cmp	r3, #91	; 0x5b
 80066a6:	d14e      	bne.n	8006746 <mg_json_get+0x1c6>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 80066a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066aa:	2b1d      	cmp	r3, #29
 80066ac:	dd02      	ble.n	80066b4 <mg_json_get+0x134>
 80066ae:	f04f 33ff 	mov.w	r3, #4294967295
 80066b2:	e275      	b.n	8006ba0 <mg_json_get+0x620>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 80066b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d13a      	bne.n	8006732 <mg_json_get+0x1b2>
 80066bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	4413      	add	r3, r2
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	2b5b      	cmp	r3, #91	; 0x5b
 80066c6:	d134      	bne.n	8006732 <mg_json_get+0x1b2>
 80066c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d130      	bne.n	8006732 <mg_json_get+0x1b2>
            ed++, pos++, ci = 0;
 80066d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066d2:	3301      	adds	r3, #1
 80066d4:	657b      	str	r3, [r7, #84]	; 0x54
 80066d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066d8:	3301      	adds	r3, #1
 80066da:	653b      	str	r3, [r7, #80]	; 0x50
 80066dc:	2300      	movs	r3, #0
 80066de:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 80066e0:	2300      	movs	r3, #0
 80066e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80066e4:	e010      	b.n	8006708 <mg_json_get+0x188>
              ei *= 10;
 80066e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066e8:	4613      	mov	r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4413      	add	r3, r2
 80066ee:	005b      	lsls	r3, r3, #1
 80066f0:	64bb      	str	r3, [r7, #72]	; 0x48
              ei += path[pos] - '0';
 80066f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	4413      	add	r3, r2
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	3b30      	subs	r3, #48	; 0x30
 80066fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066fe:	4413      	add	r3, r2
 8006700:	64bb      	str	r3, [r7, #72]	; 0x48
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 8006702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006704:	3301      	adds	r3, #1
 8006706:	653b      	str	r3, [r7, #80]	; 0x50
 8006708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	4413      	add	r3, r2
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	2b5d      	cmp	r3, #93	; 0x5d
 8006712:	d005      	beq.n	8006720 <mg_json_get+0x1a0>
 8006714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	4413      	add	r3, r2
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1e2      	bne.n	80066e6 <mg_json_get+0x166>
            }
            if (path[pos] != 0) pos++;
 8006720:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	4413      	add	r3, r2
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d002      	beq.n	8006732 <mg_json_get+0x1b2>
 800672c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800672e:	3301      	adds	r3, #1
 8006730:	653b      	str	r3, [r7, #80]	; 0x50
          }
          nesting[depth++] = c;
 8006732:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	65ba      	str	r2, [r7, #88]	; 0x58
 8006738:	3368      	adds	r3, #104	; 0x68
 800673a:	443b      	add	r3, r7
 800673c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006740:	f803 2c54 	strb.w	r2, [r3, #-84]
          break;
 8006744:	e222      	b.n	8006b8c <mg_json_get+0x60c>
        } else if (c == ']' && depth > 0) {  // Empty array
 8006746:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800674a:	2b5d      	cmp	r3, #93	; 0x5d
 800674c:	d13a      	bne.n	80067c4 <mg_json_get+0x244>
 800674e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006750:	2b00      	cmp	r3, #0
 8006752:	dd37      	ble.n	80067c4 <mg_json_get+0x244>
          MG_EOO(']');
 8006754:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006758:	429a      	cmp	r2, r3
 800675a:	d106      	bne.n	800676a <mg_json_get+0x1ea>
 800675c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800675e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006760:	429a      	cmp	r2, r3
 8006762:	d002      	beq.n	800676a <mg_json_get+0x1ea>
 8006764:	f06f 0302 	mvn.w	r3, #2
 8006768:	e21a      	b.n	8006ba0 <mg_json_get+0x620>
 800676a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800676e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006770:	3b01      	subs	r3, #1
 8006772:	3368      	adds	r3, #104	; 0x68
 8006774:	443b      	add	r3, r7
 8006776:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800677a:	3302      	adds	r3, #2
 800677c:	429a      	cmp	r2, r3
 800677e:	d002      	beq.n	8006786 <mg_json_get+0x206>
 8006780:	f06f 0301 	mvn.w	r3, #1
 8006784:	e20c      	b.n	8006ba0 <mg_json_get+0x620>
 8006786:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006788:	3b01      	subs	r3, #1
 800678a:	65bb      	str	r3, [r7, #88]	; 0x58
 800678c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800678e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006790:	429a      	cmp	r2, r3
 8006792:	f040 809c 	bne.w	80068ce <mg_json_get+0x34e>
 8006796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	4413      	add	r3, r2
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f040 8095 	bne.w	80068ce <mg_json_get+0x34e>
 80067a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067a8:	429a      	cmp	r2, r3
 80067aa:	f040 8090 	bne.w	80068ce <mg_json_get+0x34e>
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d005      	beq.n	80067c0 <mg_json_get+0x240>
 80067b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80067b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	1c5a      	adds	r2, r3, #1
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	601a      	str	r2, [r3, #0]
 80067c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067c2:	e1ed      	b.n	8006ba0 <mg_json_get+0x620>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 80067c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80067c8:	2b74      	cmp	r3, #116	; 0x74
 80067ca:	d113      	bne.n	80067f4 <mg_json_get+0x274>
 80067cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067ce:	3303      	adds	r3, #3
 80067d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067d2:	429a      	cmp	r2, r3
 80067d4:	dd0e      	ble.n	80067f4 <mg_json_get+0x274>
 80067d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067da:	4413      	add	r3, r2
 80067dc:	2204      	movs	r2, #4
 80067de:	4998      	ldr	r1, [pc, #608]	; (8006a40 <mg_json_get+0x4c0>)
 80067e0:	4618      	mov	r0, r3
 80067e2:	f00c fe2a 	bl	801343a <memcmp>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d103      	bne.n	80067f4 <mg_json_get+0x274>
          i += 3;
 80067ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067ee:	3303      	adds	r3, #3
 80067f0:	663b      	str	r3, [r7, #96]	; 0x60
 80067f2:	e06c      	b.n	80068ce <mg_json_get+0x34e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 80067f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80067f8:	2b6e      	cmp	r3, #110	; 0x6e
 80067fa:	d113      	bne.n	8006824 <mg_json_get+0x2a4>
 80067fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067fe:	3303      	adds	r3, #3
 8006800:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006802:	429a      	cmp	r2, r3
 8006804:	dd0e      	ble.n	8006824 <mg_json_get+0x2a4>
 8006806:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006808:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800680a:	4413      	add	r3, r2
 800680c:	2204      	movs	r2, #4
 800680e:	498d      	ldr	r1, [pc, #564]	; (8006a44 <mg_json_get+0x4c4>)
 8006810:	4618      	mov	r0, r3
 8006812:	f00c fe12 	bl	801343a <memcmp>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d103      	bne.n	8006824 <mg_json_get+0x2a4>
          i += 3;
 800681c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800681e:	3303      	adds	r3, #3
 8006820:	663b      	str	r3, [r7, #96]	; 0x60
 8006822:	e054      	b.n	80068ce <mg_json_get+0x34e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 8006824:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006828:	2b66      	cmp	r3, #102	; 0x66
 800682a:	d113      	bne.n	8006854 <mg_json_get+0x2d4>
 800682c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800682e:	3304      	adds	r3, #4
 8006830:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006832:	429a      	cmp	r2, r3
 8006834:	dd0e      	ble.n	8006854 <mg_json_get+0x2d4>
 8006836:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006838:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800683a:	4413      	add	r3, r2
 800683c:	2205      	movs	r2, #5
 800683e:	4982      	ldr	r1, [pc, #520]	; (8006a48 <mg_json_get+0x4c8>)
 8006840:	4618      	mov	r0, r3
 8006842:	f00c fdfa 	bl	801343a <memcmp>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d103      	bne.n	8006854 <mg_json_get+0x2d4>
          i += 4;
 800684c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800684e:	3304      	adds	r3, #4
 8006850:	663b      	str	r3, [r7, #96]	; 0x60
 8006852:	e03c      	b.n	80068ce <mg_json_get+0x34e>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 8006854:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006858:	2b2d      	cmp	r3, #45	; 0x2d
 800685a:	d007      	beq.n	800686c <mg_json_get+0x2ec>
 800685c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006860:	2b2f      	cmp	r3, #47	; 0x2f
 8006862:	d916      	bls.n	8006892 <mg_json_get+0x312>
 8006864:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006868:	2b39      	cmp	r3, #57	; 0x39
 800686a:	d812      	bhi.n	8006892 <mg_json_get+0x312>
          int numlen = 0;
 800686c:	2300      	movs	r3, #0
 800686e:	613b      	str	r3, [r7, #16]
          mg_atod(&s[i], len - i, &numlen);
 8006870:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006872:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006874:	18d0      	adds	r0, r2, r3
 8006876:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006878:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	f107 0210 	add.w	r2, r7, #16
 8006880:	4619      	mov	r1, r3
 8006882:	f7ff fd2d 	bl	80062e0 <mg_atod>
          i += numlen - 1;
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	3b01      	subs	r3, #1
 800688a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800688c:	4413      	add	r3, r2
 800688e:	663b      	str	r3, [r7, #96]	; 0x60
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 8006890:	e01d      	b.n	80068ce <mg_json_get+0x34e>
        } else if (c == '"') {
 8006892:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006896:	2b22      	cmp	r3, #34	; 0x22
 8006898:	d116      	bne.n	80068c8 <mg_json_get+0x348>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 800689a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800689c:	3301      	adds	r3, #1
 800689e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068a0:	18d0      	adds	r0, r2, r3
 80068a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	3b01      	subs	r3, #1
 80068aa:	4619      	mov	r1, r3
 80068ac:	f7ff fcd6 	bl	800625c <mg_pass_string>
 80068b0:	6378      	str	r0, [r7, #52]	; 0x34
          if (n < 0) return n;
 80068b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	da01      	bge.n	80068bc <mg_json_get+0x33c>
 80068b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ba:	e171      	b.n	8006ba0 <mg_json_get+0x620>
          i += n + 1;
 80068bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068be:	3301      	adds	r3, #1
 80068c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80068c2:	4413      	add	r3, r2
 80068c4:	663b      	str	r3, [r7, #96]	; 0x60
 80068c6:	e002      	b.n	80068ce <mg_json_get+0x34e>
        } else {
          return MG_JSON_INVALID;
 80068c8:	f06f 0301 	mvn.w	r3, #1
 80068cc:	e168      	b.n	8006ba0 <mg_json_get+0x620>
        }
        MG_CHECKRET('V');
 80068ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d114      	bne.n	8006900 <mg_json_get+0x380>
 80068d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	4413      	add	r3, r2
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10e      	bne.n	8006900 <mg_json_get+0x380>
 80068e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80068e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d10a      	bne.n	8006900 <mg_json_get+0x380>
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d005      	beq.n	80068fc <mg_json_get+0x37c>
 80068f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80068f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	1c5a      	adds	r2, r3, #1
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	601a      	str	r2, [r3, #0]
 80068fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068fe:	e14f      	b.n	8006ba0 <mg_json_get+0x620>
        if (depth == ed && ei >= 0) ci++;
 8006900:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006904:	429a      	cmp	r2, r3
 8006906:	d105      	bne.n	8006914 <mg_json_get+0x394>
 8006908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800690a:	2b00      	cmp	r3, #0
 800690c:	db02      	blt.n	8006914 <mg_json_get+0x394>
 800690e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006910:	3301      	adds	r3, #1
 8006912:	64fb      	str	r3, [r7, #76]	; 0x4c
        expecting = S_COMMA_OR_EOO;
 8006914:	2303      	movs	r3, #3
 8006916:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        break;
 800691a:	e137      	b.n	8006b8c <mg_json_get+0x60c>

      case S_KEY:
        if (c == '"') {
 800691c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006920:	2b22      	cmp	r3, #34	; 0x22
 8006922:	d170      	bne.n	8006a06 <mg_json_get+0x486>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8006924:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006926:	3301      	adds	r3, #1
 8006928:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800692a:	18d0      	adds	r0, r2, r3
 800692c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800692e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	3b01      	subs	r3, #1
 8006934:	4619      	mov	r1, r3
 8006936:	f7ff fc91 	bl	800625c <mg_pass_string>
 800693a:	63b8      	str	r0, [r7, #56]	; 0x38
          if (n < 0) return n;
 800693c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693e:	2b00      	cmp	r3, #0
 8006940:	da01      	bge.n	8006946 <mg_json_get+0x3c6>
 8006942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006944:	e12c      	b.n	8006ba0 <mg_json_get+0x620>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 8006946:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006948:	1c5a      	adds	r2, r3, #1
 800694a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694c:	4413      	add	r3, r2
 800694e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006950:	429a      	cmp	r2, r3
 8006952:	dc02      	bgt.n	800695a <mg_json_get+0x3da>
 8006954:	f06f 0302 	mvn.w	r3, #2
 8006958:	e122      	b.n	8006ba0 <mg_json_get+0x620>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 800695a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800695c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800695e:	429a      	cmp	r2, r3
 8006960:	da02      	bge.n	8006968 <mg_json_get+0x3e8>
 8006962:	f06f 0302 	mvn.w	r3, #2
 8006966:	e11b      	b.n	8006ba0 <mg_json_get+0x620>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 8006968:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800696a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800696c:	429a      	cmp	r2, r3
 800696e:	d109      	bne.n	8006984 <mg_json_get+0x404>
 8006970:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006972:	3b01      	subs	r3, #1
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	4413      	add	r3, r2
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	2b2e      	cmp	r3, #46	; 0x2e
 800697c:	d002      	beq.n	8006984 <mg_json_get+0x404>
 800697e:	f06f 0302 	mvn.w	r3, #2
 8006982:	e10d      	b.n	8006ba0 <mg_json_get+0x620>
          // printf("K %s [%.*s] [%.*s] %d %d %d\n", path, pos, path, n,
          //  &s[i + 1], n, depth, ed);
          // NOTE(cpq): in the check sequence below is important.
          // strncmp() must go first: it fails fast if the remaining length of
          // the path is smaller than `n`.
          if (depth == ed && path[pos - 1] == '.' &&
 8006984:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006986:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006988:	429a      	cmp	r2, r3
 800698a:	d133      	bne.n	80069f4 <mg_json_get+0x474>
 800698c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800698e:	3b01      	subs	r3, #1
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	4413      	add	r3, r2
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	2b2e      	cmp	r3, #46	; 0x2e
 8006998:	d12c      	bne.n	80069f4 <mg_json_get+0x474>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 800699a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800699c:	3301      	adds	r3, #1
 800699e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069a0:	18d0      	adds	r0, r2, r3
 80069a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	4413      	add	r3, r2
 80069a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069aa:	4619      	mov	r1, r3
 80069ac:	f00c fda1 	bl	80134f2 <strncmp>
 80069b0:	4603      	mov	r3, r0
          if (depth == ed && path[pos - 1] == '.' &&
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d11e      	bne.n	80069f4 <mg_json_get+0x474>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 80069b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ba:	4413      	add	r3, r2
 80069bc:	461a      	mov	r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4413      	add	r3, r2
 80069c2:	781b      	ldrb	r3, [r3, #0]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d011      	beq.n	80069ec <mg_json_get+0x46c>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 80069c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069cc:	4413      	add	r3, r2
 80069ce:	461a      	mov	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4413      	add	r3, r2
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	2b2e      	cmp	r3, #46	; 0x2e
 80069d8:	d008      	beq.n	80069ec <mg_json_get+0x46c>
               path[pos + n] == '[')) {
 80069da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069de:	4413      	add	r3, r2
 80069e0:	461a      	mov	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4413      	add	r3, r2
 80069e6:	781b      	ldrb	r3, [r3, #0]
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 80069e8:	2b5b      	cmp	r3, #91	; 0x5b
 80069ea:	d103      	bne.n	80069f4 <mg_json_get+0x474>
            pos += n;
 80069ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f0:	4413      	add	r3, r2
 80069f2:	653b      	str	r3, [r7, #80]	; 0x50
          }
          i += n + 1;
 80069f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f6:	3301      	adds	r3, #1
 80069f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80069fa:	4413      	add	r3, r2
 80069fc:	663b      	str	r3, [r7, #96]	; 0x60
          expecting = S_COLON;
 80069fe:	2302      	movs	r3, #2
 8006a00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          expecting = S_COMMA_OR_EOO;
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 8006a04:	e0c1      	b.n	8006b8a <mg_json_get+0x60a>
        } else if (c == '}') {  // Empty object
 8006a06:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006a0a:	2b7d      	cmp	r3, #125	; 0x7d
 8006a0c:	d148      	bne.n	8006aa0 <mg_json_get+0x520>
          MG_EOO('}');
 8006a0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d106      	bne.n	8006a24 <mg_json_get+0x4a4>
 8006a16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d002      	beq.n	8006a24 <mg_json_get+0x4a4>
 8006a1e:	f06f 0302 	mvn.w	r3, #2
 8006a22:	e0bd      	b.n	8006ba0 <mg_json_get+0x620>
 8006a24:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006a28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	3368      	adds	r3, #104	; 0x68
 8006a2e:	443b      	add	r3, r7
 8006a30:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8006a34:	3302      	adds	r3, #2
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d008      	beq.n	8006a4c <mg_json_get+0x4cc>
 8006a3a:	f06f 0301 	mvn.w	r3, #1
 8006a3e:	e0af      	b.n	8006ba0 <mg_json_get+0x620>
 8006a40:	08014ea0 	.word	0x08014ea0
 8006a44:	08014ea8 	.word	0x08014ea8
 8006a48:	08014eb0 	.word	0x08014eb0
 8006a4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d114      	bne.n	8006a84 <mg_json_get+0x504>
 8006a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	4413      	add	r3, r2
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d10e      	bne.n	8006a84 <mg_json_get+0x504>
 8006a66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d10a      	bne.n	8006a84 <mg_json_get+0x504>
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d005      	beq.n	8006a80 <mg_json_get+0x500>
 8006a74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	1c5a      	adds	r2, r3, #1
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	601a      	str	r2, [r3, #0]
 8006a80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a82:	e08d      	b.n	8006ba0 <mg_json_get+0x620>
          expecting = S_COMMA_OR_EOO;
 8006a84:	2303      	movs	r3, #3
 8006a86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          if (depth == ed && ei >= 0) ci++;
 8006a8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d17b      	bne.n	8006b8a <mg_json_get+0x60a>
 8006a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	db78      	blt.n	8006b8a <mg_json_get+0x60a>
 8006a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
        break;
 8006a9e:	e074      	b.n	8006b8a <mg_json_get+0x60a>
          return MG_JSON_INVALID;
 8006aa0:	f06f 0301 	mvn.w	r3, #1
 8006aa4:	e07c      	b.n	8006ba0 <mg_json_get+0x620>

      case S_COLON:
        if (c == ':') {
 8006aa6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006aaa:	2b3a      	cmp	r3, #58	; 0x3a
 8006aac:	d103      	bne.n	8006ab6 <mg_json_get+0x536>
          expecting = S_VALUE;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        } else {
          return MG_JSON_INVALID;
        }
        break;
 8006ab4:	e06a      	b.n	8006b8c <mg_json_get+0x60c>
          return MG_JSON_INVALID;
 8006ab6:	f06f 0301 	mvn.w	r3, #1
 8006aba:	e071      	b.n	8006ba0 <mg_json_get+0x620>

      case S_COMMA_OR_EOO:
        if (depth <= 0) {
 8006abc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	dc02      	bgt.n	8006ac8 <mg_json_get+0x548>
          return MG_JSON_INVALID;
 8006ac2:	f06f 0301 	mvn.w	r3, #1
 8006ac6:	e06b      	b.n	8006ba0 <mg_json_get+0x620>
        } else if (c == ',') {
 8006ac8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006acc:	2b2c      	cmp	r3, #44	; 0x2c
 8006ace:	d10d      	bne.n	8006aec <mg_json_get+0x56c>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 8006ad0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	3368      	adds	r3, #104	; 0x68
 8006ad6:	443b      	add	r3, r7
 8006ad8:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8006adc:	2b7b      	cmp	r3, #123	; 0x7b
 8006ade:	bf0c      	ite	eq
 8006ae0:	2301      	moveq	r3, #1
 8006ae2:	2300      	movne	r3, #0
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          MG_EOO('O');
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 8006aea:	e04f      	b.n	8006b8c <mg_json_get+0x60c>
        } else if (c == ']' || c == '}') {
 8006aec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006af0:	2b5d      	cmp	r3, #93	; 0x5d
 8006af2:	d003      	beq.n	8006afc <mg_json_get+0x57c>
 8006af4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006af8:	2b7d      	cmp	r3, #125	; 0x7d
 8006afa:	d13f      	bne.n	8006b7c <mg_json_get+0x5fc>
          MG_EOO('O');
 8006afc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006afe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d106      	bne.n	8006b12 <mg_json_get+0x592>
 8006b04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d002      	beq.n	8006b12 <mg_json_get+0x592>
 8006b0c:	f06f 0302 	mvn.w	r3, #2
 8006b10:	e046      	b.n	8006ba0 <mg_json_get+0x620>
 8006b12:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006b16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	3368      	adds	r3, #104	; 0x68
 8006b1c:	443b      	add	r3, r7
 8006b1e:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8006b22:	3302      	adds	r3, #2
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d002      	beq.n	8006b2e <mg_json_get+0x5ae>
 8006b28:	f06f 0301 	mvn.w	r3, #1
 8006b2c:	e038      	b.n	8006ba0 <mg_json_get+0x620>
 8006b2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b30:	3b01      	subs	r3, #1
 8006b32:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d114      	bne.n	8006b66 <mg_json_get+0x5e6>
 8006b3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	4413      	add	r3, r2
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d10e      	bne.n	8006b66 <mg_json_get+0x5e6>
 8006b48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d10a      	bne.n	8006b66 <mg_json_get+0x5e6>
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d005      	beq.n	8006b62 <mg_json_get+0x5e2>
 8006b56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	1c5a      	adds	r2, r3, #1
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	601a      	str	r2, [r3, #0]
 8006b62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b64:	e01c      	b.n	8006ba0 <mg_json_get+0x620>
          if (depth == ed && ei >= 0) ci++;
 8006b66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d109      	bne.n	8006b82 <mg_json_get+0x602>
 8006b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	db06      	blt.n	8006b82 <mg_json_get+0x602>
 8006b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b76:	3301      	adds	r3, #1
 8006b78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b7a:	e002      	b.n	8006b82 <mg_json_get+0x602>
          return MG_JSON_INVALID;
 8006b7c:	f06f 0301 	mvn.w	r3, #1
 8006b80:	e00e      	b.n	8006ba0 <mg_json_get+0x620>
          if (depth == ed && ei >= 0) ci++;
 8006b82:	bf00      	nop
        break;
 8006b84:	e002      	b.n	8006b8c <mg_json_get+0x60c>
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 8006b86:	bf00      	nop
 8006b88:	e000      	b.n	8006b8c <mg_json_get+0x60c>
        break;
 8006b8a:	bf00      	nop
  for (i = 0; i < len; i++) {
 8006b8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b8e:	3301      	adds	r3, #1
 8006b90:	663b      	str	r3, [r7, #96]	; 0x60
 8006b92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b96:	429a      	cmp	r2, r3
 8006b98:	f6ff ad22 	blt.w	80065e0 <mg_json_get+0x60>
    }
  }
  return MG_JSON_NOT_FOUND;
 8006b9c:	f06f 0302 	mvn.w	r3, #2
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	376c      	adds	r7, #108	; 0x6c
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd90      	pop	{r4, r7, pc}

08006ba8 <mg_json_get_num>:

bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 8006ba8:	b590      	push	{r4, r7, lr}
 8006baa:	b089      	sub	sp, #36	; 0x24
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	f107 0408 	add.w	r4, r7, #8
 8006bb2:	e884 0003 	stmia.w	r4, {r0, r1}
 8006bb6:	607a      	str	r2, [r7, #4]
 8006bb8:	603b      	str	r3, [r7, #0]
  int n, toklen, found = 0;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	61fb      	str	r3, [r7, #28]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8006bbe:	f107 0314 	add.w	r3, r7, #20
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	f107 0108 	add.w	r1, r7, #8
 8006bc8:	c903      	ldmia	r1, {r0, r1}
 8006bca:	f7ff fcd9 	bl	8006580 <mg_json_get>
 8006bce:	61b8      	str	r0, [r7, #24]
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	db23      	blt.n	8006c1e <mg_json_get_num+0x76>
      (json.ptr[n] == '-' || (json.ptr[n] >= '0' && json.ptr[n] <= '9'))) {
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	4413      	add	r3, r2
 8006bdc:	781b      	ldrb	r3, [r3, #0]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8006bde:	2b2d      	cmp	r3, #45	; 0x2d
 8006be0:	d00b      	beq.n	8006bfa <mg_json_get_num+0x52>
      (json.ptr[n] == '-' || (json.ptr[n] >= '0' && json.ptr[n] <= '9'))) {
 8006be2:	68ba      	ldr	r2, [r7, #8]
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	4413      	add	r3, r2
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	2b2f      	cmp	r3, #47	; 0x2f
 8006bec:	d917      	bls.n	8006c1e <mg_json_get_num+0x76>
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	2b39      	cmp	r3, #57	; 0x39
 8006bf8:	d811      	bhi.n	8006c1e <mg_json_get_num+0x76>
    if (v != NULL) *v = mg_atod(json.ptr + n, toklen, NULL);
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00c      	beq.n	8006c1a <mg_json_get_num+0x72>
 8006c00:	68ba      	ldr	r2, [r7, #8]
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	4413      	add	r3, r2
 8006c06:	6979      	ldr	r1, [r7, #20]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7ff fb68 	bl	80062e0 <mg_atod>
 8006c10:	eeb0 7b40 	vmov.f64	d7, d0
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	ed83 7b00 	vstr	d7, [r3]
    found = 1;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	61fb      	str	r3, [r7, #28]
  }
  return found;
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	bf14      	ite	ne
 8006c24:	2301      	movne	r3, #1
 8006c26:	2300      	moveq	r3, #0
 8006c28:	b2db      	uxtb	r3, r3
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3724      	adds	r7, #36	; 0x24
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd90      	pop	{r4, r7, pc}

08006c32 <mg_json_get_bool>:

bool mg_json_get_bool(struct mg_str json, const char *path, bool *v) {
 8006c32:	b590      	push	{r4, r7, lr}
 8006c34:	b087      	sub	sp, #28
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	f107 0408 	add.w	r4, r7, #8
 8006c3c:	e884 0003 	stmia.w	r4, {r0, r1}
 8006c40:	607a      	str	r2, [r7, #4]
 8006c42:	603b      	str	r3, [r7, #0]
  int found = 0, off = mg_json_get(json, path, NULL);
 8006c44:	2300      	movs	r3, #0
 8006c46:	617b      	str	r3, [r7, #20]
 8006c48:	2300      	movs	r3, #0
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	f107 0108 	add.w	r1, r7, #8
 8006c50:	c903      	ldmia	r1, {r0, r1}
 8006c52:	f7ff fc95 	bl	8006580 <mg_json_get>
 8006c56:	6138      	str	r0, [r7, #16]
  if (off >= 0 && (json.ptr[off] == 't' || json.ptr[off] == 'f')) {
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	db1b      	blt.n	8006c96 <mg_json_get_bool+0x64>
 8006c5e:	68ba      	ldr	r2, [r7, #8]
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	4413      	add	r3, r2
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	2b74      	cmp	r3, #116	; 0x74
 8006c68:	d005      	beq.n	8006c76 <mg_json_get_bool+0x44>
 8006c6a:	68ba      	ldr	r2, [r7, #8]
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	4413      	add	r3, r2
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	2b66      	cmp	r3, #102	; 0x66
 8006c74:	d10f      	bne.n	8006c96 <mg_json_get_bool+0x64>
    if (v != NULL) *v = json.ptr[off] == 't';
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00a      	beq.n	8006c92 <mg_json_get_bool+0x60>
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	4413      	add	r3, r2
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	2b74      	cmp	r3, #116	; 0x74
 8006c86:	bf0c      	ite	eq
 8006c88:	2301      	moveq	r3, #1
 8006c8a:	2300      	movne	r3, #0
 8006c8c:	b2da      	uxtb	r2, r3
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	701a      	strb	r2, [r3, #0]
    found = 1;
 8006c92:	2301      	movs	r3, #1
 8006c94:	617b      	str	r3, [r7, #20]
  }
  return found;
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	bf14      	ite	ne
 8006c9c:	2301      	movne	r3, #1
 8006c9e:	2300      	moveq	r3, #0
 8006ca0:	b2db      	uxtb	r3, r3
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	371c      	adds	r7, #28
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd90      	pop	{r4, r7, pc}

08006caa <mg_json_unescape>:

bool mg_json_unescape(struct mg_str s, char *to, size_t n) {
 8006caa:	b590      	push	{r4, r7, lr}
 8006cac:	b089      	sub	sp, #36	; 0x24
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	f107 0408 	add.w	r4, r7, #8
 8006cb4:	e884 0003 	stmia.w	r4, {r0, r1}
 8006cb8:	607a      	str	r2, [r7, #4]
 8006cba:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	61fb      	str	r3, [r7, #28]
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	61bb      	str	r3, [r7, #24]
 8006cc4:	e065      	b.n	8006d92 <mg_json_unescape+0xe8>
    if (s.ptr[i] == '\\' && i + 5 < s.len && s.ptr[i + 1] == 'u') {
 8006cc6:	68ba      	ldr	r2, [r7, #8]
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	4413      	add	r3, r2
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	2b5c      	cmp	r3, #92	; 0x5c
 8006cd0:	d12d      	bne.n	8006d2e <mg_json_unescape+0x84>
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	1d5a      	adds	r2, r3, #5
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d228      	bcs.n	8006d2e <mg_json_unescape+0x84>
 8006cdc:	68ba      	ldr	r2, [r7, #8]
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	4413      	add	r3, r2
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	2b75      	cmp	r3, #117	; 0x75
 8006ce8:	d121      	bne.n	8006d2e <mg_json_unescape+0x84>
      //  \uXXXX escape. We could process a simple one-byte chars
      // \u00xx from the ASCII range. More complex chars would require
      // dragging in a UTF8 library, which is too much for us
      if (s.ptr[i + 2] != '0' || s.ptr[i + 3] != '0') return false;  // Give up
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	3302      	adds	r3, #2
 8006cf0:	4413      	add	r3, r2
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	2b30      	cmp	r3, #48	; 0x30
 8006cf6:	d106      	bne.n	8006d06 <mg_json_unescape+0x5c>
 8006cf8:	68ba      	ldr	r2, [r7, #8]
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	3303      	adds	r3, #3
 8006cfe:	4413      	add	r3, r2
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	2b30      	cmp	r3, #48	; 0x30
 8006d04:	d001      	beq.n	8006d0a <mg_json_unescape+0x60>
 8006d06:	2300      	movs	r3, #0
 8006d08:	e05a      	b.n	8006dc0 <mg_json_unescape+0x116>
      ((unsigned char *) to)[j] = (unsigned char) mg_unhexn(s.ptr + i + 4, 2);
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	3304      	adds	r3, #4
 8006d10:	4413      	add	r3, r2
 8006d12:	2102      	movs	r1, #2
 8006d14:	4618      	mov	r0, r3
 8006d16:	f002 f87b 	bl	8008e10 <mg_unhexn>
 8006d1a:	4601      	mov	r1, r0
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	4413      	add	r3, r2
 8006d22:	b2ca      	uxtb	r2, r1
 8006d24:	701a      	strb	r2, [r3, #0]

      i += 5;
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	3305      	adds	r3, #5
 8006d2a:	61fb      	str	r3, [r7, #28]
 8006d2c:	e02b      	b.n	8006d86 <mg_json_unescape+0xdc>
    } else if (s.ptr[i] == '\\' && i + 1 < s.len) {
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	4413      	add	r3, r2
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	2b5c      	cmp	r3, #92	; 0x5c
 8006d38:	d11d      	bne.n	8006d76 <mg_json_unescape+0xcc>
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	1c5a      	adds	r2, r3, #1
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d218      	bcs.n	8006d76 <mg_json_unescape+0xcc>
      char c = json_esc(s.ptr[i + 1], 0);
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	3301      	adds	r3, #1
 8006d4a:	4413      	add	r3, r2
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	2100      	movs	r1, #0
 8006d50:	4618      	mov	r0, r3
 8006d52:	f7ff fa53 	bl	80061fc <json_esc>
 8006d56:	4603      	mov	r3, r0
 8006d58:	75fb      	strb	r3, [r7, #23]
      if (c == 0) return false;
 8006d5a:	7dfb      	ldrb	r3, [r7, #23]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d101      	bne.n	8006d64 <mg_json_unescape+0xba>
 8006d60:	2300      	movs	r3, #0
 8006d62:	e02d      	b.n	8006dc0 <mg_json_unescape+0x116>
      to[j] = c;
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	4413      	add	r3, r2
 8006d6a:	7dfa      	ldrb	r2, [r7, #23]
 8006d6c:	701a      	strb	r2, [r3, #0]
      i++;
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	3301      	adds	r3, #1
 8006d72:	61fb      	str	r3, [r7, #28]
    } else if (s.ptr[i] == '\\' && i + 1 < s.len) {
 8006d74:	e007      	b.n	8006d86 <mg_json_unescape+0xdc>
    } else {
      to[j] = s.ptr[i];
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	441a      	add	r2, r3
 8006d7c:	6879      	ldr	r1, [r7, #4]
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	440b      	add	r3, r1
 8006d82:	7812      	ldrb	r2, [r2, #0]
 8006d84:	701a      	strb	r2, [r3, #0]
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	61fb      	str	r3, [r7, #28]
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	61bb      	str	r3, [r7, #24]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	69fa      	ldr	r2, [r7, #28]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d203      	bcs.n	8006da2 <mg_json_unescape+0xf8>
 8006d9a:	69ba      	ldr	r2, [r7, #24]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d391      	bcc.n	8006cc6 <mg_json_unescape+0x1c>
    }
  }
  if (j >= n) return false;
 8006da2:	69ba      	ldr	r2, [r7, #24]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d301      	bcc.n	8006dae <mg_json_unescape+0x104>
 8006daa:	2300      	movs	r3, #0
 8006dac:	e008      	b.n	8006dc0 <mg_json_unescape+0x116>
  if (n > 0) to[j] = '\0';
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d004      	beq.n	8006dbe <mg_json_unescape+0x114>
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	4413      	add	r3, r2
 8006dba:	2200      	movs	r2, #0
 8006dbc:	701a      	strb	r2, [r3, #0]
  return true;
 8006dbe:	2301      	movs	r3, #1
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3724      	adds	r7, #36	; 0x24
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd90      	pop	{r4, r7, pc}

08006dc8 <mg_json_get_str>:

char *mg_json_get_str(struct mg_str json, const char *path) {
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b08a      	sub	sp, #40	; 0x28
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	f107 0308 	add.w	r3, r7, #8
 8006dd2:	e883 0003 	stmia.w	r3, {r0, r1}
 8006dd6:	607a      	str	r2, [r7, #4]
  char *result = NULL;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	627b      	str	r3, [r7, #36]	; 0x24
  int len = 0, off = mg_json_get(json, path, &len);
 8006ddc:	2300      	movs	r3, #0
 8006dde:	617b      	str	r3, [r7, #20]
 8006de0:	f107 0314 	add.w	r3, r7, #20
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	f107 0108 	add.w	r1, r7, #8
 8006dea:	c903      	ldmia	r1, {r0, r1}
 8006dec:	f7ff fbc8 	bl	8006580 <mg_json_get>
 8006df0:	6238      	str	r0, [r7, #32]
  if (off >= 0 && len > 1 && json.ptr[off] == '"') {
 8006df2:	6a3b      	ldr	r3, [r7, #32]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	db30      	blt.n	8006e5a <mg_json_get_str+0x92>
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	dd2d      	ble.n	8006e5a <mg_json_get_str+0x92>
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	6a3b      	ldr	r3, [r7, #32]
 8006e02:	4413      	add	r3, r2
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	2b22      	cmp	r3, #34	; 0x22
 8006e08:	d127      	bne.n	8006e5a <mg_json_get_str+0x92>
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	2001      	movs	r0, #1
 8006e10:	f00c f834 	bl	8012e7c <calloc>
 8006e14:	4603      	mov	r3, r0
 8006e16:	627b      	str	r3, [r7, #36]	; 0x24
 8006e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d01d      	beq.n	8006e5a <mg_json_get_str+0x92>
        !mg_json_unescape(mg_str_n(json.ptr + off + 1, (size_t) (len - 2)),
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	6a3b      	ldr	r3, [r7, #32]
 8006e22:	3301      	adds	r3, #1
 8006e24:	18d1      	adds	r1, r2, r3
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	3b02      	subs	r3, #2
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	f107 0318 	add.w	r3, r7, #24
 8006e30:	4618      	mov	r0, r3
 8006e32:	f001 fcb6 	bl	80087a2 <mg_str_n>
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e3a:	f107 0118 	add.w	r1, r7, #24
 8006e3e:	c903      	ldmia	r1, {r0, r1}
 8006e40:	f7ff ff33 	bl	8006caa <mg_json_unescape>
 8006e44:	4603      	mov	r3, r0
 8006e46:	f083 0301 	eor.w	r3, r3, #1
 8006e4a:	b2db      	uxtb	r3, r3
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d004      	beq.n	8006e5a <mg_json_get_str+0x92>
                          result, (size_t) len)) {
      free(result);
 8006e50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e52:	f00c f839 	bl	8012ec8 <free>
      result = NULL;
 8006e56:	2300      	movs	r3, #0
 8006e58:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  return result;
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3728      	adds	r7, #40	; 0x28
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <mg_json_get_long>:
    if (slen != NULL) *slen = len / 2 - 1;
  }
  return result;
}

long mg_json_get_long(struct mg_str json, const char *path, long dflt) {
 8006e64:	b590      	push	{r4, r7, lr}
 8006e66:	b089      	sub	sp, #36	; 0x24
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	f107 0408 	add.w	r4, r7, #8
 8006e6e:	e884 0003 	stmia.w	r4, {r0, r1}
 8006e72:	607a      	str	r2, [r7, #4]
 8006e74:	603b      	str	r3, [r7, #0]
  double dv;
  long result = dflt;
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	61fb      	str	r3, [r7, #28]
  if (mg_json_get_num(json, path, &dv)) result = (long) dv;
 8006e7a:	f107 0310 	add.w	r3, r7, #16
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	f107 0108 	add.w	r1, r7, #8
 8006e84:	c903      	ldmia	r1, {r0, r1}
 8006e86:	f7ff fe8f 	bl	8006ba8 <mg_json_get_num>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d006      	beq.n	8006e9e <mg_json_get_long+0x3a>
 8006e90:	ed97 7b04 	vldr	d7, [r7, #16]
 8006e94:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006e98:	ee17 3a90 	vmov	r3, s15
 8006e9c:	61fb      	str	r3, [r7, #28]
  return result;
 8006e9e:	69fb      	ldr	r3, [r7, #28]
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3724      	adds	r7, #36	; 0x24
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd90      	pop	{r4, r7, pc}

08006ea8 <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	4603      	mov	r3, r0
 8006eb0:	71fb      	strb	r3, [r7, #7]
  s_log_func((char) c, s_log_func_param);
 8006eb2:	4b05      	ldr	r3, [pc, #20]	; (8006ec8 <logc+0x20>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a05      	ldr	r2, [pc, #20]	; (8006ecc <logc+0x24>)
 8006eb8:	6811      	ldr	r1, [r2, #0]
 8006eba:	79fa      	ldrb	r2, [r7, #7]
 8006ebc:	4610      	mov	r0, r2
 8006ebe:	4798      	blx	r3
}
 8006ec0:	bf00      	nop
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	2400023c 	.word	0x2400023c
 8006ecc:	2400057c 	.word	0x2400057c

08006ed0 <logs>:

static void logs(const char *buf, size_t len) {
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 8006eda:	2300      	movs	r3, #0
 8006edc:	60fb      	str	r3, [r7, #12]
 8006ede:	e009      	b.n	8006ef4 <logs+0x24>
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f7ff ffdd 	bl	8006ea8 <logc>
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	60fb      	str	r3, [r7, #12]
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d3f1      	bcc.n	8006ee0 <logs+0x10>
}
 8006efc:	bf00      	nop
 8006efe:	bf00      	nop
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
	...

08006f08 <mg_log_set>:

void mg_log_set(int log_level) {
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  MG_DEBUG(("Setting log level to %d", log_level));
 8006f10:	4b0a      	ldr	r3, [pc, #40]	; (8006f3c <mg_log_set+0x34>)
 8006f12:	f640 22b9 	movw	r2, #2745	; 0xab9
 8006f16:	490a      	ldr	r1, [pc, #40]	; (8006f40 <mg_log_set+0x38>)
 8006f18:	2003      	movs	r0, #3
 8006f1a:	f000 f817 	bl	8006f4c <mg_log_prefix>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d003      	beq.n	8006f2c <mg_log_set+0x24>
 8006f24:	6879      	ldr	r1, [r7, #4]
 8006f26:	4807      	ldr	r0, [pc, #28]	; (8006f44 <mg_log_set+0x3c>)
 8006f28:	f000 f86a 	bl	8007000 <mg_log>
  s_level = log_level;
 8006f2c:	4a06      	ldr	r2, [pc, #24]	; (8006f48 <mg_log_set+0x40>)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6013      	str	r3, [r2, #0]
}
 8006f32:	bf00      	nop
 8006f34:	3708      	adds	r7, #8
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	080161f0 	.word	0x080161f0
 8006f40:	08014270 	.word	0x08014270
 8006f44:	08014eb8 	.word	0x08014eb8
 8006f48:	24000238 	.word	0x24000238

08006f4c <mg_log_prefix>:

bool mg_log_prefix(int level, const char *file, int line, const char *fname) {
 8006f4c:	b590      	push	{r4, r7, lr}
 8006f4e:	b099      	sub	sp, #100	; 0x64
 8006f50:	af06      	add	r7, sp, #24
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	607a      	str	r2, [r7, #4]
 8006f58:	603b      	str	r3, [r7, #0]
  if (level <= s_level) {
 8006f5a:	4b27      	ldr	r3, [pc, #156]	; (8006ff8 <mg_log_prefix+0xac>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	dc43      	bgt.n	8006fec <mg_log_prefix+0xa0>
    const char *p = strrchr(file, '/');
 8006f64:	212f      	movs	r1, #47	; 0x2f
 8006f66:	68b8      	ldr	r0, [r7, #8]
 8006f68:	f00c fad5 	bl	8013516 <strrchr>
 8006f6c:	6478      	str	r0, [r7, #68]	; 0x44
    char buf[41];
    size_t n;
    if (p == NULL) p = strrchr(file, '\\');
 8006f6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d104      	bne.n	8006f7e <mg_log_prefix+0x32>
 8006f74:	215c      	movs	r1, #92	; 0x5c
 8006f76:	68b8      	ldr	r0, [r7, #8]
 8006f78:	f00c facd 	bl	8013516 <strrchr>
 8006f7c:	6478      	str	r0, [r7, #68]	; 0x44
    n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 8006f7e:	f7f9 fe0f 	bl	8000ba0 <mg_millis>
 8006f82:	4602      	mov	r2, r0
 8006f84:	460b      	mov	r3, r1
 8006f86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f88:	2900      	cmp	r1, #0
 8006f8a:	d002      	beq.n	8006f92 <mg_log_prefix+0x46>
 8006f8c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f8e:	3101      	adds	r1, #1
 8006f90:	e000      	b.n	8006f94 <mg_log_prefix+0x48>
 8006f92:	68b9      	ldr	r1, [r7, #8]
 8006f94:	f107 0414 	add.w	r4, r7, #20
 8006f98:	6838      	ldr	r0, [r7, #0]
 8006f9a:	9005      	str	r0, [sp, #20]
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	9004      	str	r0, [sp, #16]
 8006fa0:	9103      	str	r1, [sp, #12]
 8006fa2:	68f9      	ldr	r1, [r7, #12]
 8006fa4:	9102      	str	r1, [sp, #8]
 8006fa6:	e9cd 2300 	strd	r2, r3, [sp]
 8006faa:	4a14      	ldr	r2, [pc, #80]	; (8006ffc <mg_log_prefix+0xb0>)
 8006fac:	2129      	movs	r1, #41	; 0x29
 8006fae:	4620      	mov	r0, r4
 8006fb0:	f000 fe00 	bl	8007bb4 <mg_snprintf>
 8006fb4:	6438      	str	r0, [r7, #64]	; 0x40
                    p == NULL ? file : p + 1, line, fname);
    if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 8006fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fb8:	2b27      	cmp	r3, #39	; 0x27
 8006fba:	d90a      	bls.n	8006fd2 <mg_log_prefix+0x86>
 8006fbc:	2327      	movs	r3, #39	; 0x27
 8006fbe:	643b      	str	r3, [r7, #64]	; 0x40
    while (n < sizeof(buf)) buf[n++] = ' ';
 8006fc0:	e007      	b.n	8006fd2 <mg_log_prefix+0x86>
 8006fc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fc4:	1c5a      	adds	r2, r3, #1
 8006fc6:	643a      	str	r2, [r7, #64]	; 0x40
 8006fc8:	3348      	adds	r3, #72	; 0x48
 8006fca:	443b      	add	r3, r7
 8006fcc:	2220      	movs	r2, #32
 8006fce:	f803 2c34 	strb.w	r2, [r3, #-52]
 8006fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fd4:	2b28      	cmp	r3, #40	; 0x28
 8006fd6:	d9f4      	bls.n	8006fc2 <mg_log_prefix+0x76>
    logs(buf, n - 1);
 8006fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fda:	1e5a      	subs	r2, r3, #1
 8006fdc:	f107 0314 	add.w	r3, r7, #20
 8006fe0:	4611      	mov	r1, r2
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7ff ff74 	bl	8006ed0 <logs>
    return true;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e000      	b.n	8006fee <mg_log_prefix+0xa2>
  } else {
    return false;
 8006fec:	2300      	movs	r3, #0
  }
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	374c      	adds	r7, #76	; 0x4c
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd90      	pop	{r4, r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	24000238 	.word	0x24000238
 8006ffc:	08014ed0 	.word	0x08014ed0

08007000 <mg_log>:

void mg_log(const char *fmt, ...) {
 8007000:	b40f      	push	{r0, r1, r2, r3}
 8007002:	b580      	push	{r7, lr}
 8007004:	b082      	sub	sp, #8
 8007006:	af00      	add	r7, sp, #0
  va_list ap;
  va_start(ap, fmt);
 8007008:	f107 0314 	add.w	r3, r7, #20
 800700c:	607b      	str	r3, [r7, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 800700e:	4b09      	ldr	r3, [pc, #36]	; (8007034 <mg_log+0x34>)
 8007010:	6818      	ldr	r0, [r3, #0]
 8007012:	4b09      	ldr	r3, [pc, #36]	; (8007038 <mg_log+0x38>)
 8007014:	6819      	ldr	r1, [r3, #0]
 8007016:	1d3b      	adds	r3, r7, #4
 8007018:	693a      	ldr	r2, [r7, #16]
 800701a:	f7fb fc85 	bl	8002928 <mg_vxprintf>
  va_end(ap);
  logc((unsigned char) '\n');
 800701e:	200a      	movs	r0, #10
 8007020:	f7ff ff42 	bl	8006ea8 <logc>
}
 8007024:	bf00      	nop
 8007026:	3708      	adds	r7, #8
 8007028:	46bd      	mov	sp, r7
 800702a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800702e:	b004      	add	sp, #16
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	2400023c 	.word	0x2400023c
 8007038:	2400057c 	.word	0x2400057c

0800703c <nibble>:

static unsigned char nibble(unsigned c) {
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2b09      	cmp	r3, #9
 8007048:	d804      	bhi.n	8007054 <nibble+0x18>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	b2db      	uxtb	r3, r3
 800704e:	3330      	adds	r3, #48	; 0x30
 8007050:	b2db      	uxtb	r3, r3
 8007052:	e003      	b.n	800705c <nibble+0x20>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	b2db      	uxtb	r3, r3
 8007058:	3357      	adds	r3, #87	; 0x57
 800705a:	b2db      	uxtb	r3, r3
}
 800705c:	4618      	mov	r0, r3
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <mg_hexdump>:

#define ISPRINT(x) ((x) >= ' ' && (x) <= '~')
void mg_hexdump(const void *buf, size_t len) {
 8007068:	b580      	push	{r7, lr}
 800706a:	b08a      	sub	sp, #40	; 0x28
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  const unsigned char *p = (const unsigned char *) buf;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	61fb      	str	r3, [r7, #28]
  unsigned char ascii[16], alen = 0;
 8007076:	2300      	movs	r3, #0
 8007078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  size_t i;
  for (i = 0; i < len; i++) {
 800707c:	2300      	movs	r3, #0
 800707e:	623b      	str	r3, [r7, #32]
 8007080:	e07a      	b.n	8007178 <mg_hexdump+0x110>
    if ((i % 16) == 0) {
 8007082:	6a3b      	ldr	r3, [r7, #32]
 8007084:	f003 030f 	and.w	r3, r3, #15
 8007088:	2b00      	cmp	r3, #0
 800708a:	d13a      	bne.n	8007102 <mg_hexdump+0x9a>
      // Print buffered ascii chars
      if (i > 0) logs("  ", 2), logs((char *) ascii, 16), logc('\n'), alen = 0;
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00f      	beq.n	80070b2 <mg_hexdump+0x4a>
 8007092:	2102      	movs	r1, #2
 8007094:	484c      	ldr	r0, [pc, #304]	; (80071c8 <mg_hexdump+0x160>)
 8007096:	f7ff ff1b 	bl	8006ed0 <logs>
 800709a:	f107 030c 	add.w	r3, r7, #12
 800709e:	2110      	movs	r1, #16
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7ff ff15 	bl	8006ed0 <logs>
 80070a6:	200a      	movs	r0, #10
 80070a8:	f7ff fefe 	bl	8006ea8 <logc>
 80070ac:	2300      	movs	r3, #0
 80070ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      // Print hex address, then \t
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 80070b2:	6a3b      	ldr	r3, [r7, #32]
 80070b4:	0b1b      	lsrs	r3, r3, #12
 80070b6:	f003 030f 	and.w	r3, r3, #15
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7ff ffbe 	bl	800703c <nibble>
 80070c0:	4603      	mov	r3, r0
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7ff fef0 	bl	8006ea8 <logc>
 80070c8:	6a3b      	ldr	r3, [r7, #32]
 80070ca:	0a1b      	lsrs	r3, r3, #8
 80070cc:	f003 030f 	and.w	r3, r3, #15
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7ff ffb3 	bl	800703c <nibble>
 80070d6:	4603      	mov	r3, r0
 80070d8:	4618      	mov	r0, r3
 80070da:	f7ff fee5 	bl	8006ea8 <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 80070de:	6a3b      	ldr	r3, [r7, #32]
 80070e0:	091b      	lsrs	r3, r3, #4
 80070e2:	f003 030f 	and.w	r3, r3, #15
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7ff ffa8 	bl	800703c <nibble>
 80070ec:	4603      	mov	r3, r0
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7ff feda 	bl	8006ea8 <logc>
 80070f4:	2030      	movs	r0, #48	; 0x30
 80070f6:	f7ff fed7 	bl	8006ea8 <logc>
 80070fa:	2103      	movs	r1, #3
 80070fc:	4833      	ldr	r0, [pc, #204]	; (80071cc <mg_hexdump+0x164>)
 80070fe:	f7ff fee7 	bl	8006ed0 <logs>
    }
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 8007102:	69fa      	ldr	r2, [r7, #28]
 8007104:	6a3b      	ldr	r3, [r7, #32]
 8007106:	4413      	add	r3, r2
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	091b      	lsrs	r3, r3, #4
 800710c:	b2db      	uxtb	r3, r3
 800710e:	4618      	mov	r0, r3
 8007110:	f7ff ff94 	bl	800703c <nibble>
 8007114:	4603      	mov	r3, r0
 8007116:	4618      	mov	r0, r3
 8007118:	f7ff fec6 	bl	8006ea8 <logc>
 800711c:	69fa      	ldr	r2, [r7, #28]
 800711e:	6a3b      	ldr	r3, [r7, #32]
 8007120:	4413      	add	r3, r2
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	f003 030f 	and.w	r3, r3, #15
 8007128:	4618      	mov	r0, r3
 800712a:	f7ff ff87 	bl	800703c <nibble>
 800712e:	4603      	mov	r3, r0
 8007130:	4618      	mov	r0, r3
 8007132:	f7ff feb9 	bl	8006ea8 <logc>
    logc(' ');                                         // Space after hex number
 8007136:	2020      	movs	r0, #32
 8007138:	f7ff feb6 	bl	8006ea8 <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 800713c:	69fa      	ldr	r2, [r7, #28]
 800713e:	6a3b      	ldr	r3, [r7, #32]
 8007140:	4413      	add	r3, r2
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	2b1f      	cmp	r3, #31
 8007146:	d90a      	bls.n	800715e <mg_hexdump+0xf6>
 8007148:	69fa      	ldr	r2, [r7, #28]
 800714a:	6a3b      	ldr	r3, [r7, #32]
 800714c:	4413      	add	r3, r2
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	2b7e      	cmp	r3, #126	; 0x7e
 8007152:	d804      	bhi.n	800715e <mg_hexdump+0xf6>
 8007154:	69fa      	ldr	r2, [r7, #28]
 8007156:	6a3b      	ldr	r3, [r7, #32]
 8007158:	4413      	add	r3, r2
 800715a:	781a      	ldrb	r2, [r3, #0]
 800715c:	e000      	b.n	8007160 <mg_hexdump+0xf8>
 800715e:	222e      	movs	r2, #46	; 0x2e
 8007160:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007164:	1c59      	adds	r1, r3, #1
 8007166:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 800716a:	3328      	adds	r3, #40	; 0x28
 800716c:	443b      	add	r3, r7
 800716e:	f803 2c1c 	strb.w	r2, [r3, #-28]
  for (i = 0; i < len; i++) {
 8007172:	6a3b      	ldr	r3, [r7, #32]
 8007174:	3301      	adds	r3, #1
 8007176:	623b      	str	r3, [r7, #32]
 8007178:	6a3a      	ldr	r2, [r7, #32]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	429a      	cmp	r2, r3
 800717e:	d380      	bcc.n	8007082 <mg_hexdump+0x1a>
  }
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 8007180:	e00d      	b.n	800719e <mg_hexdump+0x136>
 8007182:	2103      	movs	r1, #3
 8007184:	4811      	ldr	r0, [pc, #68]	; (80071cc <mg_hexdump+0x164>)
 8007186:	f7ff fea3 	bl	8006ed0 <logs>
 800718a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800718e:	1c5a      	adds	r2, r3, #1
 8007190:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8007194:	3328      	adds	r3, #40	; 0x28
 8007196:	443b      	add	r3, r7
 8007198:	2220      	movs	r2, #32
 800719a:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800719e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071a2:	2b0f      	cmp	r3, #15
 80071a4:	d9ed      	bls.n	8007182 <mg_hexdump+0x11a>
  logs("  ", 2), logs((char *) ascii, 16), logc('\n');
 80071a6:	2102      	movs	r1, #2
 80071a8:	4807      	ldr	r0, [pc, #28]	; (80071c8 <mg_hexdump+0x160>)
 80071aa:	f7ff fe91 	bl	8006ed0 <logs>
 80071ae:	f107 030c 	add.w	r3, r7, #12
 80071b2:	2110      	movs	r1, #16
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7ff fe8b 	bl	8006ed0 <logs>
 80071ba:	200a      	movs	r0, #10
 80071bc:	f7ff fe74 	bl	8006ea8 <logc>
}
 80071c0:	bf00      	nop
 80071c2:	3728      	adds	r7, #40	; 0x28
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	08014ee4 	.word	0x08014ee4
 80071cc:	08014ee8 	.word	0x08014ee8

080071d0 <mg_vprintf>:





size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b086      	sub	sp, #24
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
  size_t old = c->send.len;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071e0:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	68ba      	ldr	r2, [r7, #8]
 80071ec:	4805      	ldr	r0, [pc, #20]	; (8007204 <mg_vprintf+0x34>)
 80071ee:	f7fb fb9b 	bl	8002928 <mg_vxprintf>
  return c->send.len - old;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	1ad3      	subs	r3, r2, r3
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3718      	adds	r7, #24
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	08007b45 	.word	0x08007b45

08007208 <mg_printf>:

size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 8007208:	b40e      	push	{r1, r2, r3}
 800720a:	b580      	push	{r7, lr}
 800720c:	b085      	sub	sp, #20
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  size_t len = 0;
 8007212:	2300      	movs	r3, #0
 8007214:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 8007216:	f107 0320 	add.w	r3, r7, #32
 800721a:	60bb      	str	r3, [r7, #8]
  len = mg_vprintf(c, fmt, &ap);
 800721c:	f107 0308 	add.w	r3, r7, #8
 8007220:	461a      	mov	r2, r3
 8007222:	69f9      	ldr	r1, [r7, #28]
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f7ff ffd3 	bl	80071d0 <mg_vprintf>
 800722a:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 800722c:	68fb      	ldr	r3, [r7, #12]
}
 800722e:	4618      	mov	r0, r3
 8007230:	3714      	adds	r7, #20
 8007232:	46bd      	mov	sp, r7
 8007234:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007238:	b003      	add	sp, #12
 800723a:	4770      	bx	lr

0800723c <mg_atonl>:

static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {
 800723c:	b580      	push	{r7, lr}
 800723e:	b086      	sub	sp, #24
 8007240:	af00      	add	r7, sp, #0
 8007242:	f107 0308 	add.w	r3, r7, #8
 8007246:	e883 0003 	stmia.w	r3, {r0, r1}
 800724a:	607a      	str	r2, [r7, #4]
  uint32_t localhost = mg_htonl(0x7f000001);
 800724c:	480d      	ldr	r0, [pc, #52]	; (8007284 <mg_atonl+0x48>)
 800724e:	f002 f8bb 	bl	80093c8 <mg_ntohl>
 8007252:	4603      	mov	r3, r0
 8007254:	617b      	str	r3, [r7, #20]
  if (mg_vcasecmp(&str, "localhost") != 0) return false;
 8007256:	f107 0308 	add.w	r3, r7, #8
 800725a:	490b      	ldr	r1, [pc, #44]	; (8007288 <mg_atonl+0x4c>)
 800725c:	4618      	mov	r0, r3
 800725e:	f001 fb21 	bl	80088a4 <mg_vcasecmp>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d001      	beq.n	800726c <mg_atonl+0x30>
 8007268:	2300      	movs	r3, #0
 800726a:	e006      	b.n	800727a <mg_atonl+0x3e>
  memcpy(addr->ip, &localhost, sizeof(uint32_t));
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	749a      	strb	r2, [r3, #18]
  return true;
 8007278:	2301      	movs	r3, #1
}
 800727a:	4618      	mov	r0, r3
 800727c:	3718      	adds	r7, #24
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	7f000001 	.word	0x7f000001
 8007288:	08014f74 	.word	0x08014f74

0800728c <mg_atone>:

static bool mg_atone(struct mg_str str, struct mg_addr *addr) {
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	f107 0308 	add.w	r3, r7, #8
 8007296:	e883 0003 	stmia.w	r3, {r0, r1}
 800729a:	607a      	str	r2, [r7, #4]
  if (str.len > 0) return false;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d001      	beq.n	80072a6 <mg_atone+0x1a>
 80072a2:	2300      	movs	r3, #0
 80072a4:	e009      	b.n	80072ba <mg_atone+0x2e>
  memset(addr->ip, 0, sizeof(addr->ip));
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2210      	movs	r2, #16
 80072aa:	2100      	movs	r1, #0
 80072ac:	4618      	mov	r0, r3
 80072ae:	f00c f8ee 	bl	801348e <memset>
  addr->is_ip6 = false;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	749a      	strb	r2, [r3, #18]
  return true;
 80072b8:	2301      	movs	r3, #1
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <mg_aton4>:

static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {
 80072c2:	b480      	push	{r7}
 80072c4:	b089      	sub	sp, #36	; 0x24
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	f107 0308 	add.w	r3, r7, #8
 80072cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80072d0:	607a      	str	r2, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 80072d2:	2300      	movs	r3, #0
 80072d4:	613b      	str	r3, [r7, #16]
  size_t i, num_dots = 0;
 80072d6:	2300      	movs	r3, #0
 80072d8:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < str.len; i++) {
 80072da:	2300      	movs	r3, #0
 80072dc:	61fb      	str	r3, [r7, #28]
 80072de:	e049      	b.n	8007374 <mg_aton4+0xb2>
    if (str.ptr[i] >= '0' && str.ptr[i] <= '9') {
 80072e0:	68ba      	ldr	r2, [r7, #8]
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	4413      	add	r3, r2
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	2b2f      	cmp	r3, #47	; 0x2f
 80072ea:	d925      	bls.n	8007338 <mg_aton4+0x76>
 80072ec:	68ba      	ldr	r2, [r7, #8]
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	4413      	add	r3, r2
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	2b39      	cmp	r3, #57	; 0x39
 80072f6:	d81f      	bhi.n	8007338 <mg_aton4+0x76>
      int octet = data[num_dots] * 10 + (str.ptr[i] - '0');
 80072f8:	f107 0210 	add.w	r2, r7, #16
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	4413      	add	r3, r2
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	461a      	mov	r2, r3
 8007304:	4613      	mov	r3, r2
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	4413      	add	r3, r2
 800730a:	005b      	lsls	r3, r3, #1
 800730c:	4619      	mov	r1, r3
 800730e:	68ba      	ldr	r2, [r7, #8]
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	4413      	add	r3, r2
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	3b30      	subs	r3, #48	; 0x30
 8007318:	440b      	add	r3, r1
 800731a:	617b      	str	r3, [r7, #20]
      if (octet > 255) return false;
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	2bff      	cmp	r3, #255	; 0xff
 8007320:	dd01      	ble.n	8007326 <mg_aton4+0x64>
 8007322:	2300      	movs	r3, #0
 8007324:	e03d      	b.n	80073a2 <mg_aton4+0xe0>
      data[num_dots] = (uint8_t) octet;
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	b2d9      	uxtb	r1, r3
 800732a:	f107 0210 	add.w	r2, r7, #16
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	4413      	add	r3, r2
 8007332:	460a      	mov	r2, r1
 8007334:	701a      	strb	r2, [r3, #0]
    if (str.ptr[i] >= '0' && str.ptr[i] <= '9') {
 8007336:	e01a      	b.n	800736e <mg_aton4+0xac>
    } else if (str.ptr[i] == '.') {
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	4413      	add	r3, r2
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	2b2e      	cmp	r3, #46	; 0x2e
 8007342:	d112      	bne.n	800736a <mg_aton4+0xa8>
      if (num_dots >= 3 || i == 0 || str.ptr[i - 1] == '.') return false;
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	2b02      	cmp	r3, #2
 8007348:	d809      	bhi.n	800735e <mg_aton4+0x9c>
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d006      	beq.n	800735e <mg_aton4+0x9c>
 8007350:	68ba      	ldr	r2, [r7, #8]
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	3b01      	subs	r3, #1
 8007356:	4413      	add	r3, r2
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	2b2e      	cmp	r3, #46	; 0x2e
 800735c:	d101      	bne.n	8007362 <mg_aton4+0xa0>
 800735e:	2300      	movs	r3, #0
 8007360:	e01f      	b.n	80073a2 <mg_aton4+0xe0>
      num_dots++;
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	3301      	adds	r3, #1
 8007366:	61bb      	str	r3, [r7, #24]
 8007368:	e001      	b.n	800736e <mg_aton4+0xac>
    } else {
      return false;
 800736a:	2300      	movs	r3, #0
 800736c:	e019      	b.n	80073a2 <mg_aton4+0xe0>
  for (i = 0; i < str.len; i++) {
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	3301      	adds	r3, #1
 8007372:	61fb      	str	r3, [r7, #28]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	69fa      	ldr	r2, [r7, #28]
 8007378:	429a      	cmp	r2, r3
 800737a:	d3b1      	bcc.n	80072e0 <mg_aton4+0x1e>
    }
  }
  if (num_dots != 3 || str.ptr[i - 1] == '.') return false;
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	2b03      	cmp	r3, #3
 8007380:	d106      	bne.n	8007390 <mg_aton4+0xce>
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	3b01      	subs	r3, #1
 8007388:	4413      	add	r3, r2
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	2b2e      	cmp	r3, #46	; 0x2e
 800738e:	d101      	bne.n	8007394 <mg_aton4+0xd2>
 8007390:	2300      	movs	r3, #0
 8007392:	e006      	b.n	80073a2 <mg_aton4+0xe0>
  memcpy(&addr->ip, data, sizeof(data));
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	693a      	ldr	r2, [r7, #16]
 8007398:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	749a      	strb	r2, [r3, #18]
  return true;
 80073a0:	2301      	movs	r3, #1
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3724      	adds	r7, #36	; 0x24
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr

080073ae <mg_v4mapped>:

static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b088      	sub	sp, #32
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	f107 0308 	add.w	r3, r7, #8
 80073b8:	e883 0003 	stmia.w	r3, {r0, r1}
 80073bc:	607a      	str	r2, [r7, #4]
  int i;
  uint32_t ipv4;
  if (str.len < 14) return false;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2b0d      	cmp	r3, #13
 80073c2:	d801      	bhi.n	80073c8 <mg_v4mapped+0x1a>
 80073c4:	2300      	movs	r3, #0
 80073c6:	e056      	b.n	8007476 <mg_v4mapped+0xc8>
  if (str.ptr[0] != ':' || str.ptr[1] != ':' || str.ptr[6] != ':') return false;
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	2b3a      	cmp	r3, #58	; 0x3a
 80073ce:	d109      	bne.n	80073e4 <mg_v4mapped+0x36>
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	3301      	adds	r3, #1
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	2b3a      	cmp	r3, #58	; 0x3a
 80073d8:	d104      	bne.n	80073e4 <mg_v4mapped+0x36>
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	3306      	adds	r3, #6
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	2b3a      	cmp	r3, #58	; 0x3a
 80073e2:	d001      	beq.n	80073e8 <mg_v4mapped+0x3a>
 80073e4:	2300      	movs	r3, #0
 80073e6:	e046      	b.n	8007476 <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 80073e8:	2302      	movs	r3, #2
 80073ea:	61fb      	str	r3, [r7, #28]
 80073ec:	e010      	b.n	8007410 <mg_v4mapped+0x62>
    if (str.ptr[i] != 'f' && str.ptr[i] != 'F') return false;
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	4413      	add	r3, r2
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	2b66      	cmp	r3, #102	; 0x66
 80073f8:	d007      	beq.n	800740a <mg_v4mapped+0x5c>
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	4413      	add	r3, r2
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	2b46      	cmp	r3, #70	; 0x46
 8007404:	d001      	beq.n	800740a <mg_v4mapped+0x5c>
 8007406:	2300      	movs	r3, #0
 8007408:	e035      	b.n	8007476 <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	3301      	adds	r3, #1
 800740e:	61fb      	str	r3, [r7, #28]
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	2b05      	cmp	r3, #5
 8007414:	ddeb      	ble.n	80073ee <mg_v4mapped+0x40>
  }
  //struct mg_str s = mg_str_n(&str.ptr[7], str.len - 7);
  if (!mg_aton4(mg_str_n(&str.ptr[7], str.len - 7), addr)) return false;
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	1dd9      	adds	r1, r3, #7
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	1fda      	subs	r2, r3, #7
 800741e:	f107 0314 	add.w	r3, r7, #20
 8007422:	4618      	mov	r0, r3
 8007424:	f001 f9bd 	bl	80087a2 <mg_str_n>
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	f107 0314 	add.w	r3, r7, #20
 800742e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007432:	f7ff ff46 	bl	80072c2 <mg_aton4>
 8007436:	4603      	mov	r3, r0
 8007438:	f083 0301 	eor.w	r3, r3, #1
 800743c:	b2db      	uxtb	r3, r3
 800743e:	2b00      	cmp	r3, #0
 8007440:	d001      	beq.n	8007446 <mg_v4mapped+0x98>
 8007442:	2300      	movs	r3, #0
 8007444:	e017      	b.n	8007476 <mg_v4mapped+0xc8>
  memcpy(&ipv4, addr->ip, sizeof(ipv4));
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	613b      	str	r3, [r7, #16]
  memset(addr->ip, 0, sizeof(addr->ip));
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2210      	movs	r2, #16
 8007450:	2100      	movs	r1, #0
 8007452:	4618      	mov	r0, r3
 8007454:	f00c f81b 	bl	801348e <memset>
  addr->ip[10] = addr->ip[11] = 255;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	22ff      	movs	r2, #255	; 0xff
 800745c:	72da      	strb	r2, [r3, #11]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	7ada      	ldrb	r2, [r3, #11]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	729a      	strb	r2, [r3, #10]
  memcpy(&addr->ip[12], &ipv4, 4);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	330c      	adds	r3, #12
 800746a:	693a      	ldr	r2, [r7, #16]
 800746c:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = true;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2201      	movs	r2, #1
 8007472:	749a      	strb	r2, [r3, #18]
  return true;
 8007474:	2301      	movs	r3, #1
}
 8007476:	4618      	mov	r0, r3
 8007478:	3720      	adds	r7, #32
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <mg_aton6>:

static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {
 800747e:	b580      	push	{r7, lr}
 8007480:	b08a      	sub	sp, #40	; 0x28
 8007482:	af00      	add	r7, sp, #0
 8007484:	f107 0308 	add.w	r3, r7, #8
 8007488:	e883 0003 	stmia.w	r3, {r0, r1}
 800748c:	607a      	str	r2, [r7, #4]
  size_t i, j = 0, n = 0, dc = 42;
 800748e:	2300      	movs	r3, #0
 8007490:	623b      	str	r3, [r7, #32]
 8007492:	2300      	movs	r3, #0
 8007494:	61fb      	str	r3, [r7, #28]
 8007496:	232a      	movs	r3, #42	; 0x2a
 8007498:	61bb      	str	r3, [r7, #24]
  if (str.len > 2 && str.ptr[0] == '[') str.ptr++, str.len -= 2;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2b02      	cmp	r3, #2
 800749e:	d909      	bls.n	80074b4 <mg_aton6+0x36>
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	2b5b      	cmp	r3, #91	; 0x5b
 80074a6:	d105      	bne.n	80074b4 <mg_aton6+0x36>
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	3301      	adds	r3, #1
 80074ac:	60bb      	str	r3, [r7, #8]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	3b02      	subs	r3, #2
 80074b2:	60fb      	str	r3, [r7, #12]
  if (mg_v4mapped(str, addr)) return true;
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	f107 0308 	add.w	r3, r7, #8
 80074ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80074be:	f7ff ff76 	bl	80073ae <mg_v4mapped>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d001      	beq.n	80074cc <mg_aton6+0x4e>
 80074c8:	2301      	movs	r3, #1
 80074ca:	e0b5      	b.n	8007638 <mg_aton6+0x1ba>
  for (i = 0; i < str.len; i++) {
 80074cc:	2300      	movs	r3, #0
 80074ce:	627b      	str	r3, [r7, #36]	; 0x24
 80074d0:	e084      	b.n	80075dc <mg_aton6+0x15e>
    if ((str.ptr[i] >= '0' && str.ptr[i] <= '9') ||
 80074d2:	68ba      	ldr	r2, [r7, #8]
 80074d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d6:	4413      	add	r3, r2
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	2b2f      	cmp	r3, #47	; 0x2f
 80074dc:	d905      	bls.n	80074ea <mg_aton6+0x6c>
 80074de:	68ba      	ldr	r2, [r7, #8]
 80074e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e2:	4413      	add	r3, r2
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	2b39      	cmp	r3, #57	; 0x39
 80074e8:	d917      	bls.n	800751a <mg_aton6+0x9c>
        (str.ptr[i] >= 'a' && str.ptr[i] <= 'f') ||
 80074ea:	68ba      	ldr	r2, [r7, #8]
 80074ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ee:	4413      	add	r3, r2
 80074f0:	781b      	ldrb	r3, [r3, #0]
    if ((str.ptr[i] >= '0' && str.ptr[i] <= '9') ||
 80074f2:	2b60      	cmp	r3, #96	; 0x60
 80074f4:	d905      	bls.n	8007502 <mg_aton6+0x84>
        (str.ptr[i] >= 'a' && str.ptr[i] <= 'f') ||
 80074f6:	68ba      	ldr	r2, [r7, #8]
 80074f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fa:	4413      	add	r3, r2
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	2b66      	cmp	r3, #102	; 0x66
 8007500:	d90b      	bls.n	800751a <mg_aton6+0x9c>
        (str.ptr[i] >= 'A' && str.ptr[i] <= 'F')) {
 8007502:	68ba      	ldr	r2, [r7, #8]
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007506:	4413      	add	r3, r2
 8007508:	781b      	ldrb	r3, [r3, #0]
        (str.ptr[i] >= 'a' && str.ptr[i] <= 'f') ||
 800750a:	2b40      	cmp	r3, #64	; 0x40
 800750c:	d926      	bls.n	800755c <mg_aton6+0xde>
        (str.ptr[i] >= 'A' && str.ptr[i] <= 'F')) {
 800750e:	68ba      	ldr	r2, [r7, #8]
 8007510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007512:	4413      	add	r3, r2
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	2b46      	cmp	r3, #70	; 0x46
 8007518:	d820      	bhi.n	800755c <mg_aton6+0xde>
      unsigned long val;
      if (i > j + 3) return false;
 800751a:	6a3b      	ldr	r3, [r7, #32]
 800751c:	3303      	adds	r3, #3
 800751e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007520:	429a      	cmp	r2, r3
 8007522:	d901      	bls.n	8007528 <mg_aton6+0xaa>
 8007524:	2300      	movs	r3, #0
 8007526:	e087      	b.n	8007638 <mg_aton6+0x1ba>
      // MG_DEBUG(("%zu %zu [%.*s]", i, j, (int) (i - j + 1), &str.ptr[j]));
      val = mg_unhexn(&str.ptr[j], i - j + 1);
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	6a3b      	ldr	r3, [r7, #32]
 800752c:	18d0      	adds	r0, r2, r3
 800752e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007530:	6a3b      	ldr	r3, [r7, #32]
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	3301      	adds	r3, #1
 8007536:	4619      	mov	r1, r3
 8007538:	f001 fc6a 	bl	8008e10 <mg_unhexn>
 800753c:	6178      	str	r0, [r7, #20]
      addr->ip[n] = (uint8_t) ((val >> 8) & 255);
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	0a1b      	lsrs	r3, r3, #8
 8007542:	b2d9      	uxtb	r1, r3
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	4413      	add	r3, r2
 800754a:	460a      	mov	r2, r1
 800754c:	701a      	strb	r2, [r3, #0]
      addr->ip[n + 1] = (uint8_t) (val & 255);
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	3301      	adds	r3, #1
 8007552:	697a      	ldr	r2, [r7, #20]
 8007554:	b2d1      	uxtb	r1, r2
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	54d1      	strb	r1, [r2, r3]
        (str.ptr[i] >= 'A' && str.ptr[i] <= 'F')) {
 800755a:	e03c      	b.n	80075d6 <mg_aton6+0x158>
    } else if (str.ptr[i] == ':') {
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007560:	4413      	add	r3, r2
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	2b3a      	cmp	r3, #58	; 0x3a
 8007566:	d134      	bne.n	80075d2 <mg_aton6+0x154>
      j = i + 1;
 8007568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756a:	3301      	adds	r3, #1
 800756c:	623b      	str	r3, [r7, #32]
      if (i > 0 && str.ptr[i - 1] == ':') {
 800756e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007570:	2b00      	cmp	r3, #0
 8007572:	d014      	beq.n	800759e <mg_aton6+0x120>
 8007574:	68ba      	ldr	r2, [r7, #8]
 8007576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007578:	3b01      	subs	r3, #1
 800757a:	4413      	add	r3, r2
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	2b3a      	cmp	r3, #58	; 0x3a
 8007580:	d10d      	bne.n	800759e <mg_aton6+0x120>
        dc = n;  // Double colon
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	61bb      	str	r3, [r7, #24]
        if (i > 1 && str.ptr[i - 2] == ':') return false;
 8007586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007588:	2b01      	cmp	r3, #1
 800758a:	d90f      	bls.n	80075ac <mg_aton6+0x12e>
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007590:	3b02      	subs	r3, #2
 8007592:	4413      	add	r3, r2
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	2b3a      	cmp	r3, #58	; 0x3a
 8007598:	d108      	bne.n	80075ac <mg_aton6+0x12e>
 800759a:	2300      	movs	r3, #0
 800759c:	e04c      	b.n	8007638 <mg_aton6+0x1ba>
      } else if (i > 0) {
 800759e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d004      	beq.n	80075ae <mg_aton6+0x130>
        n += 2;
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	3302      	adds	r3, #2
 80075a8:	61fb      	str	r3, [r7, #28]
 80075aa:	e000      	b.n	80075ae <mg_aton6+0x130>
        if (i > 1 && str.ptr[i - 2] == ':') return false;
 80075ac:	bf00      	nop
      }
      if (n > 14) return false;
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	2b0e      	cmp	r3, #14
 80075b2:	d901      	bls.n	80075b8 <mg_aton6+0x13a>
 80075b4:	2300      	movs	r3, #0
 80075b6:	e03f      	b.n	8007638 <mg_aton6+0x1ba>
      addr->ip[n] = addr->ip[n + 1] = 0;  // For trailing ::
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	3301      	adds	r3, #1
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	2100      	movs	r1, #0
 80075c0:	54d1      	strb	r1, [r2, r3]
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	5cd1      	ldrb	r1, [r2, r3]
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	4413      	add	r3, r2
 80075cc:	460a      	mov	r2, r1
 80075ce:	701a      	strb	r2, [r3, #0]
 80075d0:	e001      	b.n	80075d6 <mg_aton6+0x158>
    } else {
      return false;
 80075d2:	2300      	movs	r3, #0
 80075d4:	e030      	b.n	8007638 <mg_aton6+0x1ba>
  for (i = 0; i < str.len; i++) {
 80075d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d8:	3301      	adds	r3, #1
 80075da:	627b      	str	r3, [r7, #36]	; 0x24
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075e0:	429a      	cmp	r2, r3
 80075e2:	f4ff af76 	bcc.w	80074d2 <mg_aton6+0x54>
    }
  }
  if (n < 14 && dc == 42) return false;
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	2b0d      	cmp	r3, #13
 80075ea:	d804      	bhi.n	80075f6 <mg_aton6+0x178>
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	2b2a      	cmp	r3, #42	; 0x2a
 80075f0:	d101      	bne.n	80075f6 <mg_aton6+0x178>
 80075f2:	2300      	movs	r3, #0
 80075f4:	e020      	b.n	8007638 <mg_aton6+0x1ba>
  if (n < 14) {
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	2b0d      	cmp	r3, #13
 80075fa:	d819      	bhi.n	8007630 <mg_aton6+0x1b2>
    memmove(&addr->ip[dc + (14 - n)], &addr->ip[dc], n - dc + 2);
 80075fc:	69ba      	ldr	r2, [r7, #24]
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	330e      	adds	r3, #14
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	18d0      	adds	r0, r2, r3
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	18d1      	adds	r1, r2, r3
 800760e:	69fa      	ldr	r2, [r7, #28]
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	3302      	adds	r3, #2
 8007616:	461a      	mov	r2, r3
 8007618:	f00b ff1f 	bl	801345a <memmove>
    memset(&addr->ip[dc], 0, 14 - n);
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	18d0      	adds	r0, r2, r3
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	f1c3 030e 	rsb	r3, r3, #14
 8007628:	461a      	mov	r2, r3
 800762a:	2100      	movs	r1, #0
 800762c:	f00b ff2f 	bl	801348e <memset>
  }

  addr->is_ip6 = true;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	749a      	strb	r2, [r3, #18]
  return true;
 8007636:	2301      	movs	r3, #1
}
 8007638:	4618      	mov	r0, r3
 800763a:	3728      	adds	r7, #40	; 0x28
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <mg_aton>:

bool mg_aton(struct mg_str str, struct mg_addr *addr) {
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	f107 0308 	add.w	r3, r7, #8
 800764a:	e883 0003 	stmia.w	r3, {r0, r1}
 800764e:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s]", (int) str.len, str.ptr));
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	f107 0308 	add.w	r3, r7, #8
 8007656:	e893 0003 	ldmia.w	r3, {r0, r1}
 800765a:	f7ff fe17 	bl	800728c <mg_atone>
 800765e:	4603      	mov	r3, r0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d11d      	bne.n	80076a0 <mg_aton+0x60>
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	f107 0308 	add.w	r3, r7, #8
 800766a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800766e:	f7ff fde5 	bl	800723c <mg_atonl>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d113      	bne.n	80076a0 <mg_aton+0x60>
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	f107 0308 	add.w	r3, r7, #8
 800767e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007682:	f7ff fe1e 	bl	80072c2 <mg_aton4>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d109      	bne.n	80076a0 <mg_aton+0x60>
         mg_aton6(str, addr);
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	f107 0308 	add.w	r3, r7, #8
 8007692:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007696:	f7ff fef2 	bl	800747e <mg_aton6>
 800769a:	4603      	mov	r3, r0
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 800769c:	2b00      	cmp	r3, #0
 800769e:	d001      	beq.n	80076a4 <mg_aton+0x64>
 80076a0:	2301      	movs	r3, #1
 80076a2:	e000      	b.n	80076a6 <mg_aton+0x66>
 80076a4:	2300      	movs	r3, #0
 80076a6:	f003 0301 	and.w	r3, r3, #1
 80076aa:	b2db      	uxtb	r3, r3
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <mg_alloc_conn>:

struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  struct mg_connection *c =
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c0:	3390      	adds	r3, #144	; 0x90
 80076c2:	4619      	mov	r1, r3
 80076c4:	2001      	movs	r0, #1
 80076c6:	f00b fbd9 	bl	8012e7c <calloc>
 80076ca:	4603      	mov	r3, r0
 80076cc:	60fb      	str	r3, [r7, #12]
  if (c != NULL) {
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d013      	beq.n	80076fc <mg_alloc_conn+0x48>
    c->mgr = mgr;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	605a      	str	r2, [r3, #4]
    c->send.align = c->recv.align = MG_IO_SIZE;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076e0:	645a      	str	r2, [r3, #68]	; 0x44
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	655a      	str	r2, [r3, #84]	; 0x54
    c->id = ++mgr->nextid;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	69db      	ldr	r3, [r3, #28]
 80076ee:	1c5a      	adds	r2, r3, #1
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	61da      	str	r2, [r3, #28]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	69da      	ldr	r2, [r3, #28]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return c;
 80076fc:	68fb      	ldr	r3, [r7, #12]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
	...

08007708 <mg_close_conn>:

void mg_close_conn(struct mg_connection *c) {
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  mg_resolve_cancel(c);  // Close any pending DNS query
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f7f9 fea6 	bl	8001462 <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	60fb      	str	r3, [r7, #12]
 800771c:	e002      	b.n	8007724 <mg_close_conn+0x1c>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	60fb      	str	r3, [r7, #12]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	429a      	cmp	r2, r3
 800772c:	d1f7      	bne.n	800771e <mg_close_conn+0x16>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	601a      	str	r2, [r3, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	429a      	cmp	r2, r3
 8007740:	d103      	bne.n	800774a <mg_close_conn+0x42>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	609a      	str	r2, [r3, #8]
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	429a      	cmp	r2, r3
 8007754:	d103      	bne.n	800775e <mg_close_conn+0x56>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	611a      	str	r2, [r3, #16]
  // Order of operations is important. `MG_EV_CLOSE` event must be fired
  // before we deallocate received data, see #1331
  mg_call(c, MG_EV_CLOSE, NULL);
 800775e:	2200      	movs	r2, #0
 8007760:	2109      	movs	r1, #9
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f7fa fc12 	bl	8001f8c <mg_call>
  MG_DEBUG(("%lu %p closed", c->id, c->fd));
 8007768:	4b15      	ldr	r3, [pc, #84]	; (80077c0 <mg_close_conn+0xb8>)
 800776a:	f640 625e 	movw	r2, #3678	; 0xe5e
 800776e:	4915      	ldr	r1, [pc, #84]	; (80077c4 <mg_close_conn+0xbc>)
 8007770:	2003      	movs	r0, #3
 8007772:	f7ff fbeb 	bl	8006f4c <mg_log_prefix>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d007      	beq.n	800778c <mg_close_conn+0x84>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007784:	461a      	mov	r2, r3
 8007786:	4810      	ldr	r0, [pc, #64]	; (80077c8 <mg_close_conn+0xc0>)
 8007788:	f7ff fc3a 	bl	8007000 <mg_log>

  mg_tls_free(c);
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f001 fcc7 	bl	8009120 <mg_tls_free>
  mg_iobuf_free(&c->recv);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	3338      	adds	r3, #56	; 0x38
 8007796:	4618      	mov	r0, r3
 8007798:	f7fe fd0f 	bl	80061ba <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	3348      	adds	r3, #72	; 0x48
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7fe fd0a 	bl	80061ba <mg_iobuf_free>
  memset(c, 0, sizeof(*c));
 80077a6:	2290      	movs	r2, #144	; 0x90
 80077a8:	2100      	movs	r1, #0
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f00b fe6f 	bl	801348e <memset>
  free(c);
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f00b fb89 	bl	8012ec8 <free>
}
 80077b6:	bf00      	nop
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	080161fc 	.word	0x080161fc
 80077c4:	08014270 	.word	0x08014270
 80077c8:	08014f80 	.word	0x08014f80

080077cc <mg_connect>:

struct mg_connection *mg_connect(struct mg_mgr *mgr, const char *url,
                                 mg_event_handler_t fn, void *fn_data) {
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b086      	sub	sp, #24
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
 80077d8:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 80077da:	2300      	movs	r3, #0
 80077dc:	617b      	str	r3, [r7, #20]
  if (url == NULL || url[0] == '\0') {
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d003      	beq.n	80077ec <mg_connect+0x20>
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10d      	bne.n	8007808 <mg_connect+0x3c>
    MG_ERROR(("null url"));
 80077ec:	4b36      	ldr	r3, [pc, #216]	; (80078c8 <mg_connect+0xfc>)
 80077ee:	f640 626b 	movw	r2, #3691	; 0xe6b
 80077f2:	4936      	ldr	r1, [pc, #216]	; (80078cc <mg_connect+0x100>)
 80077f4:	2001      	movs	r0, #1
 80077f6:	f7ff fba9 	bl	8006f4c <mg_log_prefix>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d05d      	beq.n	80078bc <mg_connect+0xf0>
 8007800:	4833      	ldr	r0, [pc, #204]	; (80078d0 <mg_connect+0x104>)
 8007802:	f7ff fbfd 	bl	8007000 <mg_log>
 8007806:	e059      	b.n	80078bc <mg_connect+0xf0>
  } else if ((c = mg_alloc_conn(mgr)) == NULL) {
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	f7ff ff53 	bl	80076b4 <mg_alloc_conn>
 800780e:	6178      	str	r0, [r7, #20]
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d10d      	bne.n	8007832 <mg_connect+0x66>
    MG_ERROR(("OOM"));
 8007816:	4b2c      	ldr	r3, [pc, #176]	; (80078c8 <mg_connect+0xfc>)
 8007818:	f640 626d 	movw	r2, #3693	; 0xe6d
 800781c:	492b      	ldr	r1, [pc, #172]	; (80078cc <mg_connect+0x100>)
 800781e:	2001      	movs	r0, #1
 8007820:	f7ff fb94 	bl	8006f4c <mg_log_prefix>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d048      	beq.n	80078bc <mg_connect+0xf0>
 800782a:	482a      	ldr	r0, [pc, #168]	; (80078d4 <mg_connect+0x108>)
 800782c:	f7ff fbe8 	bl	8007000 <mg_log>
 8007830:	e044      	b.n	80078bc <mg_connect+0xf0>
  } else {
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	601a      	str	r2, [r3, #0]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	697a      	ldr	r2, [r7, #20]
 800783e:	601a      	str	r2, [r3, #0]
    c->is_udp = (strncmp(url, "udp:", 4) == 0);
 8007840:	2204      	movs	r2, #4
 8007842:	4925      	ldr	r1, [pc, #148]	; (80078d8 <mg_connect+0x10c>)
 8007844:	68b8      	ldr	r0, [r7, #8]
 8007846:	f00b fe54 	bl	80134f2 <strncmp>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	bf0c      	ite	eq
 8007850:	2301      	moveq	r3, #1
 8007852:	2300      	movne	r3, #0
 8007854:	b2d9      	uxtb	r1, r3
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800785c:	f361 0300 	bfi	r3, r1, #0, #1
 8007860:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
    c->fd = (void *) (size_t) MG_INVALID_SOCKET;
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	f04f 32ff 	mov.w	r2, #4294967295
 800786a:	631a      	str	r2, [r3, #48]	; 0x30
    c->fn = fn;
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	659a      	str	r2, [r3, #88]	; 0x58
    c->is_client = true;
 8007872:	697a      	ldr	r2, [r7, #20]
 8007874:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 8007878:	f043 0302 	orr.w	r3, r3, #2
 800787c:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
    c->fn_data = fn_data;
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	683a      	ldr	r2, [r7, #0]
 8007884:	65da      	str	r2, [r3, #92]	; 0x5c
    MG_DEBUG(("%lu %p %s", c->id, c->fd, url));
 8007886:	4b10      	ldr	r3, [pc, #64]	; (80078c8 <mg_connect+0xfc>)
 8007888:	f640 6275 	movw	r2, #3701	; 0xe75
 800788c:	490f      	ldr	r1, [pc, #60]	; (80078cc <mg_connect+0x100>)
 800788e:	2003      	movs	r0, #3
 8007890:	f7ff fb5c 	bl	8006f4c <mg_log_prefix>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d007      	beq.n	80078aa <mg_connect+0xde>
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	480d      	ldr	r0, [pc, #52]	; (80078dc <mg_connect+0x110>)
 80078a6:	f7ff fbab 	bl	8007000 <mg_log>
    mg_call(c, MG_EV_OPEN, NULL);
 80078aa:	2200      	movs	r2, #0
 80078ac:	2101      	movs	r1, #1
 80078ae:	6978      	ldr	r0, [r7, #20]
 80078b0:	f7fa fb6c 	bl	8001f8c <mg_call>
    mg_resolve(c, url);
 80078b4:	68b9      	ldr	r1, [r7, #8]
 80078b6:	6978      	ldr	r0, [r7, #20]
 80078b8:	f7fa fb24 	bl	8001f04 <mg_resolve>
  }
  return c;
 80078bc:	697b      	ldr	r3, [r7, #20]
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3718      	adds	r7, #24
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	0801620c 	.word	0x0801620c
 80078cc:	08014270 	.word	0x08014270
 80078d0:	08014f90 	.word	0x08014f90
 80078d4:	08014f9c 	.word	0x08014f9c
 80078d8:	08014fa0 	.word	0x08014fa0
 80078dc:	0801437c 	.word	0x0801437c

080078e0 <mg_listen>:

struct mg_connection *mg_listen(struct mg_mgr *mgr, const char *url,
                                mg_event_handler_t fn, void *fn_data) {
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b086      	sub	sp, #24
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	607a      	str	r2, [r7, #4]
 80078ec:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 80078ee:	2300      	movs	r3, #0
 80078f0:	617b      	str	r3, [r7, #20]
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 80078f2:	68f8      	ldr	r0, [r7, #12]
 80078f4:	f7ff fede 	bl	80076b4 <mg_alloc_conn>
 80078f8:	6178      	str	r0, [r7, #20]
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d10e      	bne.n	800791e <mg_listen+0x3e>
    MG_ERROR(("OOM %s", url));
 8007900:	4b39      	ldr	r3, [pc, #228]	; (80079e8 <mg_listen+0x108>)
 8007902:	f44f 6268 	mov.w	r2, #3712	; 0xe80
 8007906:	4939      	ldr	r1, [pc, #228]	; (80079ec <mg_listen+0x10c>)
 8007908:	2001      	movs	r0, #1
 800790a:	f7ff fb1f 	bl	8006f4c <mg_log_prefix>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d064      	beq.n	80079de <mg_listen+0xfe>
 8007914:	68b9      	ldr	r1, [r7, #8]
 8007916:	4836      	ldr	r0, [pc, #216]	; (80079f0 <mg_listen+0x110>)
 8007918:	f7ff fb72 	bl	8007000 <mg_log>
 800791c:	e05f      	b.n	80079de <mg_listen+0xfe>
  } else if (!mg_open_listener(c, url)) {
 800791e:	68b9      	ldr	r1, [r7, #8]
 8007920:	6978      	ldr	r0, [r7, #20]
 8007922:	f004 fe93 	bl	800c64c <mg_open_listener>
 8007926:	4603      	mov	r3, r0
 8007928:	f083 0301 	eor.w	r3, r3, #1
 800792c:	b2db      	uxtb	r3, r3
 800792e:	2b00      	cmp	r3, #0
 8007930:	d018      	beq.n	8007964 <mg_listen+0x84>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 8007932:	4b2d      	ldr	r3, [pc, #180]	; (80079e8 <mg_listen+0x108>)
 8007934:	f640 6282 	movw	r2, #3714	; 0xe82
 8007938:	492c      	ldr	r1, [pc, #176]	; (80079ec <mg_listen+0x10c>)
 800793a:	2001      	movs	r0, #1
 800793c:	f7ff fb06 	bl	8006f4c <mg_log_prefix>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d008      	beq.n	8007958 <mg_listen+0x78>
 8007946:	f00b fe55 	bl	80135f4 <__errno>
 800794a:	4603      	mov	r3, r0
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	461a      	mov	r2, r3
 8007950:	68b9      	ldr	r1, [r7, #8]
 8007952:	4828      	ldr	r0, [pc, #160]	; (80079f4 <mg_listen+0x114>)
 8007954:	f7ff fb54 	bl	8007000 <mg_log>
    free(c);
 8007958:	6978      	ldr	r0, [r7, #20]
 800795a:	f00b fab5 	bl	8012ec8 <free>
    c = NULL;
 800795e:	2300      	movs	r3, #0
 8007960:	617b      	str	r3, [r7, #20]
 8007962:	e03c      	b.n	80079de <mg_listen+0xfe>
  } else {
    c->is_listening = 1;
 8007964:	697a      	ldr	r2, [r7, #20]
 8007966:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 800796a:	f043 0301 	orr.w	r3, r3, #1
 800796e:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 8007972:	2204      	movs	r2, #4
 8007974:	4920      	ldr	r1, [pc, #128]	; (80079f8 <mg_listen+0x118>)
 8007976:	68b8      	ldr	r0, [r7, #8]
 8007978:	f00b fdbb 	bl	80134f2 <strncmp>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	bf0c      	ite	eq
 8007982:	2301      	moveq	r3, #1
 8007984:	2300      	movne	r3, #0
 8007986:	b2d9      	uxtb	r1, r3
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800798e:	f361 0300 	bfi	r3, r1, #0, #1
 8007992:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	601a      	str	r2, [r3, #0]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	697a      	ldr	r2, [r7, #20]
 80079a2:	601a      	str	r2, [r3, #0]
    c->fn = fn;
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	659a      	str	r2, [r3, #88]	; 0x58
    c->fn_data = fn_data;
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	683a      	ldr	r2, [r7, #0]
 80079ae:	65da      	str	r2, [r3, #92]	; 0x5c
    mg_call(c, MG_EV_OPEN, NULL);
 80079b0:	2200      	movs	r2, #0
 80079b2:	2101      	movs	r1, #1
 80079b4:	6978      	ldr	r0, [r7, #20]
 80079b6:	f7fa fae9 	bl	8001f8c <mg_call>
    MG_DEBUG(("%lu %p %s", c->id, c->fd, url));
 80079ba:	4b0b      	ldr	r3, [pc, #44]	; (80079e8 <mg_listen+0x108>)
 80079bc:	f640 628c 	movw	r2, #3724	; 0xe8c
 80079c0:	490a      	ldr	r1, [pc, #40]	; (80079ec <mg_listen+0x10c>)
 80079c2:	2003      	movs	r0, #3
 80079c4:	f7ff fac2 	bl	8006f4c <mg_log_prefix>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d007      	beq.n	80079de <mg_listen+0xfe>
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	4808      	ldr	r0, [pc, #32]	; (80079fc <mg_listen+0x11c>)
 80079da:	f7ff fb11 	bl	8007000 <mg_log>
  }
  return c;
 80079de:	697b      	ldr	r3, [r7, #20]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3718      	adds	r7, #24
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	08016218 	.word	0x08016218
 80079ec:	08014270 	.word	0x08014270
 80079f0:	08014fa8 	.word	0x08014fa8
 80079f4:	08014fb0 	.word	0x08014fb0
 80079f8:	08014fa0 	.word	0x08014fa0
 80079fc:	0801437c 	.word	0x0801437c

08007a00 <mg_timer_add>:
  }
  return c;
}

struct mg_timer *mg_timer_add(struct mg_mgr *mgr, uint64_t milliseconds,
                              unsigned flags, void (*fn)(void *), void *arg) {
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b08a      	sub	sp, #40	; 0x28
 8007a04:	af04      	add	r7, sp, #16
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 8007a0c:	2128      	movs	r1, #40	; 0x28
 8007a0e:	2001      	movs	r0, #1
 8007a10:	f00b fa34 	bl	8012e7c <calloc>
 8007a14:	4603      	mov	r3, r0
 8007a16:	617b      	str	r3, [r7, #20]
  if (t != NULL) {
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d014      	beq.n	8007a48 <mg_timer_add+0x48>
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8007a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a26:	9302      	str	r3, [sp, #8]
 8007a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2a:	9301      	str	r3, [sp, #4]
 8007a2c:	6a3b      	ldr	r3, [r7, #32]
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a34:	6979      	ldr	r1, [r7, #20]
 8007a36:	f001 fa62 	bl	8008efe <mg_timer_init>
    t->id = mgr->timerid++;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6a1b      	ldr	r3, [r3, #32]
 8007a3e:	1c59      	adds	r1, r3, #1
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	6211      	str	r1, [r2, #32]
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	6013      	str	r3, [r2, #0]
  }
  return t;
 8007a48:	697b      	ldr	r3, [r7, #20]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3718      	adds	r7, #24
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
	...

08007a54 <mg_mgr_init>:
#if MG_ENABLE_EPOLL
  if (mgr->epoll_fd >= 0) close(mgr->epoll_fd), mgr->epoll_fd = -1;
#endif
}

void mg_mgr_init(struct mg_mgr *mgr) {
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  memset(mgr, 0, sizeof(*mgr));
 8007a5c:	2244      	movs	r2, #68	; 0x44
 8007a5e:	2100      	movs	r1, #0
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f00b fd14 	bl	801348e <memset>
#if MG_ENABLE_EPOLL
  if ((mgr->epoll_fd = epoll_create1(0)) < 0) MG_ERROR(("epoll: %d", errno));
#else
  mgr->epoll_fd = -1;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f04f 32ff 	mov.w	r2, #4294967295
 8007a6c:	639a      	str	r2, [r3, #56]	; 0x38
#elif defined(__unix) || defined(__unix__) || defined(__APPLE__)
  // Ignore SIGPIPE signal, so if client cancels the request, it
  // won't kill the whole process.
  signal(SIGPIPE, SIG_IGN);
#endif
  mgr->dnstimeout = 3000;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8007a74:	615a      	str	r2, [r3, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a04      	ldr	r2, [pc, #16]	; (8007a8c <mg_mgr_init+0x38>)
 8007a7a:	605a      	str	r2, [r3, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a04      	ldr	r2, [pc, #16]	; (8007a90 <mg_mgr_init+0x3c>)
 8007a80:	60da      	str	r2, [r3, #12]
}
 8007a82:	bf00      	nop
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	08014fe0 	.word	0x08014fe0
 8007a90:	08014ff4 	.word	0x08014ff4

08007a94 <mg_pfn_iobuf_private>:
  len = mg_queue_vprintf(q, fmt, &ap);
  va_end(ap);
  return len;
}

static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	6039      	str	r1, [r7, #0]
 8007a9e:	71fb      	strb	r3, [r7, #7]
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	71bb      	strb	r3, [r7, #6]
  struct mg_iobuf *io = (struct mg_iobuf *) param;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	60fb      	str	r3, [r7, #12]
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 8007aa8:	79bb      	ldrb	r3, [r7, #6]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00d      	beq.n	8007aca <mg_pfn_iobuf_private+0x36>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	1c9a      	adds	r2, r3, #2
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d906      	bls.n	8007aca <mg_pfn_iobuf_private+0x36>
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	3302      	adds	r3, #2
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f7fe fa51 	bl	8005f6c <mg_iobuf_resize>
  if (io->len + 2 <= io->size) {
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	1c9a      	adds	r2, r3, #2
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d811      	bhi.n	8007afc <mg_pfn_iobuf_private+0x68>
    io->buf[io->len++] = (uint8_t) ch;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	1c58      	adds	r0, r3, #1
 8007ae2:	68f9      	ldr	r1, [r7, #12]
 8007ae4:	6088      	str	r0, [r1, #8]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	79fa      	ldrb	r2, [r7, #7]
 8007aea:	701a      	strb	r2, [r3, #0]
    io->buf[io->len] = 0;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	4413      	add	r3, r2
 8007af6:	2200      	movs	r2, #0
 8007af8:	701a      	strb	r2, [r3, #0]
  } else if (io->len < io->size) {
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
  }
}
 8007afa:	e00f      	b.n	8007b1c <mg_pfn_iobuf_private+0x88>
  } else if (io->len < io->size) {
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	689a      	ldr	r2, [r3, #8]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d209      	bcs.n	8007b1c <mg_pfn_iobuf_private+0x88>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	1c58      	adds	r0, r3, #1
 8007b12:	68f9      	ldr	r1, [r7, #12]
 8007b14:	6088      	str	r0, [r1, #8]
 8007b16:	4413      	add	r3, r2
 8007b18:	2200      	movs	r2, #0
 8007b1a:	701a      	strb	r2, [r3, #0]
}
 8007b1c:	bf00      	nop
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <mg_putchar_iobuf_static>:

static void mg_putchar_iobuf_static(char ch, void *param) {
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	6039      	str	r1, [r7, #0]
 8007b2e:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, false);
 8007b30:	79fb      	ldrb	r3, [r7, #7]
 8007b32:	2200      	movs	r2, #0
 8007b34:	6839      	ldr	r1, [r7, #0]
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7ff ffac 	bl	8007a94 <mg_pfn_iobuf_private>
}
 8007b3c:	bf00      	nop
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <mg_pfn_iobuf>:

void mg_pfn_iobuf(char ch, void *param) {
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	6039      	str	r1, [r7, #0]
 8007b4e:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, true);
 8007b50:	79fb      	ldrb	r3, [r7, #7]
 8007b52:	2201      	movs	r2, #1
 8007b54:	6839      	ldr	r1, [r7, #0]
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7ff ff9c 	bl	8007a94 <mg_pfn_iobuf_private>
}
 8007b5c:	bf00      	nop
 8007b5e:	3708      	adds	r7, #8
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <mg_vsnprintf>:

size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b08a      	sub	sp, #40	; 0x28
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
 8007b70:	603b      	str	r3, [r7, #0]
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	617b      	str	r3, [r7, #20]
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	61bb      	str	r3, [r7, #24]
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	61fb      	str	r3, [r7, #28]
 8007b7e:	2300      	movs	r3, #0
 8007b80:	623b      	str	r3, [r7, #32]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 8007b82:	f107 0114 	add.w	r1, r7, #20
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	4809      	ldr	r0, [pc, #36]	; (8007bb0 <mg_vsnprintf+0x4c>)
 8007b8c:	f7fa fecc 	bl	8002928 <mg_vxprintf>
 8007b90:	6278      	str	r0, [r7, #36]	; 0x24
  if (n < len) buf[n] = '\0';
 8007b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d204      	bcs.n	8007ba4 <mg_vsnprintf+0x40>
 8007b9a:	68fa      	ldr	r2, [r7, #12]
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9e:	4413      	add	r3, r2
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	701a      	strb	r2, [r3, #0]
  return n;
 8007ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3728      	adds	r7, #40	; 0x28
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	08007b25 	.word	0x08007b25

08007bb4 <mg_snprintf>:

size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 8007bb4:	b40c      	push	{r2, r3}
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b084      	sub	sp, #16
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
 8007bbe:	6039      	str	r1, [r7, #0]
  va_list ap;
  size_t n;
  va_start(ap, fmt);
 8007bc0:	f107 031c 	add.w	r3, r7, #28
 8007bc4:	60bb      	str	r3, [r7, #8]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 8007bc6:	f107 0308 	add.w	r3, r7, #8
 8007bca:	69ba      	ldr	r2, [r7, #24]
 8007bcc:	6839      	ldr	r1, [r7, #0]
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f7ff ffc8 	bl	8007b64 <mg_vsnprintf>
 8007bd4:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return n;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3710      	adds	r7, #16
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007be2:	b002      	add	sp, #8
 8007be4:	4770      	bx	lr

08007be6 <mg_pfn_stdout>:
  s = mg_vmprintf(fmt, &ap);
  va_end(ap);
  return s;
}

void mg_pfn_stdout(char c, void *param) {
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b082      	sub	sp, #8
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	4603      	mov	r3, r0
 8007bee:	6039      	str	r1, [r7, #0]
 8007bf0:	71fb      	strb	r3, [r7, #7]
  putchar(c);
 8007bf2:	79fb      	ldrb	r3, [r7, #7]
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f00b fbd5 	bl	80133a4 <putchar>
  (void) param;
}
 8007bfa:	bf00      	nop
 8007bfc:	3708      	adds	r7, #8
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
	...

08007c04 <print_ip4>:

static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b088      	sub	sp, #32
 8007c08:	af04      	add	r7, sp, #16
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	607a      	str	r2, [r7, #4]
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	4618      	mov	r0, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	3302      	adds	r3, #2
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	4619      	mov	r1, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	3303      	adds	r3, #3
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	9302      	str	r3, [sp, #8]
 8007c2e:	9101      	str	r1, [sp, #4]
 8007c30:	9200      	str	r2, [sp, #0]
 8007c32:	4603      	mov	r3, r0
 8007c34:	4a04      	ldr	r2, [pc, #16]	; (8007c48 <print_ip4+0x44>)
 8007c36:	68b9      	ldr	r1, [r7, #8]
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	f7fa fe5a 	bl	80028f2 <mg_xprintf>
 8007c3e:	4603      	mov	r3, r0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3710      	adds	r7, #16
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	08015014 	.word	0x08015014

08007c4c <print_ip6>:

static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 8007c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c50:	b08e      	sub	sp, #56	; 0x38
 8007c52:	af08      	add	r7, sp, #32
 8007c54:	6178      	str	r0, [r7, #20]
 8007c56:	6139      	str	r1, [r7, #16]
 8007c58:	60fa      	str	r2, [r7, #12]
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	881b      	ldrh	r3, [r3, #0]
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f001 fbcb 	bl	80093fa <mg_ntohs>
 8007c64:	4603      	mov	r3, r0
 8007c66:	4698      	mov	r8, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	3302      	adds	r3, #2
 8007c6c:	881b      	ldrh	r3, [r3, #0]
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f001 fbc3 	bl	80093fa <mg_ntohs>
 8007c74:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8007c76:	461c      	mov	r4, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	3304      	adds	r3, #4
 8007c7c:	881b      	ldrh	r3, [r3, #0]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f001 fbbb 	bl	80093fa <mg_ntohs>
 8007c84:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8007c86:	461d      	mov	r5, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	3306      	adds	r3, #6
 8007c8c:	881b      	ldrh	r3, [r3, #0]
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f001 fbb3 	bl	80093fa <mg_ntohs>
 8007c94:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8007c96:	461e      	mov	r6, r3
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	3308      	adds	r3, #8
 8007c9c:	881b      	ldrh	r3, [r3, #0]
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f001 fbab 	bl	80093fa <mg_ntohs>
 8007ca4:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8007ca6:	60bb      	str	r3, [r7, #8]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	330a      	adds	r3, #10
 8007cac:	881b      	ldrh	r3, [r3, #0]
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f001 fba3 	bl	80093fa <mg_ntohs>
 8007cb4:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8007cb6:	607b      	str	r3, [r7, #4]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	330c      	adds	r3, #12
 8007cbc:	881b      	ldrh	r3, [r3, #0]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f001 fb9b 	bl	80093fa <mg_ntohs>
 8007cc4:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8007cc6:	603b      	str	r3, [r7, #0]
                    mg_ntohs(p[7]));
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	330e      	adds	r3, #14
 8007ccc:	881b      	ldrh	r3, [r3, #0]
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f001 fb93 	bl	80093fa <mg_ntohs>
 8007cd4:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8007cd6:	9306      	str	r3, [sp, #24]
 8007cd8:	683a      	ldr	r2, [r7, #0]
 8007cda:	9205      	str	r2, [sp, #20]
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	9204      	str	r2, [sp, #16]
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	9303      	str	r3, [sp, #12]
 8007ce4:	9602      	str	r6, [sp, #8]
 8007ce6:	9501      	str	r5, [sp, #4]
 8007ce8:	9400      	str	r4, [sp, #0]
 8007cea:	4643      	mov	r3, r8
 8007cec:	4a05      	ldr	r2, [pc, #20]	; (8007d04 <print_ip6+0xb8>)
 8007cee:	6939      	ldr	r1, [r7, #16]
 8007cf0:	6978      	ldr	r0, [r7, #20]
 8007cf2:	f7fa fdfe 	bl	80028f2 <mg_xprintf>
 8007cf6:	4603      	mov	r3, r0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3718      	adds	r7, #24
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d02:	bf00      	nop
 8007d04:	08015020 	.word	0x08015020

08007d08 <mg_print_ip4>:

size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	1d19      	adds	r1, r3, #4
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	6011      	str	r1, [r2, #0]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	617b      	str	r3, [r7, #20]
  return print_ip4(out, arg, p);
 8007d22:	697a      	ldr	r2, [r7, #20]
 8007d24:	68b9      	ldr	r1, [r7, #8]
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	f7ff ff6c 	bl	8007c04 <print_ip4>
 8007d2c:	4603      	mov	r3, r0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3718      	adds	r7, #24
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <mg_print_ip>:
size_t mg_print_ip6(void (*out)(char, void *), void *arg, va_list *ap) {
  uint16_t *p = va_arg(*ap, uint16_t *);
  return print_ip6(out, arg, p);
}

size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b086      	sub	sp, #24
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	60f8      	str	r0, [r7, #12]
 8007d3e:	60b9      	str	r1, [r7, #8]
 8007d40:	607a      	str	r2, [r7, #4]
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	1d19      	adds	r1, r3, #4
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	6011      	str	r1, [r2, #0]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	617b      	str	r3, [r7, #20]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	7c9b      	ldrb	r3, [r3, #18]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d007      	beq.n	8007d68 <mg_print_ip+0x32>
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	68b9      	ldr	r1, [r7, #8]
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	f7ff ff74 	bl	8007c4c <print_ip6>
 8007d64:	4603      	mov	r3, r0
 8007d66:	e006      	b.n	8007d76 <mg_print_ip+0x40>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	68b9      	ldr	r1, [r7, #8]
 8007d6e:	68f8      	ldr	r0, [r7, #12]
 8007d70:	f7ff ff48 	bl	8007c04 <print_ip4>
 8007d74:	4603      	mov	r3, r0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3718      	adds	r7, #24
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
	...

08007d80 <mg_print_ip_port>:

size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b088      	sub	sp, #32
 8007d84:	af02      	add	r7, sp, #8
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	607a      	str	r2, [r7, #4]
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	1d19      	adds	r1, r3, #4
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	6011      	str	r1, [r2, #0]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	8a1b      	ldrh	r3, [r3, #16]
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f001 fb2b 	bl	80093fa <mg_ntohs>
 8007da4:	4603      	mov	r3, r0
 8007da6:	9301      	str	r3, [sp, #4]
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	9300      	str	r3, [sp, #0]
 8007dac:	4b05      	ldr	r3, [pc, #20]	; (8007dc4 <mg_print_ip_port+0x44>)
 8007dae:	4a06      	ldr	r2, [pc, #24]	; (8007dc8 <mg_print_ip_port+0x48>)
 8007db0:	68b9      	ldr	r1, [r7, #8]
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	f7fa fd9d 	bl	80028f2 <mg_xprintf>
 8007db8:	4603      	mov	r3, r0
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3718      	adds	r7, #24
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	08007d37 	.word	0x08007d37
 8007dc8:	0801503c 	.word	0x0801503c

08007dcc <mg_print_mac>:

size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 8007dcc:	b5b0      	push	{r4, r5, r7, lr}
 8007dce:	b08c      	sub	sp, #48	; 0x30
 8007dd0:	af06      	add	r7, sp, #24
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	1d19      	adds	r1, r3, #4
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	6011      	str	r1, [r2, #0]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	461d      	mov	r5, r3
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	3301      	adds	r3, #1
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	461a      	mov	r2, r3
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	3302      	adds	r3, #2
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	4619      	mov	r1, r3
                    p[3], p[4], p[5]);
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	3303      	adds	r3, #3
 8007e00:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8007e02:	4618      	mov	r0, r3
                    p[3], p[4], p[5]);
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	3304      	adds	r3, #4
 8007e08:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8007e0a:	461c      	mov	r4, r3
                    p[3], p[4], p[5]);
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	3305      	adds	r3, #5
 8007e10:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8007e12:	9304      	str	r3, [sp, #16]
 8007e14:	9403      	str	r4, [sp, #12]
 8007e16:	9002      	str	r0, [sp, #8]
 8007e18:	9101      	str	r1, [sp, #4]
 8007e1a:	9200      	str	r2, [sp, #0]
 8007e1c:	462b      	mov	r3, r5
 8007e1e:	4a05      	ldr	r2, [pc, #20]	; (8007e34 <mg_print_mac+0x68>)
 8007e20:	68b9      	ldr	r1, [r7, #8]
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	f7fa fd65 	bl	80028f2 <mg_xprintf>
 8007e28:	4603      	mov	r3, r0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3718      	adds	r7, #24
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bdb0      	pop	{r4, r5, r7, pc}
 8007e32:	bf00      	nop
 8007e34:	08015044 	.word	0x08015044

08007e38 <mg_esc>:

static char mg_esc(int c, bool esc) {
 8007e38:	b480      	push	{r7}
 8007e3a:	b087      	sub	sp, #28
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	460b      	mov	r3, r1
 8007e42:	70fb      	strb	r3, [r7, #3]
  const char *p, *esc1 = "\b\f\n\r\t\\\"", *esc2 = "bfnrt\\\"";
 8007e44:	4b19      	ldr	r3, [pc, #100]	; (8007eac <mg_esc+0x74>)
 8007e46:	613b      	str	r3, [r7, #16]
 8007e48:	4b19      	ldr	r3, [pc, #100]	; (8007eb0 <mg_esc+0x78>)
 8007e4a:	60fb      	str	r3, [r7, #12]
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 8007e4c:	78fb      	ldrb	r3, [r7, #3]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d001      	beq.n	8007e56 <mg_esc+0x1e>
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	e000      	b.n	8007e58 <mg_esc+0x20>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	617b      	str	r3, [r7, #20]
 8007e5a:	e01b      	b.n	8007e94 <mg_esc+0x5c>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	461a      	mov	r2, r3
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d112      	bne.n	8007e8e <mg_esc+0x56>
 8007e68:	78fb      	ldrb	r3, [r7, #3]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d007      	beq.n	8007e7e <mg_esc+0x46>
 8007e6e:	697a      	ldr	r2, [r7, #20]
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	1ad3      	subs	r3, r2, r3
 8007e74:	461a      	mov	r2, r3
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	4413      	add	r3, r2
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	e00f      	b.n	8007e9e <mg_esc+0x66>
 8007e7e:	697a      	ldr	r2, [r7, #20]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	1ad3      	subs	r3, r2, r3
 8007e84:	461a      	mov	r2, r3
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	4413      	add	r3, r2
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	e007      	b.n	8007e9e <mg_esc+0x66>
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	3301      	adds	r3, #1
 8007e92:	617b      	str	r3, [r7, #20]
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1df      	bne.n	8007e5c <mg_esc+0x24>
  }
  return 0;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	371c      	adds	r7, #28
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	08014e90 	.word	0x08014e90
 8007eb0:	08014e98 	.word	0x08014e98

08007eb4 <mg_escape>:

static char mg_escape(int c) {
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  return mg_esc(c, true);
 8007ebc:	2101      	movs	r1, #1
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f7ff ffba 	bl	8007e38 <mg_esc>
 8007ec4:	4603      	mov	r3, r0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3708      	adds	r7, #8
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <qcpy>:

static size_t qcpy(void (*out)(char, void *), void *ptr, char *buf,
                   size_t len) {
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b088      	sub	sp, #32
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	60f8      	str	r0, [r7, #12]
 8007ed6:	60b9      	str	r1, [r7, #8]
 8007ed8:	607a      	str	r2, [r7, #4]
 8007eda:	603b      	str	r3, [r7, #0]
  size_t i = 0, extra = 0;
 8007edc:	2300      	movs	r3, #0
 8007ede:	61fb      	str	r3, [r7, #28]
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	61fb      	str	r3, [r7, #28]
 8007ee8:	e023      	b.n	8007f32 <qcpy+0x64>
    char c = mg_escape(buf[i]);
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	4413      	add	r3, r2
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7ff ffde 	bl	8007eb4 <mg_escape>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	75fb      	strb	r3, [r7, #23]
    if (c) {
 8007efc:	7dfb      	ldrb	r3, [r7, #23]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00c      	beq.n	8007f1c <qcpy+0x4e>
      out('\\', ptr), out(c, ptr), extra++;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	68b9      	ldr	r1, [r7, #8]
 8007f06:	205c      	movs	r0, #92	; 0x5c
 8007f08:	4798      	blx	r3
 8007f0a:	7dfa      	ldrb	r2, [r7, #23]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	68b9      	ldr	r1, [r7, #8]
 8007f10:	4610      	mov	r0, r2
 8007f12:	4798      	blx	r3
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	3301      	adds	r3, #1
 8007f18:	61bb      	str	r3, [r7, #24]
 8007f1a:	e007      	b.n	8007f2c <qcpy+0x5e>
    } else {
      out(buf[i], ptr);
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	4413      	add	r3, r2
 8007f22:	781a      	ldrb	r2, [r3, #0]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	68b9      	ldr	r1, [r7, #8]
 8007f28:	4610      	mov	r0, r2
 8007f2a:	4798      	blx	r3
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	61fb      	str	r3, [r7, #28]
 8007f32:	69fa      	ldr	r2, [r7, #28]
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d205      	bcs.n	8007f46 <qcpy+0x78>
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	4413      	add	r3, r2
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d1d1      	bne.n	8007eea <qcpy+0x1c>
    }
  }
  return i + extra;
 8007f46:	69fa      	ldr	r2, [r7, #28]
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	4413      	add	r3, r2
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3720      	adds	r7, #32
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <mg_print_esc>:
  size_t len = (size_t) va_arg(*ap, int);
  uint8_t *buf = va_arg(*ap, uint8_t *);
  return bcpy(out, arg, buf, len);
}

size_t mg_print_esc(void (*out)(char, void *), void *arg, va_list *ap) {
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b086      	sub	sp, #24
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	607a      	str	r2, [r7, #4]
  size_t len = (size_t) va_arg(*ap, int);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	1d19      	adds	r1, r3, #4
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	6011      	str	r1, [r2, #0]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	617b      	str	r3, [r7, #20]
  char *p = va_arg(*ap, char *);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	1d19      	adds	r1, r3, #4
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	6011      	str	r1, [r2, #0]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	613b      	str	r3, [r7, #16]
  if (len == 0) len = p == NULL ? 0 : strlen(p);
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d109      	bne.n	8007f96 <mg_print_esc+0x42>
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d004      	beq.n	8007f92 <mg_print_esc+0x3e>
 8007f88:	6938      	ldr	r0, [r7, #16]
 8007f8a:	f7f8 fa21 	bl	80003d0 <strlen>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	e000      	b.n	8007f94 <mg_print_esc+0x40>
 8007f92:	2300      	movs	r3, #0
 8007f94:	617b      	str	r3, [r7, #20]
  return qcpy(out, arg, p, len);
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	693a      	ldr	r2, [r7, #16]
 8007f9a:	68b9      	ldr	r1, [r7, #8]
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f7ff ff96 	bl	8007ece <qcpy>
 8007fa2:	4603      	mov	r3, r0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3718      	adds	r7, #24
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <mg_queue_read_len>:
  q->size = size;
  q->buf = buf;
  q->head = q->tail = 0;
}

static size_t mg_queue_read_len(struct mg_queue *q) {
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  uint32_t n = 0;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	60fb      	str	r3, [r7, #12]
  MG_MEMORY_BARRIER();
 8007fb8:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	60fb      	str	r3, [r7, #12]
  assert(q->tail + n + sizeof(n) <= q->size);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	689a      	ldr	r2, [r3, #8]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	1d1a      	adds	r2, r3, #4
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d906      	bls.n	8007fea <mg_queue_read_len+0x3e>
 8007fdc:	4b05      	ldr	r3, [pc, #20]	; (8007ff4 <mg_queue_read_len+0x48>)
 8007fde:	4a06      	ldr	r2, [pc, #24]	; (8007ff8 <mg_queue_read_len+0x4c>)
 8007fe0:	f640 71b1 	movw	r1, #4017	; 0xfb1
 8007fe4:	4805      	ldr	r0, [pc, #20]	; (8007ffc <mg_queue_read_len+0x50>)
 8007fe6:	f00a ff27 	bl	8012e38 <__assert_func>
  return n;
 8007fea:	68fb      	ldr	r3, [r7, #12]
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3710      	adds	r7, #16
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	080150a8 	.word	0x080150a8
 8007ff8:	08016224 	.word	0x08016224
 8007ffc:	08014270 	.word	0x08014270

08008000 <mg_queue_write_len>:

static void mg_queue_write_len(struct mg_queue *q, size_t len) {
 8008000:	b480      	push	{r7}
 8008002:	b085      	sub	sp, #20
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
  uint32_t n = (uint32_t) len;
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	60fb      	str	r3, [r7, #12]
  memcpy(q->buf + q->head, &n, sizeof(n));
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	4413      	add	r3, r2
 8008018:	68fa      	ldr	r2, [r7, #12]
 800801a:	601a      	str	r2, [r3, #0]
  MG_MEMORY_BARRIER();
 800801c:	f3bf 8f5b 	dmb	ish
}
 8008020:	bf00      	nop
 8008022:	3714      	adds	r7, #20
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <mg_queue_book>:

size_t mg_queue_book(struct mg_queue *q, char **buf, size_t len) {
 800802c:	b580      	push	{r7, lr}
 800802e:	b086      	sub	sp, #24
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	607a      	str	r2, [r7, #4]
  size_t space = 0, hs = sizeof(uint32_t) * 2;  // *2 is for the 0 marker
 8008038:	2300      	movs	r3, #0
 800803a:	617b      	str	r3, [r7, #20]
 800803c:	2308      	movs	r3, #8
 800803e:	613b      	str	r3, [r7, #16]
  if (q->head >= q->tail && q->head + len + hs <= q->size) {
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	68da      	ldr	r2, [r3, #12]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	429a      	cmp	r2, r3
 800804a:	d312      	bcc.n	8008072 <mg_queue_book+0x46>
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	68da      	ldr	r2, [r3, #12]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	441a      	add	r2, r3
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	441a      	add	r2, r3
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	429a      	cmp	r2, r3
 800805e:	d808      	bhi.n	8008072 <mg_queue_book+0x46>
    space = q->size - q->head - hs;  // There is enough space
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	685a      	ldr	r2, [r3, #4]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	1ad2      	subs	r2, r2, r3
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	617b      	str	r3, [r7, #20]
 8008070:	e011      	b.n	8008096 <mg_queue_book+0x6a>
  } else if (q->head >= q->tail && q->tail > hs) {
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	68da      	ldr	r2, [r3, #12]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	429a      	cmp	r2, r3
 800807c:	d30b      	bcc.n	8008096 <mg_queue_book+0x6a>
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	693a      	ldr	r2, [r7, #16]
 8008084:	429a      	cmp	r2, r3
 8008086:	d206      	bcs.n	8008096 <mg_queue_book+0x6a>
    mg_queue_write_len(q, 0);  // Not enough space ahead
 8008088:	2100      	movs	r1, #0
 800808a:	68f8      	ldr	r0, [r7, #12]
 800808c:	f7ff ffb8 	bl	8008000 <mg_queue_write_len>
    q->head = 0;               // Wrap head to the beginning
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2200      	movs	r2, #0
 8008094:	60da      	str	r2, [r3, #12]
  }
  if (q->head + hs + len < q->tail) space = q->tail - q->head - hs;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	68da      	ldr	r2, [r3, #12]
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	441a      	add	r2, r3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	441a      	add	r2, r3
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d207      	bcs.n	80080ba <mg_queue_book+0x8e>
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	689a      	ldr	r2, [r3, #8]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	1ad2      	subs	r2, r2, r3
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	1ad3      	subs	r3, r2, r3
 80080b8:	617b      	str	r3, [r7, #20]
  if (buf != NULL) *buf = q->buf + q->head + sizeof(uint32_t);
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d007      	beq.n	80080d0 <mg_queue_book+0xa4>
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	3304      	adds	r3, #4
 80080ca:	441a      	add	r2, r3
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	601a      	str	r2, [r3, #0]
  return space;
 80080d0:	697b      	ldr	r3, [r7, #20]
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3718      	adds	r7, #24
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
	...

080080dc <mg_queue_next>:

size_t mg_queue_next(struct mg_queue *q, char **buf) {
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 80080e6:	2300      	movs	r3, #0
 80080e8:	60fb      	str	r3, [r7, #12]
  if (q->tail != q->head) {
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	689a      	ldr	r2, [r3, #8]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d013      	beq.n	800811e <mg_queue_next+0x42>
    len = mg_queue_read_len(q);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f7ff ff58 	bl	8007fac <mg_queue_read_len>
 80080fc:	60f8      	str	r0, [r7, #12]
    if (len == 0) {  // Zero (head wrapped) ?
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10c      	bne.n	800811e <mg_queue_next+0x42>
      q->tail = 0;   // Reset tail to the start
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	609a      	str	r2, [r3, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	68da      	ldr	r2, [r3, #12]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	429a      	cmp	r2, r3
 8008114:	d903      	bls.n	800811e <mg_queue_next+0x42>
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f7ff ff48 	bl	8007fac <mg_queue_read_len>
 800811c:	60f8      	str	r0, [r7, #12]
    }
  }
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d007      	beq.n	8008134 <mg_queue_next+0x58>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	3304      	adds	r3, #4
 800812e:	441a      	add	r2, r3
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	601a      	str	r2, [r3, #0]
  assert(q->tail + len <= q->size);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	689a      	ldr	r2, [r3, #8]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	441a      	add	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	429a      	cmp	r2, r3
 8008142:	d906      	bls.n	8008152 <mg_queue_next+0x76>
 8008144:	4b05      	ldr	r3, [pc, #20]	; (800815c <mg_queue_next+0x80>)
 8008146:	4a06      	ldr	r2, [pc, #24]	; (8008160 <mg_queue_next+0x84>)
 8008148:	f640 71d2 	movw	r1, #4050	; 0xfd2
 800814c:	4805      	ldr	r0, [pc, #20]	; (8008164 <mg_queue_next+0x88>)
 800814e:	f00a fe73 	bl	8012e38 <__assert_func>
  return len;
 8008152:	68fb      	ldr	r3, [r7, #12]
}
 8008154:	4618      	mov	r0, r3
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}
 800815c:	080150cc 	.word	0x080150cc
 8008160:	08016238 	.word	0x08016238
 8008164:	08014270 	.word	0x08014270

08008168 <mg_queue_add>:

void mg_queue_add(struct mg_queue *q, size_t len) {
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  assert(len > 0);
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d106      	bne.n	8008186 <mg_queue_add+0x1e>
 8008178:	4b13      	ldr	r3, [pc, #76]	; (80081c8 <mg_queue_add+0x60>)
 800817a:	4a14      	ldr	r2, [pc, #80]	; (80081cc <mg_queue_add+0x64>)
 800817c:	f640 71d7 	movw	r1, #4055	; 0xfd7
 8008180:	4813      	ldr	r0, [pc, #76]	; (80081d0 <mg_queue_add+0x68>)
 8008182:	f00a fe59 	bl	8012e38 <__assert_func>
  mg_queue_write_len(q, len);
 8008186:	6839      	ldr	r1, [r7, #0]
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f7ff ff39 	bl	8008000 <mg_queue_write_len>
  assert(q->head + sizeof(uint32_t) * 2 + len <= q->size);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	68da      	ldr	r2, [r3, #12]
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	4413      	add	r3, r2
 8008196:	f103 0208 	add.w	r2, r3, #8
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d906      	bls.n	80081b0 <mg_queue_add+0x48>
 80081a2:	4b0c      	ldr	r3, [pc, #48]	; (80081d4 <mg_queue_add+0x6c>)
 80081a4:	4a09      	ldr	r2, [pc, #36]	; (80081cc <mg_queue_add+0x64>)
 80081a6:	f640 71d9 	movw	r1, #4057	; 0xfd9
 80081aa:	4809      	ldr	r0, [pc, #36]	; (80081d0 <mg_queue_add+0x68>)
 80081ac:	f00a fe44 	bl	8012e38 <__assert_func>
  q->head += len + sizeof(uint32_t);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	68da      	ldr	r2, [r3, #12]
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	4413      	add	r3, r2
 80081b8:	1d1a      	adds	r2, r3, #4
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	60da      	str	r2, [r3, #12]
}
 80081be:	bf00      	nop
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	080150e8 	.word	0x080150e8
 80081cc:	08016248 	.word	0x08016248
 80081d0:	08014270 	.word	0x08014270
 80081d4:	080150f0 	.word	0x080150f0

080081d8 <mg_queue_del>:

void mg_queue_del(struct mg_queue *q, size_t len) {
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
  q->tail += len + sizeof(uint32_t);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	689a      	ldr	r2, [r3, #8]
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	4413      	add	r3, r2
 80081ea:	1d1a      	adds	r2, r3, #4
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	609a      	str	r2, [r3, #8]
  assert(q->tail + sizeof(uint32_t) <= q->size);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	1d1a      	adds	r2, r3, #4
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d906      	bls.n	800820c <mg_queue_del+0x34>
 80081fe:	4b05      	ldr	r3, [pc, #20]	; (8008214 <mg_queue_del+0x3c>)
 8008200:	4a05      	ldr	r2, [pc, #20]	; (8008218 <mg_queue_del+0x40>)
 8008202:	f640 71df 	movw	r1, #4063	; 0xfdf
 8008206:	4805      	ldr	r0, [pc, #20]	; (800821c <mg_queue_del+0x44>)
 8008208:	f00a fe16 	bl	8012e38 <__assert_func>
}
 800820c:	bf00      	nop
 800820e:	3708      	adds	r7, #8
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	08015120 	.word	0x08015120
 8008218:	08016258 	.word	0x08016258
 800821c:	08014270 	.word	0x08014270

08008220 <gettimestamp>:


#define SNTP_TIME_OFFSET 2208988800U  // (1970 - 1900) in seconds
#define SNTP_MAX_FRAC 4294967295.0    // 2 ** 32 - 1

static int64_t gettimestamp(const uint32_t *data) {
 8008220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008224:	b086      	sub	sp, #24
 8008226:	af00      	add	r7, sp, #0
 8008228:	60f8      	str	r0, [r7, #12]
  uint32_t sec = mg_ntohl(data[0]), frac = mg_ntohl(data[1]);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4618      	mov	r0, r3
 8008230:	f001 f8ca 	bl	80093c8 <mg_ntohl>
 8008234:	6178      	str	r0, [r7, #20]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	3304      	adds	r3, #4
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4618      	mov	r0, r3
 800823e:	f001 f8c3 	bl	80093c8 <mg_ntohl>
 8008242:	6138      	str	r0, [r7, #16]
  if (sec) sec -= SNTP_TIME_OFFSET;
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d003      	beq.n	8008252 <gettimestamp+0x32>
 800824a:	697a      	ldr	r2, [r7, #20]
 800824c:	4b2e      	ldr	r3, [pc, #184]	; (8008308 <gettimestamp+0xe8>)
 800824e:	4413      	add	r3, r2
 8008250:	617b      	str	r3, [r7, #20]
  return ((int64_t) sec) * 1000 + (int64_t) (frac / SNTP_MAX_FRAC * 1000.0);
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	2200      	movs	r2, #0
 8008256:	4698      	mov	r8, r3
 8008258:	4691      	mov	r9, r2
 800825a:	4642      	mov	r2, r8
 800825c:	464b      	mov	r3, r9
 800825e:	f04f 0000 	mov.w	r0, #0
 8008262:	f04f 0100 	mov.w	r1, #0
 8008266:	0159      	lsls	r1, r3, #5
 8008268:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800826c:	0150      	lsls	r0, r2, #5
 800826e:	4602      	mov	r2, r0
 8008270:	460b      	mov	r3, r1
 8008272:	ebb2 0408 	subs.w	r4, r2, r8
 8008276:	eb63 0509 	sbc.w	r5, r3, r9
 800827a:	f04f 0200 	mov.w	r2, #0
 800827e:	f04f 0300 	mov.w	r3, #0
 8008282:	00ab      	lsls	r3, r5, #2
 8008284:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8008288:	00a2      	lsls	r2, r4, #2
 800828a:	4614      	mov	r4, r2
 800828c:	461d      	mov	r5, r3
 800828e:	eb14 0a08 	adds.w	sl, r4, r8
 8008292:	eb45 0b09 	adc.w	fp, r5, r9
 8008296:	f04f 0200 	mov.w	r2, #0
 800829a:	f04f 0300 	mov.w	r3, #0
 800829e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80082a2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80082a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80082aa:	4692      	mov	sl, r2
 80082ac:	469b      	mov	fp, r3
 80082ae:	4654      	mov	r4, sl
 80082b0:	465d      	mov	r5, fp
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	ee07 3a90 	vmov	s15, r3
 80082b8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80082bc:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 80082f8 <gettimestamp+0xd8>
 80082c0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80082c4:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8008300 <gettimestamp+0xe0>
 80082c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80082cc:	ec51 0b17 	vmov	r0, r1, d7
 80082d0:	f7f8 faaa 	bl	8000828 <__aeabi_d2lz>
 80082d4:	4602      	mov	r2, r0
 80082d6:	460b      	mov	r3, r1
 80082d8:	18a1      	adds	r1, r4, r2
 80082da:	6039      	str	r1, [r7, #0]
 80082dc:	eb45 0303 	adc.w	r3, r5, r3
 80082e0:	607b      	str	r3, [r7, #4]
 80082e2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80082e6:	4610      	mov	r0, r2
 80082e8:	4619      	mov	r1, r3
 80082ea:	3718      	adds	r7, #24
 80082ec:	46bd      	mov	sp, r7
 80082ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082f2:	bf00      	nop
 80082f4:	f3af 8000 	nop.w
 80082f8:	ffe00000 	.word	0xffe00000
 80082fc:	41efffff 	.word	0x41efffff
 8008300:	00000000 	.word	0x00000000
 8008304:	408f4000 	.word	0x408f4000
 8008308:	7c558180 	.word	0x7c558180

0800830c <mg_sntp_parse>:

int64_t mg_sntp_parse(const unsigned char *buf, size_t len) {
 800830c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008310:	b09c      	sub	sp, #112	; 0x70
 8008312:	af08      	add	r7, sp, #32
 8008314:	6178      	str	r0, [r7, #20]
 8008316:	6139      	str	r1, [r7, #16]
  int64_t res = -1;
 8008318:	f04f 32ff 	mov.w	r2, #4294967295
 800831c:	f04f 33ff 	mov.w	r3, #4294967295
 8008320:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  int mode = len > 0 ? buf[0] & 7 : 0;
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d004      	beq.n	8008334 <mg_sntp_parse+0x28>
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	f003 0307 	and.w	r3, r3, #7
 8008332:	e000      	b.n	8008336 <mg_sntp_parse+0x2a>
 8008334:	2300      	movs	r3, #0
 8008336:	647b      	str	r3, [r7, #68]	; 0x44
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d006      	beq.n	800834c <mg_sntp_parse+0x40>
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	08db      	lsrs	r3, r3, #3
 8008344:	b2db      	uxtb	r3, r3
 8008346:	f003 0307 	and.w	r3, r3, #7
 800834a:	e000      	b.n	800834e <mg_sntp_parse+0x42>
 800834c:	2300      	movs	r3, #0
 800834e:	643b      	str	r3, [r7, #64]	; 0x40
  if (len < 48) {
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	2b2f      	cmp	r3, #47	; 0x2f
 8008354:	d80f      	bhi.n	8008376 <mg_sntp_parse+0x6a>
    MG_ERROR(("%s", "corrupt packet"));
 8008356:	4b63      	ldr	r3, [pc, #396]	; (80084e4 <mg_sntp_parse+0x1d8>)
 8008358:	f241 1236 	movw	r2, #4406	; 0x1136
 800835c:	4962      	ldr	r1, [pc, #392]	; (80084e8 <mg_sntp_parse+0x1dc>)
 800835e:	2001      	movs	r0, #1
 8008360:	f7fe fdf4 	bl	8006f4c <mg_log_prefix>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	f000 80b3 	beq.w	80084d2 <mg_sntp_parse+0x1c6>
 800836c:	495f      	ldr	r1, [pc, #380]	; (80084ec <mg_sntp_parse+0x1e0>)
 800836e:	4860      	ldr	r0, [pc, #384]	; (80084f0 <mg_sntp_parse+0x1e4>)
 8008370:	f7fe fe46 	bl	8007000 <mg_log>
 8008374:	e0ad      	b.n	80084d2 <mg_sntp_parse+0x1c6>
  } else if (mode != 4 && mode != 5) {
 8008376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008378:	2b04      	cmp	r3, #4
 800837a:	d012      	beq.n	80083a2 <mg_sntp_parse+0x96>
 800837c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800837e:	2b05      	cmp	r3, #5
 8008380:	d00f      	beq.n	80083a2 <mg_sntp_parse+0x96>
    MG_ERROR(("%s", "not a server reply"));
 8008382:	4b58      	ldr	r3, [pc, #352]	; (80084e4 <mg_sntp_parse+0x1d8>)
 8008384:	f241 1238 	movw	r2, #4408	; 0x1138
 8008388:	4957      	ldr	r1, [pc, #348]	; (80084e8 <mg_sntp_parse+0x1dc>)
 800838a:	2001      	movs	r0, #1
 800838c:	f7fe fdde 	bl	8006f4c <mg_log_prefix>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	f000 809d 	beq.w	80084d2 <mg_sntp_parse+0x1c6>
 8008398:	4956      	ldr	r1, [pc, #344]	; (80084f4 <mg_sntp_parse+0x1e8>)
 800839a:	4855      	ldr	r0, [pc, #340]	; (80084f0 <mg_sntp_parse+0x1e4>)
 800839c:	f7fe fe30 	bl	8007000 <mg_log>
 80083a0:	e097      	b.n	80084d2 <mg_sntp_parse+0x1c6>
  } else if (buf[1] == 0) {
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	3301      	adds	r3, #1
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d10f      	bne.n	80083cc <mg_sntp_parse+0xc0>
    MG_ERROR(("%s", "server sent a kiss of death"));
 80083ac:	4b4d      	ldr	r3, [pc, #308]	; (80084e4 <mg_sntp_parse+0x1d8>)
 80083ae:	f241 123a 	movw	r2, #4410	; 0x113a
 80083b2:	494d      	ldr	r1, [pc, #308]	; (80084e8 <mg_sntp_parse+0x1dc>)
 80083b4:	2001      	movs	r0, #1
 80083b6:	f7fe fdc9 	bl	8006f4c <mg_log_prefix>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	f000 8088 	beq.w	80084d2 <mg_sntp_parse+0x1c6>
 80083c2:	494d      	ldr	r1, [pc, #308]	; (80084f8 <mg_sntp_parse+0x1ec>)
 80083c4:	484a      	ldr	r0, [pc, #296]	; (80084f0 <mg_sntp_parse+0x1e4>)
 80083c6:	f7fe fe1b 	bl	8007000 <mg_log>
 80083ca:	e082      	b.n	80084d2 <mg_sntp_parse+0x1c6>
  } else if (version == 4 || version == 3) {
 80083cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083ce:	2b04      	cmp	r3, #4
 80083d0:	d002      	beq.n	80083d8 <mg_sntp_parse+0xcc>
 80083d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083d4:	2b03      	cmp	r3, #3
 80083d6:	d16e      	bne.n	80084b6 <mg_sntp_parse+0x1aa>
    // int64_t ref = gettimestamp((uint32_t *) &buf[16]);
    int64_t t0 = gettimestamp((uint32_t *) &buf[24]);
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	3318      	adds	r3, #24
 80083dc:	4618      	mov	r0, r3
 80083de:	f7ff ff1f 	bl	8008220 <gettimestamp>
 80083e2:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
    int64_t t1 = gettimestamp((uint32_t *) &buf[32]);
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	3320      	adds	r3, #32
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7ff ff18 	bl	8008220 <gettimestamp>
 80083f0:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    int64_t t2 = gettimestamp((uint32_t *) &buf[40]);
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	3328      	adds	r3, #40	; 0x28
 80083f8:	4618      	mov	r0, r3
 80083fa:	f7ff ff11 	bl	8008220 <gettimestamp>
 80083fe:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
    int64_t t3 = (int64_t) mg_millis();
 8008402:	f7f8 fbcd 	bl	8000ba0 <mg_millis>
 8008406:	4602      	mov	r2, r0
 8008408:	460b      	mov	r3, r1
 800840a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    int64_t delta = (t3 - t0) - (t2 - t1);
 800840e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008412:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008416:	ebb0 0802 	subs.w	r8, r0, r2
 800841a:	eb61 0903 	sbc.w	r9, r1, r3
 800841e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008422:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008426:	1a84      	subs	r4, r0, r2
 8008428:	eb61 0503 	sbc.w	r5, r1, r3
 800842c:	ebb8 0304 	subs.w	r3, r8, r4
 8008430:	60bb      	str	r3, [r7, #8]
 8008432:	eb69 0305 	sbc.w	r3, r9, r5
 8008436:	60fb      	str	r3, [r7, #12]
 8008438:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800843c:	e9c7 3406 	strd	r3, r4, [r7, #24]
    MG_VERBOSE(("%lld %lld %lld %lld delta:%lld", t0, t1, t2, t3, delta));
 8008440:	4b28      	ldr	r3, [pc, #160]	; (80084e4 <mg_sntp_parse+0x1d8>)
 8008442:	f241 1242 	movw	r2, #4418	; 0x1142
 8008446:	4928      	ldr	r1, [pc, #160]	; (80084e8 <mg_sntp_parse+0x1dc>)
 8008448:	2004      	movs	r0, #4
 800844a:	f7fe fd7f 	bl	8006f4c <mg_log_prefix>
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d014      	beq.n	800847e <mg_sntp_parse+0x172>
 8008454:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008458:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800845c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008460:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008464:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008468:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800846c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008470:	e9cd 2300 	strd	r2, r3, [sp]
 8008474:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008478:	4820      	ldr	r0, [pc, #128]	; (80084fc <mg_sntp_parse+0x1f0>)
 800847a:	f7fe fdc1 	bl	8007000 <mg_log>
    res = t2 + delta / 2;
 800847e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008482:	2b00      	cmp	r3, #0
 8008484:	da06      	bge.n	8008494 <mg_sntp_parse+0x188>
 8008486:	1c51      	adds	r1, r2, #1
 8008488:	6039      	str	r1, [r7, #0]
 800848a:	f143 0300 	adc.w	r3, r3, #0
 800848e:	607b      	str	r3, [r7, #4]
 8008490:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008494:	f04f 0000 	mov.w	r0, #0
 8008498:	f04f 0100 	mov.w	r1, #0
 800849c:	0850      	lsrs	r0, r2, #1
 800849e:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 80084a2:	1059      	asrs	r1, r3, #1
 80084a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80084a8:	eb12 0a00 	adds.w	sl, r2, r0
 80084ac:	eb43 0b01 	adc.w	fp, r3, r1
 80084b0:	e9c7 ab12 	strd	sl, fp, [r7, #72]	; 0x48
  } else if (version == 4 || version == 3) {
 80084b4:	e00d      	b.n	80084d2 <mg_sntp_parse+0x1c6>
  } else {
    MG_ERROR(("unexpected version: %d", version));
 80084b6:	4b0b      	ldr	r3, [pc, #44]	; (80084e4 <mg_sntp_parse+0x1d8>)
 80084b8:	f241 1245 	movw	r2, #4421	; 0x1145
 80084bc:	490a      	ldr	r1, [pc, #40]	; (80084e8 <mg_sntp_parse+0x1dc>)
 80084be:	2001      	movs	r0, #1
 80084c0:	f7fe fd44 	bl	8006f4c <mg_log_prefix>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d003      	beq.n	80084d2 <mg_sntp_parse+0x1c6>
 80084ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80084cc:	480c      	ldr	r0, [pc, #48]	; (8008500 <mg_sntp_parse+0x1f4>)
 80084ce:	f7fe fd97 	bl	8007000 <mg_log>
  }
  return res;
 80084d2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
}
 80084d6:	4610      	mov	r0, r2
 80084d8:	4619      	mov	r1, r3
 80084da:	3750      	adds	r7, #80	; 0x50
 80084dc:	46bd      	mov	sp, r7
 80084de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084e2:	bf00      	nop
 80084e4:	08016268 	.word	0x08016268
 80084e8:	08014270 	.word	0x08014270
 80084ec:	080151f8 	.word	0x080151f8
 80084f0:	0801438c 	.word	0x0801438c
 80084f4:	08015208 	.word	0x08015208
 80084f8:	0801521c 	.word	0x0801521c
 80084fc:	08015238 	.word	0x08015238
 8008500:	08015258 	.word	0x08015258

08008504 <sntp_cb>:

static void sntp_cb(struct mg_connection *c, int ev, void *evd, void *fnd) {
 8008504:	b590      	push	{r4, r7, lr}
 8008506:	b087      	sub	sp, #28
 8008508:	af00      	add	r7, sp, #0
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	60b9      	str	r1, [r7, #8]
 800850e:	607a      	str	r2, [r7, #4]
 8008510:	603b      	str	r3, [r7, #0]
  if (ev == MG_EV_READ) {
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	2b07      	cmp	r3, #7
 8008516:	d156      	bne.n	80085c6 <sntp_cb+0xc2>
    int64_t milliseconds = mg_sntp_parse(c->recv.buf, c->recv.len);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008520:	4619      	mov	r1, r3
 8008522:	4610      	mov	r0, r2
 8008524:	f7ff fef2 	bl	800830c <mg_sntp_parse>
 8008528:	4602      	mov	r2, r0
 800852a:	460b      	mov	r3, r1
 800852c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if (milliseconds > 0) {
 8008530:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008534:	2a01      	cmp	r2, #1
 8008536:	f173 0300 	sbcs.w	r3, r3, #0
 800853a:	db3a      	blt.n	80085b2 <sntp_cb+0xae>
      MG_INFO(("%lu got time: %lld ms from epoch", c->id, milliseconds));
 800853c:	4b27      	ldr	r3, [pc, #156]	; (80085dc <sntp_cb+0xd8>)
 800853e:	f241 124e 	movw	r2, #4430	; 0x114e
 8008542:	4927      	ldr	r1, [pc, #156]	; (80085e0 <sntp_cb+0xdc>)
 8008544:	2002      	movs	r0, #2
 8008546:	f7fe fd01 	bl	8006f4c <mg_log_prefix>
 800854a:	4603      	mov	r3, r0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d006      	beq.n	800855e <sntp_cb+0x5a>
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008554:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008558:	4822      	ldr	r0, [pc, #136]	; (80085e4 <sntp_cb+0xe0>)
 800855a:	f7fe fd51 	bl	8007000 <mg_log>
      mg_call(c, MG_EV_SNTP_TIME, (uint64_t *) &milliseconds);
 800855e:	f107 0310 	add.w	r3, r7, #16
 8008562:	461a      	mov	r2, r3
 8008564:	2112      	movs	r1, #18
 8008566:	68f8      	ldr	r0, [r7, #12]
 8008568:	f7f9 fd10 	bl	8001f8c <mg_call>
      MG_VERBOSE(("%u.%u", (unsigned) (milliseconds / 1000),
 800856c:	4b1b      	ldr	r3, [pc, #108]	; (80085dc <sntp_cb+0xd8>)
 800856e:	f241 1250 	movw	r2, #4432	; 0x1150
 8008572:	491b      	ldr	r1, [pc, #108]	; (80085e0 <sntp_cb+0xdc>)
 8008574:	2004      	movs	r0, #4
 8008576:	f7fe fce9 	bl	8006f4c <mg_log_prefix>
 800857a:	4603      	mov	r3, r0
 800857c:	2b00      	cmp	r3, #0
 800857e:	d018      	beq.n	80085b2 <sntp_cb+0xae>
 8008580:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008584:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008588:	f04f 0300 	mov.w	r3, #0
 800858c:	f7f8 f8e4 	bl	8000758 <__aeabi_ldivmod>
 8008590:	4602      	mov	r2, r0
 8008592:	460b      	mov	r3, r1
 8008594:	4614      	mov	r4, r2
 8008596:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800859a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800859e:	f04f 0300 	mov.w	r3, #0
 80085a2:	f7f8 f8d9 	bl	8000758 <__aeabi_ldivmod>
 80085a6:	4613      	mov	r3, r2
 80085a8:	461a      	mov	r2, r3
 80085aa:	4621      	mov	r1, r4
 80085ac:	480e      	ldr	r0, [pc, #56]	; (80085e8 <sntp_cb+0xe4>)
 80085ae:	f7fe fd27 	bl	8007000 <mg_log>
                  (unsigned) (milliseconds % 1000)));
    }
    mg_iobuf_del(&c->recv, 0, c->recv.len);  // Free receive buffer
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085bc:	461a      	mov	r2, r3
 80085be:	2100      	movs	r1, #0
 80085c0:	f7fd fdb0 	bl	8006124 <mg_iobuf_del>
    mg_sntp_request(c);
  } else if (ev == MG_EV_CLOSE) {
  }
  (void) fnd;
  (void) evd;
}
 80085c4:	e005      	b.n	80085d2 <sntp_cb+0xce>
  } else if (ev == MG_EV_CONNECT) {
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	2b04      	cmp	r3, #4
 80085ca:	d102      	bne.n	80085d2 <sntp_cb+0xce>
    mg_sntp_request(c);
 80085cc:	68f8      	ldr	r0, [r7, #12]
 80085ce:	f000 f80f 	bl	80085f0 <mg_sntp_request>
}
 80085d2:	bf00      	nop
 80085d4:	371c      	adds	r7, #28
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd90      	pop	{r4, r7, pc}
 80085da:	bf00      	nop
 80085dc:	08016278 	.word	0x08016278
 80085e0:	08014270 	.word	0x08014270
 80085e4:	08015270 	.word	0x08015270
 80085e8:	08015294 	.word	0x08015294
 80085ec:	00000000 	.word	0x00000000

080085f0 <mg_sntp_request>:

void mg_sntp_request(struct mg_connection *c) {
 80085f0:	b590      	push	{r4, r7, lr}
 80085f2:	b095      	sub	sp, #84	; 0x54
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  if (c->is_resolving) {
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80085fe:	f003 0308 	and.w	r3, r3, #8
 8008602:	b2db      	uxtb	r3, r3
 8008604:	2b00      	cmp	r3, #0
 8008606:	d010      	beq.n	800862a <mg_sntp_request+0x3a>
    MG_ERROR(("%lu wait until resolved", c->id));
 8008608:	4b37      	ldr	r3, [pc, #220]	; (80086e8 <mg_sntp_request+0xf8>)
 800860a:	f241 125e 	movw	r2, #4446	; 0x115e
 800860e:	4937      	ldr	r1, [pc, #220]	; (80086ec <mg_sntp_request+0xfc>)
 8008610:	2001      	movs	r0, #1
 8008612:	f7fe fc9b 	bl	8006f4c <mg_log_prefix>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d058      	beq.n	80086ce <mg_sntp_request+0xde>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008620:	4619      	mov	r1, r3
 8008622:	4833      	ldr	r0, [pc, #204]	; (80086f0 <mg_sntp_request+0x100>)
 8008624:	f7fe fcec 	bl	8007000 <mg_log>
    buf[0] = (0 << 6) | (4 << 3) | 3;
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
    t[1] = mg_htonl((uint32_t) frac);
    mg_send(c, buf, sizeof(buf));
  }
}
 8008628:	e051      	b.n	80086ce <mg_sntp_request+0xde>
    int64_t now = (int64_t) mg_millis();  // Use int64_t, for vc98
 800862a:	f7f8 fab9 	bl	8000ba0 <mg_millis>
 800862e:	4602      	mov	r2, r0
 8008630:	460b      	mov	r3, r1
 8008632:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    uint8_t buf[48] = {0};
 8008636:	2300      	movs	r3, #0
 8008638:	60bb      	str	r3, [r7, #8]
 800863a:	f107 030c 	add.w	r3, r7, #12
 800863e:	222c      	movs	r2, #44	; 0x2c
 8008640:	2100      	movs	r1, #0
 8008642:	4618      	mov	r0, r3
 8008644:	f00a ff23 	bl	801348e <memset>
    uint32_t *t = (uint32_t *) &buf[40];
 8008648:	f107 0308 	add.w	r3, r7, #8
 800864c:	3328      	adds	r3, #40	; 0x28
 800864e:	647b      	str	r3, [r7, #68]	; 0x44
    double frac = ((double) (now % 1000)) / 1000.0 * SNTP_MAX_FRAC;
 8008650:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008654:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008658:	f04f 0300 	mov.w	r3, #0
 800865c:	f7f8 f87c 	bl	8000758 <__aeabi_ldivmod>
 8008660:	4610      	mov	r0, r2
 8008662:	4619      	mov	r1, r3
 8008664:	f7f8 f84a 	bl	80006fc <__aeabi_l2d>
 8008668:	ec41 0b15 	vmov	d5, r0, r1
 800866c:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 80086d8 <mg_sntp_request+0xe8>
 8008670:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8008674:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 80086e0 <mg_sntp_request+0xf0>
 8008678:	ee27 7b06 	vmul.f64	d7, d7, d6
 800867c:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    buf[0] = (0 << 6) | (4 << 3) | 3;
 8008680:	2323      	movs	r3, #35	; 0x23
 8008682:	723b      	strb	r3, [r7, #8]
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
 8008684:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008688:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800868c:	f04f 0300 	mov.w	r3, #0
 8008690:	f7f8 f862 	bl	8000758 <__aeabi_ldivmod>
 8008694:	4602      	mov	r2, r0
 8008696:	460b      	mov	r3, r1
 8008698:	4b16      	ldr	r3, [pc, #88]	; (80086f4 <mg_sntp_request+0x104>)
 800869a:	4413      	add	r3, r2
 800869c:	4618      	mov	r0, r3
 800869e:	f000 fe93 	bl	80093c8 <mg_ntohl>
 80086a2:	4602      	mov	r2, r0
 80086a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086a6:	601a      	str	r2, [r3, #0]
    t[1] = mg_htonl((uint32_t) frac);
 80086a8:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80086ac:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80086b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086b2:	1d1c      	adds	r4, r3, #4
 80086b4:	ee17 0a90 	vmov	r0, s15
 80086b8:	f000 fe86 	bl	80093c8 <mg_ntohl>
 80086bc:	4603      	mov	r3, r0
 80086be:	6023      	str	r3, [r4, #0]
    mg_send(c, buf, sizeof(buf));
 80086c0:	f107 0308 	add.w	r3, r7, #8
 80086c4:	2230      	movs	r2, #48	; 0x30
 80086c6:	4619      	mov	r1, r3
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f004 f945 	bl	800c958 <mg_send>
}
 80086ce:	bf00      	nop
 80086d0:	3754      	adds	r7, #84	; 0x54
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd90      	pop	{r4, r7, pc}
 80086d6:	bf00      	nop
 80086d8:	00000000 	.word	0x00000000
 80086dc:	408f4000 	.word	0x408f4000
 80086e0:	ffe00000 	.word	0xffe00000
 80086e4:	41efffff 	.word	0x41efffff
 80086e8:	08016280 	.word	0x08016280
 80086ec:	08014270 	.word	0x08014270
 80086f0:	0801529c 	.word	0x0801529c
 80086f4:	83aa7e80 	.word	0x83aa7e80

080086f8 <mg_sntp_connect>:

struct mg_connection *mg_sntp_connect(struct mg_mgr *mgr, const char *url,
                                      mg_event_handler_t fn, void *fnd) {
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b086      	sub	sp, #24
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
 8008704:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 8008706:	2300      	movs	r3, #0
 8008708:	617b      	str	r3, [r7, #20]
  if (url == NULL) url = "udp://time.google.com:123";
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d101      	bne.n	8008714 <mg_sntp_connect+0x1c>
 8008710:	4b09      	ldr	r3, [pc, #36]	; (8008738 <mg_sntp_connect+0x40>)
 8008712:	60bb      	str	r3, [r7, #8]
  if ((c = mg_connect(mgr, url, fn, fnd)) != NULL) c->pfn = sntp_cb;
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	68b9      	ldr	r1, [r7, #8]
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	f7ff f856 	bl	80077cc <mg_connect>
 8008720:	6178      	str	r0, [r7, #20]
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d002      	beq.n	800872e <mg_sntp_connect+0x36>
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	4a04      	ldr	r2, [pc, #16]	; (800873c <mg_sntp_connect+0x44>)
 800872c:	661a      	str	r2, [r3, #96]	; 0x60
  return c;
 800872e:	697b      	ldr	r3, [r7, #20]
}
 8008730:	4618      	mov	r0, r3
 8008732:	3718      	adds	r7, #24
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}
 8008738:	080152b4 	.word	0x080152b4
 800873c:	08008505 	.word	0x08008505

08008740 <mg_http_serve_ssi>:
  mg_http_reply(c, 200, headers, "%s", data == NULL ? "" : data);
  free(data);
}
#else
void mg_http_serve_ssi(struct mg_connection *c, const char *root,
                       const char *fullpath) {
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	60b9      	str	r1, [r7, #8]
 800874a:	607a      	str	r2, [r7, #4]
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 800874c:	4b05      	ldr	r3, [pc, #20]	; (8008764 <mg_http_serve_ssi+0x24>)
 800874e:	2200      	movs	r2, #0
 8008750:	f240 11f5 	movw	r1, #501	; 0x1f5
 8008754:	68f8      	ldr	r0, [r7, #12]
 8008756:	f7fb ffed 	bl	8004734 <mg_http_reply>
  (void) root, (void) fullpath;
}
 800875a:	bf00      	nop
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	080152d0 	.word	0x080152d0

08008768 <mg_str_s>:
#ifdef MG_ENABLE_LINES
#line 1 "src/str.c"
#endif


struct mg_str mg_str_s(const char *s) {
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
  struct mg_str str = {s, s == NULL ? 0 : strlen(s)};
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	60bb      	str	r3, [r7, #8]
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d004      	beq.n	8008786 <mg_str_s+0x1e>
 800877c:	6838      	ldr	r0, [r7, #0]
 800877e:	f7f7 fe27 	bl	80003d0 <strlen>
 8008782:	4603      	mov	r3, r0
 8008784:	e000      	b.n	8008788 <mg_str_s+0x20>
 8008786:	2300      	movs	r3, #0
 8008788:	60fb      	str	r3, [r7, #12]
  return str;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	461a      	mov	r2, r3
 800878e:	f107 0308 	add.w	r3, r7, #8
 8008792:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008796:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <mg_str_n>:

struct mg_str mg_str_n(const char *s, size_t n) {
 80087a2:	b480      	push	{r7}
 80087a4:	b087      	sub	sp, #28
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	60f8      	str	r0, [r7, #12]
 80087aa:	60b9      	str	r1, [r7, #8]
 80087ac:	607a      	str	r2, [r7, #4]
  struct mg_str str = {s, n};
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	613b      	str	r3, [r7, #16]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	617b      	str	r3, [r7, #20]
  return str;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	461a      	mov	r2, r3
 80087ba:	f107 0310 	add.w	r3, r7, #16
 80087be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80087c2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80087c6:	68f8      	ldr	r0, [r7, #12]
 80087c8:	371c      	adds	r7, #28
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr

080087d2 <mg_lower>:

int mg_lower(const char *s) {
 80087d2:	b480      	push	{r7}
 80087d4:	b085      	sub	sp, #20
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
  int c = *s;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	60fb      	str	r3, [r7, #12]
  if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2b40      	cmp	r3, #64	; 0x40
 80087e4:	dd05      	ble.n	80087f2 <mg_lower+0x20>
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2b5a      	cmp	r3, #90	; 0x5a
 80087ea:	dc02      	bgt.n	80087f2 <mg_lower+0x20>
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	3320      	adds	r3, #32
 80087f0:	60fb      	str	r3, [r7, #12]
  return c;
 80087f2:	68fb      	ldr	r3, [r7, #12]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3714      	adds	r7, #20
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <mg_ncasecmp>:

int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 8008800:	b590      	push	{r4, r7, lr}
 8008802:	b087      	sub	sp, #28
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]
  int diff = 0;
 800880c:	2300      	movs	r3, #0
 800880e:	617b      	str	r3, [r7, #20]
  if (len > 0) do {
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d01d      	beq.n	8008852 <mg_ncasecmp+0x52>
      diff = mg_lower(s1++) - mg_lower(s2++);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	1c5a      	adds	r2, r3, #1
 800881a:	60fa      	str	r2, [r7, #12]
 800881c:	4618      	mov	r0, r3
 800881e:	f7ff ffd8 	bl	80087d2 <mg_lower>
 8008822:	4604      	mov	r4, r0
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	1c5a      	adds	r2, r3, #1
 8008828:	60ba      	str	r2, [r7, #8]
 800882a:	4618      	mov	r0, r3
 800882c:	f7ff ffd1 	bl	80087d2 <mg_lower>
 8008830:	4603      	mov	r3, r0
 8008832:	1ae3      	subs	r3, r4, r3
 8008834:	617b      	str	r3, [r7, #20]
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d10a      	bne.n	8008852 <mg_ncasecmp+0x52>
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	3b01      	subs	r3, #1
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d005      	beq.n	8008852 <mg_ncasecmp+0x52>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	3b01      	subs	r3, #1
 800884a:	607b      	str	r3, [r7, #4]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d1e1      	bne.n	8008816 <mg_ncasecmp+0x16>
  return diff;
 8008852:	697b      	ldr	r3, [r7, #20]
}
 8008854:	4618      	mov	r0, r3
 8008856:	371c      	adds	r7, #28
 8008858:	46bd      	mov	sp, r7
 800885a:	bd90      	pop	{r4, r7, pc}

0800885c <mg_vcmp>:

int mg_casecmp(const char *s1, const char *s2) {
  return mg_ncasecmp(s1, s2, (size_t) ~0);
}

int mg_vcmp(const struct mg_str *s1, const char *s2) {
 800885c:	b580      	push	{r7, lr}
 800885e:	b086      	sub	sp, #24
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
  size_t n2 = strlen(s2), n1 = s1->len;
 8008866:	6838      	ldr	r0, [r7, #0]
 8008868:	f7f7 fdb2 	bl	80003d0 <strlen>
 800886c:	6178      	str	r0, [r7, #20]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	613b      	str	r3, [r7, #16]
  int r = strncmp(s1->ptr, s2, (n1 < n2) ? n1 : n2);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6818      	ldr	r0, [r3, #0]
 8008878:	697a      	ldr	r2, [r7, #20]
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	4293      	cmp	r3, r2
 800887e:	bf28      	it	cs
 8008880:	4613      	movcs	r3, r2
 8008882:	461a      	mov	r2, r3
 8008884:	6839      	ldr	r1, [r7, #0]
 8008886:	f00a fe34 	bl	80134f2 <strncmp>
 800888a:	60f8      	str	r0, [r7, #12]
  if (r == 0) return (int) (n1 - n2);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d103      	bne.n	800889a <mg_vcmp+0x3e>
 8008892:	693a      	ldr	r2, [r7, #16]
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	1ad3      	subs	r3, r2, r3
 8008898:	e000      	b.n	800889c <mg_vcmp+0x40>
  return r;
 800889a:	68fb      	ldr	r3, [r7, #12]
}
 800889c:	4618      	mov	r0, r3
 800889e:	3718      	adds	r7, #24
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <mg_vcasecmp>:

int mg_vcasecmp(const struct mg_str *str1, const char *str2) {
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b086      	sub	sp, #24
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  size_t n2 = strlen(str2), n1 = str1->len;
 80088ae:	6838      	ldr	r0, [r7, #0]
 80088b0:	f7f7 fd8e 	bl	80003d0 <strlen>
 80088b4:	6178      	str	r0, [r7, #20]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	613b      	str	r3, [r7, #16]
  int r = mg_ncasecmp(str1->ptr, str2, (n1 < n2) ? n1 : n2);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6818      	ldr	r0, [r3, #0]
 80088c0:	697a      	ldr	r2, [r7, #20]
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	4293      	cmp	r3, r2
 80088c6:	bf28      	it	cs
 80088c8:	4613      	movcs	r3, r2
 80088ca:	461a      	mov	r2, r3
 80088cc:	6839      	ldr	r1, [r7, #0]
 80088ce:	f7ff ff97 	bl	8008800 <mg_ncasecmp>
 80088d2:	60f8      	str	r0, [r7, #12]
  if (r == 0) return (int) (n1 - n2);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d103      	bne.n	80088e2 <mg_vcasecmp+0x3e>
 80088da:	693a      	ldr	r2, [r7, #16]
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	1ad3      	subs	r3, r2, r3
 80088e0:	e000      	b.n	80088e4 <mg_vcasecmp+0x40>
  return r;
 80088e2:	68fb      	ldr	r3, [r7, #12]
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3718      	adds	r7, #24
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <mg_strcmp>:
    }
  }
  return r;
}

int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 80088ec:	b490      	push	{r4, r7}
 80088ee:	b088      	sub	sp, #32
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	f107 0408 	add.w	r4, r7, #8
 80088f6:	e884 0003 	stmia.w	r4, {r0, r1}
 80088fa:	4639      	mov	r1, r7
 80088fc:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8008900:	2300      	movs	r3, #0
 8008902:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8008904:	e019      	b.n	800893a <mg_strcmp+0x4e>
    int c1 = str1.ptr[i];
 8008906:	68ba      	ldr	r2, [r7, #8]
 8008908:	69fb      	ldr	r3, [r7, #28]
 800890a:	4413      	add	r3, r2
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	61bb      	str	r3, [r7, #24]
    int c2 = str2.ptr[i];
 8008910:	683a      	ldr	r2, [r7, #0]
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	4413      	add	r3, r2
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	617b      	str	r3, [r7, #20]
    if (c1 < c2) return -1;
 800891a:	69ba      	ldr	r2, [r7, #24]
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	429a      	cmp	r2, r3
 8008920:	da02      	bge.n	8008928 <mg_strcmp+0x3c>
 8008922:	f04f 33ff 	mov.w	r3, #4294967295
 8008926:	e01e      	b.n	8008966 <mg_strcmp+0x7a>
    if (c1 > c2) return 1;
 8008928:	69ba      	ldr	r2, [r7, #24]
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	429a      	cmp	r2, r3
 800892e:	dd01      	ble.n	8008934 <mg_strcmp+0x48>
 8008930:	2301      	movs	r3, #1
 8008932:	e018      	b.n	8008966 <mg_strcmp+0x7a>
    i++;
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	3301      	adds	r3, #1
 8008938:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	69fa      	ldr	r2, [r7, #28]
 800893e:	429a      	cmp	r2, r3
 8008940:	d203      	bcs.n	800894a <mg_strcmp+0x5e>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	69fa      	ldr	r2, [r7, #28]
 8008946:	429a      	cmp	r2, r3
 8008948:	d3dd      	bcc.n	8008906 <mg_strcmp+0x1a>
  }
  if (i < str1.len) return 1;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	69fa      	ldr	r2, [r7, #28]
 800894e:	429a      	cmp	r2, r3
 8008950:	d201      	bcs.n	8008956 <mg_strcmp+0x6a>
 8008952:	2301      	movs	r3, #1
 8008954:	e007      	b.n	8008966 <mg_strcmp+0x7a>
  if (i < str2.len) return -1;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	69fa      	ldr	r2, [r7, #28]
 800895a:	429a      	cmp	r2, r3
 800895c:	d202      	bcs.n	8008964 <mg_strcmp+0x78>
 800895e:	f04f 33ff 	mov.w	r3, #4294967295
 8008962:	e000      	b.n	8008966 <mg_strcmp+0x7a>
  return 0;
 8008964:	2300      	movs	r3, #0
}
 8008966:	4618      	mov	r0, r3
 8008968:	3720      	adds	r7, #32
 800896a:	46bd      	mov	sp, r7
 800896c:	bc90      	pop	{r4, r7}
 800896e:	4770      	bx	lr

08008970 <mg_strstr>:

const char *mg_strstr(const struct mg_str haystack,
                      const struct mg_str needle) {
 8008970:	b590      	push	{r4, r7, lr}
 8008972:	b087      	sub	sp, #28
 8008974:	af00      	add	r7, sp, #0
 8008976:	f107 0408 	add.w	r4, r7, #8
 800897a:	e884 0003 	stmia.w	r4, {r0, r1}
 800897e:	4639      	mov	r1, r7
 8008980:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i;
  if (needle.len > haystack.len) return NULL;
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	429a      	cmp	r2, r3
 800898a:	d901      	bls.n	8008990 <mg_strstr+0x20>
 800898c:	2300      	movs	r3, #0
 800898e:	e020      	b.n	80089d2 <mg_strstr+0x62>
  if (needle.len == 0) return haystack.ptr;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d101      	bne.n	800899a <mg_strstr+0x2a>
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	e01b      	b.n	80089d2 <mg_strstr+0x62>
  for (i = 0; i <= haystack.len - needle.len; i++) {
 800899a:	2300      	movs	r3, #0
 800899c:	617b      	str	r3, [r7, #20]
 800899e:	e011      	b.n	80089c4 <mg_strstr+0x54>
    if (memcmp(haystack.ptr + i, needle.ptr, needle.len) == 0) {
 80089a0:	68ba      	ldr	r2, [r7, #8]
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	4413      	add	r3, r2
 80089a6:	6839      	ldr	r1, [r7, #0]
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	4618      	mov	r0, r3
 80089ac:	f00a fd45 	bl	801343a <memcmp>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d103      	bne.n	80089be <mg_strstr+0x4e>
      return haystack.ptr + i;
 80089b6:	68ba      	ldr	r2, [r7, #8]
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	4413      	add	r3, r2
 80089bc:	e009      	b.n	80089d2 <mg_strstr+0x62>
  for (i = 0; i <= haystack.len - needle.len; i++) {
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	3301      	adds	r3, #1
 80089c2:	617b      	str	r3, [r7, #20]
 80089c4:	68fa      	ldr	r2, [r7, #12]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	697a      	ldr	r2, [r7, #20]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d9e7      	bls.n	80089a0 <mg_strstr+0x30>
    }
  }
  return NULL;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	371c      	adds	r7, #28
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd90      	pop	{r4, r7, pc}

080089da <mg_match>:
  while (s.len > 0 && is_space((int) *s.ptr)) s.ptr++, s.len--;
  while (s.len > 0 && is_space((int) *(s.ptr + s.len - 1))) s.len--;
  return s;
}

bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 80089da:	b490      	push	{r4, r7}
 80089dc:	b088      	sub	sp, #32
 80089de:	af00      	add	r7, sp, #0
 80089e0:	f107 0408 	add.w	r4, r7, #8
 80089e4:	e884 0003 	stmia.w	r4, {r0, r1}
 80089e8:	4639      	mov	r1, r7
 80089ea:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0, j = 0, ni = 0, nj = 0;
 80089ee:	2300      	movs	r3, #0
 80089f0:	61fb      	str	r3, [r7, #28]
 80089f2:	2300      	movs	r3, #0
 80089f4:	61bb      	str	r3, [r7, #24]
 80089f6:	2300      	movs	r3, #0
 80089f8:	617b      	str	r3, [r7, #20]
 80089fa:	2300      	movs	r3, #0
 80089fc:	613b      	str	r3, [r7, #16]
  if (caps) caps->ptr = NULL, caps->len = 0;
 80089fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	f000 80ad 	beq.w	8008b60 <mg_match+0x186>
 8008a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a08:	2200      	movs	r2, #0
 8008a0a:	601a      	str	r2, [r3, #0]
 8008a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a0e:	2200      	movs	r2, #0
 8008a10:	605a      	str	r2, [r3, #4]
  while (i < p.len || j < s.len) {
 8008a12:	e0a5      	b.n	8008b60 <mg_match+0x186>
    if (i < p.len && j < s.len && (p.ptr[i] == '?' || s.ptr[j] == p.ptr[i])) {
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	69fa      	ldr	r2, [r7, #28]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d24f      	bcs.n	8008abc <mg_match+0xe2>
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	69ba      	ldr	r2, [r7, #24]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d24b      	bcs.n	8008abc <mg_match+0xe2>
 8008a24:	683a      	ldr	r2, [r7, #0]
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	4413      	add	r3, r2
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	2b3f      	cmp	r3, #63	; 0x3f
 8008a2e:	d009      	beq.n	8008a44 <mg_match+0x6a>
 8008a30:	68ba      	ldr	r2, [r7, #8]
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	4413      	add	r3, r2
 8008a36:	781a      	ldrb	r2, [r3, #0]
 8008a38:	6839      	ldr	r1, [r7, #0]
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	440b      	add	r3, r1
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d13b      	bne.n	8008abc <mg_match+0xe2>
      if (caps == NULL) {
 8008a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d031      	beq.n	8008aae <mg_match+0xd4>
      } else if (p.ptr[i] == '?') {
 8008a4a:	683a      	ldr	r2, [r7, #0]
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	4413      	add	r3, r2
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	2b3f      	cmp	r3, #63	; 0x3f
 8008a54:	d111      	bne.n	8008a7a <mg_match+0xa0>
        caps->ptr = &s.ptr[j], caps->len = 1;     // Finalize `?` cap
 8008a56:	68ba      	ldr	r2, [r7, #8]
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	441a      	add	r2, r3
 8008a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a5e:	601a      	str	r2, [r3, #0]
 8008a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a62:	2201      	movs	r2, #1
 8008a64:	605a      	str	r2, [r3, #4]
        caps++, caps->ptr = NULL, caps->len = 0;  // Init next cap
 8008a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a68:	3308      	adds	r3, #8
 8008a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6e:	2200      	movs	r2, #0
 8008a70:	601a      	str	r2, [r3, #0]
 8008a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a74:	2200      	movs	r2, #0
 8008a76:	605a      	str	r2, [r3, #4]
 8008a78:	e019      	b.n	8008aae <mg_match+0xd4>
      } else if (caps->ptr != NULL && caps->len == 0) {
 8008a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d015      	beq.n	8008aae <mg_match+0xd4>
 8008a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d111      	bne.n	8008aae <mg_match+0xd4>
        caps->len = (size_t) (&s.ptr[j] - caps->ptr);  // Finalize current cap
 8008a8a:	68ba      	ldr	r2, [r7, #8]
 8008a8c:	69bb      	ldr	r3, [r7, #24]
 8008a8e:	441a      	add	r2, r3
 8008a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	1ad3      	subs	r3, r2, r3
 8008a96:	461a      	mov	r2, r3
 8008a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9a:	605a      	str	r2, [r3, #4]
        caps++, caps->len = 0, caps->ptr = NULL;       // Init next cap
 8008a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9e:	3308      	adds	r3, #8
 8008aa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	605a      	str	r2, [r3, #4]
 8008aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aaa:	2200      	movs	r2, #0
 8008aac:	601a      	str	r2, [r3, #0]
      }
      i++, j++;
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	61fb      	str	r3, [r7, #28]
 8008ab4:	69bb      	ldr	r3, [r7, #24]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	61bb      	str	r3, [r7, #24]
 8008aba:	e051      	b.n	8008b60 <mg_match+0x186>
    } else if (i < p.len && (p.ptr[i] == '*' || p.ptr[i] == '#')) {
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	69fa      	ldr	r2, [r7, #28]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d222      	bcs.n	8008b0a <mg_match+0x130>
 8008ac4:	683a      	ldr	r2, [r7, #0]
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	4413      	add	r3, r2
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	2b2a      	cmp	r3, #42	; 0x2a
 8008ace:	d005      	beq.n	8008adc <mg_match+0x102>
 8008ad0:	683a      	ldr	r2, [r7, #0]
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	2b23      	cmp	r3, #35	; 0x23
 8008ada:	d116      	bne.n	8008b0a <mg_match+0x130>
      if (caps && !caps->ptr) caps->len = 0, caps->ptr = &s.ptr[j];  // Init cap
 8008adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d00b      	beq.n	8008afa <mg_match+0x120>
 8008ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d107      	bne.n	8008afa <mg_match+0x120>
 8008aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aec:	2200      	movs	r2, #0
 8008aee:	605a      	str	r2, [r3, #4]
 8008af0:	68ba      	ldr	r2, [r7, #8]
 8008af2:	69bb      	ldr	r3, [r7, #24]
 8008af4:	441a      	add	r2, r3
 8008af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af8:	601a      	str	r2, [r3, #0]
      ni = i++, nj = j + 1;
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	1c5a      	adds	r2, r3, #1
 8008afe:	61fa      	str	r2, [r7, #28]
 8008b00:	617b      	str	r3, [r7, #20]
 8008b02:	69bb      	ldr	r3, [r7, #24]
 8008b04:	3301      	adds	r3, #1
 8008b06:	613b      	str	r3, [r7, #16]
 8008b08:	e02a      	b.n	8008b60 <mg_match+0x186>
    } else if (nj > 0 && nj <= s.len && (p.ptr[ni] == '#' || s.ptr[j] != '/')) {
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d025      	beq.n	8008b5c <mg_match+0x182>
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	693a      	ldr	r2, [r7, #16]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d821      	bhi.n	8008b5c <mg_match+0x182>
 8008b18:	683a      	ldr	r2, [r7, #0]
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	2b23      	cmp	r3, #35	; 0x23
 8008b22:	d005      	beq.n	8008b30 <mg_match+0x156>
 8008b24:	68ba      	ldr	r2, [r7, #8]
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	4413      	add	r3, r2
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	2b2f      	cmp	r3, #47	; 0x2f
 8008b2e:	d015      	beq.n	8008b5c <mg_match+0x182>
      i = ni, j = nj;
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	61fb      	str	r3, [r7, #28]
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	61bb      	str	r3, [r7, #24]
      if (caps && caps->ptr == NULL && caps->len == 0) {
 8008b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d010      	beq.n	8008b60 <mg_match+0x186>
 8008b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d10c      	bne.n	8008b60 <mg_match+0x186>
 8008b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d108      	bne.n	8008b60 <mg_match+0x186>
        caps--, caps->len = 0;  // Restart previous cap
 8008b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b50:	3b08      	subs	r3, #8
 8008b52:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b56:	2200      	movs	r2, #0
 8008b58:	605a      	str	r2, [r3, #4]
      if (caps && caps->ptr == NULL && caps->len == 0) {
 8008b5a:	e001      	b.n	8008b60 <mg_match+0x186>
      }
    } else {
      return false;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	e01e      	b.n	8008b9e <mg_match+0x1c4>
  while (i < p.len || j < s.len) {
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	69fa      	ldr	r2, [r7, #28]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	f4ff af55 	bcc.w	8008a14 <mg_match+0x3a>
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	69ba      	ldr	r2, [r7, #24]
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	f4ff af50 	bcc.w	8008a14 <mg_match+0x3a>
    }
  }
  if (caps && caps->ptr && caps->len == 0) {
 8008b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d010      	beq.n	8008b9c <mg_match+0x1c2>
 8008b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00c      	beq.n	8008b9c <mg_match+0x1c2>
 8008b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d108      	bne.n	8008b9c <mg_match+0x1c2>
    caps->len = (size_t) (&s.ptr[j] - caps->ptr);
 8008b8a:	68ba      	ldr	r2, [r7, #8]
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	441a      	add	r2, r3
 8008b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	461a      	mov	r2, r3
 8008b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9a:	605a      	str	r2, [r3, #4]
  }
  return true;
 8008b9c:	2301      	movs	r3, #1
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3720      	adds	r7, #32
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bc90      	pop	{r4, r7}
 8008ba6:	4770      	bx	lr

08008ba8 <mg_globmatch>:

bool mg_globmatch(const char *s1, size_t n1, const char *s2, size_t n2) {
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b08a      	sub	sp, #40	; 0x28
 8008bac:	af02      	add	r7, sp, #8
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	60b9      	str	r1, [r7, #8]
 8008bb2:	607a      	str	r2, [r7, #4]
 8008bb4:	603b      	str	r3, [r7, #0]
  return mg_match(mg_str_n(s2, n2), mg_str_n(s1, n1), NULL);
 8008bb6:	f107 0310 	add.w	r3, r7, #16
 8008bba:	683a      	ldr	r2, [r7, #0]
 8008bbc:	6879      	ldr	r1, [r7, #4]
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f7ff fdef 	bl	80087a2 <mg_str_n>
 8008bc4:	f107 0318 	add.w	r3, r7, #24
 8008bc8:	68ba      	ldr	r2, [r7, #8]
 8008bca:	68f9      	ldr	r1, [r7, #12]
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f7ff fde8 	bl	80087a2 <mg_str_n>
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	9300      	str	r3, [sp, #0]
 8008bd6:	f107 0318 	add.w	r3, r7, #24
 8008bda:	cb0c      	ldmia	r3, {r2, r3}
 8008bdc:	f107 0110 	add.w	r1, r7, #16
 8008be0:	c903      	ldmia	r1, {r0, r1}
 8008be2:	f7ff fefa 	bl	80089da <mg_match>
 8008be6:	4603      	mov	r3, r0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3720      	adds	r7, #32
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <mg_nce>:

static size_t mg_nce(const char *s, size_t n, size_t ofs, size_t *koff,
                     size_t *klen, size_t *voff, size_t *vlen, char delim) {
 8008bf0:	b480      	push	{r7}
 8008bf2:	b087      	sub	sp, #28
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	60b9      	str	r1, [r7, #8]
 8008bfa:	607a      	str	r2, [r7, #4]
 8008bfc:	603b      	str	r3, [r7, #0]
  size_t kvlen, kl;
  for (kvlen = 0; ofs + kvlen < n && s[ofs + kvlen] != delim;) kvlen++;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	617b      	str	r3, [r7, #20]
 8008c02:	e002      	b.n	8008c0a <mg_nce+0x1a>
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	3301      	adds	r3, #1
 8008c08:	617b      	str	r3, [r7, #20]
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	4413      	add	r3, r2
 8008c10:	68ba      	ldr	r2, [r7, #8]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d909      	bls.n	8008c2a <mg_nce+0x3a>
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	4413      	add	r3, r2
 8008c1c:	68fa      	ldr	r2, [r7, #12]
 8008c1e:	4413      	add	r3, r2
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d1ec      	bne.n	8008c04 <mg_nce+0x14>
  for (kl = 0; kl < kvlen && s[ofs + kl] != '=';) kl++;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	613b      	str	r3, [r7, #16]
 8008c2e:	e002      	b.n	8008c36 <mg_nce+0x46>
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	3301      	adds	r3, #1
 8008c34:	613b      	str	r3, [r7, #16]
 8008c36:	693a      	ldr	r2, [r7, #16]
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d207      	bcs.n	8008c4e <mg_nce+0x5e>
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	4413      	add	r3, r2
 8008c44:	68fa      	ldr	r2, [r7, #12]
 8008c46:	4413      	add	r3, r2
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	2b3d      	cmp	r3, #61	; 0x3d
 8008c4c:	d1f0      	bne.n	8008c30 <mg_nce+0x40>
  if (koff != NULL) *koff = ofs;
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d002      	beq.n	8008c5a <mg_nce+0x6a>
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	601a      	str	r2, [r3, #0]
  if (klen != NULL) *klen = kl;
 8008c5a:	6a3b      	ldr	r3, [r7, #32]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d002      	beq.n	8008c66 <mg_nce+0x76>
 8008c60:	6a3b      	ldr	r3, [r7, #32]
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	601a      	str	r2, [r3, #0]
  if (voff != NULL) *voff = kl < kvlen ? ofs + kl + 1 : 0;
 8008c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d00b      	beq.n	8008c84 <mg_nce+0x94>
 8008c6c:	693a      	ldr	r2, [r7, #16]
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d204      	bcs.n	8008c7e <mg_nce+0x8e>
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	4413      	add	r3, r2
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	e000      	b.n	8008c80 <mg_nce+0x90>
 8008c7e:	2300      	movs	r3, #0
 8008c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c82:	6013      	str	r3, [r2, #0]
  if (vlen != NULL) *vlen = kl < kvlen ? kvlen - kl - 1 : 0;
 8008c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d00b      	beq.n	8008ca2 <mg_nce+0xb2>
 8008c8a:	693a      	ldr	r2, [r7, #16]
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d204      	bcs.n	8008c9c <mg_nce+0xac>
 8008c92:	697a      	ldr	r2, [r7, #20]
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	1ad3      	subs	r3, r2, r3
 8008c98:	3b01      	subs	r3, #1
 8008c9a:	e000      	b.n	8008c9e <mg_nce+0xae>
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ca0:	6013      	str	r3, [r2, #0]
  ofs += kvlen + 1;
 8008ca2:	697a      	ldr	r2, [r7, #20]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	4413      	add	r3, r2
 8008ca8:	3301      	adds	r3, #1
 8008caa:	607b      	str	r3, [r7, #4]
  return ofs > n ? n : ofs;
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	bf28      	it	cs
 8008cb4:	4613      	movcs	r3, r2
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	371c      	adds	r7, #28
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr

08008cc2 <mg_split>:

bool mg_split(struct mg_str *s, struct mg_str *k, struct mg_str *v, char sep) {
 8008cc2:	b590      	push	{r4, r7, lr}
 8008cc4:	b091      	sub	sp, #68	; 0x44
 8008cc6:	af04      	add	r7, sp, #16
 8008cc8:	6178      	str	r0, [r7, #20]
 8008cca:	6139      	str	r1, [r7, #16]
 8008ccc:	60fa      	str	r2, [r7, #12]
 8008cce:	72fb      	strb	r3, [r7, #11]
  size_t koff = 0, klen = 0, voff = 0, vlen = 0, off = 0;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8008cd8:	2300      	movs	r3, #0
 8008cda:	623b      	str	r3, [r7, #32]
 8008cdc:	2300      	movs	r3, #0
 8008cde:	61fb      	str	r3, [r7, #28]
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (s->ptr == NULL || s->len == 0) return 0;
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d003      	beq.n	8008cf4 <mg_split+0x32>
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d101      	bne.n	8008cf8 <mg_split+0x36>
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	e054      	b.n	8008da2 <mg_split+0xe0>
  off = mg_nce(s->ptr, s->len, 0, &koff, &klen, &voff, &vlen, sep);
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	6818      	ldr	r0, [r3, #0]
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	6859      	ldr	r1, [r3, #4]
 8008d00:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008d04:	7afb      	ldrb	r3, [r7, #11]
 8008d06:	9303      	str	r3, [sp, #12]
 8008d08:	f107 031c 	add.w	r3, r7, #28
 8008d0c:	9302      	str	r3, [sp, #8]
 8008d0e:	f107 0320 	add.w	r3, r7, #32
 8008d12:	9301      	str	r3, [sp, #4]
 8008d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d18:	9300      	str	r3, [sp, #0]
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f7ff ff67 	bl	8008bf0 <mg_nce>
 8008d22:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (k != NULL) *k = mg_str_n(s->ptr + koff, klen);
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00f      	beq.n	8008d4a <mg_split+0x88>
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d30:	18d1      	adds	r1, r2, r3
 8008d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d34:	693c      	ldr	r4, [r7, #16]
 8008d36:	463b      	mov	r3, r7
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7ff fd32 	bl	80087a2 <mg_str_n>
 8008d3e:	4622      	mov	r2, r4
 8008d40:	463b      	mov	r3, r7
 8008d42:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008d46:	e882 0003 	stmia.w	r2, {r0, r1}
  if (v != NULL) *v = mg_str_n(s->ptr + voff, vlen);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d00f      	beq.n	8008d70 <mg_split+0xae>
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	6a3b      	ldr	r3, [r7, #32]
 8008d56:	18d1      	adds	r1, r2, r3
 8008d58:	69fa      	ldr	r2, [r7, #28]
 8008d5a:	68fc      	ldr	r4, [r7, #12]
 8008d5c:	463b      	mov	r3, r7
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7ff fd1f 	bl	80087a2 <mg_str_n>
 8008d64:	4622      	mov	r2, r4
 8008d66:	463b      	mov	r3, r7
 8008d68:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008d6c:	e882 0003 	stmia.w	r2, {r0, r1}
  *s = mg_str_n(s->ptr + off, s->len - off);
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d76:	18d1      	adds	r1, r2, r3
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	685a      	ldr	r2, [r3, #4]
 8008d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7e:	1ad2      	subs	r2, r2, r3
 8008d80:	697c      	ldr	r4, [r7, #20]
 8008d82:	463b      	mov	r3, r7
 8008d84:	4618      	mov	r0, r3
 8008d86:	f7ff fd0c 	bl	80087a2 <mg_str_n>
 8008d8a:	4622      	mov	r2, r4
 8008d8c:	463b      	mov	r3, r7
 8008d8e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008d92:	e882 0003 	stmia.w	r2, {r0, r1}
  return off > 0;
 8008d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	bf14      	ite	ne
 8008d9c:	2301      	movne	r3, #1
 8008d9e:	2300      	moveq	r3, #0
 8008da0:	b2db      	uxtb	r3, r3
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3734      	adds	r7, #52	; 0x34
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd90      	pop	{r4, r7, pc}

08008daa <mg_commalist>:

bool mg_commalist(struct mg_str *s, struct mg_str *k, struct mg_str *v) {
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b084      	sub	sp, #16
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	60f8      	str	r0, [r7, #12]
 8008db2:	60b9      	str	r1, [r7, #8]
 8008db4:	607a      	str	r2, [r7, #4]
  return mg_split(s, k, v, ',');
 8008db6:	232c      	movs	r3, #44	; 0x2c
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	68b9      	ldr	r1, [r7, #8]
 8008dbc:	68f8      	ldr	r0, [r7, #12]
 8008dbe:	f7ff ff80 	bl	8008cc2 <mg_split>
 8008dc2:	4603      	mov	r3, r0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3710      	adds	r7, #16
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <mg_unhex_nimble>:
  }
  to[i] = '\0';
  return to;
}

static unsigned char mg_unhex_nimble(unsigned char c) {
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	71fb      	strb	r3, [r7, #7]
  return (c >= '0' && c <= '9')   ? (unsigned char) (c - '0')
         : (c >= 'A' && c <= 'F') ? (unsigned char) (c - '7')
 8008dd6:	79fb      	ldrb	r3, [r7, #7]
 8008dd8:	2b2f      	cmp	r3, #47	; 0x2f
 8008dda:	d906      	bls.n	8008dea <mg_unhex_nimble+0x1e>
  return (c >= '0' && c <= '9')   ? (unsigned char) (c - '0')
 8008ddc:	79fb      	ldrb	r3, [r7, #7]
 8008dde:	2b39      	cmp	r3, #57	; 0x39
 8008de0:	d803      	bhi.n	8008dea <mg_unhex_nimble+0x1e>
         : (c >= 'A' && c <= 'F') ? (unsigned char) (c - '7')
 8008de2:	79fb      	ldrb	r3, [r7, #7]
 8008de4:	3b30      	subs	r3, #48	; 0x30
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	e00c      	b.n	8008e04 <mg_unhex_nimble+0x38>
 8008dea:	79fb      	ldrb	r3, [r7, #7]
 8008dec:	2b40      	cmp	r3, #64	; 0x40
 8008dee:	d906      	bls.n	8008dfe <mg_unhex_nimble+0x32>
 8008df0:	79fb      	ldrb	r3, [r7, #7]
 8008df2:	2b46      	cmp	r3, #70	; 0x46
 8008df4:	d803      	bhi.n	8008dfe <mg_unhex_nimble+0x32>
 8008df6:	79fb      	ldrb	r3, [r7, #7]
 8008df8:	3b37      	subs	r3, #55	; 0x37
 8008dfa:	b2db      	uxtb	r3, r3
 8008dfc:	e002      	b.n	8008e04 <mg_unhex_nimble+0x38>
 8008dfe:	79fb      	ldrb	r3, [r7, #7]
 8008e00:	3b57      	subs	r3, #87	; 0x57
 8008e02:	b2db      	uxtb	r3, r3
                                  : (unsigned char) (c - 'W');
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <mg_unhexn>:

unsigned long mg_unhexn(const char *s, size_t len) {
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b084      	sub	sp, #16
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	6039      	str	r1, [r7, #0]
  unsigned long i = 0, v = 0;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	60fb      	str	r3, [r7, #12]
 8008e1e:	2300      	movs	r3, #0
 8008e20:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < len; i++) v <<= 4, v |= mg_unhex_nimble(((uint8_t *) s)[i]);
 8008e22:	2300      	movs	r3, #0
 8008e24:	60fb      	str	r3, [r7, #12]
 8008e26:	e011      	b.n	8008e4c <mg_unhexn+0x3c>
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	011b      	lsls	r3, r3, #4
 8008e2c:	60bb      	str	r3, [r7, #8]
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	4413      	add	r3, r2
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7ff ffc8 	bl	8008dcc <mg_unhex_nimble>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	461a      	mov	r2, r3
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	60bb      	str	r3, [r7, #8]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	3301      	adds	r3, #1
 8008e4a:	60fb      	str	r3, [r7, #12]
 8008e4c:	68fa      	ldr	r2, [r7, #12]
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d3e9      	bcc.n	8008e28 <mg_unhexn+0x18>
  return v;
 8008e54:	68bb      	ldr	r3, [r7, #8]
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3710      	adds	r7, #16
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <mg_unhex>:

void mg_unhex(const char *buf, size_t len, unsigned char *to) {
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b086      	sub	sp, #24
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	60f8      	str	r0, [r7, #12]
 8008e66:	60b9      	str	r1, [r7, #8]
 8008e68:	607a      	str	r2, [r7, #4]
  size_t i;
  for (i = 0; i < len; i += 2) {
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	617b      	str	r3, [r7, #20]
 8008e6e:	e010      	b.n	8008e92 <mg_unhex+0x34>
    to[i >> 1] = (unsigned char) mg_unhexn(&buf[i], 2);
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	4413      	add	r3, r2
 8008e76:	2102      	movs	r1, #2
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7ff ffc9 	bl	8008e10 <mg_unhexn>
 8008e7e:	4601      	mov	r1, r0
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	085b      	lsrs	r3, r3, #1
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	4413      	add	r3, r2
 8008e88:	b2ca      	uxtb	r2, r1
 8008e8a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < len; i += 2) {
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	3302      	adds	r3, #2
 8008e90:	617b      	str	r3, [r7, #20]
 8008e92:	697a      	ldr	r2, [r7, #20]
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d3ea      	bcc.n	8008e70 <mg_unhex+0x12>
  }
}
 8008e9a:	bf00      	nop
 8008e9c:	bf00      	nop
 8008e9e:	3718      	adds	r7, #24
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <mg_path_is_sane>:

bool mg_path_is_sane(const char *path) {
 8008ea4:	b480      	push	{r7}
 8008ea6:	b085      	sub	sp, #20
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  const char *s = path;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	60fb      	str	r3, [r7, #12]
  for (; s[0] != '\0'; s++) {
 8008eb0:	e01a      	b.n	8008ee8 <mg_path_is_sane+0x44>
    if (s == path || s[0] == '/' || s[0] == '\\') {  // Subdir?
 8008eb2:	68fa      	ldr	r2, [r7, #12]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d007      	beq.n	8008eca <mg_path_is_sane+0x26>
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	2b2f      	cmp	r3, #47	; 0x2f
 8008ec0:	d003      	beq.n	8008eca <mg_path_is_sane+0x26>
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	2b5c      	cmp	r3, #92	; 0x5c
 8008ec8:	d10b      	bne.n	8008ee2 <mg_path_is_sane+0x3e>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	3301      	adds	r3, #1
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	2b2e      	cmp	r3, #46	; 0x2e
 8008ed2:	d106      	bne.n	8008ee2 <mg_path_is_sane+0x3e>
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	3302      	adds	r3, #2
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	2b2e      	cmp	r3, #46	; 0x2e
 8008edc:	d101      	bne.n	8008ee2 <mg_path_is_sane+0x3e>
 8008ede:	2300      	movs	r3, #0
 8008ee0:	e007      	b.n	8008ef2 <mg_path_is_sane+0x4e>
  for (; s[0] != '\0'; s++) {
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	60fb      	str	r3, [r7, #12]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d1e0      	bne.n	8008eb2 <mg_path_is_sane+0xe>
    }
  }
  return true;
 8008ef0:	2301      	movs	r3, #1
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3714      	adds	r7, #20
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr

08008efe <mg_timer_init>:


#define MG_TIMER_CALLED 4

void mg_timer_init(struct mg_timer **head, struct mg_timer *t, uint64_t ms,
                   unsigned flags, void (*fn)(void *), void *arg) {
 8008efe:	b480      	push	{r7}
 8008f00:	b085      	sub	sp, #20
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	60f8      	str	r0, [r7, #12]
 8008f06:	60b9      	str	r1, [r7, #8]
 8008f08:	e9c7 2300 	strd	r2, r3, [r7]
  t->id = 0, t->period_ms = ms, t->expire = 0;
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	601a      	str	r2, [r3, #0]
 8008f12:	68b9      	ldr	r1, [r7, #8]
 8008f14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f18:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8008f1c:	68b9      	ldr	r1, [r7, #8]
 8008f1e:	f04f 0200 	mov.w	r2, #0
 8008f22:	f04f 0300 	mov.w	r3, #0
 8008f26:	e9c1 2304 	strd	r2, r3, [r1, #16]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	69ba      	ldr	r2, [r7, #24]
 8008f2e:	619a      	str	r2, [r3, #24]
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	69fa      	ldr	r2, [r7, #28]
 8008f34:	61da      	str	r2, [r3, #28]
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	6a3a      	ldr	r2, [r7, #32]
 8008f3a:	621a      	str	r2, [r3, #32]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	625a      	str	r2, [r3, #36]	; 0x24
  *head = t;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	68ba      	ldr	r2, [r7, #8]
 8008f48:	601a      	str	r2, [r3, #0]
}
 8008f4a:	bf00      	nop
 8008f4c:	3714      	adds	r7, #20
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr

08008f56 <mg_timer_expired>:
  while (*head && *head != t) head = &(*head)->next;
  if (*head) *head = t->next;
}

// t: expiration time, prd: period, now: current time. Return true if expired
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 8008f56:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008f5a:	b086      	sub	sp, #24
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6178      	str	r0, [r7, #20]
 8008f60:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 8008f64:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008f68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f6c:	eb10 0a02 	adds.w	sl, r0, r2
 8008f70:	eb41 0b03 	adc.w	fp, r1, r3
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f7a:	4592      	cmp	sl, r2
 8008f7c:	eb7b 0303 	sbcs.w	r3, fp, r3
 8008f80:	d206      	bcs.n	8008f90 <mg_timer_expired+0x3a>
 8008f82:	6979      	ldr	r1, [r7, #20]
 8008f84:	f04f 0200 	mov.w	r2, #0
 8008f88:	f04f 0300 	mov.w	r3, #0
 8008f8c:	e9c1 2300 	strd	r2, r3, [r1]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f96:	4313      	orrs	r3, r2
 8008f98:	d10d      	bne.n	8008fb6 <mg_timer_expired+0x60>
 8008f9a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008f9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008fa2:	1886      	adds	r6, r0, r2
 8008fa4:	603e      	str	r6, [r7, #0]
 8008fa6:	eb41 0303 	adc.w	r3, r1, r3
 8008faa:	607b      	str	r3, [r7, #4]
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008fb2:	e9c3 1200 	strd	r1, r2, [r3]
  if (*t > now) return false;                    // Not expired yet, return
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fbc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008fc0:	4290      	cmp	r0, r2
 8008fc2:	eb71 0303 	sbcs.w	r3, r1, r3
 8008fc6:	d201      	bcs.n	8008fcc <mg_timer_expired+0x76>
 8008fc8:	2300      	movs	r3, #0
 8008fca:	e022      	b.n	8009012 <mg_timer_expired+0xbc>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008fd6:	ebb0 0802 	subs.w	r8, r0, r2
 8008fda:	eb61 0903 	sbc.w	r9, r1, r3
 8008fde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008fe2:	4542      	cmp	r2, r8
 8008fe4:	eb73 0309 	sbcs.w	r3, r3, r9
 8008fe8:	d207      	bcs.n	8008ffa <mg_timer_expired+0xa4>
 8008fea:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008fee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ff2:	1884      	adds	r4, r0, r2
 8008ff4:	eb41 0503 	adc.w	r5, r1, r3
 8008ff8:	e007      	b.n	800900a <mg_timer_expired+0xb4>
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009000:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009004:	1884      	adds	r4, r0, r2
 8009006:	eb41 0503 	adc.w	r5, r1, r3
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	e9c3 4500 	strd	r4, r5, [r3]
  return true;                                   // Expired, return true
 8009010:	2301      	movs	r3, #1
}
 8009012:	4618      	mov	r0, r3
 8009014:	3718      	adds	r7, #24
 8009016:	46bd      	mov	sp, r7
 8009018:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800901c:	4770      	bx	lr

0800901e <mg_timer_poll>:

void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 800901e:	b590      	push	{r4, r7, lr}
 8009020:	b08b      	sub	sp, #44	; 0x2c
 8009022:	af02      	add	r7, sp, #8
 8009024:	60f8      	str	r0, [r7, #12]
 8009026:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t, *tmp;
  for (t = *head; t != NULL; t = tmp) {
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	61fb      	str	r3, [r7, #28]
 8009030:	e054      	b.n	80090dc <mg_timer_poll+0xbe>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009038:	4313      	orrs	r3, r2
 800903a:	d10d      	bne.n	8009058 <mg_timer_poll+0x3a>
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	699b      	ldr	r3, [r3, #24]
 8009040:	f003 0302 	and.w	r3, r3, #2
 8009044:	2b00      	cmp	r3, #0
 8009046:	d007      	beq.n	8009058 <mg_timer_poll+0x3a>
                !(t->flags & MG_TIMER_CALLED);  // Handle MG_TIMER_NOW only once
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	699b      	ldr	r3, [r3, #24]
 800904c:	f003 0304 	and.w	r3, r3, #4
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8009050:	2b00      	cmp	r3, #0
 8009052:	d101      	bne.n	8009058 <mg_timer_poll+0x3a>
 8009054:	2301      	movs	r3, #1
 8009056:	e000      	b.n	800905a <mg_timer_poll+0x3c>
 8009058:	2300      	movs	r3, #0
 800905a:	76fb      	strb	r3, [r7, #27]
 800905c:	7efb      	ldrb	r3, [r7, #27]
 800905e:	f003 0301 	and.w	r3, r3, #1
 8009062:	76fb      	strb	r3, [r7, #27]
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	f103 0410 	add.w	r4, r3, #16
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8009070:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009074:	e9cd 2300 	strd	r2, r3, [sp]
 8009078:	4602      	mov	r2, r0
 800907a:	460b      	mov	r3, r1
 800907c:	4620      	mov	r0, r4
 800907e:	f7ff ff6a 	bl	8008f56 <mg_timer_expired>
 8009082:	4603      	mov	r3, r0
 8009084:	76bb      	strb	r3, [r7, #26]
    tmp = t->next;
 8009086:	69fb      	ldr	r3, [r7, #28]
 8009088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908a:	617b      	str	r3, [r7, #20]
    if (!once && !expired) continue;
 800908c:	7efb      	ldrb	r3, [r7, #27]
 800908e:	f083 0301 	eor.w	r3, r3, #1
 8009092:	b2db      	uxtb	r3, r3
 8009094:	2b00      	cmp	r3, #0
 8009096:	d005      	beq.n	80090a4 <mg_timer_poll+0x86>
 8009098:	7ebb      	ldrb	r3, [r7, #26]
 800909a:	f083 0301 	eor.w	r3, r3, #1
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d118      	bne.n	80090d6 <mg_timer_poll+0xb8>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	699b      	ldr	r3, [r3, #24]
 80090a8:	f003 0301 	and.w	r3, r3, #1
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d105      	bne.n	80090bc <mg_timer_poll+0x9e>
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	699b      	ldr	r3, [r3, #24]
 80090b4:	f003 0304 	and.w	r3, r3, #4
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d105      	bne.n	80090c8 <mg_timer_poll+0xaa>
      t->fn(t->arg);
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	69db      	ldr	r3, [r3, #28]
 80090c0:	69fa      	ldr	r2, [r7, #28]
 80090c2:	6a12      	ldr	r2, [r2, #32]
 80090c4:	4610      	mov	r0, r2
 80090c6:	4798      	blx	r3
    }
    t->flags |= MG_TIMER_CALLED;
 80090c8:	69fb      	ldr	r3, [r7, #28]
 80090ca:	699b      	ldr	r3, [r3, #24]
 80090cc:	f043 0204 	orr.w	r2, r3, #4
 80090d0:	69fb      	ldr	r3, [r7, #28]
 80090d2:	619a      	str	r2, [r3, #24]
 80090d4:	e000      	b.n	80090d8 <mg_timer_poll+0xba>
    if (!once && !expired) continue;
 80090d6:	bf00      	nop
  for (t = *head; t != NULL; t = tmp) {
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	61fb      	str	r3, [r7, #28]
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1a7      	bne.n	8009032 <mg_timer_poll+0x14>
  }
}
 80090e2:	bf00      	nop
 80090e4:	bf00      	nop
 80090e6:	3724      	adds	r7, #36	; 0x24
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd90      	pop	{r4, r7, pc}

080090ec <mg_tls_init>:
#line 1 "src/tls_dummy.c"
#endif


#if !MG_ENABLE_MBEDTLS && !MG_ENABLE_OPENSSL && !MG_ENABLE_CUSTOM_TLS
void mg_tls_init(struct mg_connection *c, const struct mg_tls_opts *opts) {
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  (void) opts;
  mg_error(c, "TLS is not enabled");
 80090f6:	4904      	ldr	r1, [pc, #16]	; (8009108 <mg_tls_init+0x1c>)
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f7f8 ff69 	bl	8001fd0 <mg_error>
}
 80090fe:	bf00      	nop
 8009100:	3708      	adds	r7, #8
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	080152e0 	.word	0x080152e0

0800910c <mg_tls_handshake>:
void mg_tls_handshake(struct mg_connection *c) {
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  (void) c;
}
 8009114:	bf00      	nop
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <mg_tls_free>:
void mg_tls_free(struct mg_connection *c) {
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  (void) c;
}
 8009128:	bf00      	nop
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <mg_tls_recv>:
long mg_tls_recv(struct mg_connection *c, void *buf, size_t len) {
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	607a      	str	r2, [r7, #4]
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d005      	beq.n	8009152 <mg_tls_recv+0x1e>
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d002      	beq.n	8009152 <mg_tls_recv+0x1e>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d101      	bne.n	8009156 <mg_tls_recv+0x22>
 8009152:	2300      	movs	r3, #0
 8009154:	e001      	b.n	800915a <mg_tls_recv+0x26>
 8009156:	f04f 33ff 	mov.w	r3, #4294967295
}
 800915a:	4618      	mov	r0, r3
 800915c:	3714      	adds	r7, #20
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr

08009166 <mg_tls_send>:
long mg_tls_send(struct mg_connection *c, const void *buf, size_t len) {
 8009166:	b480      	push	{r7}
 8009168:	b085      	sub	sp, #20
 800916a:	af00      	add	r7, sp, #0
 800916c:	60f8      	str	r0, [r7, #12]
 800916e:	60b9      	str	r1, [r7, #8]
 8009170:	607a      	str	r2, [r7, #4]
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d005      	beq.n	8009184 <mg_tls_send+0x1e>
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d002      	beq.n	8009184 <mg_tls_send+0x1e>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d101      	bne.n	8009188 <mg_tls_send+0x22>
 8009184:	2300      	movs	r3, #0
 8009186:	e001      	b.n	800918c <mg_tls_send+0x26>
 8009188:	f04f 33ff 	mov.w	r3, #4294967295
}
 800918c:	4618      	mov	r0, r3
 800918e:	3714      	adds	r7, #20
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <urlparse>:
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
         strncmp(url, "tls:", 4) == 0;
}

static struct url urlparse(const char *url) {
 8009198:	b5b0      	push	{r4, r5, r7, lr}
 800919a:	b08a      	sub	sp, #40	; 0x28
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
  size_t i;
  struct url u;
  memset(&u, 0, sizeof(u));
 80091a2:	f107 0308 	add.w	r3, r7, #8
 80091a6:	221c      	movs	r2, #28
 80091a8:	2100      	movs	r1, #0
 80091aa:	4618      	mov	r0, r3
 80091ac:	f00a f96f 	bl	801348e <memset>
  for (i = 0; url[i] != '\0'; i++) {
 80091b0:	2300      	movs	r3, #0
 80091b2:	627b      	str	r3, [r7, #36]	; 0x24
 80091b4:	e05b      	b.n	800926e <urlparse+0xd6>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 80091b6:	683a      	ldr	r2, [r7, #0]
 80091b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ba:	4413      	add	r3, r2
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	2b2f      	cmp	r3, #47	; 0x2f
 80091c0:	d112      	bne.n	80091e8 <urlparse+0x50>
 80091c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d00f      	beq.n	80091e8 <urlparse+0x50>
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d10c      	bne.n	80091e8 <urlparse+0x50>
 80091ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d0:	3b01      	subs	r3, #1
 80091d2:	683a      	ldr	r2, [r7, #0]
 80091d4:	4413      	add	r3, r2
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	2b2f      	cmp	r3, #47	; 0x2f
 80091da:	d105      	bne.n	80091e8 <urlparse+0x50>
      u.host = i + 1;
 80091dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091de:	3301      	adds	r3, #1
 80091e0:	617b      	str	r3, [r7, #20]
      u.port = 0;
 80091e2:	2300      	movs	r3, #0
 80091e4:	61bb      	str	r3, [r7, #24]
 80091e6:	e03f      	b.n	8009268 <urlparse+0xd0>
    } else if (url[i] == ']') {
 80091e8:	683a      	ldr	r2, [r7, #0]
 80091ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ec:	4413      	add	r3, r2
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	2b5d      	cmp	r3, #93	; 0x5d
 80091f2:	d102      	bne.n	80091fa <urlparse+0x62>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 80091f4:	2300      	movs	r3, #0
 80091f6:	61bb      	str	r3, [r7, #24]
 80091f8:	e036      	b.n	8009268 <urlparse+0xd0>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 80091fa:	683a      	ldr	r2, [r7, #0]
 80091fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fe:	4413      	add	r3, r2
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	2b3a      	cmp	r3, #58	; 0x3a
 8009204:	d109      	bne.n	800921a <urlparse+0x82>
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d106      	bne.n	800921a <urlparse+0x82>
 800920c:	69fb      	ldr	r3, [r7, #28]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d103      	bne.n	800921a <urlparse+0x82>
      u.port = i + 1;
 8009212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009214:	3301      	adds	r3, #1
 8009216:	61bb      	str	r3, [r7, #24]
 8009218:	e026      	b.n	8009268 <urlparse+0xd0>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 800921a:	683a      	ldr	r2, [r7, #0]
 800921c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921e:	4413      	add	r3, r2
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	2b40      	cmp	r3, #64	; 0x40
 8009224:	d112      	bne.n	800924c <urlparse+0xb4>
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d10f      	bne.n	800924c <urlparse+0xb4>
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d10c      	bne.n	800924c <urlparse+0xb4>
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d109      	bne.n	800924c <urlparse+0xb4>
      u.user = u.host;
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	60fb      	str	r3, [r7, #12]
      u.pass = u.port;
 800923c:	69bb      	ldr	r3, [r7, #24]
 800923e:	613b      	str	r3, [r7, #16]
      u.host = i + 1;
 8009240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009242:	3301      	adds	r3, #1
 8009244:	617b      	str	r3, [r7, #20]
      u.port = 0;
 8009246:	2300      	movs	r3, #0
 8009248:	61bb      	str	r3, [r7, #24]
 800924a:	e00d      	b.n	8009268 <urlparse+0xd0>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 800924c:	683a      	ldr	r2, [r7, #0]
 800924e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009250:	4413      	add	r3, r2
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	2b2f      	cmp	r3, #47	; 0x2f
 8009256:	d107      	bne.n	8009268 <urlparse+0xd0>
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d004      	beq.n	8009268 <urlparse+0xd0>
 800925e:	69fb      	ldr	r3, [r7, #28]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d101      	bne.n	8009268 <urlparse+0xd0>
      u.uri = i;
 8009264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009266:	61fb      	str	r3, [r7, #28]
  for (i = 0; url[i] != '\0'; i++) {
 8009268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926a:	3301      	adds	r3, #1
 800926c:	627b      	str	r3, [r7, #36]	; 0x24
 800926e:	683a      	ldr	r2, [r7, #0]
 8009270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009272:	4413      	add	r3, r2
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d19d      	bne.n	80091b6 <urlparse+0x1e>
    }
  }
  u.end = i;
 800927a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927c:	623b      	str	r3, [r7, #32]
#if 0
  printf("[%s] %d %d %d %d %d\n", url, u.user, u.pass, u.host, u.port, u.uri);
#endif
  return u;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	461d      	mov	r5, r3
 8009282:	f107 0408 	add.w	r4, r7, #8
 8009286:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009288:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800928a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800928e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	3728      	adds	r7, #40	; 0x28
 8009296:	46bd      	mov	sp, r7
 8009298:	bdb0      	pop	{r4, r5, r7, pc}

0800929a <mg_url_host>:

struct mg_str mg_url_host(const char *url) {
 800929a:	b580      	push	{r7, lr}
 800929c:	b08c      	sub	sp, #48	; 0x30
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
 80092a2:	6039      	str	r1, [r7, #0]
  struct url u = urlparse(url);
 80092a4:	f107 0310 	add.w	r3, r7, #16
 80092a8:	6839      	ldr	r1, [r7, #0]
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7ff ff74 	bl	8009198 <urlparse>
  size_t n = u.port  ? u.port - u.host - 1
 80092b0:	6a3b      	ldr	r3, [r7, #32]
             : u.uri ? u.uri - u.host
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d004      	beq.n	80092c0 <mg_url_host+0x26>
  size_t n = u.port  ? u.port - u.host - 1
 80092b6:	6a3a      	ldr	r2, [r7, #32]
 80092b8:	69fb      	ldr	r3, [r7, #28]
 80092ba:	1ad3      	subs	r3, r2, r3
             : u.uri ? u.uri - u.host
 80092bc:	3b01      	subs	r3, #1
 80092be:	e009      	b.n	80092d4 <mg_url_host+0x3a>
 80092c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                     : u.end - u.host;
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d003      	beq.n	80092ce <mg_url_host+0x34>
             : u.uri ? u.uri - u.host
 80092c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092c8:	69fb      	ldr	r3, [r7, #28]
                     : u.end - u.host;
 80092ca:	1ad3      	subs	r3, r2, r3
 80092cc:	e002      	b.n	80092d4 <mg_url_host+0x3a>
 80092ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092d0:	69fb      	ldr	r3, [r7, #28]
 80092d2:	1ad3      	subs	r3, r2, r3
  size_t n = u.port  ? u.port - u.host - 1
 80092d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct mg_str s = mg_str_n(url + u.host, n);
 80092d6:	69fb      	ldr	r3, [r7, #28]
 80092d8:	683a      	ldr	r2, [r7, #0]
 80092da:	18d1      	adds	r1, r2, r3
 80092dc:	f107 0308 	add.w	r3, r7, #8
 80092e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7ff fa5d 	bl	80087a2 <mg_str_n>
  return s;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	461a      	mov	r2, r3
 80092ec:	f107 0308 	add.w	r3, r7, #8
 80092f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80092f4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	3730      	adds	r7, #48	; 0x30
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <mg_url_port>:
const char *mg_url_uri(const char *url) {
  struct url u = urlparse(url);
  return u.uri ? url + u.uri : "/";
}

unsigned short mg_url_port(const char *url) {
 8009300:	b580      	push	{r7, lr}
 8009302:	b08a      	sub	sp, #40	; 0x28
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  struct url u = urlparse(url);
 8009308:	f107 0308 	add.w	r3, r7, #8
 800930c:	6879      	ldr	r1, [r7, #4]
 800930e:	4618      	mov	r0, r3
 8009310:	f7ff ff42 	bl	8009198 <urlparse>
  unsigned short port = 0;
 8009314:	2300      	movs	r3, #0
 8009316:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8009318:	2205      	movs	r2, #5
 800931a:	4925      	ldr	r1, [pc, #148]	; (80093b0 <mg_url_port+0xb0>)
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f00a f8e8 	bl	80134f2 <strncmp>
 8009322:	4603      	mov	r3, r0
 8009324:	2b00      	cmp	r3, #0
 8009326:	d007      	beq.n	8009338 <mg_url_port+0x38>
 8009328:	2203      	movs	r2, #3
 800932a:	4922      	ldr	r1, [pc, #136]	; (80093b4 <mg_url_port+0xb4>)
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f00a f8e0 	bl	80134f2 <strncmp>
 8009332:	4603      	mov	r3, r0
 8009334:	2b00      	cmp	r3, #0
 8009336:	d101      	bne.n	800933c <mg_url_port+0x3c>
 8009338:	2350      	movs	r3, #80	; 0x50
 800933a:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 800933c:	2204      	movs	r2, #4
 800933e:	491e      	ldr	r1, [pc, #120]	; (80093b8 <mg_url_port+0xb8>)
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f00a f8d6 	bl	80134f2 <strncmp>
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d007      	beq.n	800935c <mg_url_port+0x5c>
 800934c:	2206      	movs	r2, #6
 800934e:	491b      	ldr	r1, [pc, #108]	; (80093bc <mg_url_port+0xbc>)
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f00a f8ce 	bl	80134f2 <strncmp>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d102      	bne.n	8009362 <mg_url_port+0x62>
    port = 443;
 800935c:	f240 13bb 	movw	r3, #443	; 0x1bb
 8009360:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 8009362:	2205      	movs	r2, #5
 8009364:	4916      	ldr	r1, [pc, #88]	; (80093c0 <mg_url_port+0xc0>)
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f00a f8c3 	bl	80134f2 <strncmp>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d102      	bne.n	8009378 <mg_url_port+0x78>
 8009372:	f240 735b 	movw	r3, #1883	; 0x75b
 8009376:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 8009378:	2206      	movs	r2, #6
 800937a:	4912      	ldr	r1, [pc, #72]	; (80093c4 <mg_url_port+0xc4>)
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f00a f8b8 	bl	80134f2 <strncmp>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d102      	bne.n	800938e <mg_url_port+0x8e>
 8009388:	f242 23b3 	movw	r3, #8883	; 0x22b3
 800938c:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (u.port) port = (unsigned short) atoi(url + u.port);
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d007      	beq.n	80093a4 <mg_url_port+0xa4>
 8009394:	69bb      	ldr	r3, [r7, #24]
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	4413      	add	r3, r2
 800939a:	4618      	mov	r0, r3
 800939c:	f009 fd6a 	bl	8012e74 <atoi>
 80093a0:	4603      	mov	r3, r0
 80093a2:	84fb      	strh	r3, [r7, #38]	; 0x26
  return port;
 80093a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3728      	adds	r7, #40	; 0x28
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	0801531c 	.word	0x0801531c
 80093b4:	08015324 	.word	0x08015324
 80093b8:	080152f4 	.word	0x080152f4
 80093bc:	080152fc 	.word	0x080152fc
 80093c0:	08015328 	.word	0x08015328
 80093c4:	08015304 	.word	0x08015304

080093c8 <mg_ntohl>:
                          : (char) ('0' + c - 52);     // numeric
  }
  return buf;
}

uint32_t mg_ntohl(uint32_t net) {
 80093c8:	b480      	push	{r7}
 80093ca:	b085      	sub	sp, #20
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 80093d0:	2300      	movs	r3, #0
 80093d2:	60fb      	str	r3, [r7, #12]
 80093d4:	687b      	ldr	r3, [r7, #4]
  memcpy(&data, &net, sizeof(data));
 80093d6:	60fb      	str	r3, [r7, #12]
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 80093d8:	7bfb      	ldrb	r3, [r7, #15]
 80093da:	461a      	mov	r2, r3
 80093dc:	7bbb      	ldrb	r3, [r7, #14]
 80093de:	021b      	lsls	r3, r3, #8
 80093e0:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 80093e2:	7b7b      	ldrb	r3, [r7, #13]
 80093e4:	041b      	lsls	r3, r3, #16
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 80093e6:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 80093e8:	7b3b      	ldrb	r3, [r7, #12]
 80093ea:	061b      	lsls	r3, r3, #24
 80093ec:	4313      	orrs	r3, r2
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3714      	adds	r7, #20
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr

080093fa <mg_ntohs>:

uint16_t mg_ntohs(uint16_t net) {
 80093fa:	b480      	push	{r7}
 80093fc:	b085      	sub	sp, #20
 80093fe:	af00      	add	r7, sp, #0
 8009400:	4603      	mov	r3, r0
 8009402:	80fb      	strh	r3, [r7, #6]
  uint8_t data[2] = {0, 0};
 8009404:	2300      	movs	r3, #0
 8009406:	81bb      	strh	r3, [r7, #12]
 8009408:	88fb      	ldrh	r3, [r7, #6]
  memcpy(&data, &net, sizeof(data));
 800940a:	81bb      	strh	r3, [r7, #12]
  return (uint16_t) ((uint16_t) data[1] | (((uint16_t) data[0]) << 8));
 800940c:	7b7b      	ldrb	r3, [r7, #13]
 800940e:	b21a      	sxth	r2, r3
 8009410:	7b3b      	ldrb	r3, [r7, #12]
 8009412:	021b      	lsls	r3, r3, #8
 8009414:	b21b      	sxth	r3, r3
 8009416:	4313      	orrs	r3, r2
 8009418:	b21b      	sxth	r3, r3
 800941a:	b29b      	uxth	r3, r3
}
 800941c:	4618      	mov	r0, r3
 800941e:	3714      	adds	r7, #20
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <mg_crc32>:

uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 8009428:	b480      	push	{r7}
 800942a:	b087      	sub	sp, #28
 800942c:	af00      	add	r7, sp, #0
 800942e:	60f8      	str	r0, [r7, #12]
 8009430:	60b9      	str	r1, [r7, #8]
 8009432:	607a      	str	r2, [r7, #4]
  static const uint32_t crclut[16] = {
      // table for polynomial 0xEDB88320 (reflected)
      0x00000000, 0x1DB71064, 0x3B6E20C8, 0x26D930AC, 0x76DC4190, 0x6B6B51F4,
      0x4DB26158, 0x5005713C, 0xEDB88320, 0xF00F9344, 0xD6D6A3E8, 0xCB61B38C,
      0x9B64C2B0, 0x86D3D2D4, 0xA00AE278, 0xBDBDF21C};
  crc = ~crc;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	43db      	mvns	r3, r3
 8009438:	60fb      	str	r3, [r7, #12]
  while (len--) {
 800943a:	e01f      	b.n	800947c <mg_crc32+0x54>
    uint8_t byte = *(uint8_t *)buf++;
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	1c5a      	adds	r2, r3, #1
 8009440:	60ba      	str	r2, [r7, #8]
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	75fb      	strb	r3, [r7, #23]
    crc = crclut[(crc ^ byte) & 0x0F] ^ (crc >> 4);
 8009446:	7dfa      	ldrb	r2, [r7, #23]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	4053      	eors	r3, r2
 800944c:	f003 030f 	and.w	r3, r3, #15
 8009450:	4a11      	ldr	r2, [pc, #68]	; (8009498 <mg_crc32+0x70>)
 8009452:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	091b      	lsrs	r3, r3, #4
 800945a:	4053      	eors	r3, r2
 800945c:	60fb      	str	r3, [r7, #12]
    crc = crclut[(crc ^ (byte >> 4)) & 0x0F] ^ (crc >> 4);
 800945e:	7dfb      	ldrb	r3, [r7, #23]
 8009460:	091b      	lsrs	r3, r3, #4
 8009462:	b2db      	uxtb	r3, r3
 8009464:	461a      	mov	r2, r3
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	4053      	eors	r3, r2
 800946a:	f003 030f 	and.w	r3, r3, #15
 800946e:	4a0a      	ldr	r2, [pc, #40]	; (8009498 <mg_crc32+0x70>)
 8009470:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	091b      	lsrs	r3, r3, #4
 8009478:	4053      	eors	r3, r2
 800947a:	60fb      	str	r3, [r7, #12]
  while (len--) {
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	1e5a      	subs	r2, r3, #1
 8009480:	607a      	str	r2, [r7, #4]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d1da      	bne.n	800943c <mg_crc32+0x14>
  }
  return ~crc;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	43db      	mvns	r3, r3
}
 800948a:	4618      	mov	r0, r3
 800948c:	371c      	adds	r7, #28
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr
 8009496:	bf00      	nop
 8009498:	08016290 	.word	0x08016290

0800949c <eth_read_phy>:
  PHY_BCR = 0,
  PHY_BSR = 1,
  PHY_CSCR = 31
};  // PHY constants

static uint32_t eth_read_phy(uint8_t addr, uint8_t reg) {
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	4603      	mov	r3, r0
 80094a4:	460a      	mov	r2, r1
 80094a6:	71fb      	strb	r3, [r7, #7]
 80094a8:	4613      	mov	r3, r2
 80094aa:	71bb      	strb	r3, [r7, #6]
  ETH->MACMDIOAR &= (0xF << 8);
 80094ac:	4b17      	ldr	r3, [pc, #92]	; (800950c <eth_read_phy+0x70>)
 80094ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80094b2:	4a16      	ldr	r2, [pc, #88]	; (800950c <eth_read_phy+0x70>)
 80094b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80094b8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  ETH->MACMDIOAR |= ((uint32_t) addr << 21) | ((uint32_t) reg << 16) | 3 << 2;
 80094bc:	4b13      	ldr	r3, [pc, #76]	; (800950c <eth_read_phy+0x70>)
 80094be:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80094c2:	79fb      	ldrb	r3, [r7, #7]
 80094c4:	0559      	lsls	r1, r3, #21
 80094c6:	79bb      	ldrb	r3, [r7, #6]
 80094c8:	041b      	lsls	r3, r3, #16
 80094ca:	430b      	orrs	r3, r1
 80094cc:	4313      	orrs	r3, r2
 80094ce:	4a0f      	ldr	r2, [pc, #60]	; (800950c <eth_read_phy+0x70>)
 80094d0:	f043 030c 	orr.w	r3, r3, #12
 80094d4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  ETH->MACMDIOAR |= BIT(0);
 80094d8:	4b0c      	ldr	r3, [pc, #48]	; (800950c <eth_read_phy+0x70>)
 80094da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80094de:	4a0b      	ldr	r2, [pc, #44]	; (800950c <eth_read_phy+0x70>)
 80094e0:	f043 0301 	orr.w	r3, r3, #1
 80094e4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  while (ETH->MACMDIOAR & BIT(0)) (void) 0;
 80094e8:	bf00      	nop
 80094ea:	4b08      	ldr	r3, [pc, #32]	; (800950c <eth_read_phy+0x70>)
 80094ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80094f0:	f003 0301 	and.w	r3, r3, #1
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d1f8      	bne.n	80094ea <eth_read_phy+0x4e>
  return ETH->MACMDIODR;
 80094f8:	4b04      	ldr	r3, [pc, #16]	; (800950c <eth_read_phy+0x70>)
 80094fa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
}
 80094fe:	4618      	mov	r0, r3
 8009500:	370c      	adds	r7, #12
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	40028000 	.word	0x40028000

08009510 <eth_write_phy>:

static void eth_write_phy(uint8_t addr, uint8_t reg, uint32_t val) {
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	4603      	mov	r3, r0
 8009518:	603a      	str	r2, [r7, #0]
 800951a:	71fb      	strb	r3, [r7, #7]
 800951c:	460b      	mov	r3, r1
 800951e:	71bb      	strb	r3, [r7, #6]
  ETH->MACMDIODR = val;
 8009520:	4a18      	ldr	r2, [pc, #96]	; (8009584 <eth_write_phy+0x74>)
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
  ETH->MACMDIOAR &= (0xF << 8);
 8009528:	4b16      	ldr	r3, [pc, #88]	; (8009584 <eth_write_phy+0x74>)
 800952a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800952e:	4a15      	ldr	r2, [pc, #84]	; (8009584 <eth_write_phy+0x74>)
 8009530:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009534:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  ETH->MACMDIOAR |= ((uint32_t) addr << 21) | ((uint32_t) reg << 16) | 1 << 2;
 8009538:	4b12      	ldr	r3, [pc, #72]	; (8009584 <eth_write_phy+0x74>)
 800953a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800953e:	79fb      	ldrb	r3, [r7, #7]
 8009540:	0559      	lsls	r1, r3, #21
 8009542:	79bb      	ldrb	r3, [r7, #6]
 8009544:	041b      	lsls	r3, r3, #16
 8009546:	430b      	orrs	r3, r1
 8009548:	4313      	orrs	r3, r2
 800954a:	4a0e      	ldr	r2, [pc, #56]	; (8009584 <eth_write_phy+0x74>)
 800954c:	f043 0304 	orr.w	r3, r3, #4
 8009550:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  ETH->MACMDIOAR |= BIT(0);
 8009554:	4b0b      	ldr	r3, [pc, #44]	; (8009584 <eth_write_phy+0x74>)
 8009556:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800955a:	4a0a      	ldr	r2, [pc, #40]	; (8009584 <eth_write_phy+0x74>)
 800955c:	f043 0301 	orr.w	r3, r3, #1
 8009560:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  while (ETH->MACMDIOAR & BIT(0)) (void) 0;
 8009564:	bf00      	nop
 8009566:	4b07      	ldr	r3, [pc, #28]	; (8009584 <eth_write_phy+0x74>)
 8009568:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800956c:	f003 0301 	and.w	r3, r3, #1
 8009570:	2b00      	cmp	r3, #0
 8009572:	d1f8      	bne.n	8009566 <eth_write_phy+0x56>
}
 8009574:	bf00      	nop
 8009576:	bf00      	nop
 8009578:	370c      	adds	r7, #12
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr
 8009582:	bf00      	nop
 8009584:	40028000 	.word	0x40028000

08009588 <get_hclk>:

static uint32_t get_hclk(void) {
 8009588:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800958c:	b091      	sub	sp, #68	; 0x44
 800958e:	af00      	add	r7, sp, #0
        APB1HRSTR, APB2RSTR, APB4RSTR, GCR, RESERVED8, D3AMR, RESERVED11[9],
        RSR, AHB3ENR, AHB1ENR, AHB2ENR, AHB4ENR, APB3ENR, APB1LENR, APB1HENR,
        APB2ENR, APB4ENR, RESERVED12, AHB3LPENR, AHB1LPENR, AHB2LPENR,
        AHB4LPENR, APB3LPENR, APB1LLPENR, APB1HLPENR, APB2LPENR, APB4LPENR,
        RESERVED13[4];
  } *rcc = ((struct rcc *) (0x40000000 + 0x18020000 + 0x4400));
 8009590:	4e60      	ldr	r6, [pc, #384]	; (8009714 <get_hclk+0x18c>)
 8009592:	63be      	str	r6, [r7, #56]	; 0x38
  uint32_t clk = 0, hsi = 64000000 /* 64 MHz */, hse = 8000000 /* 8MHz */,
 8009594:	2600      	movs	r6, #0
 8009596:	63fe      	str	r6, [r7, #60]	; 0x3c
 8009598:	4e5f      	ldr	r6, [pc, #380]	; (8009718 <get_hclk+0x190>)
 800959a:	637e      	str	r6, [r7, #52]	; 0x34
 800959c:	4e5f      	ldr	r6, [pc, #380]	; (800971c <get_hclk+0x194>)
 800959e:	633e      	str	r6, [r7, #48]	; 0x30
           csi = 4000000 /* 4MHz */;
 80095a0:	4e5f      	ldr	r6, [pc, #380]	; (8009720 <get_hclk+0x198>)
 80095a2:	62fe      	str	r6, [r7, #44]	; 0x2c
  unsigned int sel = (rcc->CFGR & (7 << 3)) >> 3;
 80095a4:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 80095a6:	6936      	ldr	r6, [r6, #16]
 80095a8:	08f6      	lsrs	r6, r6, #3
 80095aa:	f006 0607 	and.w	r6, r6, #7
 80095ae:	62be      	str	r6, [r7, #40]	; 0x28

  if (sel == 1) {
 80095b0:	6abe      	ldr	r6, [r7, #40]	; 0x28
 80095b2:	2e01      	cmp	r6, #1
 80095b4:	d102      	bne.n	80095bc <get_hclk+0x34>
    clk = csi;
 80095b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095ba:	e068      	b.n	800968e <get_hclk+0x106>
  } else if (sel == 2) {
 80095bc:	6abe      	ldr	r6, [r7, #40]	; 0x28
 80095be:	2e02      	cmp	r6, #2
 80095c0:	d102      	bne.n	80095c8 <get_hclk+0x40>
    clk = hse;
 80095c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095c6:	e062      	b.n	800968e <get_hclk+0x106>
  } else if (sel == 3) {
 80095c8:	6abe      	ldr	r6, [r7, #40]	; 0x28
 80095ca:	2e03      	cmp	r6, #3
 80095cc:	d157      	bne.n	800967e <get_hclk+0xf6>
    uint32_t vco, m, n, p;
    unsigned int src = (rcc->PLLCKSELR & (3 << 0)) >> 0;
 80095ce:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 80095d0:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 80095d2:	f006 0603 	and.w	r6, r6, #3
 80095d6:	627e      	str	r6, [r7, #36]	; 0x24
    m = ((rcc->PLLCKSELR & (0x3F << 4)) >> 4);
 80095d8:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 80095da:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 80095dc:	0936      	lsrs	r6, r6, #4
 80095de:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 80095e2:	623e      	str	r6, [r7, #32]
    n = ((rcc->PLL1DIVR & (0x1FF << 0)) >> 0) + 1 +
 80095e4:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 80095e6:	6b36      	ldr	r6, [r6, #48]	; 0x30
 80095e8:	f3c6 0c08 	ubfx	ip, r6, #0, #9
        ((rcc->PLLCFGR & BIT(0)) ? 1 : 0);  // round-up in fractional mode
 80095ec:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 80095ee:	6af6      	ldr	r6, [r6, #44]	; 0x2c
 80095f0:	f006 0601 	and.w	r6, r6, #1
    n = ((rcc->PLL1DIVR & (0x1FF << 0)) >> 0) + 1 +
 80095f4:	4466      	add	r6, ip
 80095f6:	3601      	adds	r6, #1
 80095f8:	61fe      	str	r6, [r7, #28]
    p = ((rcc->PLL1DIVR & (0x7F << 9)) >> 9) + 1;
 80095fa:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 80095fc:	6b36      	ldr	r6, [r6, #48]	; 0x30
 80095fe:	0a76      	lsrs	r6, r6, #9
 8009600:	f006 067f 	and.w	r6, r6, #127	; 0x7f
 8009604:	3601      	adds	r6, #1
 8009606:	61be      	str	r6, [r7, #24]
    if (src == 1) {
 8009608:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800960a:	2e01      	cmp	r6, #1
 800960c:	d102      	bne.n	8009614 <get_hclk+0x8c>
      clk = csi;
 800960e:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 8009610:	63fe      	str	r6, [r7, #60]	; 0x3c
 8009612:	e00f      	b.n	8009634 <get_hclk+0xac>
    } else if (src == 2) {
 8009614:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8009616:	2e02      	cmp	r6, #2
 8009618:	d102      	bne.n	8009620 <get_hclk+0x98>
      clk = hse;
 800961a:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 800961c:	63fe      	str	r6, [r7, #60]	; 0x3c
 800961e:	e009      	b.n	8009634 <get_hclk+0xac>
    } else {
      clk = hsi;
 8009620:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 8009622:	63fe      	str	r6, [r7, #60]	; 0x3c
      clk >>= ((rcc->CR & 3) >> 3);
 8009624:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 8009626:	6836      	ldr	r6, [r6, #0]
 8009628:	f04f 0c00 	mov.w	ip, #0
 800962c:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 800962e:	fa26 f60c 	lsr.w	r6, r6, ip
 8009632:	63fe      	str	r6, [r7, #60]	; 0x3c
    }
    vco = (uint32_t) ((uint64_t) clk * n / m);
 8009634:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 8009636:	f04f 0c00 	mov.w	ip, #0
 800963a:	4634      	mov	r4, r6
 800963c:	4665      	mov	r5, ip
 800963e:	69fe      	ldr	r6, [r7, #28]
 8009640:	f04f 0c00 	mov.w	ip, #0
 8009644:	4632      	mov	r2, r6
 8009646:	4663      	mov	r3, ip
 8009648:	fb02 fc05 	mul.w	ip, r2, r5
 800964c:	fb04 f603 	mul.w	r6, r4, r3
 8009650:	4466      	add	r6, ip
 8009652:	fba4 0102 	umull	r0, r1, r4, r2
 8009656:	1873      	adds	r3, r6, r1
 8009658:	4619      	mov	r1, r3
 800965a:	6a3b      	ldr	r3, [r7, #32]
 800965c:	2200      	movs	r2, #0
 800965e:	4698      	mov	r8, r3
 8009660:	4691      	mov	r9, r2
 8009662:	4642      	mov	r2, r8
 8009664:	464b      	mov	r3, r9
 8009666:	f7f7 f8c7 	bl	80007f8 <__aeabi_uldivmod>
 800966a:	4602      	mov	r2, r0
 800966c:	460b      	mov	r3, r1
 800966e:	4613      	mov	r3, r2
 8009670:	617b      	str	r3, [r7, #20]
    clk = vco / p;
 8009672:	697a      	ldr	r2, [r7, #20]
 8009674:	69bb      	ldr	r3, [r7, #24]
 8009676:	fbb2 f3f3 	udiv	r3, r2, r3
 800967a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800967c:	e007      	b.n	800968e <get_hclk+0x106>
  } else {
    clk = hsi;
 800967e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009680:	63fb      	str	r3, [r7, #60]	; 0x3c
    clk >>= ((rcc->CR & 3) >> 3);
 8009682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	2200      	movs	r2, #0
 8009688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800968a:	40d3      	lsrs	r3, r2
 800968c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  const uint8_t cptab[12] = {1, 2, 3, 4, 6, 7, 8, 9};  // log2(div)
 800968e:	4a25      	ldr	r2, [pc, #148]	; (8009724 <get_hclk+0x19c>)
 8009690:	463b      	mov	r3, r7
 8009692:	ca07      	ldmia	r2, {r0, r1, r2}
 8009694:	c303      	stmia	r3!, {r0, r1}
 8009696:	701a      	strb	r2, [r3, #0]
 8009698:	f107 0309 	add.w	r3, r7, #9
 800969c:	2200      	movs	r2, #0
 800969e:	801a      	strh	r2, [r3, #0]
 80096a0:	709a      	strb	r2, [r3, #2]
  uint32_t d1cpre = (rcc->D1CFGR & (0x0F << 8)) >> 8;
 80096a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a4:	699b      	ldr	r3, [r3, #24]
 80096a6:	0a1b      	lsrs	r3, r3, #8
 80096a8:	f003 030f 	and.w	r3, r3, #15
 80096ac:	613b      	str	r3, [r7, #16]
  if (d1cpre >= 8) clk >>= cptab[d1cpre - 8];
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	2b07      	cmp	r3, #7
 80096b2:	d909      	bls.n	80096c8 <get_hclk+0x140>
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	3b08      	subs	r3, #8
 80096b8:	3340      	adds	r3, #64	; 0x40
 80096ba:	443b      	add	r3, r7
 80096bc:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 80096c0:	461a      	mov	r2, r3
 80096c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096c4:	40d3      	lsrs	r3, r2
 80096c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  MG_DEBUG(("D1 CLK: %u", clk));
 80096c8:	4b17      	ldr	r3, [pc, #92]	; (8009728 <get_hclk+0x1a0>)
 80096ca:	f641 3278 	movw	r2, #7032	; 0x1b78
 80096ce:	4917      	ldr	r1, [pc, #92]	; (800972c <get_hclk+0x1a4>)
 80096d0:	2003      	movs	r0, #3
 80096d2:	f7fd fc3b 	bl	8006f4c <mg_log_prefix>
 80096d6:	4603      	mov	r3, r0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d003      	beq.n	80096e4 <get_hclk+0x15c>
 80096dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80096de:	4814      	ldr	r0, [pc, #80]	; (8009730 <get_hclk+0x1a8>)
 80096e0:	f7fd fc8e 	bl	8007000 <mg_log>
  uint32_t hpre = (rcc->D1CFGR & (0x0F << 0)) >> 0;
 80096e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e6:	699b      	ldr	r3, [r3, #24]
 80096e8:	f003 030f 	and.w	r3, r3, #15
 80096ec:	60fb      	str	r3, [r7, #12]
  if (hpre < 8) return clk;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2b07      	cmp	r3, #7
 80096f2:	d801      	bhi.n	80096f8 <get_hclk+0x170>
 80096f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096f6:	e008      	b.n	800970a <get_hclk+0x182>
  return ((uint32_t) clk) >> cptab[hpre - 8];
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	3b08      	subs	r3, #8
 80096fc:	3340      	adds	r3, #64	; 0x40
 80096fe:	443b      	add	r3, r7
 8009700:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8009704:	461a      	mov	r2, r3
 8009706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009708:	40d3      	lsrs	r3, r2
}
 800970a:	4618      	mov	r0, r3
 800970c:	3744      	adds	r7, #68	; 0x44
 800970e:	46bd      	mov	sp, r7
 8009710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009714:	58024400 	.word	0x58024400
 8009718:	03d09000 	.word	0x03d09000
 800971c:	007a1200 	.word	0x007a1200
 8009720:	003d0900 	.word	0x003d0900
 8009724:	08015530 	.word	0x08015530
 8009728:	080162d0 	.word	0x080162d0
 800972c:	08014270 	.word	0x08014270
 8009730:	08015524 	.word	0x08015524

08009734 <guess_mdc_cr>:
//  series of dividers to keep the MDC clock safely below 2.5MHz. We guess a
//  divider setting based on HCLK with some drift. If the user uses a different
//  clock from our defaults, needs to set the macros on top. Valid for
//  STM32H74xxx/75xxx (58.11.4)(4.5% worst case drift)(CSI clock has a 7.5 %
//  worst case drift @ max temp)
static int guess_mdc_cr(void) {
 8009734:	b580      	push	{r7, lr}
 8009736:	b088      	sub	sp, #32
 8009738:	af00      	add	r7, sp, #0
  const uint8_t crs[] = {2, 3, 0, 1, 4, 5};  // ETH->MACMDIOAR::CR values
 800973a:	4a2a      	ldr	r2, [pc, #168]	; (80097e4 <guess_mdc_cr+0xb0>)
 800973c:	f107 030c 	add.w	r3, r7, #12
 8009740:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009744:	6018      	str	r0, [r3, #0]
 8009746:	3304      	adds	r3, #4
 8009748:	8019      	strh	r1, [r3, #0]
  const uint8_t div[] = {16, 26, 42, 62, 102, 124};  // Respective HCLK dividers
 800974a:	4a27      	ldr	r2, [pc, #156]	; (80097e8 <guess_mdc_cr+0xb4>)
 800974c:	1d3b      	adds	r3, r7, #4
 800974e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009752:	6018      	str	r0, [r3, #0]
 8009754:	3304      	adds	r3, #4
 8009756:	8019      	strh	r1, [r3, #0]
  uint32_t hclk = get_hclk();                        // Guess system HCLK
 8009758:	f7ff ff16 	bl	8009588 <get_hclk>
 800975c:	6178      	str	r0, [r7, #20]
  int result = -1;                                   // Invalid CR value
 800975e:	f04f 33ff 	mov.w	r3, #4294967295
 8009762:	61fb      	str	r3, [r7, #28]
  for (int i = 0; i < 6; i++) {
 8009764:	2300      	movs	r3, #0
 8009766:	61bb      	str	r3, [r7, #24]
 8009768:	e014      	b.n	8009794 <guess_mdc_cr+0x60>
    if (hclk / div[i] <= 2375000UL /* 2.5MHz - 5% */) {
 800976a:	1d3a      	adds	r2, r7, #4
 800976c:	69bb      	ldr	r3, [r7, #24]
 800976e:	4413      	add	r3, r2
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	461a      	mov	r2, r3
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	fbb3 f3f2 	udiv	r3, r3, r2
 800977a:	4a1c      	ldr	r2, [pc, #112]	; (80097ec <guess_mdc_cr+0xb8>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d806      	bhi.n	800978e <guess_mdc_cr+0x5a>
      result = crs[i];
 8009780:	f107 020c 	add.w	r2, r7, #12
 8009784:	69bb      	ldr	r3, [r7, #24]
 8009786:	4413      	add	r3, r2
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	61fb      	str	r3, [r7, #28]
      break;
 800978c:	e005      	b.n	800979a <guess_mdc_cr+0x66>
  for (int i = 0; i < 6; i++) {
 800978e:	69bb      	ldr	r3, [r7, #24]
 8009790:	3301      	adds	r3, #1
 8009792:	61bb      	str	r3, [r7, #24]
 8009794:	69bb      	ldr	r3, [r7, #24]
 8009796:	2b05      	cmp	r3, #5
 8009798:	dde7      	ble.n	800976a <guess_mdc_cr+0x36>
    }
  }
  if (result < 0) MG_ERROR(("HCLK too high"));
 800979a:	69fb      	ldr	r3, [r7, #28]
 800979c:	2b00      	cmp	r3, #0
 800979e:	da0c      	bge.n	80097ba <guess_mdc_cr+0x86>
 80097a0:	4b13      	ldr	r3, [pc, #76]	; (80097f0 <guess_mdc_cr+0xbc>)
 80097a2:	f641 3292 	movw	r2, #7058	; 0x1b92
 80097a6:	4913      	ldr	r1, [pc, #76]	; (80097f4 <guess_mdc_cr+0xc0>)
 80097a8:	2001      	movs	r0, #1
 80097aa:	f7fd fbcf 	bl	8006f4c <mg_log_prefix>
 80097ae:	4603      	mov	r3, r0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d002      	beq.n	80097ba <guess_mdc_cr+0x86>
 80097b4:	4810      	ldr	r0, [pc, #64]	; (80097f8 <guess_mdc_cr+0xc4>)
 80097b6:	f7fd fc23 	bl	8007000 <mg_log>
  MG_DEBUG(("HCLK: %u, CR: %d", hclk, result));
 80097ba:	4b0d      	ldr	r3, [pc, #52]	; (80097f0 <guess_mdc_cr+0xbc>)
 80097bc:	f641 3293 	movw	r2, #7059	; 0x1b93
 80097c0:	490c      	ldr	r1, [pc, #48]	; (80097f4 <guess_mdc_cr+0xc0>)
 80097c2:	2003      	movs	r0, #3
 80097c4:	f7fd fbc2 	bl	8006f4c <mg_log_prefix>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d004      	beq.n	80097d8 <guess_mdc_cr+0xa4>
 80097ce:	69fa      	ldr	r2, [r7, #28]
 80097d0:	6979      	ldr	r1, [r7, #20]
 80097d2:	480a      	ldr	r0, [pc, #40]	; (80097fc <guess_mdc_cr+0xc8>)
 80097d4:	f7fd fc14 	bl	8007000 <mg_log>
  return result;
 80097d8:	69fb      	ldr	r3, [r7, #28]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3720      	adds	r7, #32
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	08015560 	.word	0x08015560
 80097e8:	08015568 	.word	0x08015568
 80097ec:	00243d58 	.word	0x00243d58
 80097f0:	080162dc 	.word	0x080162dc
 80097f4:	08014270 	.word	0x08014270
 80097f8:	0801553c 	.word	0x0801553c
 80097fc:	0801554c 	.word	0x0801554c

08009800 <mg_tcpip_driver_stm32h_init>:

static bool mg_tcpip_driver_stm32h_init(struct mg_tcpip_if *ifp) {
 8009800:	b580      	push	{r7, lr}
 8009802:	b086      	sub	sp, #24
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_driver_stm32h_data *d =
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980c:	60fb      	str	r3, [r7, #12]
      (struct mg_tcpip_driver_stm32h_data *) ifp->driver_data;
  s_ifp = ifp;
 800980e:	4a82      	ldr	r2, [pc, #520]	; (8009a18 <mg_tcpip_driver_stm32h_init+0x218>)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6013      	str	r3, [r2, #0]

  // Init RX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8009814:	2300      	movs	r3, #0
 8009816:	617b      	str	r3, [r7, #20]
 8009818:	e017      	b.n	800984a <mg_tcpip_driver_stm32h_init+0x4a>
    s_rxdesc[i][0] = (uint32_t) (uintptr_t) s_rxbuf[i];  // Point to data buffer
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	f240 6204 	movw	r2, #1540	; 0x604
 8009820:	fb02 f303 	mul.w	r3, r2, r3
 8009824:	4a7d      	ldr	r2, [pc, #500]	; (8009a1c <mg_tcpip_driver_stm32h_init+0x21c>)
 8009826:	4413      	add	r3, r2
 8009828:	4619      	mov	r1, r3
 800982a:	4a7d      	ldr	r2, [pc, #500]	; (8009a20 <mg_tcpip_driver_stm32h_init+0x220>)
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	011b      	lsls	r3, r3, #4
 8009830:	4413      	add	r3, r2
 8009832:	6019      	str	r1, [r3, #0]
    s_rxdesc[i][3] = BIT(31) | BIT(30) | BIT(24);        // OWN, IOC, BUF1V
 8009834:	4a7a      	ldr	r2, [pc, #488]	; (8009a20 <mg_tcpip_driver_stm32h_init+0x220>)
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	011b      	lsls	r3, r3, #4
 800983a:	4413      	add	r3, r2
 800983c:	330c      	adds	r3, #12
 800983e:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8009842:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	3301      	adds	r3, #1
 8009848:	617b      	str	r3, [r7, #20]
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	2b03      	cmp	r3, #3
 800984e:	dde4      	ble.n	800981a <mg_tcpip_driver_stm32h_init+0x1a>
  }

  // Init TX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8009850:	2300      	movs	r3, #0
 8009852:	613b      	str	r3, [r7, #16]
 8009854:	e00f      	b.n	8009876 <mg_tcpip_driver_stm32h_init+0x76>
    s_txdesc[i][0] = (uint32_t) (uintptr_t) s_txbuf[i];  // Buf pointer
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	f240 6204 	movw	r2, #1540	; 0x604
 800985c:	fb02 f303 	mul.w	r3, r2, r3
 8009860:	4a70      	ldr	r2, [pc, #448]	; (8009a24 <mg_tcpip_driver_stm32h_init+0x224>)
 8009862:	4413      	add	r3, r2
 8009864:	4619      	mov	r1, r3
 8009866:	4a70      	ldr	r2, [pc, #448]	; (8009a28 <mg_tcpip_driver_stm32h_init+0x228>)
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	011b      	lsls	r3, r3, #4
 800986c:	4413      	add	r3, r2
 800986e:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	3301      	adds	r3, #1
 8009874:	613b      	str	r3, [r7, #16]
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	2b03      	cmp	r3, #3
 800987a:	ddec      	ble.n	8009856 <mg_tcpip_driver_stm32h_init+0x56>
  }

  ETH->DMAMR |= BIT(0);                         // Software reset
 800987c:	4b6b      	ldr	r3, [pc, #428]	; (8009a2c <mg_tcpip_driver_stm32h_init+0x22c>)
 800987e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a69      	ldr	r2, [pc, #420]	; (8009a2c <mg_tcpip_driver_stm32h_init+0x22c>)
 8009886:	f043 0301 	orr.w	r3, r3, #1
 800988a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800988e:	6013      	str	r3, [r2, #0]
  while ((ETH->DMAMR & BIT(0)) != 0) (void) 0;  // Wait until done
 8009890:	bf00      	nop
 8009892:	4b66      	ldr	r3, [pc, #408]	; (8009a2c <mg_tcpip_driver_stm32h_init+0x22c>)
 8009894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f003 0301 	and.w	r3, r3, #1
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d1f7      	bne.n	8009892 <mg_tcpip_driver_stm32h_init+0x92>

  // Set MDC clock divider. If user told us the value, use it. Otherwise, guess
  int cr = (d == NULL || d->mdc_cr < 0) ? guess_mdc_cr() : d->mdc_cr;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d003      	beq.n	80098b0 <mg_tcpip_driver_stm32h_init+0xb0>
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	da03      	bge.n	80098b8 <mg_tcpip_driver_stm32h_init+0xb8>
 80098b0:	f7ff ff40 	bl	8009734 <guess_mdc_cr>
 80098b4:	4603      	mov	r3, r0
 80098b6:	e001      	b.n	80098bc <mg_tcpip_driver_stm32h_init+0xbc>
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	60bb      	str	r3, [r7, #8]
  ETH->MACMDIOAR = ((uint32_t) cr & 0xF) << 8;
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	021b      	lsls	r3, r3, #8
 80098c2:	4a5a      	ldr	r2, [pc, #360]	; (8009a2c <mg_tcpip_driver_stm32h_init+0x22c>)
 80098c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80098c8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  // NOTE(scaprile): We do not use timing facilities so the DMA engine does not
  // re-write buffer address
  ETH->DMAMR = 0 << 16;     // use interrupt mode 0 (58.8.1) (reset value)
 80098cc:	4b57      	ldr	r3, [pc, #348]	; (8009a2c <mg_tcpip_driver_stm32h_init+0x22c>)
 80098ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098d2:	461a      	mov	r2, r3
 80098d4:	2300      	movs	r3, #0
 80098d6:	6013      	str	r3, [r2, #0]
  ETH->DMASBMR |= BIT(12);  // AAL NOTE(scaprile): is this actually needed
 80098d8:	4b54      	ldr	r3, [pc, #336]	; (8009a2c <mg_tcpip_driver_stm32h_init+0x22c>)
 80098da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	4a52      	ldr	r2, [pc, #328]	; (8009a2c <mg_tcpip_driver_stm32h_init+0x22c>)
 80098e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80098e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80098ea:	6053      	str	r3, [r2, #4]
  ETH->MACIER = 0;        // Do not enable additional irq sources (reset value)
 80098ec:	4b4f      	ldr	r3, [pc, #316]	; (8009a2c <mg_tcpip_driver_stm32h_init+0x22c>)
 80098ee:	2200      	movs	r2, #0
 80098f0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  ETH->MACTFCR = BIT(7);  // Disable zero-quanta pause
 80098f4:	4b4d      	ldr	r3, [pc, #308]	; (8009a2c <mg_tcpip_driver_stm32h_init+0x22c>)
 80098f6:	2280      	movs	r2, #128	; 0x80
 80098f8:	671a      	str	r2, [r3, #112]	; 0x70
  // ETH->MACPFR = BIT(31);  // Receive all
  eth_write_phy(PHY_ADDR, PHY_BCR, BIT(15));  // Reset PHY
 80098fa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80098fe:	2100      	movs	r1, #0
 8009900:	2000      	movs	r0, #0
 8009902:	f7ff fe05 	bl	8009510 <eth_write_phy>
  eth_write_phy(PHY_ADDR, PHY_BCR, BIT(12));  // Set autonegotiation
 8009906:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800990a:	2100      	movs	r1, #0
 800990c:	2000      	movs	r0, #0
 800990e:	f7ff fdff 	bl	8009510 <eth_write_phy>
  ETH->DMACRDLAR =
 8009912:	4a46      	ldr	r2, [pc, #280]	; (8009a2c <mg_tcpip_driver_stm32h_init+0x22c>)
      (uint32_t) (uintptr_t) s_rxdesc;  // RX descriptors start address
 8009914:	4b42      	ldr	r3, [pc, #264]	; (8009a20 <mg_tcpip_driver_stm32h_init+0x220>)
  ETH->DMACRDLAR =
 8009916:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800991a:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
  ETH->DMACRDRLR = ETH_DESC_CNT - 1;    // ring length
 800991e:	4b43      	ldr	r3, [pc, #268]	; (8009a2c <mg_tcpip_driver_stm32h_init+0x22c>)
 8009920:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009924:	461a      	mov	r2, r3
 8009926:	2303      	movs	r3, #3
 8009928:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
  ETH->DMACRDTPR =
 800992c:	4a3f      	ldr	r2, [pc, #252]	; (8009a2c <mg_tcpip_driver_stm32h_init+0x22c>)
      (uint32_t) (uintptr_t) &s_rxdesc[ETH_DESC_CNT -
 800992e:	4b40      	ldr	r3, [pc, #256]	; (8009a30 <mg_tcpip_driver_stm32h_init+0x230>)
  ETH->DMACRDTPR =
 8009930:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009934:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
                                       1];  // last valid descriptor address
  ETH->DMACTDLAR =
 8009938:	4a3c      	ldr	r2, [pc, #240]	; (8009a2c <mg_tcpip_driver_stm32h_init+0x22c>)
      (uint32_t) (uintptr_t) s_txdesc;  // TX descriptors start address
 800993a:	4b3b      	ldr	r3, [pc, #236]	; (8009a28 <mg_tcpip_driver_stm32h_init+0x228>)
  ETH->DMACTDLAR =
 800993c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009940:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
  ETH->DMACTDRLR = ETH_DESC_CNT - 1;    // ring length
 8009944:	4b39      	ldr	r3, [pc, #228]	; (8009a2c <mg_tcpip_driver_stm32h_init+0x22c>)
 8009946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800994a:	461a      	mov	r2, r3
 800994c:	2303      	movs	r3, #3
 800994e:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
  ETH->DMACTDTPR =
 8009952:	4a36      	ldr	r2, [pc, #216]	; (8009a2c <mg_tcpip_driver_stm32h_init+0x22c>)
      (uint32_t) (uintptr_t) s_txdesc;  // first available descriptor address
 8009954:	4b34      	ldr	r3, [pc, #208]	; (8009a28 <mg_tcpip_driver_stm32h_init+0x228>)
  ETH->DMACTDTPR =
 8009956:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800995a:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
  ETH->DMACCR = 0;  // DSL = 0 (contiguous descriptor table) (reset value)
 800995e:	4b33      	ldr	r3, [pc, #204]	; (8009a2c <mg_tcpip_driver_stm32h_init+0x22c>)
 8009960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009964:	461a      	mov	r2, r3
 8009966:	2300      	movs	r3, #0
 8009968:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
  ETH->DMACIER = BIT(6) | BIT(15);  // RIE, NIE
 800996c:	4b2f      	ldr	r3, [pc, #188]	; (8009a2c <mg_tcpip_driver_stm32h_init+0x22c>)
 800996e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009972:	461a      	mov	r2, r3
 8009974:	f248 0340 	movw	r3, #32832	; 0x8040
 8009978:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
  ETH->MACCR = BIT(0) | BIT(1) | BIT(13) | BIT(14) |
 800997c:	4b2b      	ldr	r3, [pc, #172]	; (8009a2c <mg_tcpip_driver_stm32h_init+0x22c>)
 800997e:	f24e 0203 	movw	r2, #57347	; 0xe003
 8009982:	601a      	str	r2, [r3, #0]
               BIT(15);     // RE, TE, Duplex, Fast, Reserved
  ETH->MTLTQOMR |= BIT(1);  // TSF
 8009984:	4b29      	ldr	r3, [pc, #164]	; (8009a2c <mg_tcpip_driver_stm32h_init+0x22c>)
 8009986:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800998a:	4a28      	ldr	r2, [pc, #160]	; (8009a2c <mg_tcpip_driver_stm32h_init+0x22c>)
 800998c:	f043 0302 	orr.w	r3, r3, #2
 8009990:	f8c2 3d00 	str.w	r3, [r2, #3328]	; 0xd00
  ETH->MTLRQOMR |= BIT(5);  // RSF
 8009994:	4b25      	ldr	r3, [pc, #148]	; (8009a2c <mg_tcpip_driver_stm32h_init+0x22c>)
 8009996:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800999a:	4a24      	ldr	r2, [pc, #144]	; (8009a2c <mg_tcpip_driver_stm32h_init+0x22c>)
 800999c:	f043 0320 	orr.w	r3, r3, #32
 80099a0:	f8c2 3d30 	str.w	r3, [r2, #3376]	; 0xd30
  ETH->DMACTCR |= BIT(0);   // ST
 80099a4:	4b21      	ldr	r3, [pc, #132]	; (8009a2c <mg_tcpip_driver_stm32h_init+0x22c>)
 80099a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099aa:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80099ae:	4a1f      	ldr	r2, [pc, #124]	; (8009a2c <mg_tcpip_driver_stm32h_init+0x22c>)
 80099b0:	f043 0301 	orr.w	r3, r3, #1
 80099b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80099b8:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
  ETH->DMACRCR |= BIT(0);   // SR
 80099bc:	4b1b      	ldr	r3, [pc, #108]	; (8009a2c <mg_tcpip_driver_stm32h_init+0x22c>)
 80099be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80099c6:	4a19      	ldr	r2, [pc, #100]	; (8009a2c <mg_tcpip_driver_stm32h_init+0x22c>)
 80099c8:	f043 0301 	orr.w	r3, r3, #1
 80099cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80099d0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

  // MAC address filtering
  ETH->MACA0HR = ((uint32_t) ifp->mac[5] << 8U) | ifp->mac[4];
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	795b      	ldrb	r3, [r3, #5]
 80099d8:	021b      	lsls	r3, r3, #8
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	7912      	ldrb	r2, [r2, #4]
 80099de:	4611      	mov	r1, r2
 80099e0:	4a12      	ldr	r2, [pc, #72]	; (8009a2c <mg_tcpip_driver_stm32h_init+0x22c>)
 80099e2:	430b      	orrs	r3, r1
 80099e4:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	78db      	ldrb	r3, [r3, #3]
 80099ec:	061b      	lsls	r3, r3, #24
 80099ee:	461a      	mov	r2, r3
                 ((uint32_t) ifp->mac[2] << 16) |
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	789b      	ldrb	r3, [r3, #2]
 80099f4:	041b      	lsls	r3, r3, #16
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 80099f6:	431a      	orrs	r2, r3
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	785b      	ldrb	r3, [r3, #1]
 80099fc:	021b      	lsls	r3, r3, #8
                 ((uint32_t) ifp->mac[2] << 16) |
 80099fe:	4313      	orrs	r3, r2
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	7812      	ldrb	r2, [r2, #0]
 8009a04:	4611      	mov	r1, r2
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8009a06:	4a09      	ldr	r2, [pc, #36]	; (8009a2c <mg_tcpip_driver_stm32h_init+0x22c>)
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8009a08:	430b      	orrs	r3, r1
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8009a0a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  return true;
 8009a0e:	2301      	movs	r3, #1
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3718      	adds	r7, #24
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	24003620 	.word	0x24003620
 8009a1c:	24000600 	.word	0x24000600
 8009a20:	24000580 	.word	0x24000580
 8009a24:	24001e10 	.word	0x24001e10
 8009a28:	240005c0 	.word	0x240005c0
 8009a2c:	40028000 	.word	0x40028000
 8009a30:	240005b0 	.word	0x240005b0

08009a34 <mg_tcpip_driver_stm32h_tx>:

static uint32_t s_txno;
static size_t mg_tcpip_driver_stm32h_tx(const void *buf, size_t len,
                                        struct mg_tcpip_if *ifp) {
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b088      	sub	sp, #32
 8009a38:	af02      	add	r7, sp, #8
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	60b9      	str	r1, [r7, #8]
 8009a3e:	607a      	str	r2, [r7, #4]
  if (len > sizeof(s_txbuf[s_txno])) {
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	f240 6204 	movw	r2, #1540	; 0x604
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d911      	bls.n	8009a6e <mg_tcpip_driver_stm32h_tx+0x3a>
    MG_ERROR(("Frame too big, %ld", (long) len));
 8009a4a:	4b59      	ldr	r3, [pc, #356]	; (8009bb0 <mg_tcpip_driver_stm32h_tx+0x17c>)
 8009a4c:	f641 32d7 	movw	r2, #7127	; 0x1bd7
 8009a50:	4958      	ldr	r1, [pc, #352]	; (8009bb4 <mg_tcpip_driver_stm32h_tx+0x180>)
 8009a52:	2001      	movs	r0, #1
 8009a54:	f7fd fa7a 	bl	8006f4c <mg_log_prefix>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d004      	beq.n	8009a68 <mg_tcpip_driver_stm32h_tx+0x34>
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	4619      	mov	r1, r3
 8009a62:	4855      	ldr	r0, [pc, #340]	; (8009bb8 <mg_tcpip_driver_stm32h_tx+0x184>)
 8009a64:	f7fd facc 	bl	8007000 <mg_log>
    len = 0;  // Frame is too big
 8009a68:	2300      	movs	r3, #0
 8009a6a:	60bb      	str	r3, [r7, #8]
 8009a6c:	e084      	b.n	8009b78 <mg_tcpip_driver_stm32h_tx+0x144>
  } else if ((s_txdesc[s_txno][3] & BIT(31))) {
 8009a6e:	4b53      	ldr	r3, [pc, #332]	; (8009bbc <mg_tcpip_driver_stm32h_tx+0x188>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4a53      	ldr	r2, [pc, #332]	; (8009bc0 <mg_tcpip_driver_stm32h_tx+0x18c>)
 8009a74:	011b      	lsls	r3, r3, #4
 8009a76:	4413      	add	r3, r2
 8009a78:	330c      	adds	r3, #12
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	da41      	bge.n	8009b04 <mg_tcpip_driver_stm32h_tx+0xd0>
    MG_ERROR(("No free descriptors: %u %08X %08X %08X", s_txno,
 8009a80:	4b4b      	ldr	r3, [pc, #300]	; (8009bb0 <mg_tcpip_driver_stm32h_tx+0x17c>)
 8009a82:	f641 32da 	movw	r2, #7130	; 0x1bda
 8009a86:	494b      	ldr	r1, [pc, #300]	; (8009bb4 <mg_tcpip_driver_stm32h_tx+0x180>)
 8009a88:	2001      	movs	r0, #1
 8009a8a:	f7fd fa5f 	bl	8006f4c <mg_log_prefix>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d017      	beq.n	8009ac4 <mg_tcpip_driver_stm32h_tx+0x90>
 8009a94:	4b49      	ldr	r3, [pc, #292]	; (8009bbc <mg_tcpip_driver_stm32h_tx+0x188>)
 8009a96:	6819      	ldr	r1, [r3, #0]
 8009a98:	4b48      	ldr	r3, [pc, #288]	; (8009bbc <mg_tcpip_driver_stm32h_tx+0x188>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a48      	ldr	r2, [pc, #288]	; (8009bc0 <mg_tcpip_driver_stm32h_tx+0x18c>)
 8009a9e:	011b      	lsls	r3, r3, #4
 8009aa0:	4413      	add	r3, r2
 8009aa2:	330c      	adds	r3, #12
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	4b47      	ldr	r3, [pc, #284]	; (8009bc4 <mg_tcpip_driver_stm32h_tx+0x190>)
 8009aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009aac:	f8d3 0160 	ldr.w	r0, [r3, #352]	; 0x160
 8009ab0:	4b44      	ldr	r3, [pc, #272]	; (8009bc4 <mg_tcpip_driver_stm32h_tx+0x190>)
 8009ab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ab6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8009aba:	9300      	str	r3, [sp, #0]
 8009abc:	4603      	mov	r3, r0
 8009abe:	4842      	ldr	r0, [pc, #264]	; (8009bc8 <mg_tcpip_driver_stm32h_tx+0x194>)
 8009ac0:	f7fd fa9e 	bl	8007000 <mg_log>
              s_txdesc[s_txno][3], ETH->DMACSR, ETH->DMACTCR));
    for (int i = 0; i < ETH_DESC_CNT; i++) MG_ERROR(("%08X", s_txdesc[i][3]));
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	617b      	str	r3, [r7, #20]
 8009ac8:	e016      	b.n	8009af8 <mg_tcpip_driver_stm32h_tx+0xc4>
 8009aca:	4b39      	ldr	r3, [pc, #228]	; (8009bb0 <mg_tcpip_driver_stm32h_tx+0x17c>)
 8009acc:	f641 32dc 	movw	r2, #7132	; 0x1bdc
 8009ad0:	4938      	ldr	r1, [pc, #224]	; (8009bb4 <mg_tcpip_driver_stm32h_tx+0x180>)
 8009ad2:	2001      	movs	r0, #1
 8009ad4:	f7fd fa3a 	bl	8006f4c <mg_log_prefix>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d009      	beq.n	8009af2 <mg_tcpip_driver_stm32h_tx+0xbe>
 8009ade:	4a38      	ldr	r2, [pc, #224]	; (8009bc0 <mg_tcpip_driver_stm32h_tx+0x18c>)
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	011b      	lsls	r3, r3, #4
 8009ae4:	4413      	add	r3, r2
 8009ae6:	330c      	adds	r3, #12
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4619      	mov	r1, r3
 8009aec:	4837      	ldr	r0, [pc, #220]	; (8009bcc <mg_tcpip_driver_stm32h_tx+0x198>)
 8009aee:	f7fd fa87 	bl	8007000 <mg_log>
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	3301      	adds	r3, #1
 8009af6:	617b      	str	r3, [r7, #20]
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	2b03      	cmp	r3, #3
 8009afc:	dde5      	ble.n	8009aca <mg_tcpip_driver_stm32h_tx+0x96>
    len = 0;  // All descriptors are busy, fail
 8009afe:	2300      	movs	r3, #0
 8009b00:	60bb      	str	r3, [r7, #8]
 8009b02:	e039      	b.n	8009b78 <mg_tcpip_driver_stm32h_tx+0x144>
  } else {
    memcpy(s_txbuf[s_txno], buf, len);        // Copy data
 8009b04:	4b2d      	ldr	r3, [pc, #180]	; (8009bbc <mg_tcpip_driver_stm32h_tx+0x188>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f240 6204 	movw	r2, #1540	; 0x604
 8009b0c:	fb02 f303 	mul.w	r3, r2, r3
 8009b10:	4a2f      	ldr	r2, [pc, #188]	; (8009bd0 <mg_tcpip_driver_stm32h_tx+0x19c>)
 8009b12:	4413      	add	r3, r2
 8009b14:	68ba      	ldr	r2, [r7, #8]
 8009b16:	68f9      	ldr	r1, [r7, #12]
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f009 fd9f 	bl	801365c <memcpy>
    s_txdesc[s_txno][2] = (uint32_t) len;     // Set data len
 8009b1e:	4b27      	ldr	r3, [pc, #156]	; (8009bbc <mg_tcpip_driver_stm32h_tx+0x188>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a27      	ldr	r2, [pc, #156]	; (8009bc0 <mg_tcpip_driver_stm32h_tx+0x18c>)
 8009b24:	011b      	lsls	r3, r3, #4
 8009b26:	4413      	add	r3, r2
 8009b28:	3308      	adds	r3, #8
 8009b2a:	68ba      	ldr	r2, [r7, #8]
 8009b2c:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][3] = BIT(28) | BIT(29);  // FD, LD
 8009b2e:	4b23      	ldr	r3, [pc, #140]	; (8009bbc <mg_tcpip_driver_stm32h_tx+0x188>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a23      	ldr	r2, [pc, #140]	; (8009bc0 <mg_tcpip_driver_stm32h_tx+0x18c>)
 8009b34:	011b      	lsls	r3, r3, #4
 8009b36:	4413      	add	r3, r2
 8009b38:	330c      	adds	r3, #12
 8009b3a:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8009b3e:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][3] |= BIT(31);           // Set OWN bit - let DMA take over
 8009b40:	4b1e      	ldr	r3, [pc, #120]	; (8009bbc <mg_tcpip_driver_stm32h_tx+0x188>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a1e      	ldr	r2, [pc, #120]	; (8009bc0 <mg_tcpip_driver_stm32h_tx+0x18c>)
 8009b46:	011b      	lsls	r3, r3, #4
 8009b48:	4413      	add	r3, r2
 8009b4a:	330c      	adds	r3, #12
 8009b4c:	681a      	ldr	r2, [r3, #0]
 8009b4e:	4b1b      	ldr	r3, [pc, #108]	; (8009bbc <mg_tcpip_driver_stm32h_tx+0x188>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8009b56:	491a      	ldr	r1, [pc, #104]	; (8009bc0 <mg_tcpip_driver_stm32h_tx+0x18c>)
 8009b58:	011b      	lsls	r3, r3, #4
 8009b5a:	440b      	add	r3, r1
 8009b5c:	330c      	adds	r3, #12
 8009b5e:	601a      	str	r2, [r3, #0]
    if (++s_txno >= ETH_DESC_CNT) s_txno = 0;
 8009b60:	4b16      	ldr	r3, [pc, #88]	; (8009bbc <mg_tcpip_driver_stm32h_tx+0x188>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	3301      	adds	r3, #1
 8009b66:	4a15      	ldr	r2, [pc, #84]	; (8009bbc <mg_tcpip_driver_stm32h_tx+0x188>)
 8009b68:	6013      	str	r3, [r2, #0]
 8009b6a:	4b14      	ldr	r3, [pc, #80]	; (8009bbc <mg_tcpip_driver_stm32h_tx+0x188>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	2b03      	cmp	r3, #3
 8009b70:	d902      	bls.n	8009b78 <mg_tcpip_driver_stm32h_tx+0x144>
 8009b72:	4b12      	ldr	r3, [pc, #72]	; (8009bbc <mg_tcpip_driver_stm32h_tx+0x188>)
 8009b74:	2200      	movs	r2, #0
 8009b76:	601a      	str	r2, [r3, #0]
  }
  ETH->DMACSR |= BIT(2) | BIT(1);  // Clear any prior TBU, TPS
 8009b78:	4b12      	ldr	r3, [pc, #72]	; (8009bc4 <mg_tcpip_driver_stm32h_tx+0x190>)
 8009b7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b7e:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8009b82:	4a10      	ldr	r2, [pc, #64]	; (8009bc4 <mg_tcpip_driver_stm32h_tx+0x190>)
 8009b84:	f043 0306 	orr.w	r3, r3, #6
 8009b88:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009b8c:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
  ETH->DMACTDTPR = (uint32_t) (uintptr_t) &s_txdesc[s_txno];  // and resume
 8009b90:	4b0a      	ldr	r3, [pc, #40]	; (8009bbc <mg_tcpip_driver_stm32h_tx+0x188>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	011b      	lsls	r3, r3, #4
 8009b96:	4a0a      	ldr	r2, [pc, #40]	; (8009bc0 <mg_tcpip_driver_stm32h_tx+0x18c>)
 8009b98:	441a      	add	r2, r3
 8009b9a:	4b0a      	ldr	r3, [pc, #40]	; (8009bc4 <mg_tcpip_driver_stm32h_tx+0x190>)
 8009b9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ba0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  return len;
 8009ba4:	68bb      	ldr	r3, [r7, #8]
  (void) ifp;
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3718      	adds	r7, #24
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	080162ec 	.word	0x080162ec
 8009bb4:	08014270 	.word	0x08014270
 8009bb8:	08015570 	.word	0x08015570
 8009bbc:	24003624 	.word	0x24003624
 8009bc0:	240005c0 	.word	0x240005c0
 8009bc4:	40028000 	.word	0x40028000
 8009bc8:	08015584 	.word	0x08015584
 8009bcc:	080155ac 	.word	0x080155ac
 8009bd0:	24001e10 	.word	0x24001e10

08009bd4 <mg_tcpip_driver_stm32h_up>:

static bool mg_tcpip_driver_stm32h_up(struct mg_tcpip_if *ifp) {
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b086      	sub	sp, #24
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  uint32_t bsr = eth_read_phy(PHY_ADDR, PHY_BSR);
 8009bdc:	2101      	movs	r1, #1
 8009bde:	2000      	movs	r0, #0
 8009be0:	f7ff fc5c 	bl	800949c <eth_read_phy>
 8009be4:	6138      	str	r0, [r7, #16]
  bool up = bsr & BIT(2) ? 1 : 0;
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	089b      	lsrs	r3, r3, #2
 8009bea:	f003 0301 	and.w	r3, r3, #1
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	bf14      	ite	ne
 8009bf2:	2301      	movne	r3, #1
 8009bf4:	2300      	moveq	r3, #0
 8009bf6:	73fb      	strb	r3, [r7, #15]
  if ((ifp->state == MG_TCPIP_STATE_DOWN) && up) {  // link state just went up
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d13f      	bne.n	8009c82 <mg_tcpip_driver_stm32h_up+0xae>
 8009c02:	7bfb      	ldrb	r3, [r7, #15]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d03c      	beq.n	8009c82 <mg_tcpip_driver_stm32h_up+0xae>
    uint32_t scsr = eth_read_phy(PHY_ADDR, PHY_CSCR);
 8009c08:	211f      	movs	r1, #31
 8009c0a:	2000      	movs	r0, #0
 8009c0c:	f7ff fc46 	bl	800949c <eth_read_phy>
 8009c10:	60b8      	str	r0, [r7, #8]
    uint32_t maccr = ETH->MACCR | BIT(14) | BIT(13);  // 100M, Full-duplex
 8009c12:	4b1e      	ldr	r3, [pc, #120]	; (8009c8c <mg_tcpip_driver_stm32h_up+0xb8>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8009c1a:	617b      	str	r3, [r7, #20]
    if ((scsr & BIT(3)) == 0) maccr &= ~BIT(14);      // 10M
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	f003 0308 	and.w	r3, r3, #8
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d103      	bne.n	8009c2e <mg_tcpip_driver_stm32h_up+0x5a>
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c2c:	617b      	str	r3, [r7, #20]
    if ((scsr & BIT(4)) == 0) maccr &= ~BIT(13);      // Half-duplex
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	f003 0310 	and.w	r3, r3, #16
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d103      	bne.n	8009c40 <mg_tcpip_driver_stm32h_up+0x6c>
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c3e:	617b      	str	r3, [r7, #20]
    ETH->MACCR = maccr;  // IRQ handler does not fiddle with this register
 8009c40:	4a12      	ldr	r2, [pc, #72]	; (8009c8c <mg_tcpip_driver_stm32h_up+0xb8>)
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("Link is %uM %s-duplex", maccr & BIT(14) ? 100 : 10,
 8009c46:	4b12      	ldr	r3, [pc, #72]	; (8009c90 <mg_tcpip_driver_stm32h_up+0xbc>)
 8009c48:	f641 32f4 	movw	r2, #7156	; 0x1bf4
 8009c4c:	4911      	ldr	r1, [pc, #68]	; (8009c94 <mg_tcpip_driver_stm32h_up+0xc0>)
 8009c4e:	2003      	movs	r0, #3
 8009c50:	f7fd f97c 	bl	8006f4c <mg_log_prefix>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d013      	beq.n	8009c82 <mg_tcpip_driver_stm32h_up+0xae>
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d001      	beq.n	8009c68 <mg_tcpip_driver_stm32h_up+0x94>
 8009c64:	2164      	movs	r1, #100	; 0x64
 8009c66:	e000      	b.n	8009c6a <mg_tcpip_driver_stm32h_up+0x96>
 8009c68:	210a      	movs	r1, #10
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d001      	beq.n	8009c78 <mg_tcpip_driver_stm32h_up+0xa4>
 8009c74:	4b08      	ldr	r3, [pc, #32]	; (8009c98 <mg_tcpip_driver_stm32h_up+0xc4>)
 8009c76:	e000      	b.n	8009c7a <mg_tcpip_driver_stm32h_up+0xa6>
 8009c78:	4b08      	ldr	r3, [pc, #32]	; (8009c9c <mg_tcpip_driver_stm32h_up+0xc8>)
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	4808      	ldr	r0, [pc, #32]	; (8009ca0 <mg_tcpip_driver_stm32h_up+0xcc>)
 8009c7e:	f7fd f9bf 	bl	8007000 <mg_log>
              maccr & BIT(13) ? "full" : "half"));
  }
  return up;
 8009c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3718      	adds	r7, #24
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	40028000 	.word	0x40028000
 8009c90:	08016308 	.word	0x08016308
 8009c94:	08014270 	.word	0x08014270
 8009c98:	080155b4 	.word	0x080155b4
 8009c9c:	080155bc 	.word	0x080155bc
 8009ca0:	080155c4 	.word	0x080155c4

08009ca4 <ETH_IRQHandler>:

void ETH_IRQHandler(void);
static uint32_t s_rxno;
void ETH_IRQHandler(void) {
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
  if (ETH->DMACSR & BIT(6)) {            // Frame received, loop
 8009caa:	4b40      	ldr	r3, [pc, #256]	; (8009dac <ETH_IRQHandler+0x108>)
 8009cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cb0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8009cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d065      	beq.n	8009d88 <ETH_IRQHandler+0xe4>
    ETH->DMACSR = BIT(15) | BIT(6);      // Clear flag
 8009cbc:	4b3b      	ldr	r3, [pc, #236]	; (8009dac <ETH_IRQHandler+0x108>)
 8009cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	f248 0340 	movw	r3, #32832	; 0x8040
 8009cc8:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 8009ccc:	2300      	movs	r3, #0
 8009cce:	607b      	str	r3, [r7, #4]
 8009cd0:	e055      	b.n	8009d7e <ETH_IRQHandler+0xda>
      if (s_rxdesc[s_rxno][3] & BIT(31)) break;  // exit when done
 8009cd2:	4b37      	ldr	r3, [pc, #220]	; (8009db0 <ETH_IRQHandler+0x10c>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a37      	ldr	r2, [pc, #220]	; (8009db4 <ETH_IRQHandler+0x110>)
 8009cd8:	011b      	lsls	r3, r3, #4
 8009cda:	4413      	add	r3, r2
 8009cdc:	330c      	adds	r3, #12
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	db50      	blt.n	8009d86 <ETH_IRQHandler+0xe2>
      if (((s_rxdesc[s_rxno][3] & (BIT(28) | BIT(29))) ==
 8009ce4:	4b32      	ldr	r3, [pc, #200]	; (8009db0 <ETH_IRQHandler+0x10c>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a32      	ldr	r2, [pc, #200]	; (8009db4 <ETH_IRQHandler+0x110>)
 8009cea:	011b      	lsls	r3, r3, #4
 8009cec:	4413      	add	r3, r2
 8009cee:	330c      	adds	r3, #12
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009cf6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009cfa:	d128      	bne.n	8009d4e <ETH_IRQHandler+0xaa>
           (BIT(28) | BIT(29))) &&
          !(s_rxdesc[s_rxno][3] & BIT(15))) {  // skip partial/errored frames
 8009cfc:	4b2c      	ldr	r3, [pc, #176]	; (8009db0 <ETH_IRQHandler+0x10c>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a2c      	ldr	r2, [pc, #176]	; (8009db4 <ETH_IRQHandler+0x110>)
 8009d02:	011b      	lsls	r3, r3, #4
 8009d04:	4413      	add	r3, r2
 8009d06:	330c      	adds	r3, #12
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
           (BIT(28) | BIT(29))) &&
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d11d      	bne.n	8009d4e <ETH_IRQHandler+0xaa>
        uint32_t len = s_rxdesc[s_rxno][3] & (BIT(15) - 1);
 8009d12:	4b27      	ldr	r3, [pc, #156]	; (8009db0 <ETH_IRQHandler+0x10c>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a27      	ldr	r2, [pc, #156]	; (8009db4 <ETH_IRQHandler+0x110>)
 8009d18:	011b      	lsls	r3, r3, #4
 8009d1a:	4413      	add	r3, r2
 8009d1c:	330c      	adds	r3, #12
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009d24:	603b      	str	r3, [r7, #0]
        // MG_DEBUG(("%lx %lu %lx %08lx", s_rxno, len, s_rxdesc[s_rxno][3],
        // ETH->DMACSR));
        mg_tcpip_qwrite(s_rxbuf[s_rxno], len > 4 ? len - 4 : len, s_ifp);
 8009d26:	4b22      	ldr	r3, [pc, #136]	; (8009db0 <ETH_IRQHandler+0x10c>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f240 6204 	movw	r2, #1540	; 0x604
 8009d2e:	fb02 f303 	mul.w	r3, r2, r3
 8009d32:	4a21      	ldr	r2, [pc, #132]	; (8009db8 <ETH_IRQHandler+0x114>)
 8009d34:	1898      	adds	r0, r3, r2
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	2b04      	cmp	r3, #4
 8009d3a:	d902      	bls.n	8009d42 <ETH_IRQHandler+0x9e>
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	3b04      	subs	r3, #4
 8009d40:	e000      	b.n	8009d44 <ETH_IRQHandler+0xa0>
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	4a1d      	ldr	r2, [pc, #116]	; (8009dbc <ETH_IRQHandler+0x118>)
 8009d46:	6812      	ldr	r2, [r2, #0]
 8009d48:	4619      	mov	r1, r3
 8009d4a:	f002 fa5d 	bl	800c208 <mg_tcpip_qwrite>
      }
      s_rxdesc[s_rxno][3] = BIT(31) | BIT(30) | BIT(24);  // OWN, IOC, BUF1V
 8009d4e:	4b18      	ldr	r3, [pc, #96]	; (8009db0 <ETH_IRQHandler+0x10c>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4a18      	ldr	r2, [pc, #96]	; (8009db4 <ETH_IRQHandler+0x110>)
 8009d54:	011b      	lsls	r3, r3, #4
 8009d56:	4413      	add	r3, r2
 8009d58:	330c      	adds	r3, #12
 8009d5a:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8009d5e:	601a      	str	r2, [r3, #0]
      if (++s_rxno >= ETH_DESC_CNT) s_rxno = 0;
 8009d60:	4b13      	ldr	r3, [pc, #76]	; (8009db0 <ETH_IRQHandler+0x10c>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	3301      	adds	r3, #1
 8009d66:	4a12      	ldr	r2, [pc, #72]	; (8009db0 <ETH_IRQHandler+0x10c>)
 8009d68:	6013      	str	r3, [r2, #0]
 8009d6a:	4b11      	ldr	r3, [pc, #68]	; (8009db0 <ETH_IRQHandler+0x10c>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	2b03      	cmp	r3, #3
 8009d70:	d902      	bls.n	8009d78 <ETH_IRQHandler+0xd4>
 8009d72:	4b0f      	ldr	r3, [pc, #60]	; (8009db0 <ETH_IRQHandler+0x10c>)
 8009d74:	2200      	movs	r2, #0
 8009d76:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	607b      	str	r3, [r7, #4]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2b09      	cmp	r3, #9
 8009d82:	d9a6      	bls.n	8009cd2 <ETH_IRQHandler+0x2e>
 8009d84:	e000      	b.n	8009d88 <ETH_IRQHandler+0xe4>
      if (s_rxdesc[s_rxno][3] & BIT(31)) break;  // exit when done
 8009d86:	bf00      	nop
    }
  }
  ETH->DMACSR = BIT(7) | BIT(8);  // Clear possible RBU RPS while processing
 8009d88:	4b08      	ldr	r3, [pc, #32]	; (8009dac <ETH_IRQHandler+0x108>)
 8009d8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d8e:	461a      	mov	r2, r3
 8009d90:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8009d94:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
  ETH->DMACRDTPR =
 8009d98:	4a04      	ldr	r2, [pc, #16]	; (8009dac <ETH_IRQHandler+0x108>)
      (uint32_t) (uintptr_t) &s_rxdesc[ETH_DESC_CNT - 1];  // and resume RX
 8009d9a:	4b09      	ldr	r3, [pc, #36]	; (8009dc0 <ETH_IRQHandler+0x11c>)
  ETH->DMACRDTPR =
 8009d9c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009da0:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
}
 8009da4:	bf00      	nop
 8009da6:	3708      	adds	r7, #8
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}
 8009dac:	40028000 	.word	0x40028000
 8009db0:	24003628 	.word	0x24003628
 8009db4:	24000580 	.word	0x24000580
 8009db8:	24000600 	.word	0x24000600
 8009dbc:	24003620 	.word	0x24003620
 8009dc0:	240005b0 	.word	0x240005b0

08009dc4 <mkpay>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mkpay(struct pkt *pkt, void *p) {
 8009dc4:	b590      	push	{r4, r7, lr}
 8009dc6:	b085      	sub	sp, #20
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	60f8      	str	r0, [r7, #12]
 8009dcc:	60b9      	str	r1, [r7, #8]
  pkt->pay =
      mg_str_n((char *) p, (size_t) (&pkt->raw.ptr[pkt->raw.len] - (char *) p));
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	441a      	add	r2, r3
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	1ad3      	subs	r3, r2, r3
 8009ddc:	461a      	mov	r2, r3
 8009dde:	68fc      	ldr	r4, [r7, #12]
 8009de0:	463b      	mov	r3, r7
 8009de2:	68b9      	ldr	r1, [r7, #8]
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7fe fcdc 	bl	80087a2 <mg_str_n>
 8009dea:	f104 0308 	add.w	r3, r4, #8
 8009dee:	463a      	mov	r2, r7
 8009df0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009df4:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8009df8:	bf00      	nop
 8009dfa:	3714      	adds	r7, #20
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd90      	pop	{r4, r7, pc}

08009e00 <csumup>:

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
 8009e00:	b480      	push	{r7}
 8009e02:	b087      	sub	sp, #28
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	60f8      	str	r0, [r7, #12]
 8009e08:	60b9      	str	r1, [r7, #8]
 8009e0a:	607a      	str	r2, [r7, #4]
  const uint8_t *p = (const uint8_t *) buf;
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	613b      	str	r3, [r7, #16]
  for (size_t i = 0; i < len; i++) sum += i & 1 ? p[i] : (uint32_t) (p[i] << 8);
 8009e10:	2300      	movs	r3, #0
 8009e12:	617b      	str	r3, [r7, #20]
 8009e14:	e016      	b.n	8009e44 <csumup+0x44>
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	f003 0301 	and.w	r3, r3, #1
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d005      	beq.n	8009e2c <csumup+0x2c>
 8009e20:	693a      	ldr	r2, [r7, #16]
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	4413      	add	r3, r2
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	461a      	mov	r2, r3
 8009e2a:	e005      	b.n	8009e38 <csumup+0x38>
 8009e2c:	693a      	ldr	r2, [r7, #16]
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	4413      	add	r3, r2
 8009e32:	781b      	ldrb	r3, [r3, #0]
 8009e34:	021b      	lsls	r3, r3, #8
 8009e36:	461a      	mov	r2, r3
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	4413      	add	r3, r2
 8009e3c:	60fb      	str	r3, [r7, #12]
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	3301      	adds	r3, #1
 8009e42:	617b      	str	r3, [r7, #20]
 8009e44:	697a      	ldr	r2, [r7, #20]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d3e4      	bcc.n	8009e16 <csumup+0x16>
  return sum;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	371c      	adds	r7, #28
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr

08009e5a <csumfin>:

static uint16_t csumfin(uint32_t sum) {
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b082      	sub	sp, #8
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 8009e62:	e005      	b.n	8009e70 <csumfin+0x16>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	b29a      	uxth	r2, r3
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	0c1b      	lsrs	r3, r3, #16
 8009e6c:	4413      	add	r3, r2
 8009e6e:	607b      	str	r3, [r7, #4]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	0c1b      	lsrs	r3, r3, #16
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d1f5      	bne.n	8009e64 <csumfin+0xa>
  return mg_htons(~sum & 0xffff);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	43db      	mvns	r3, r3
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	4618      	mov	r0, r3
 8009e82:	f7ff faba 	bl	80093fa <mg_ntohs>
 8009e86:	4603      	mov	r3, r0
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3708      	adds	r7, #8
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <ipcsum>:

static uint16_t ipcsum(const void *buf, size_t len) {
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b084      	sub	sp, #16
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
  uint32_t sum = csumup(0, buf, len);
 8009e9a:	683a      	ldr	r2, [r7, #0]
 8009e9c:	6879      	ldr	r1, [r7, #4]
 8009e9e:	2000      	movs	r0, #0
 8009ea0:	f7ff ffae 	bl	8009e00 <csumup>
 8009ea4:	60f8      	str	r0, [r7, #12]
  return csumfin(sum);
 8009ea6:	68f8      	ldr	r0, [r7, #12]
 8009ea8:	f7ff ffd7 	bl	8009e5a <csumfin>
 8009eac:	4603      	mov	r3, r0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3710      	adds	r7, #16
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <ether_output>:

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b084      	sub	sp, #16
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
 8009ebe:	6039      	str	r1, [r7, #0]
  // size_t min = 64;  // Pad short frames to 64 bytes (minimum Ethernet size)
  // if (len < min) memset(ifp->tx.ptr + len, 0, min - len), len = min;
  // mg_hexdump(ifp->tx.ptr, len);
  size_t n = ifp->driver->tx(ifp->tx.ptr, len, ifp);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6a1b      	ldr	r3, [r3, #32]
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	6950      	ldr	r0, [r2, #20]
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	6839      	ldr	r1, [r7, #0]
 8009ece:	4798      	blx	r3
 8009ed0:	60f8      	str	r0, [r7, #12]
  if (n == len) ifp->nsent++;
 8009ed2:	68fa      	ldr	r2, [r7, #12]
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d104      	bne.n	8009ee4 <ether_output+0x2e>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ede:	1c5a      	adds	r2, r3, #1
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	66da      	str	r2, [r3, #108]	; 0x6c
  return n;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}

08009eee <arp_ask>:

static void arp_ask(struct mg_tcpip_if *ifp, uint32_t ip) {
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b084      	sub	sp, #16
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
 8009ef6:	6039      	str	r1, [r7, #0]
  struct eth *eth = (struct eth *) ifp->tx.ptr;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	695b      	ldr	r3, [r3, #20]
 8009efc:	60fb      	str	r3, [r7, #12]
  struct arp *arp = (struct arp *) (eth + 1);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	330e      	adds	r3, #14
 8009f02:	60bb      	str	r3, [r7, #8]
  memset(eth->dst, 255, sizeof(eth->dst));
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2206      	movs	r2, #6
 8009f08:	21ff      	movs	r1, #255	; 0xff
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f009 fabf 	bl	801348e <memset>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	3306      	adds	r3, #6
 8009f14:	6879      	ldr	r1, [r7, #4]
 8009f16:	2206      	movs	r2, #6
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f009 fb9f 	bl	801365c <memcpy>
  eth->type = mg_htons(0x806);
 8009f1e:	f640 0006 	movw	r0, #2054	; 0x806
 8009f22:	f7ff fa6a 	bl	80093fa <mg_ntohs>
 8009f26:	4603      	mov	r3, r0
 8009f28:	461a      	mov	r2, r3
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	819a      	strh	r2, [r3, #12]
  memset(arp, 0, sizeof(*arp));
 8009f2e:	221c      	movs	r2, #28
 8009f30:	2100      	movs	r1, #0
 8009f32:	68b8      	ldr	r0, [r7, #8]
 8009f34:	f009 faab 	bl	801348e <memset>
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 8009f38:	2001      	movs	r0, #1
 8009f3a:	f7ff fa5e 	bl	80093fa <mg_ntohs>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	461a      	mov	r2, r3
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	801a      	strh	r2, [r3, #0]
 8009f46:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009f4a:	f7ff fa56 	bl	80093fa <mg_ntohs>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	461a      	mov	r2, r3
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	805a      	strh	r2, [r3, #2]
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	2206      	movs	r2, #6
 8009f5a:	711a      	strb	r2, [r3, #4]
  arp->plen = 4;
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	2204      	movs	r2, #4
 8009f60:	715a      	strb	r2, [r3, #5]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 8009f62:	2001      	movs	r0, #1
 8009f64:	f7ff fa49 	bl	80093fa <mg_ntohs>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	80da      	strh	r2, [r3, #6]
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	683a      	ldr	r2, [r7, #0]
 8009f74:	619a      	str	r2, [r3, #24]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	689a      	ldr	r2, [r3, #8]
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	f8c3 200e 	str.w	r2, [r3, #14]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	3308      	adds	r3, #8
 8009f84:	6879      	ldr	r1, [r7, #4]
 8009f86:	2206      	movs	r2, #6
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f009 fb67 	bl	801365c <memcpy>
  ether_output(ifp, PDIFF(eth, arp + 1));
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	f103 021c 	add.w	r2, r3, #28
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	1ad3      	subs	r3, r2, r3
 8009f98:	4619      	mov	r1, r3
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f7ff ff8b 	bl	8009eb6 <ether_output>
}
 8009fa0:	bf00      	nop
 8009fa2:	3710      	adds	r7, #16
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <onstatechange>:

static void onstatechange(struct mg_tcpip_if *ifp) {
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  if (ifp->state == MG_TCPIP_STATE_READY) {
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009fb6:	2b03      	cmp	r3, #3
 8009fb8:	d138      	bne.n	800a02c <onstatechange+0x84>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 8009fba:	4b35      	ldr	r3, [pc, #212]	; (800a090 <onstatechange+0xe8>)
 8009fbc:	f641 6224 	movw	r2, #7716	; 0x1e24
 8009fc0:	4934      	ldr	r1, [pc, #208]	; (800a094 <onstatechange+0xec>)
 8009fc2:	2002      	movs	r0, #2
 8009fc4:	f7fc ffc2 	bl	8006f4c <mg_log_prefix>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d006      	beq.n	8009fdc <onstatechange+0x34>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	3308      	adds	r3, #8
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	4930      	ldr	r1, [pc, #192]	; (800a098 <onstatechange+0xf0>)
 8009fd6:	4831      	ldr	r0, [pc, #196]	; (800a09c <onstatechange+0xf4>)
 8009fd8:	f7fd f812 	bl	8007000 <mg_log>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 8009fdc:	4b2c      	ldr	r3, [pc, #176]	; (800a090 <onstatechange+0xe8>)
 8009fde:	f641 6225 	movw	r2, #7717	; 0x1e25
 8009fe2:	492c      	ldr	r1, [pc, #176]	; (800a094 <onstatechange+0xec>)
 8009fe4:	2002      	movs	r0, #2
 8009fe6:	f7fc ffb1 	bl	8006f4c <mg_log_prefix>
 8009fea:	4603      	mov	r3, r0
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d006      	beq.n	8009ffe <onstatechange+0x56>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	3310      	adds	r3, #16
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	4928      	ldr	r1, [pc, #160]	; (800a098 <onstatechange+0xf0>)
 8009ff8:	4829      	ldr	r0, [pc, #164]	; (800a0a0 <onstatechange+0xf8>)
 8009ffa:	f7fd f801 	bl	8007000 <mg_log>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 8009ffe:	4b24      	ldr	r3, [pc, #144]	; (800a090 <onstatechange+0xe8>)
 800a000:	f641 6226 	movw	r2, #7718	; 0x1e26
 800a004:	4923      	ldr	r1, [pc, #140]	; (800a094 <onstatechange+0xec>)
 800a006:	2002      	movs	r0, #2
 800a008:	f7fc ffa0 	bl	8006f4c <mg_log_prefix>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d005      	beq.n	800a01e <onstatechange+0x76>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	461a      	mov	r2, r3
 800a016:	4923      	ldr	r1, [pc, #140]	; (800a0a4 <onstatechange+0xfc>)
 800a018:	4823      	ldr	r0, [pc, #140]	; (800a0a8 <onstatechange+0x100>)
 800a01a:	f7fc fff1 	bl	8007000 <mg_log>
    arp_ask(ifp, ifp->gw);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	691b      	ldr	r3, [r3, #16]
 800a022:	4619      	mov	r1, r3
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f7ff ff62 	bl	8009eee <arp_ask>
    MG_ERROR(("Link up"));
    srand((unsigned int) mg_millis());
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
    MG_ERROR(("Link down"));
  }
}
 800a02a:	e02c      	b.n	800a086 <onstatechange+0xde>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a032:	2b01      	cmp	r3, #1
 800a034:	d115      	bne.n	800a062 <onstatechange+0xba>
    MG_ERROR(("Link up"));
 800a036:	4b16      	ldr	r3, [pc, #88]	; (800a090 <onstatechange+0xe8>)
 800a038:	f641 6229 	movw	r2, #7721	; 0x1e29
 800a03c:	4915      	ldr	r1, [pc, #84]	; (800a094 <onstatechange+0xec>)
 800a03e:	2001      	movs	r0, #1
 800a040:	f7fc ff84 	bl	8006f4c <mg_log_prefix>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	d002      	beq.n	800a050 <onstatechange+0xa8>
 800a04a:	4818      	ldr	r0, [pc, #96]	; (800a0ac <onstatechange+0x104>)
 800a04c:	f7fc ffd8 	bl	8007000 <mg_log>
    srand((unsigned int) mg_millis());
 800a050:	f7f6 fda6 	bl	8000ba0 <mg_millis>
 800a054:	4602      	mov	r2, r0
 800a056:	460b      	mov	r3, r1
 800a058:	4613      	mov	r3, r2
 800a05a:	4618      	mov	r0, r3
 800a05c:	f008 ffe8 	bl	8013030 <srand>
}
 800a060:	e011      	b.n	800a086 <onstatechange+0xde>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d10c      	bne.n	800a086 <onstatechange+0xde>
    MG_ERROR(("Link down"));
 800a06c:	4b08      	ldr	r3, [pc, #32]	; (800a090 <onstatechange+0xe8>)
 800a06e:	f641 622c 	movw	r2, #7724	; 0x1e2c
 800a072:	4908      	ldr	r1, [pc, #32]	; (800a094 <onstatechange+0xec>)
 800a074:	2001      	movs	r0, #1
 800a076:	f7fc ff69 	bl	8006f4c <mg_log_prefix>
 800a07a:	4603      	mov	r3, r0
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d002      	beq.n	800a086 <onstatechange+0xde>
 800a080:	480b      	ldr	r0, [pc, #44]	; (800a0b0 <onstatechange+0x108>)
 800a082:	f7fc ffbd 	bl	8007000 <mg_log>
}
 800a086:	bf00      	nop
 800a088:	3708      	adds	r7, #8
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	bf00      	nop
 800a090:	08016324 	.word	0x08016324
 800a094:	08014270 	.word	0x08014270
 800a098:	08007d09 	.word	0x08007d09
 800a09c:	080155dc 	.word	0x080155dc
 800a0a0:	080155ec 	.word	0x080155ec
 800a0a4:	08007dcd 	.word	0x08007dcd
 800a0a8:	080155fc 	.word	0x080155fc
 800a0ac:	0801560c 	.word	0x0801560c
 800a0b0:	08015614 	.word	0x08015614

0800a0b4 <tx_ip>:

static struct ip *tx_ip(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                        uint8_t proto, uint32_t ip_src, uint32_t ip_dst,
                        size_t plen) {
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b086      	sub	sp, #24
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	603b      	str	r3, [r7, #0]
 800a0c0:	4613      	mov	r3, r2
 800a0c2:	71fb      	strb	r3, [r7, #7]
  struct eth *eth = (struct eth *) ifp->tx.ptr;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	695b      	ldr	r3, [r3, #20]
 800a0c8:	617b      	str	r3, [r7, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	330e      	adds	r3, #14
 800a0ce:	613b      	str	r3, [r7, #16]
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	2206      	movs	r2, #6
 800a0d4:	68b9      	ldr	r1, [r7, #8]
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f009 fac0 	bl	801365c <memcpy>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	3306      	adds	r3, #6
 800a0e0:	68f9      	ldr	r1, [r7, #12]
 800a0e2:	2206      	movs	r2, #6
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f009 fab9 	bl	801365c <memcpy>
  eth->type = mg_htons(0x800);
 800a0ea:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a0ee:	f7ff f984 	bl	80093fa <mg_ntohs>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	819a      	strh	r2, [r3, #12]
  memset(ip, 0, sizeof(*ip));
 800a0fa:	2214      	movs	r2, #20
 800a0fc:	2100      	movs	r1, #0
 800a0fe:	6938      	ldr	r0, [r7, #16]
 800a100:	f009 f9c5 	bl	801348e <memset>
  ip->ver = 0x45;   // Version 4, header length 5 words
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	2245      	movs	r2, #69	; 0x45
 800a108:	701a      	strb	r2, [r3, #0]
  ip->frag = 0x40;  // Don't fragment
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	2200      	movs	r2, #0
 800a10e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a112:	719a      	strb	r2, [r3, #6]
 800a114:	2200      	movs	r2, #0
 800a116:	71da      	strb	r2, [r3, #7]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 800a118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	3314      	adds	r3, #20
 800a11e:	b29b      	uxth	r3, r3
 800a120:	4618      	mov	r0, r3
 800a122:	f7ff f96a 	bl	80093fa <mg_ntohs>
 800a126:	4603      	mov	r3, r0
 800a128:	461a      	mov	r2, r3
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	805a      	strh	r2, [r3, #2]
  ip->ttl = 64;
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	2240      	movs	r2, #64	; 0x40
 800a132:	721a      	strb	r2, [r3, #8]
  ip->proto = proto;
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	79fa      	ldrb	r2, [r7, #7]
 800a138:	725a      	strb	r2, [r3, #9]
  ip->src = ip_src;
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	683a      	ldr	r2, [r7, #0]
 800a13e:	60da      	str	r2, [r3, #12]
  ip->dst = ip_dst;
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	6a3a      	ldr	r2, [r7, #32]
 800a144:	611a      	str	r2, [r3, #16]
  ip->csum = ipcsum(ip, sizeof(*ip));
 800a146:	2114      	movs	r1, #20
 800a148:	6938      	ldr	r0, [r7, #16]
 800a14a:	f7ff fea1 	bl	8009e90 <ipcsum>
 800a14e:	4603      	mov	r3, r0
 800a150:	461a      	mov	r2, r3
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	815a      	strh	r2, [r3, #10]
  return ip;
 800a156:	693b      	ldr	r3, [r7, #16]
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3718      	adds	r7, #24
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <tx_udp>:

static void tx_udp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                   uint16_t sport, uint32_t ip_dst, uint16_t dport,
                   const void *buf, size_t len) {
 800a160:	b580      	push	{r7, lr}
 800a162:	b08a      	sub	sp, #40	; 0x28
 800a164:	af02      	add	r7, sp, #8
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	607a      	str	r2, [r7, #4]
 800a16c:	807b      	strh	r3, [r7, #2]
  struct ip *ip =
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 800a16e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a170:	3308      	adds	r3, #8
 800a172:	9301      	str	r3, [sp, #4]
 800a174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a176:	9300      	str	r3, [sp, #0]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2211      	movs	r2, #17
 800a17c:	68b9      	ldr	r1, [r7, #8]
 800a17e:	68f8      	ldr	r0, [r7, #12]
 800a180:	f7ff ff98 	bl	800a0b4 <tx_ip>
 800a184:	61f8      	str	r0, [r7, #28]
  struct udp *udp = (struct udp *) (ip + 1);
 800a186:	69fb      	ldr	r3, [r7, #28]
 800a188:	3314      	adds	r3, #20
 800a18a:	61bb      	str	r3, [r7, #24]
  // MG_DEBUG(("UDP XX LEN %d %d", (int) len, (int) ifp->tx.len));
  udp->sport = sport;
 800a18c:	69bb      	ldr	r3, [r7, #24]
 800a18e:	887a      	ldrh	r2, [r7, #2]
 800a190:	801a      	strh	r2, [r3, #0]
  udp->dport = dport;
 800a192:	69bb      	ldr	r3, [r7, #24]
 800a194:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800a196:	805a      	strh	r2, [r3, #2]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 800a198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	3308      	adds	r3, #8
 800a19e:	b29b      	uxth	r3, r3
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f7ff f92a 	bl	80093fa <mg_ntohs>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	69bb      	ldr	r3, [r7, #24]
 800a1ac:	809a      	strh	r2, [r3, #4]
  udp->csum = 0;
 800a1ae:	69bb      	ldr	r3, [r7, #24]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	719a      	strb	r2, [r3, #6]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	71da      	strb	r2, [r3, #7]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 800a1b8:	2208      	movs	r2, #8
 800a1ba:	69b9      	ldr	r1, [r7, #24]
 800a1bc:	2000      	movs	r0, #0
 800a1be:	f7ff fe1f 	bl	8009e00 <csumup>
 800a1c2:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, buf, len);
 800a1c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a1c8:	6978      	ldr	r0, [r7, #20]
 800a1ca:	f7ff fe19 	bl	8009e00 <csumup>
 800a1ce:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 800a1d0:	69fb      	ldr	r3, [r7, #28]
 800a1d2:	330c      	adds	r3, #12
 800a1d4:	2204      	movs	r2, #4
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	6978      	ldr	r0, [r7, #20]
 800a1da:	f7ff fe11 	bl	8009e00 <csumup>
 800a1de:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 800a1e0:	69fb      	ldr	r3, [r7, #28]
 800a1e2:	3310      	adds	r3, #16
 800a1e4:	2204      	movs	r2, #4
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	6978      	ldr	r0, [r7, #20]
 800a1ea:	f7ff fe09 	bl	8009e00 <csumup>
 800a1ee:	6178      	str	r0, [r7, #20]
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 800a1f0:	69fb      	ldr	r3, [r7, #28]
 800a1f2:	7a5b      	ldrb	r3, [r3, #9]
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1f8:	441a      	add	r2, r3
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	4413      	add	r3, r2
 800a1fe:	3308      	adds	r3, #8
 800a200:	617b      	str	r3, [r7, #20]
  udp->csum = csumfin(cs);
 800a202:	6978      	ldr	r0, [r7, #20]
 800a204:	f7ff fe29 	bl	8009e5a <csumfin>
 800a208:	4603      	mov	r3, r0
 800a20a:	461a      	mov	r2, r3
 800a20c:	69bb      	ldr	r3, [r7, #24]
 800a20e:	80da      	strh	r2, [r3, #6]
  memmove(udp + 1, buf, len);
 800a210:	69bb      	ldr	r3, [r7, #24]
 800a212:	3308      	adds	r3, #8
 800a214:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a216:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a218:	4618      	mov	r0, r3
 800a21a:	f009 f91e 	bl	801345a <memmove>
  // MG_DEBUG(("UDP LEN %d %d", (int) len, (int) ifp->frame_len));
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 800a21e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a220:	332a      	adds	r3, #42	; 0x2a
 800a222:	4619      	mov	r1, r3
 800a224:	68f8      	ldr	r0, [r7, #12]
 800a226:	f7ff fe46 	bl	8009eb6 <ether_output>
}
 800a22a:	bf00      	nop
 800a22c:	3720      	adds	r7, #32
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
	...

0800a234 <tx_dhcp>:

static void tx_dhcp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                    uint32_t ip_dst, uint8_t *opts, size_t optslen,
                    bool ciaddr) {
 800a234:	b5b0      	push	{r4, r5, r7, lr}
 800a236:	b0cc      	sub	sp, #304	; 0x130
 800a238:	af04      	add	r7, sp, #16
 800a23a:	f507 7490 	add.w	r4, r7, #288	; 0x120
 800a23e:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 800a242:	6020      	str	r0, [r4, #0]
 800a244:	f507 7090 	add.w	r0, r7, #288	; 0x120
 800a248:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 800a24c:	6001      	str	r1, [r0, #0]
 800a24e:	f507 7190 	add.w	r1, r7, #288	; 0x120
 800a252:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 800a256:	600a      	str	r2, [r1, #0]
 800a258:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800a25c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800a260:	6013      	str	r3, [r2, #0]
  // https://datatracker.ietf.org/doc/html/rfc2132#section-9.6
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 800a262:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800a266:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800a26a:	4a38      	ldr	r2, [pc, #224]	; (800a34c <tx_dhcp+0x118>)
 800a26c:	4618      	mov	r0, r3
 800a26e:	4611      	mov	r1, r2
 800a270:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a274:	461a      	mov	r2, r3
 800a276:	f009 f9f1 	bl	801365c <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 800a27a:	4835      	ldr	r0, [pc, #212]	; (800a350 <tx_dhcp+0x11c>)
 800a27c:	f7ff f8a4 	bl	80093c8 <mg_ntohl>
 800a280:	4602      	mov	r2, r0
 800a282:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800a286:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800a28a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 800a28e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800a292:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800a296:	6819      	ldr	r1, [r3, #0]
 800a298:	f107 0310 	add.w	r3, r7, #16
 800a29c:	331c      	adds	r3, #28
 800a29e:	2206      	movs	r2, #6
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f009 f9db 	bl	801365c <memcpy>
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 800a2a6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800a2aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	3302      	adds	r3, #2
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	461a      	mov	r2, r3
 800a2b6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800a2ba:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800a2be:	605a      	str	r2, [r3, #4]
  memcpy(&dhcp.options, opts, optslen);
 800a2c0:	f107 0310 	add.w	r3, r7, #16
 800a2c4:	33f0      	adds	r3, #240	; 0xf0
 800a2c6:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800a2ca:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f009 f9c4 	bl	801365c <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 800a2d4:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d009      	beq.n	800a2f0 <tx_dhcp+0xbc>
 800a2dc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800a2e0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800a2e4:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800a2e8:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 800a2ec:	6812      	ldr	r2, [r2, #0]
 800a2ee:	60da      	str	r2, [r3, #12]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 800a2f0:	2044      	movs	r0, #68	; 0x44
 800a2f2:	f7ff f882 	bl	80093fa <mg_ntohs>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	461d      	mov	r5, r3
 800a2fa:	2043      	movs	r0, #67	; 0x43
 800a2fc:	f7ff f87d 	bl	80093fa <mg_ntohs>
 800a300:	4603      	mov	r3, r0
 800a302:	461c      	mov	r4, r3
 800a304:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800a308:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800a30c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800a310:	f5a3 718c 	sub.w	r1, r3, #280	; 0x118
 800a314:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800a318:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 800a31c:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a320:	9303      	str	r3, [sp, #12]
 800a322:	f107 0310 	add.w	r3, r7, #16
 800a326:	9302      	str	r3, [sp, #8]
 800a328:	9401      	str	r4, [sp, #4]
 800a32a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800a32e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	9300      	str	r3, [sp, #0]
 800a336:	462b      	mov	r3, r5
 800a338:	6812      	ldr	r2, [r2, #0]
 800a33a:	6809      	ldr	r1, [r1, #0]
 800a33c:	6800      	ldr	r0, [r0, #0]
 800a33e:	f7ff ff0f 	bl	800a160 <tx_udp>
         sizeof(dhcp));
}
 800a342:	bf00      	nop
 800a344:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800a348:	46bd      	mov	sp, r7
 800a34a:	bdb0      	pop	{r4, r5, r7, pc}
 800a34c:	08015620 	.word	0x08015620
 800a350:	63825363 	.word	0x63825363

0800a354 <tx_dhcp_request_sel>:

static const uint8_t broadcast[] = {255, 255, 255, 255, 255, 255};

// RFC-2131 #4.3.6, #4.4.1
static void tx_dhcp_request_sel(struct mg_tcpip_if *ifp, uint32_t ip_req,
                                uint32_t ip_srv) {
 800a354:	b5b0      	push	{r4, r5, r7, lr}
 800a356:	b090      	sub	sp, #64	; 0x40
 800a358:	af04      	add	r7, sp, #16
 800a35a:	60f8      	str	r0, [r7, #12]
 800a35c:	60b9      	str	r1, [r7, #8]
 800a35e:	607a      	str	r2, [r7, #4]
  uint8_t opts[] = {
 800a360:	4b19      	ldr	r3, [pc, #100]	; (800a3c8 <tx_dhcp_request_sel+0x74>)
 800a362:	f107 0414 	add.w	r4, r7, #20
 800a366:	461d      	mov	r5, r3
 800a368:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a36a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a36c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a370:	c403      	stmia	r4!, {r0, r1}
 800a372:	7022      	strb	r2, [r4, #0]
      12, 3, 'm', 'i', 'p',     // Host name: "mip"
      54, 4, 0,   0,   0,   0,  // DHCP server ID
      50, 4, 0,   0,   0,   0,  // Requested IP
      255                       // End of options
  };
  memcpy(opts + 14, &ip_srv, sizeof(ip_srv));
 800a374:	f107 0314 	add.w	r3, r7, #20
 800a378:	330e      	adds	r3, #14
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	601a      	str	r2, [r3, #0]
  memcpy(opts + 20, &ip_req, sizeof(ip_req));
 800a37e:	f107 0314 	add.w	r3, r7, #20
 800a382:	3314      	adds	r3, #20
 800a384:	68ba      	ldr	r2, [r7, #8]
 800a386:	601a      	str	r2, [r3, #0]
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 800a388:	2300      	movs	r3, #0
 800a38a:	9302      	str	r3, [sp, #8]
 800a38c:	2319      	movs	r3, #25
 800a38e:	9301      	str	r3, [sp, #4]
 800a390:	f107 0314 	add.w	r3, r7, #20
 800a394:	9300      	str	r3, [sp, #0]
 800a396:	f04f 33ff 	mov.w	r3, #4294967295
 800a39a:	2200      	movs	r2, #0
 800a39c:	490b      	ldr	r1, [pc, #44]	; (800a3cc <tx_dhcp_request_sel+0x78>)
 800a39e:	68f8      	ldr	r0, [r7, #12]
 800a3a0:	f7ff ff48 	bl	800a234 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 800a3a4:	4b0a      	ldr	r3, [pc, #40]	; (800a3d0 <tx_dhcp_request_sel+0x7c>)
 800a3a6:	f641 6278 	movw	r2, #7800	; 0x1e78
 800a3aa:	490a      	ldr	r1, [pc, #40]	; (800a3d4 <tx_dhcp_request_sel+0x80>)
 800a3ac:	2003      	movs	r0, #3
 800a3ae:	f7fc fdcd 	bl	8006f4c <mg_log_prefix>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d002      	beq.n	800a3be <tx_dhcp_request_sel+0x6a>
 800a3b8:	4807      	ldr	r0, [pc, #28]	; (800a3d8 <tx_dhcp_request_sel+0x84>)
 800a3ba:	f7fc fe21 	bl	8007000 <mg_log>
}
 800a3be:	bf00      	nop
 800a3c0:	3730      	adds	r7, #48	; 0x30
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bdb0      	pop	{r4, r5, r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	08015740 	.word	0x08015740
 800a3cc:	080161a4 	.word	0x080161a4
 800a3d0:	08016334 	.word	0x08016334
 800a3d4:	08014270 	.word	0x08014270
 800a3d8:	08015730 	.word	0x08015730

0800a3dc <tx_dhcp_request_re>:

// RFC-2131 #4.3.6, #4.4.5 (renewing: unicast, rebinding: bcast)
static void tx_dhcp_request_re(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                               uint32_t ip_src, uint32_t ip_dst) {
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b08a      	sub	sp, #40	; 0x28
 800a3e0:	af04      	add	r7, sp, #16
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	60b9      	str	r1, [r7, #8]
 800a3e6:	607a      	str	r2, [r7, #4]
 800a3e8:	603b      	str	r3, [r7, #0]
  uint8_t opts[] = {
 800a3ea:	4b10      	ldr	r3, [pc, #64]	; (800a42c <tx_dhcp_request_re+0x50>)
 800a3ec:	617b      	str	r3, [r7, #20]
      53, 1, 3,  // Type: DHCP request
      255        // End of options
  };
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	9302      	str	r3, [sp, #8]
 800a3f2:	2304      	movs	r3, #4
 800a3f4:	9301      	str	r3, [sp, #4]
 800a3f6:	f107 0314 	add.w	r3, r7, #20
 800a3fa:	9300      	str	r3, [sp, #0]
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	68b9      	ldr	r1, [r7, #8]
 800a402:	68f8      	ldr	r0, [r7, #12]
 800a404:	f7ff ff16 	bl	800a234 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 800a408:	4b09      	ldr	r3, [pc, #36]	; (800a430 <tx_dhcp_request_re+0x54>)
 800a40a:	f641 6283 	movw	r2, #7811	; 0x1e83
 800a40e:	4909      	ldr	r1, [pc, #36]	; (800a434 <tx_dhcp_request_re+0x58>)
 800a410:	2003      	movs	r0, #3
 800a412:	f7fc fd9b 	bl	8006f4c <mg_log_prefix>
 800a416:	4603      	mov	r3, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d002      	beq.n	800a422 <tx_dhcp_request_re+0x46>
 800a41c:	4806      	ldr	r0, [pc, #24]	; (800a438 <tx_dhcp_request_re+0x5c>)
 800a41e:	f7fc fdef 	bl	8007000 <mg_log>
}
 800a422:	bf00      	nop
 800a424:	3718      	adds	r7, #24
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	ff030135 	.word	0xff030135
 800a430:	08016348 	.word	0x08016348
 800a434:	08014270 	.word	0x08014270
 800a438:	08015730 	.word	0x08015730

0800a43c <tx_dhcp_discover>:

static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b088      	sub	sp, #32
 800a440:	af04      	add	r7, sp, #16
 800a442:	6078      	str	r0, [r7, #4]
  uint8_t opts[] = {
 800a444:	4a14      	ldr	r2, [pc, #80]	; (800a498 <tx_dhcp_discover+0x5c>)
 800a446:	f107 0308 	add.w	r3, r7, #8
 800a44a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a44e:	e883 0003 	stmia.w	r3, {r0, r1}
      53, 1, 1,     // Type: DHCP discover
      55, 2, 1, 3,  // Parameters: ip, mask
      255           // End of options
  };
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 800a452:	2300      	movs	r3, #0
 800a454:	9302      	str	r3, [sp, #8]
 800a456:	2308      	movs	r3, #8
 800a458:	9301      	str	r3, [sp, #4]
 800a45a:	f107 0308 	add.w	r3, r7, #8
 800a45e:	9300      	str	r3, [sp, #0]
 800a460:	f04f 33ff 	mov.w	r3, #4294967295
 800a464:	2200      	movs	r2, #0
 800a466:	490d      	ldr	r1, [pc, #52]	; (800a49c <tx_dhcp_discover+0x60>)
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f7ff fee3 	bl	800a234 <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 800a46e:	4b0c      	ldr	r3, [pc, #48]	; (800a4a0 <tx_dhcp_discover+0x64>)
 800a470:	f641 628d 	movw	r2, #7821	; 0x1e8d
 800a474:	490b      	ldr	r1, [pc, #44]	; (800a4a4 <tx_dhcp_discover+0x68>)
 800a476:	2003      	movs	r0, #3
 800a478:	f7fc fd68 	bl	8006f4c <mg_log_prefix>
 800a47c:	4603      	mov	r3, r0
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d005      	beq.n	800a48e <tx_dhcp_discover+0x52>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	461a      	mov	r2, r3
 800a486:	4908      	ldr	r1, [pc, #32]	; (800a4a8 <tx_dhcp_discover+0x6c>)
 800a488:	4808      	ldr	r0, [pc, #32]	; (800a4ac <tx_dhcp_discover+0x70>)
 800a48a:	f7fc fdb9 	bl	8007000 <mg_log>
}
 800a48e:	bf00      	nop
 800a490:	3710      	adds	r7, #16
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	0801577c 	.word	0x0801577c
 800a49c:	080161a4 	.word	0x080161a4
 800a4a0:	0801635c 	.word	0x0801635c
 800a4a4:	08014270 	.word	0x08014270
 800a4a8:	08007dcd 	.word	0x08007dcd
 800a4ac:	0801575c 	.word	0x0801575c

0800a4b0 <getpeer>:

static struct mg_connection *getpeer(struct mg_mgr *mgr, struct pkt *pkt,
                                     bool lsn) {
 800a4b0:	b480      	push	{r7}
 800a4b2:	b087      	sub	sp, #28
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	60f8      	str	r0, [r7, #12]
 800a4b8:	60b9      	str	r1, [r7, #8]
 800a4ba:	4613      	mov	r3, r2
 800a4bc:	71fb      	strb	r3, [r7, #7]
  struct mg_connection *c = NULL;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	617b      	str	r3, [r7, #20]
  for (c = mgr->conns; c != NULL; c = c->next) {
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	617b      	str	r3, [r7, #20]
 800a4c8:	e03e      	b.n	800a548 <getpeer+0x98>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800a4d0:	f003 0301 	and.w	r3, r3, #1
 800a4d4:	b2db      	uxtb	r3, r3
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d00b      	beq.n	800a4f2 <getpeer+0x42>
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d007      	beq.n	800a4f2 <getpeer+0x42>
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	8b1a      	ldrh	r2, [r3, #24]
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ea:	885b      	ldrh	r3, [r3, #2]
 800a4ec:	b29b      	uxth	r3, r3
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d02e      	beq.n	800a550 <getpeer+0xa0>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800a4f8:	f003 0301 	and.w	r3, r3, #1
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d11f      	bne.n	800a542 <getpeer+0x92>
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a506:	2b00      	cmp	r3, #0
 800a508:	d01b      	beq.n	800a542 <getpeer+0x92>
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	8b1a      	ldrh	r2, [r3, #24]
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a512:	885b      	ldrh	r3, [r3, #2]
 800a514:	b29b      	uxth	r3, r3
 800a516:	429a      	cmp	r2, r3
 800a518:	d113      	bne.n	800a542 <getpeer+0x92>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a520:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a524:	b2db      	uxtb	r3, r3
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 800a526:	79fa      	ldrb	r2, [r7, #7]
 800a528:	429a      	cmp	r2, r3
 800a52a:	d10a      	bne.n	800a542 <getpeer+0x92>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 800a52c:	79fb      	ldrb	r3, [r7, #7]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d10f      	bne.n	800a552 <getpeer+0xa2>
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a53a:	881b      	ldrh	r3, [r3, #0]
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	429a      	cmp	r2, r3
 800a540:	d007      	beq.n	800a552 <getpeer+0xa2>
  for (c = mgr->conns; c != NULL; c = c->next) {
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	617b      	str	r3, [r7, #20]
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d1bd      	bne.n	800a4ca <getpeer+0x1a>
 800a54e:	e000      	b.n	800a552 <getpeer+0xa2>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 800a550:	bf00      	nop
      break;
  }
  return c;
 800a552:	697b      	ldr	r3, [r7, #20]
}
 800a554:	4618      	mov	r0, r3
 800a556:	371c      	adds	r7, #28
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr

0800a560 <rx_arp>:

static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800a560:	b5b0      	push	{r4, r5, r7, lr}
 800a562:	b088      	sub	sp, #32
 800a564:	af02      	add	r7, sp, #8
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	6039      	str	r1, [r7, #0]
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	699b      	ldr	r3, [r3, #24]
 800a56e:	88db      	ldrh	r3, [r3, #6]
 800a570:	b29c      	uxth	r4, r3
 800a572:	2001      	movs	r0, #1
 800a574:	f7fe ff41 	bl	80093fa <mg_ntohs>
 800a578:	4603      	mov	r3, r0
 800a57a:	429c      	cmp	r4, r3
 800a57c:	d176      	bne.n	800a66c <rx_arp+0x10c>
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	699b      	ldr	r3, [r3, #24]
 800a582:	699a      	ldr	r2, [r3, #24]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	689b      	ldr	r3, [r3, #8]
 800a588:	429a      	cmp	r2, r3
 800a58a:	d16f      	bne.n	800a66c <rx_arp+0x10c>
    // ARP request. Make a response, then send
    // MG_DEBUG(("ARP op %d %M: %M", mg_ntohs(pkt->arp->op), mg_print_ip4,
    //          &pkt->arp->spa, mg_print_ip4, &pkt->arp->tpa));
    struct eth *eth = (struct eth *) ifp->tx.ptr;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	695b      	ldr	r3, [r3, #20]
 800a590:	617b      	str	r3, [r7, #20]
    struct arp *arp = (struct arp *) (eth + 1);
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	330e      	adds	r3, #14
 800a596:	613b      	str	r3, [r7, #16]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 800a598:	6978      	ldr	r0, [r7, #20]
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	691b      	ldr	r3, [r3, #16]
 800a59e:	3306      	adds	r3, #6
 800a5a0:	2206      	movs	r2, #6
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	f009 f85a 	bl	801365c <memcpy>
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	3306      	adds	r3, #6
 800a5ac:	6879      	ldr	r1, [r7, #4]
 800a5ae:	2206      	movs	r2, #6
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f009 f853 	bl	801365c <memcpy>
    eth->type = mg_htons(0x806);
 800a5b6:	f640 0006 	movw	r0, #2054	; 0x806
 800a5ba:	f7fe ff1e 	bl	80093fa <mg_ntohs>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	819a      	strh	r2, [r3, #12]
    *arp = *pkt->arp;
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	699a      	ldr	r2, [r3, #24]
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	6814      	ldr	r4, [r2, #0]
 800a5ce:	6850      	ldr	r0, [r2, #4]
 800a5d0:	6891      	ldr	r1, [r2, #8]
 800a5d2:	68d5      	ldr	r5, [r2, #12]
 800a5d4:	601c      	str	r4, [r3, #0]
 800a5d6:	6058      	str	r0, [r3, #4]
 800a5d8:	6099      	str	r1, [r3, #8]
 800a5da:	60dd      	str	r5, [r3, #12]
 800a5dc:	6914      	ldr	r4, [r2, #16]
 800a5de:	6950      	ldr	r0, [r2, #20]
 800a5e0:	6991      	ldr	r1, [r2, #24]
 800a5e2:	611c      	str	r4, [r3, #16]
 800a5e4:	6158      	str	r0, [r3, #20]
 800a5e6:	6199      	str	r1, [r3, #24]
    arp->op = mg_htons(2);
 800a5e8:	2002      	movs	r0, #2
 800a5ea:	f7fe ff06 	bl	80093fa <mg_ntohs>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	80da      	strh	r2, [r3, #6]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	f103 0012 	add.w	r0, r3, #18
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	699b      	ldr	r3, [r3, #24]
 800a600:	3308      	adds	r3, #8
 800a602:	2206      	movs	r2, #6
 800a604:	4619      	mov	r1, r3
 800a606:	f009 f829 	bl	801365c <memcpy>
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	3308      	adds	r3, #8
 800a60e:	6879      	ldr	r1, [r7, #4]
 800a610:	2206      	movs	r2, #6
 800a612:	4618      	mov	r0, r3
 800a614:	f009 f822 	bl	801365c <memcpy>
    arp->tpa = pkt->arp->spa;
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	699b      	ldr	r3, [r3, #24]
 800a61c:	f8d3 200e 	ldr.w	r2, [r3, #14]
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	619a      	str	r2, [r3, #24]
    arp->spa = ifp->ip;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	689a      	ldr	r2, [r3, #8]
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	f8c3 200e 	str.w	r2, [r3, #14]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_ip4,
 800a62e:	4b46      	ldr	r3, [pc, #280]	; (800a748 <rx_arp+0x1e8>)
 800a630:	f641 62ac 	movw	r2, #7852	; 0x1eac
 800a634:	4945      	ldr	r1, [pc, #276]	; (800a74c <rx_arp+0x1ec>)
 800a636:	2003      	movs	r0, #3
 800a638:	f7fc fc88 	bl	8006f4c <mg_log_prefix>
 800a63c:	4603      	mov	r3, r0
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d00a      	beq.n	800a658 <rx_arp+0xf8>
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	f103 0218 	add.w	r2, r3, #24
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	3308      	adds	r3, #8
 800a64c:	9300      	str	r3, [sp, #0]
 800a64e:	4b40      	ldr	r3, [pc, #256]	; (800a750 <rx_arp+0x1f0>)
 800a650:	493f      	ldr	r1, [pc, #252]	; (800a750 <rx_arp+0x1f0>)
 800a652:	4840      	ldr	r0, [pc, #256]	; (800a754 <rx_arp+0x1f4>)
 800a654:	f7fc fcd4 	bl	8007000 <mg_log>
              &ifp->ip));
    ether_output(ifp, PDIFF(eth, arp + 1));
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	f103 021c 	add.w	r2, r3, #28
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	1ad3      	subs	r3, r2, r3
 800a662:	4619      	mov	r1, r3
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f7ff fc26 	bl	8009eb6 <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 800a66a:	e069      	b.n	800a740 <rx_arp+0x1e0>
  } else if (pkt->arp->op == mg_htons(2)) {
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	699b      	ldr	r3, [r3, #24]
 800a670:	88db      	ldrh	r3, [r3, #6]
 800a672:	b29c      	uxth	r4, r3
 800a674:	2002      	movs	r0, #2
 800a676:	f7fe fec0 	bl	80093fa <mg_ntohs>
 800a67a:	4603      	mov	r3, r0
 800a67c:	429c      	cmp	r4, r3
 800a67e:	d15f      	bne.n	800a740 <rx_arp+0x1e0>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	699b      	ldr	r3, [r3, #24]
 800a684:	3312      	adds	r3, #18
 800a686:	6879      	ldr	r1, [r7, #4]
 800a688:	2206      	movs	r2, #6
 800a68a:	4618      	mov	r0, r3
 800a68c:	f008 fed5 	bl	801343a <memcmp>
 800a690:	4603      	mov	r3, r0
 800a692:	2b00      	cmp	r3, #0
 800a694:	d153      	bne.n	800a73e <rx_arp+0x1de>
    if (pkt->arp->spa == ifp->gw) {
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	699b      	ldr	r3, [r3, #24]
 800a69a:	f8d3 200e 	ldr.w	r2, [r3, #14]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	691b      	ldr	r3, [r3, #16]
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d10a      	bne.n	800a6bc <rx_arp+0x15c>
      // Got response for the GW ARP request. Set ifp->gwmac
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	699b      	ldr	r3, [r3, #24]
 800a6b0:	3308      	adds	r3, #8
 800a6b2:	2206      	movs	r2, #6
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	f008 ffd1 	bl	801365c <memcpy>
 800a6ba:	e041      	b.n	800a740 <rx_arp+0x1e0>
    } else {
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	6839      	ldr	r1, [r7, #0]
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f7ff fef3 	bl	800a4b0 <getpeer>
 800a6ca:	60f8      	str	r0, [r7, #12]
      if (c != NULL && c->is_arplooking) {
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d036      	beq.n	800a740 <rx_arp+0x1e0>
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a6d8:	f003 0310 	and.w	r3, r3, #16
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d02e      	beq.n	800a740 <rx_arp+0x1e0>
        struct connstate *s = (struct connstate *) (c + 1);
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	3390      	adds	r3, #144	; 0x90
 800a6e6:	60bb      	str	r3, [r7, #8]
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	f103 0010 	add.w	r0, r3, #16
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	699b      	ldr	r3, [r3, #24]
 800a6f2:	3308      	adds	r3, #8
 800a6f4:	2206      	movs	r2, #6
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	f008 ffb0 	bl	801365c <memcpy>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 800a6fc:	4b12      	ldr	r3, [pc, #72]	; (800a748 <rx_arp+0x1e8>)
 800a6fe:	f641 62b9 	movw	r2, #7865	; 0x1eb9
 800a702:	4912      	ldr	r1, [pc, #72]	; (800a74c <rx_arp+0x1ec>)
 800a704:	2003      	movs	r0, #3
 800a706:	f7fc fc21 	bl	8006f4c <mg_log_prefix>
 800a70a:	4603      	mov	r3, r0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d00e      	beq.n	800a72e <rx_arp+0x1ce>
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	f103 021c 	add.w	r2, r3, #28
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	3310      	adds	r3, #16
 800a71e:	9301      	str	r3, [sp, #4]
 800a720:	4b0d      	ldr	r3, [pc, #52]	; (800a758 <rx_arp+0x1f8>)
 800a722:	9300      	str	r3, [sp, #0]
 800a724:	4613      	mov	r3, r2
 800a726:	4a0a      	ldr	r2, [pc, #40]	; (800a750 <rx_arp+0x1f0>)
 800a728:	480c      	ldr	r0, [pc, #48]	; (800a75c <rx_arp+0x1fc>)
 800a72a:	f7fc fc69 	bl	8007000 <mg_log>
                  mg_print_mac, s->mac));
        c->is_arplooking = 0;
 800a72e:	68fa      	ldr	r2, [r7, #12]
 800a730:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 800a734:	f36f 1304 	bfc	r3, #4, #1
 800a738:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
 800a73c:	e000      	b.n	800a740 <rx_arp+0x1e0>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 800a73e:	bf00      	nop
      }
    }
  }
}
 800a740:	3718      	adds	r7, #24
 800a742:	46bd      	mov	sp, r7
 800a744:	bdb0      	pop	{r4, r5, r7, pc}
 800a746:	bf00      	nop
 800a748:	08016370 	.word	0x08016370
 800a74c:	08014270 	.word	0x08014270
 800a750:	08007d09 	.word	0x08007d09
 800a754:	08015784 	.word	0x08015784
 800a758:	08007dcd 	.word	0x08007dcd
 800a75c:	0801579c 	.word	0x0801579c

0800a760 <rx_icmp>:

static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800a760:	b580      	push	{r7, lr}
 800a762:	b08a      	sub	sp, #40	; 0x28
 800a764:	af02      	add	r7, sp, #8
 800a766:	6078      	str	r0, [r7, #4]
 800a768:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("ICMP %d", (int) len));
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	2b08      	cmp	r3, #8
 800a772:	d14d      	bne.n	800a810 <rx_icmp+0xb0>
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	69db      	ldr	r3, [r3, #28]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d049      	beq.n	800a810 <rx_icmp+0xb0>
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	69db      	ldr	r3, [r3, #28]
 800a780:	691a      	ldr	r2, [r3, #16]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	689b      	ldr	r3, [r3, #8]
 800a786:	429a      	cmp	r2, r3
 800a788:	d142      	bne.n	800a810 <rx_icmp+0xb0>
    size_t hlen = sizeof(struct eth) + sizeof(struct ip) + sizeof(struct icmp);
 800a78a:	2326      	movs	r3, #38	; 0x26
 800a78c:	61bb      	str	r3, [r7, #24]
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	699a      	ldr	r2, [r3, #24]
 800a792:	69bb      	ldr	r3, [r7, #24]
 800a794:	1ad3      	subs	r3, r2, r3
 800a796:	617b      	str	r3, [r7, #20]
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	61fb      	str	r3, [r7, #28]
    if (plen > space) plen = space;
 800a79e:	69fa      	ldr	r2, [r7, #28]
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d901      	bls.n	800a7aa <rx_icmp+0x4a>
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	61fb      	str	r3, [r7, #28]
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	691b      	ldr	r3, [r3, #16]
 800a7ae:	1d99      	adds	r1, r3, #6
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6898      	ldr	r0, [r3, #8]
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	69db      	ldr	r3, [r3, #28]
 800a7b8:	68db      	ldr	r3, [r3, #12]
 800a7ba:	69fa      	ldr	r2, [r7, #28]
 800a7bc:	3204      	adds	r2, #4
 800a7be:	9201      	str	r2, [sp, #4]
 800a7c0:	9300      	str	r3, [sp, #0]
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f7ff fc74 	bl	800a0b4 <tx_ip>
 800a7cc:	6138      	str	r0, [r7, #16]
                          sizeof(struct icmp) + plen);
    struct icmp *icmp = (struct icmp *) (ip + 1);
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	3314      	adds	r3, #20
 800a7d2:	60fb      	str	r3, [r7, #12]
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 800a7d4:	2204      	movs	r2, #4
 800a7d6:	2100      	movs	r1, #0
 800a7d8:	68f8      	ldr	r0, [r7, #12]
 800a7da:	f008 fe58 	bl	801348e <memset>
    memcpy(icmp + 1, pkt->pay.ptr, plen);  // Copy RX payload to TX
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	1d18      	adds	r0, r3, #4
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	689b      	ldr	r3, [r3, #8]
 800a7e6:	69fa      	ldr	r2, [r7, #28]
 800a7e8:	4619      	mov	r1, r3
 800a7ea:	f008 ff37 	bl	801365c <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 800a7ee:	69fb      	ldr	r3, [r7, #28]
 800a7f0:	3304      	adds	r3, #4
 800a7f2:	4619      	mov	r1, r3
 800a7f4:	68f8      	ldr	r0, [r7, #12]
 800a7f6:	f7ff fb4b 	bl	8009e90 <ipcsum>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	805a      	strh	r2, [r3, #2]
    ether_output(ifp, hlen + plen);
 800a802:	69ba      	ldr	r2, [r7, #24]
 800a804:	69fb      	ldr	r3, [r7, #28]
 800a806:	4413      	add	r3, r2
 800a808:	4619      	mov	r1, r3
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f7ff fb53 	bl	8009eb6 <ether_output>
  }
}
 800a810:	bf00      	nop
 800a812:	3720      	adds	r7, #32
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}

0800a818 <rx_dhcp_client>:

static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800a818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a81c:	b08e      	sub	sp, #56	; 0x38
 800a81e:	af00      	add	r7, sp, #0
 800a820:	60f8      	str	r0, [r7, #12]
 800a822:	60b9      	str	r1, [r7, #8]
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0;
 800a824:	2300      	movs	r3, #0
 800a826:	637b      	str	r3, [r7, #52]	; 0x34
 800a828:	2300      	movs	r3, #0
 800a82a:	623b      	str	r3, [r7, #32]
 800a82c:	2300      	movs	r3, #0
 800a82e:	61fb      	str	r3, [r7, #28]
 800a830:	2300      	movs	r3, #0
 800a832:	61bb      	str	r3, [r7, #24]
  uint8_t msgtype = 0, state = ifp->state;
 800a834:	2300      	movs	r3, #0
 800a836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a840:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  // perform size check first, then access fields
  uint8_t *p = pkt->dhcp->options,
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a848:	33f0      	adds	r3, #240	; 0xf0
 800a84a:	62fb      	str	r3, [r7, #44]	; 0x2c
          *end = (uint8_t *) &pkt->raw.ptr[pkt->raw.len];
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	681a      	ldr	r2, [r3, #0]
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	4413      	add	r3, r2
 800a856:	627b      	str	r3, [r7, #36]	; 0x24
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a85c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800a860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a862:	429a      	cmp	r2, r3
 800a864:	f0c0 8151 	bcc.w	800ab0a <rx_dhcp_client+0x2f2>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a86c:	1d18      	adds	r0, r3, #4
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	3302      	adds	r3, #2
 800a872:	2204      	movs	r2, #4
 800a874:	4619      	mov	r1, r3
 800a876:	f008 fde0 	bl	801343a <memcmp>
 800a87a:	4603      	mov	r3, r0
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	f040 8146 	bne.w	800ab0e <rx_dhcp_client+0x2f6>
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 800a882:	e05b      	b.n	800a93c <rx_dhcp_client+0x124>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 800a884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a886:	781b      	ldrb	r3, [r3, #0]
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d10e      	bne.n	800a8aa <rx_dhcp_client+0x92>
 800a88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a88e:	3301      	adds	r3, #1
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	2b04      	cmp	r3, #4
 800a894:	d109      	bne.n	800a8aa <rx_dhcp_client+0x92>
 800a896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a898:	3306      	adds	r3, #6
 800a89a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d904      	bls.n	800a8aa <rx_dhcp_client+0x92>
      memcpy(&mask, p + 2, sizeof(mask));
 800a8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a2:	3302      	adds	r3, #2
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	61fb      	str	r3, [r7, #28]
 800a8a8:	e041      	b.n	800a92e <rx_dhcp_client+0x116>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 800a8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ac:	781b      	ldrb	r3, [r3, #0]
 800a8ae:	2b03      	cmp	r3, #3
 800a8b0:	d112      	bne.n	800a8d8 <rx_dhcp_client+0xc0>
 800a8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	2b04      	cmp	r3, #4
 800a8ba:	d10d      	bne.n	800a8d8 <rx_dhcp_client+0xc0>
 800a8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8be:	3306      	adds	r3, #6
 800a8c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d908      	bls.n	800a8d8 <rx_dhcp_client+0xc0>
      memcpy(&gw, p + 2, sizeof(gw));
 800a8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c8:	3302      	adds	r3, #2
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	623b      	str	r3, [r7, #32]
      ip = pkt->dhcp->yiaddr;
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8d2:	691b      	ldr	r3, [r3, #16]
 800a8d4:	637b      	str	r3, [r7, #52]	; 0x34
 800a8d6:	e02a      	b.n	800a92e <rx_dhcp_client+0x116>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 800a8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8da:	781b      	ldrb	r3, [r3, #0]
 800a8dc:	2b33      	cmp	r3, #51	; 0x33
 800a8de:	d114      	bne.n	800a90a <rx_dhcp_client+0xf2>
 800a8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	781b      	ldrb	r3, [r3, #0]
 800a8e6:	2b04      	cmp	r3, #4
 800a8e8:	d10f      	bne.n	800a90a <rx_dhcp_client+0xf2>
 800a8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ec:	3306      	adds	r3, #6
 800a8ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d90a      	bls.n	800a90a <rx_dhcp_client+0xf2>
      memcpy(&lease, p + 2, sizeof(lease));
 800a8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f6:	3302      	adds	r3, #2
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	61bb      	str	r3, [r7, #24]
      lease = mg_ntohl(lease);
 800a8fc:	69bb      	ldr	r3, [r7, #24]
 800a8fe:	4618      	mov	r0, r3
 800a900:	f7fe fd62 	bl	80093c8 <mg_ntohl>
 800a904:	4603      	mov	r3, r0
 800a906:	61bb      	str	r3, [r7, #24]
 800a908:	e011      	b.n	800a92e <rx_dhcp_client+0x116>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 800a90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	2b35      	cmp	r3, #53	; 0x35
 800a910:	d10d      	bne.n	800a92e <rx_dhcp_client+0x116>
 800a912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a914:	3301      	adds	r3, #1
 800a916:	781b      	ldrb	r3, [r3, #0]
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d108      	bne.n	800a92e <rx_dhcp_client+0x116>
 800a91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a91e:	3306      	adds	r3, #6
 800a920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a922:	429a      	cmp	r2, r3
 800a924:	d903      	bls.n	800a92e <rx_dhcp_client+0x116>
      msgtype = p[2];
 800a926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a928:	789b      	ldrb	r3, [r3, #2]
 800a92a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
    p += p[1] + 2;
 800a92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a930:	3301      	adds	r3, #1
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	3302      	adds	r3, #2
 800a936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a938:	4413      	add	r3, r2
 800a93a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 800a93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a93e:	3301      	adds	r3, #1
 800a940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a942:	429a      	cmp	r2, r3
 800a944:	d903      	bls.n	800a94e <rx_dhcp_client+0x136>
 800a946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	2bff      	cmp	r3, #255	; 0xff
 800a94c:	d19a      	bne.n	800a884 <rx_dhcp_client+0x6c>
  }
  // Process message type, RFC-1533 (9.4); RFC-2131 (3.1, 4)
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 800a94e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a952:	2b06      	cmp	r3, #6
 800a954:	d10c      	bne.n	800a970 <rx_dhcp_client+0x158>
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	689b      	ldr	r3, [r3, #8]
 800a95a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d107      	bne.n	800a970 <rx_dhcp_client+0x158>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	2201      	movs	r2, #1
 800a964:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2200      	movs	r2, #0
 800a96c:	609a      	str	r2, [r3, #8]
 800a96e:	e0c1      	b.n	800aaf4 <rx_dhcp_client+0x2dc>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 800a970:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a974:	2b02      	cmp	r3, #2
 800a976:	d11a      	bne.n	800a9ae <rx_dhcp_client+0x196>
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d115      	bne.n	800a9ae <rx_dhcp_client+0x196>
 800a982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a984:	2b00      	cmp	r3, #0
 800a986:	d012      	beq.n	800a9ae <rx_dhcp_client+0x196>
 800a988:	6a3b      	ldr	r3, [r7, #32]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d00f      	beq.n	800a9ae <rx_dhcp_client+0x196>
 800a98e:	69bb      	ldr	r3, [r7, #24]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d00c      	beq.n	800a9ae <rx_dhcp_client+0x196>
             lease) {                                 // DHCPOFFER
    tx_dhcp_request_sel(ifp, ip, pkt->dhcp->siaddr);  // select IP, (4.4.1)
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a998:	695b      	ldr	r3, [r3, #20]
 800a99a:	461a      	mov	r2, r3
 800a99c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a99e:	68f8      	ldr	r0, [r7, #12]
 800a9a0:	f7ff fcd8 	bl	800a354 <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;                  // REQUESTING state
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2202      	movs	r2, #2
 800a9a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800a9ac:	e0a2      	b.n	800aaf4 <rx_dhcp_client+0x2dc>
  } else if (msgtype == 5) {                          // DHCPACK
 800a9ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a9b2:	2b05      	cmp	r3, #5
 800a9b4:	f040 809e 	bne.w	800aaf4 <rx_dhcp_client+0x2dc>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a9be:	2b02      	cmp	r3, #2
 800a9c0:	d162      	bne.n	800aa88 <rx_dhcp_client+0x270>
 800a9c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d05f      	beq.n	800aa88 <rx_dhcp_client+0x270>
 800a9c8:	6a3b      	ldr	r3, [r7, #32]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d05c      	beq.n	800aa88 <rx_dhcp_client+0x270>
 800a9ce:	69bb      	ldr	r3, [r7, #24]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d059      	beq.n	800aa88 <rx_dhcp_client+0x270>
      ifp->lease_expire = ifp->now + lease * 1000;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800a9da:	69b9      	ldr	r1, [r7, #24]
 800a9dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a9e0:	fb00 f101 	mul.w	r1, r0, r1
 800a9e4:	2000      	movs	r0, #0
 800a9e6:	4688      	mov	r8, r1
 800a9e8:	4681      	mov	r9, r0
 800a9ea:	eb12 0108 	adds.w	r1, r2, r8
 800a9ee:	6039      	str	r1, [r7, #0]
 800a9f0:	eb43 0309 	adc.w	r3, r3, r9
 800a9f4:	607b      	str	r3, [r7, #4]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a9fc:	e9c3 1216 	strd	r1, r2, [r3, #88]	; 0x58
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 800aa00:	4b45      	ldr	r3, [pc, #276]	; (800ab18 <rx_dhcp_client+0x300>)
 800aa02:	f641 62f1 	movw	r2, #7921	; 0x1ef1
 800aa06:	4945      	ldr	r1, [pc, #276]	; (800ab1c <rx_dhcp_client+0x304>)
 800aa08:	2002      	movs	r0, #2
 800aa0a:	f7fc fa9f 	bl	8006f4c <mg_log_prefix>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d00f      	beq.n	800aa34 <rx_dhcp_client+0x21c>
 800aa14:	69bc      	ldr	r4, [r7, #24]
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800aa1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aa20:	f04f 0300 	mov.w	r3, #0
 800aa24:	f7f5 fee8 	bl	80007f8 <__aeabi_uldivmod>
 800aa28:	4602      	mov	r2, r0
 800aa2a:	460b      	mov	r3, r1
 800aa2c:	4621      	mov	r1, r4
 800aa2e:	483c      	ldr	r0, [pc, #240]	; (800ab20 <rx_dhcp_client+0x308>)
 800aa30:	f7fc fae6 	bl	8007000 <mg_log>
      // assume DHCP server = router until ARP resolves
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	691b      	ldr	r3, [r3, #16]
 800aa3e:	3306      	adds	r3, #6
 800aa40:	2206      	movs	r2, #6
 800aa42:	4619      	mov	r1, r3
 800aa44:	f008 fe0a 	bl	801365c <memcpy>
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa4c:	609a      	str	r2, [r3, #8]
 800aa4e:	6a3a      	ldr	r2, [r7, #32]
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	611a      	str	r2, [r3, #16]
 800aa54:	69fa      	ldr	r2, [r7, #28]
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	60da      	str	r2, [r3, #12]
      ifp->state = MG_TCPIP_STATE_READY;  // BOUND state
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2203      	movs	r2, #3
 800aa5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
      uint64_t rand;
      mg_random(&rand, sizeof(rand));
 800aa62:	f107 0310 	add.w	r3, r7, #16
 800aa66:	2108      	movs	r1, #8
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f7f6 f8a7 	bl	8000bbc <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 800aa6e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800aa72:	4614      	mov	r4, r2
 800aa74:	f7f6 f894 	bl	8000ba0 <mg_millis>
 800aa78:	4602      	mov	r2, r0
 800aa7a:	460b      	mov	r3, r1
 800aa7c:	4613      	mov	r3, r2
 800aa7e:	4423      	add	r3, r4
 800aa80:	4618      	mov	r0, r3
 800aa82:	f008 fad5 	bl	8013030 <srand>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 800aa86:	e035      	b.n	800aaf4 <rx_dhcp_client+0x2dc>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800aa8e:	2b03      	cmp	r3, #3
 800aa90:	d130      	bne.n	800aaf4 <rx_dhcp_client+0x2dc>
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	689b      	ldr	r3, [r3, #8]
 800aa96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d12b      	bne.n	800aaf4 <rx_dhcp_client+0x2dc>
      ifp->lease_expire = ifp->now + lease * 1000;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800aaa2:	69b9      	ldr	r1, [r7, #24]
 800aaa4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800aaa8:	fb00 f101 	mul.w	r1, r0, r1
 800aaac:	2000      	movs	r0, #0
 800aaae:	460c      	mov	r4, r1
 800aab0:	4605      	mov	r5, r0
 800aab2:	eb12 0a04 	adds.w	sl, r2, r4
 800aab6:	eb43 0b05 	adc.w	fp, r3, r5
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	e9c3 ab16 	strd	sl, fp, [r3, #88]	; 0x58
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 800aac0:	4b15      	ldr	r3, [pc, #84]	; (800ab18 <rx_dhcp_client+0x300>)
 800aac2:	f641 62fb 	movw	r2, #7931	; 0x1efb
 800aac6:	4915      	ldr	r1, [pc, #84]	; (800ab1c <rx_dhcp_client+0x304>)
 800aac8:	2002      	movs	r0, #2
 800aaca:	f7fc fa3f 	bl	8006f4c <mg_log_prefix>
 800aace:	4603      	mov	r3, r0
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d00f      	beq.n	800aaf4 <rx_dhcp_client+0x2dc>
 800aad4:	69bc      	ldr	r4, [r7, #24]
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800aadc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aae0:	f04f 0300 	mov.w	r3, #0
 800aae4:	f7f5 fe88 	bl	80007f8 <__aeabi_uldivmod>
 800aae8:	4602      	mov	r2, r0
 800aaea:	460b      	mov	r3, r1
 800aaec:	4621      	mov	r1, r4
 800aaee:	480c      	ldr	r0, [pc, #48]	; (800ab20 <rx_dhcp_client+0x308>)
 800aaf0:	f7fc fa86 	bl	8007000 <mg_log>
    }  // TODO(): accept provided T1/T2 and store server IP for renewal (4.4)
  }
  if (ifp->state != state) onstatechange(ifp);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800aafa:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d006      	beq.n	800ab10 <rx_dhcp_client+0x2f8>
 800ab02:	68f8      	ldr	r0, [r7, #12]
 800ab04:	f7ff fa50 	bl	8009fa8 <onstatechange>
 800ab08:	e002      	b.n	800ab10 <rx_dhcp_client+0x2f8>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800ab0a:	bf00      	nop
 800ab0c:	e000      	b.n	800ab10 <rx_dhcp_client+0x2f8>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 800ab0e:	bf00      	nop
}
 800ab10:	3738      	adds	r7, #56	; 0x38
 800ab12:	46bd      	mov	sp, r7
 800ab14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab18:	08016378 	.word	0x08016378
 800ab1c:	08014270 	.word	0x08014270
 800ab20:	080157b8 	.word	0x080157b8

0800ab24 <rx_dhcp_server>:

// Simple DHCP server that assigns a next IP address: ifp->ip + 1
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800ab24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab28:	b0d6      	sub	sp, #344	; 0x158
 800ab2a:	af04      	add	r7, sp, #16
 800ab2c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ab30:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800ab34:	6018      	str	r0, [r3, #0]
 800ab36:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ab3a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800ab3e:	6019      	str	r1, [r3, #0]
  uint8_t op = 0, *p = pkt->dhcp->options,
 800ab40:	2300      	movs	r3, #0
 800ab42:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 800ab46:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ab4a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab52:	33f0      	adds	r3, #240	; 0xf0
 800ab54:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
          *end = (uint8_t *) &pkt->raw.ptr[pkt->raw.len];
 800ab58:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ab5c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ab68:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	4413      	add	r3, r2
 800ab72:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800ab76:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ab7a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab82:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800ab86:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	f0c0 818b 	bcc.w	800aea6 <rx_dhcp_server+0x382>
  // struct dhcp *req = pkt->dhcp;
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 800ab90:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ab94:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800ab98:	4ac6      	ldr	r2, [pc, #792]	; (800aeb4 <rx_dhcp_server+0x390>)
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	4611      	mov	r1, r2
 800ab9e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800aba2:	461a      	mov	r2, r3
 800aba4:	f008 fd5a 	bl	801365c <memcpy>
  res.yiaddr = ifp->ip;
 800aba8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800abac:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	689a      	ldr	r2, [r3, #8]
 800abb4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800abb8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800abbc:	611a      	str	r2, [r3, #16]
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 800abbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800abc2:	3310      	adds	r3, #16
 800abc4:	3303      	adds	r3, #3
 800abc6:	781a      	ldrb	r2, [r3, #0]
 800abc8:	3201      	adds	r2, #1
 800abca:	b2d2      	uxtb	r2, r2
 800abcc:	701a      	strb	r2, [r3, #0]
  while (p + 1 < end && p[0] != 255) {             // Parse options
 800abce:	e020      	b.n	800ac12 <rx_dhcp_server+0xee>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 800abd0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	2b35      	cmp	r3, #53	; 0x35
 800abd8:	d111      	bne.n	800abfe <rx_dhcp_server+0xda>
 800abda:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800abde:	3301      	adds	r3, #1
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	2b01      	cmp	r3, #1
 800abe4:	d10b      	bne.n	800abfe <rx_dhcp_server+0xda>
 800abe6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800abea:	3302      	adds	r3, #2
 800abec:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d904      	bls.n	800abfe <rx_dhcp_server+0xda>
      op = p[2];
 800abf4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800abf8:	789b      	ldrb	r3, [r3, #2]
 800abfa:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
    }
    p += p[1] + 2;
 800abfe:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800ac02:	3301      	adds	r3, #1
 800ac04:	781b      	ldrb	r3, [r3, #0]
 800ac06:	3302      	adds	r3, #2
 800ac08:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800ac0c:	4413      	add	r3, r2
 800ac0e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  while (p + 1 < end && p[0] != 255) {             // Parse options
 800ac12:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800ac16:	3301      	adds	r3, #1
 800ac18:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	d904      	bls.n	800ac2a <rx_dhcp_server+0x106>
 800ac20:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	2bff      	cmp	r3, #255	; 0xff
 800ac28:	d1d2      	bne.n	800abd0 <rx_dhcp_server+0xac>
  }
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 800ac2a:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 800ac2e:	2b01      	cmp	r3, #1
 800ac30:	d004      	beq.n	800ac3c <rx_dhcp_server+0x118>
 800ac32:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 800ac36:	2b03      	cmp	r3, #3
 800ac38:	f040 8136 	bne.w	800aea8 <rx_dhcp_server+0x384>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 800ac3c:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d101      	bne.n	800ac48 <rx_dhcp_server+0x124>
 800ac44:	2302      	movs	r3, #2
 800ac46:	e000      	b.n	800ac4a <rx_dhcp_server+0x126>
 800ac48:	2305      	movs	r3, #5
 800ac4a:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
    uint8_t opts[] = {
 800ac4e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ac52:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ac56:	2235      	movs	r2, #53	; 0x35
 800ac58:	701a      	strb	r2, [r3, #0]
 800ac5a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ac5e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ac62:	2201      	movs	r2, #1
 800ac64:	705a      	strb	r2, [r3, #1]
 800ac66:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ac6a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ac6e:	f897 213b 	ldrb.w	r2, [r7, #315]	; 0x13b
 800ac72:	709a      	strb	r2, [r3, #2]
 800ac74:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ac78:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	70da      	strb	r2, [r3, #3]
 800ac80:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ac84:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ac88:	2204      	movs	r2, #4
 800ac8a:	711a      	strb	r2, [r3, #4]
 800ac8c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ac90:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ac94:	2200      	movs	r2, #0
 800ac96:	715a      	strb	r2, [r3, #5]
 800ac98:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ac9c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800aca0:	2200      	movs	r2, #0
 800aca2:	719a      	strb	r2, [r3, #6]
 800aca4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800aca8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800acac:	2200      	movs	r2, #0
 800acae:	71da      	strb	r2, [r3, #7]
 800acb0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800acb4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800acb8:	2200      	movs	r2, #0
 800acba:	721a      	strb	r2, [r3, #8]
 800acbc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800acc0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800acc4:	2236      	movs	r2, #54	; 0x36
 800acc6:	725a      	strb	r2, [r3, #9]
 800acc8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800accc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800acd0:	2204      	movs	r2, #4
 800acd2:	729a      	strb	r2, [r3, #10]
 800acd4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800acd8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800acdc:	2200      	movs	r2, #0
 800acde:	72da      	strb	r2, [r3, #11]
 800ace0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ace4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ace8:	2200      	movs	r2, #0
 800acea:	731a      	strb	r2, [r3, #12]
 800acec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800acf0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800acf4:	2200      	movs	r2, #0
 800acf6:	735a      	strb	r2, [r3, #13]
 800acf8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800acfc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ad00:	2200      	movs	r2, #0
 800ad02:	739a      	strb	r2, [r3, #14]
 800ad04:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ad08:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ad0c:	220c      	movs	r2, #12
 800ad0e:	73da      	strb	r2, [r3, #15]
 800ad10:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ad14:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ad18:	2203      	movs	r2, #3
 800ad1a:	741a      	strb	r2, [r3, #16]
 800ad1c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ad20:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ad24:	226d      	movs	r2, #109	; 0x6d
 800ad26:	745a      	strb	r2, [r3, #17]
 800ad28:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ad2c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ad30:	2269      	movs	r2, #105	; 0x69
 800ad32:	749a      	strb	r2, [r3, #18]
 800ad34:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ad38:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ad3c:	2270      	movs	r2, #112	; 0x70
 800ad3e:	74da      	strb	r2, [r3, #19]
 800ad40:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ad44:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ad48:	2233      	movs	r2, #51	; 0x33
 800ad4a:	751a      	strb	r2, [r3, #20]
 800ad4c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ad50:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ad54:	2204      	movs	r2, #4
 800ad56:	755a      	strb	r2, [r3, #21]
 800ad58:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ad5c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ad60:	22ff      	movs	r2, #255	; 0xff
 800ad62:	759a      	strb	r2, [r3, #22]
 800ad64:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ad68:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ad6c:	22ff      	movs	r2, #255	; 0xff
 800ad6e:	75da      	strb	r2, [r3, #23]
 800ad70:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ad74:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ad78:	22ff      	movs	r2, #255	; 0xff
 800ad7a:	761a      	strb	r2, [r3, #24]
 800ad7c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ad80:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ad84:	22ff      	movs	r2, #255	; 0xff
 800ad86:	765a      	strb	r2, [r3, #25]
 800ad88:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ad8c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ad90:	22ff      	movs	r2, #255	; 0xff
 800ad92:	769a      	strb	r2, [r3, #26]
        54, 4, 0,   0,   0,   0,    // Server ID
        12, 3, 'm', 'i', 'p',       // Host name: "mip"
        51, 4, 255, 255, 255, 255,  // Lease time
        255                         // End of options
    };
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 800ad94:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ad98:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ada0:	f103 011c 	add.w	r1, r3, #28
 800ada4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ada8:	331c      	adds	r3, #28
 800adaa:	2206      	movs	r2, #6
 800adac:	4618      	mov	r0, r3
 800adae:	f008 fc55 	bl	801365c <memcpy>
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 800adb2:	f107 030c 	add.w	r3, r7, #12
 800adb6:	3305      	adds	r3, #5
 800adb8:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800adbc:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 800adc0:	6812      	ldr	r2, [r2, #0]
 800adc2:	320c      	adds	r2, #12
 800adc4:	6812      	ldr	r2, [r2, #0]
 800adc6:	601a      	str	r2, [r3, #0]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 800adc8:	f107 030c 	add.w	r3, r7, #12
 800adcc:	330b      	adds	r3, #11
 800adce:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800add2:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 800add6:	6812      	ldr	r2, [r2, #0]
 800add8:	3208      	adds	r2, #8
 800adda:	6812      	ldr	r2, [r2, #0]
 800addc:	601a      	str	r2, [r3, #0]
    memcpy(&res.options, opts, sizeof(opts));
 800adde:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ade2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800ade6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800adea:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800adee:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 800adf2:	4615      	mov	r5, r2
 800adf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800adf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800adf8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800adfc:	c403      	stmia	r4!, {r0, r1}
 800adfe:	8022      	strh	r2, [r4, #0]
 800ae00:	3402      	adds	r4, #2
 800ae02:	0c13      	lsrs	r3, r2, #16
 800ae04:	7023      	strb	r3, [r4, #0]
    res.magic = pkt->dhcp->magic;
 800ae06:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ae0a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae12:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 800ae16:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ae1a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800ae1e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    res.xid = pkt->dhcp->xid;
 800ae22:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ae26:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae2e:	685a      	ldr	r2, [r3, #4]
 800ae30:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ae34:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800ae38:	605a      	str	r2, [r3, #4]
    // memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 800ae3a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ae3e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	691b      	ldr	r3, [r3, #16]
 800ae46:	1d9d      	adds	r5, r3, #6
 800ae48:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ae4c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	689e      	ldr	r6, [r3, #8]
 800ae54:	2043      	movs	r0, #67	; 0x43
 800ae56:	f7fe fad0 	bl	80093fa <mg_ntohs>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	4698      	mov	r8, r3
 800ae5e:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	d005      	beq.n	800ae72 <rx_dhcp_server+0x34e>
 800ae66:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ae6a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800ae6e:	691c      	ldr	r4, [r3, #16]
 800ae70:	e001      	b.n	800ae76 <rx_dhcp_server+0x352>
 800ae72:	f04f 34ff 	mov.w	r4, #4294967295
 800ae76:	2044      	movs	r0, #68	; 0x44
 800ae78:	f7fe fabf 	bl	80093fa <mg_ntohs>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	461a      	mov	r2, r3
 800ae80:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ae84:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
 800ae88:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ae8c:	9303      	str	r3, [sp, #12]
 800ae8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ae92:	9302      	str	r3, [sp, #8]
 800ae94:	9201      	str	r2, [sp, #4]
 800ae96:	9400      	str	r4, [sp, #0]
 800ae98:	4643      	mov	r3, r8
 800ae9a:	4632      	mov	r2, r6
 800ae9c:	4629      	mov	r1, r5
 800ae9e:	6800      	ldr	r0, [r0, #0]
 800aea0:	f7ff f95e 	bl	800a160 <tx_udp>
 800aea4:	e000      	b.n	800aea8 <rx_dhcp_server+0x384>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800aea6:	bf00      	nop
           op == 1 ? ~0U : res.yiaddr, mg_htons(68), &res, sizeof(res));
  }
}
 800aea8:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800aeac:	46bd      	mov	sp, r7
 800aeae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aeb2:	bf00      	nop
 800aeb4:	080157d0 	.word	0x080157d0

0800aeb8 <rx_udp>:

static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b084      	sub	sp, #16
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aec6:	2201      	movs	r2, #1
 800aec8:	6839      	ldr	r1, [r7, #0]
 800aeca:	4618      	mov	r0, r3
 800aecc:	f7ff faf0 	bl	800a4b0 <getpeer>
 800aed0:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d059      	beq.n	800af8c <rx_udp+0xd4>
    // No UDP listener on this port. Should send ICMP, but keep silent.
  } else {
    c->rem.port = pkt->udp->sport;
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aedc:	881b      	ldrh	r3, [r3, #0]
 800aede:	b29a      	uxth	r2, r3
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	859a      	strh	r2, [r3, #44]	; 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	331c      	adds	r3, #28
 800aee8:	683a      	ldr	r2, [r7, #0]
 800aeea:	69d2      	ldr	r2, [r2, #28]
 800aeec:	320c      	adds	r2, #12
 800aeee:	6812      	ldr	r2, [r2, #0]
 800aef0:	601a      	str	r2, [r3, #0]
    struct connstate *s = (struct connstate *) (c + 1);
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	3390      	adds	r3, #144	; 0x90
 800aef6:	60bb      	str	r3, [r7, #8]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	f103 0010 	add.w	r0, r3, #16
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	691b      	ldr	r3, [r3, #16]
 800af02:	3306      	adds	r3, #6
 800af04:	2206      	movs	r2, #6
 800af06:	4619      	mov	r1, r3
 800af08:	f008 fba8 	bl	801365c <memcpy>
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af10:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800af14:	d304      	bcc.n	800af20 <rx_udp+0x68>
      mg_error(c, "max_recv_buf_size reached");
 800af16:	491f      	ldr	r1, [pc, #124]	; (800af94 <rx_udp+0xdc>)
 800af18:	68f8      	ldr	r0, [r7, #12]
 800af1a:	f7f7 f859 	bl	8001fd0 <mg_error>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.ptr, pkt->pay.len);
      c->recv.len += pkt->pay.len;
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 800af1e:	e035      	b.n	800af8c <rx_udp+0xd4>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af28:	1ad2      	subs	r2, r2, r3
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	68db      	ldr	r3, [r3, #12]
 800af2e:	429a      	cmp	r2, r3
 800af30:	d212      	bcs.n	800af58 <rx_udp+0xa0>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	68db      	ldr	r3, [r3, #12]
 800af40:	4413      	add	r3, r2
 800af42:	4619      	mov	r1, r3
 800af44:	f7fb f812 	bl	8005f6c <mg_iobuf_resize>
 800af48:	4603      	mov	r3, r0
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d104      	bne.n	800af58 <rx_udp+0xa0>
      mg_error(c, "oom");
 800af4e:	4912      	ldr	r1, [pc, #72]	; (800af98 <rx_udp+0xe0>)
 800af50:	68f8      	ldr	r0, [r7, #12]
 800af52:	f7f7 f83d 	bl	8001fd0 <mg_error>
}
 800af56:	e019      	b.n	800af8c <rx_udp+0xd4>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.ptr, pkt->pay.len);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af60:	18d0      	adds	r0, r2, r3
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	6899      	ldr	r1, [r3, #8]
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	68db      	ldr	r3, [r3, #12]
 800af6a:	461a      	mov	r2, r3
 800af6c:	f008 fb76 	bl	801365c <memcpy>
      c->recv.len += pkt->pay.len;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	68db      	ldr	r3, [r3, #12]
 800af78:	441a      	add	r2, r3
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	641a      	str	r2, [r3, #64]	; 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	330c      	adds	r3, #12
 800af82:	461a      	mov	r2, r3
 800af84:	2107      	movs	r1, #7
 800af86:	68f8      	ldr	r0, [r7, #12]
 800af88:	f7f7 f800 	bl	8001f8c <mg_call>
}
 800af8c:	bf00      	nop
 800af8e:	3710      	adds	r7, #16
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}
 800af94:	080158e0 	.word	0x080158e0
 800af98:	080158fc 	.word	0x080158fc

0800af9c <tx_tcp>:

static size_t tx_tcp(struct mg_tcpip_if *ifp, uint8_t *dst_mac, uint32_t dst_ip,
                     uint8_t flags, uint16_t sport, uint16_t dport,
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 800af9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af9e:	b091      	sub	sp, #68	; 0x44
 800afa0:	af06      	add	r7, sp, #24
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	607a      	str	r2, [r7, #4]
 800afa8:	70fb      	strb	r3, [r7, #3]
  struct ip *ip =
      tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	689a      	ldr	r2, [r3, #8]
 800afae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afb0:	3314      	adds	r3, #20
 800afb2:	9301      	str	r3, [sp, #4]
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	9300      	str	r3, [sp, #0]
 800afb8:	4613      	mov	r3, r2
 800afba:	2206      	movs	r2, #6
 800afbc:	68b9      	ldr	r1, [r7, #8]
 800afbe:	68f8      	ldr	r0, [r7, #12]
 800afc0:	f7ff f878 	bl	800a0b4 <tx_ip>
 800afc4:	6278      	str	r0, [r7, #36]	; 0x24
  struct tcp *tcp = (struct tcp *) (ip + 1);
 800afc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc8:	3314      	adds	r3, #20
 800afca:	623b      	str	r3, [r7, #32]
  memset(tcp, 0, sizeof(*tcp));
 800afcc:	2214      	movs	r2, #20
 800afce:	2100      	movs	r1, #0
 800afd0:	6a38      	ldr	r0, [r7, #32]
 800afd2:	f008 fa5c 	bl	801348e <memset>
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 800afd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d009      	beq.n	800aff0 <tx_tcp+0x54>
 800afdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d006      	beq.n	800aff0 <tx_tcp+0x54>
 800afe2:	6a3b      	ldr	r3, [r7, #32]
 800afe4:	3314      	adds	r3, #20
 800afe6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800afe8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800afea:	4618      	mov	r0, r3
 800afec:	f008 fa35 	bl	801345a <memmove>
  tcp->sport = sport;
 800aff0:	6a3b      	ldr	r3, [r7, #32]
 800aff2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800aff6:	801a      	strh	r2, [r3, #0]
  tcp->dport = dport;
 800aff8:	6a3b      	ldr	r3, [r7, #32]
 800affa:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800affe:	805a      	strh	r2, [r3, #2]
  tcp->seq = seq;
 800b000:	6a3b      	ldr	r3, [r7, #32]
 800b002:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b004:	605a      	str	r2, [r3, #4]
  tcp->ack = ack;
 800b006:	6a3b      	ldr	r3, [r7, #32]
 800b008:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b00a:	609a      	str	r2, [r3, #8]
  tcp->flags = flags;
 800b00c:	6a3b      	ldr	r3, [r7, #32]
 800b00e:	78fa      	ldrb	r2, [r7, #3]
 800b010:	735a      	strb	r2, [r3, #13]
  tcp->win = mg_htons(8192);
 800b012:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b016:	f7fe f9f0 	bl	80093fa <mg_ntohs>
 800b01a:	4603      	mov	r3, r0
 800b01c:	461a      	mov	r2, r3
 800b01e:	6a3b      	ldr	r3, [r7, #32]
 800b020:	81da      	strh	r2, [r3, #14]
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 800b022:	6a3b      	ldr	r3, [r7, #32]
 800b024:	2250      	movs	r2, #80	; 0x50
 800b026:	731a      	strb	r2, [r3, #12]
  uint32_t cs = 0;
 800b028:	2300      	movs	r3, #0
 800b02a:	61fb      	str	r3, [r7, #28]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 800b02c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b02e:	b29b      	uxth	r3, r3
 800b030:	3314      	adds	r3, #20
 800b032:	837b      	strh	r3, [r7, #26]
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 800b034:	2300      	movs	r3, #0
 800b036:	753b      	strb	r3, [r7, #20]
 800b038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03a:	7a5b      	ldrb	r3, [r3, #9]
 800b03c:	757b      	strb	r3, [r7, #21]
 800b03e:	8b7b      	ldrh	r3, [r7, #26]
 800b040:	0a1b      	lsrs	r3, r3, #8
 800b042:	b29b      	uxth	r3, r3
 800b044:	b2db      	uxtb	r3, r3
 800b046:	75bb      	strb	r3, [r7, #22]
 800b048:	8b7b      	ldrh	r3, [r7, #26]
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	75fb      	strb	r3, [r7, #23]
  cs = csumup(cs, tcp, n);
 800b04e:	8b7b      	ldrh	r3, [r7, #26]
 800b050:	461a      	mov	r2, r3
 800b052:	6a39      	ldr	r1, [r7, #32]
 800b054:	69f8      	ldr	r0, [r7, #28]
 800b056:	f7fe fed3 	bl	8009e00 <csumup>
 800b05a:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 800b05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b05e:	330c      	adds	r3, #12
 800b060:	2204      	movs	r2, #4
 800b062:	4619      	mov	r1, r3
 800b064:	69f8      	ldr	r0, [r7, #28]
 800b066:	f7fe fecb 	bl	8009e00 <csumup>
 800b06a:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 800b06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06e:	3310      	adds	r3, #16
 800b070:	2204      	movs	r2, #4
 800b072:	4619      	mov	r1, r3
 800b074:	69f8      	ldr	r0, [r7, #28]
 800b076:	f7fe fec3 	bl	8009e00 <csumup>
 800b07a:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, pseudo, sizeof(pseudo));
 800b07c:	f107 0314 	add.w	r3, r7, #20
 800b080:	2204      	movs	r2, #4
 800b082:	4619      	mov	r1, r3
 800b084:	69f8      	ldr	r0, [r7, #28]
 800b086:	f7fe febb 	bl	8009e00 <csumup>
 800b08a:	61f8      	str	r0, [r7, #28]
  tcp->csum = csumfin(cs);
 800b08c:	69f8      	ldr	r0, [r7, #28]
 800b08e:	f7fe fee4 	bl	8009e5a <csumfin>
 800b092:	4603      	mov	r3, r0
 800b094:	461a      	mov	r2, r3
 800b096:	6a3b      	ldr	r3, [r7, #32]
 800b098:	821a      	strh	r2, [r3, #16]
  MG_DEBUG(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 800b09a:	4b21      	ldr	r3, [pc, #132]	; (800b120 <tx_tcp+0x184>)
 800b09c:	f641 7253 	movw	r2, #8019	; 0x1f53
 800b0a0:	4920      	ldr	r1, [pc, #128]	; (800b124 <tx_tcp+0x188>)
 800b0a2:	2003      	movs	r0, #3
 800b0a4:	f7fb ff52 	bl	8006f4c <mg_log_prefix>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d025      	beq.n	800b0fa <tx_tcp+0x15e>
 800b0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b0:	f103 050c 	add.w	r5, r3, #12
 800b0b4:	6a3b      	ldr	r3, [r7, #32]
 800b0b6:	881b      	ldrh	r3, [r3, #0]
 800b0b8:	b29b      	uxth	r3, r3
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f7fe f99d 	bl	80093fa <mg_ntohs>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	461e      	mov	r6, r3
 800b0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c6:	f103 0410 	add.w	r4, r3, #16
 800b0ca:	6a3b      	ldr	r3, [r7, #32]
 800b0cc:	885b      	ldrh	r3, [r3, #2]
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f7fe f992 	bl	80093fa <mg_ntohs>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	461a      	mov	r2, r3
 800b0da:	6a3b      	ldr	r3, [r7, #32]
 800b0dc:	7b5b      	ldrb	r3, [r3, #13]
 800b0de:	4619      	mov	r1, r3
 800b0e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0e2:	9304      	str	r3, [sp, #16]
 800b0e4:	9103      	str	r1, [sp, #12]
 800b0e6:	9202      	str	r2, [sp, #8]
 800b0e8:	9401      	str	r4, [sp, #4]
 800b0ea:	4b0f      	ldr	r3, [pc, #60]	; (800b128 <tx_tcp+0x18c>)
 800b0ec:	9300      	str	r3, [sp, #0]
 800b0ee:	4633      	mov	r3, r6
 800b0f0:	462a      	mov	r2, r5
 800b0f2:	490d      	ldr	r1, [pc, #52]	; (800b128 <tx_tcp+0x18c>)
 800b0f4:	480d      	ldr	r0, [pc, #52]	; (800b12c <tx_tcp+0x190>)
 800b0f6:	f7fb ff83 	bl	8007000 <mg_log>
            mg_ntohs(tcp->sport), mg_print_ip4, &ip->dst, mg_ntohs(tcp->dport),
            tcp->flags, (int) len));
  return ether_output(ifp, PDIFF(ifp->tx.ptr, tcp + 1) + len);
 800b0fa:	6a3b      	ldr	r3, [r7, #32]
 800b0fc:	f103 0214 	add.w	r2, r3, #20
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	695b      	ldr	r3, [r3, #20]
 800b104:	1ad3      	subs	r3, r2, r3
 800b106:	461a      	mov	r2, r3
 800b108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b10a:	4413      	add	r3, r2
 800b10c:	4619      	mov	r1, r3
 800b10e:	68f8      	ldr	r0, [r7, #12]
 800b110:	f7fe fed1 	bl	8009eb6 <ether_output>
 800b114:	4603      	mov	r3, r0
}
 800b116:	4618      	mov	r0, r3
 800b118:	372c      	adds	r7, #44	; 0x2c
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b11e:	bf00      	nop
 800b120:	08016388 	.word	0x08016388
 800b124:	08014270 	.word	0x08014270
 800b128:	08007d09 	.word	0x08007d09
 800b12c:	08015900 	.word	0x08015900

0800b130 <tx_tcp_pkt>:

static size_t tx_tcp_pkt(struct mg_tcpip_if *ifp, struct pkt *pkt,
                         uint8_t flags, uint32_t seq, const void *buf,
                         size_t len) {
 800b130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b134:	b08c      	sub	sp, #48	; 0x30
 800b136:	af06      	add	r7, sp, #24
 800b138:	60f8      	str	r0, [r7, #12]
 800b13a:	60b9      	str	r1, [r7, #8]
 800b13c:	603b      	str	r3, [r7, #0]
 800b13e:	4613      	mov	r3, r2
 800b140:	71fb      	strb	r3, [r7, #7]
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b146:	7b5b      	ldrb	r3, [r3, #13]
 800b148:	f003 0303 	and.w	r3, r3, #3
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	bf14      	ite	ne
 800b150:	2301      	movne	r3, #1
 800b152:	2300      	moveq	r3, #0
 800b154:	b2db      	uxtb	r3, r3
 800b156:	617b      	str	r3, [r7, #20]
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	691b      	ldr	r3, [r3, #16]
 800b15c:	1d9e      	adds	r6, r3, #6
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	69db      	ldr	r3, [r3, #28]
 800b162:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b16a:	885b      	ldrh	r3, [r3, #2]
 800b16c:	b29c      	uxth	r4, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 800b172:	881b      	ldrh	r3, [r3, #0]
 800b174:	b29d      	uxth	r5, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b17a:	685b      	ldr	r3, [r3, #4]
 800b17c:	4618      	mov	r0, r3
 800b17e:	f7fe f923 	bl	80093c8 <mg_ntohl>
 800b182:	4602      	mov	r2, r0
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	4413      	add	r3, r2
 800b188:	4618      	mov	r0, r3
 800b18a:	f7fe f91d 	bl	80093c8 <mg_ntohl>
 800b18e:	4601      	mov	r1, r0
 800b190:	79fa      	ldrb	r2, [r7, #7]
 800b192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b194:	9305      	str	r3, [sp, #20]
 800b196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b198:	9304      	str	r3, [sp, #16]
 800b19a:	9103      	str	r1, [sp, #12]
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	9302      	str	r3, [sp, #8]
 800b1a0:	9501      	str	r5, [sp, #4]
 800b1a2:	9400      	str	r4, [sp, #0]
 800b1a4:	4613      	mov	r3, r2
 800b1a6:	4642      	mov	r2, r8
 800b1a8:	4631      	mov	r1, r6
 800b1aa:	68f8      	ldr	r0, [r7, #12]
 800b1ac:	f7ff fef6 	bl	800af9c <tx_tcp>
 800b1b0:	4603      	mov	r3, r0
                buf, len);
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3718      	adds	r7, #24
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b1bc <settmout>:

static void settmout(struct mg_connection *c, uint8_t type) {
 800b1bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b1c0:	b088      	sub	sp, #32
 800b1c2:	af02      	add	r7, sp, #8
 800b1c4:	6078      	str	r0, [r7, #4]
 800b1c6:	460b      	mov	r3, r1
 800b1c8:	70fb      	strb	r3, [r7, #3]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	685b      	ldr	r3, [r3, #4]
 800b1ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1d0:	617b      	str	r3, [r7, #20]
  struct connstate *s = (struct connstate *) (c + 1);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	3390      	adds	r3, #144	; 0x90
 800b1d6:	613b      	str	r3, [r7, #16]
  unsigned n = type == MIP_TTYPE_ACK ? MIP_TCP_ACK_MS : MIP_TCP_KEEPALIVE_MS;
 800b1d8:	78fb      	ldrb	r3, [r7, #3]
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	d101      	bne.n	800b1e2 <settmout+0x26>
 800b1de:	2396      	movs	r3, #150	; 0x96
 800b1e0:	e001      	b.n	800b1e6 <settmout+0x2a>
 800b1e2:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 800b1e6:	60fb      	str	r3, [r7, #12]
  s->timer = ifp->now + n;
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800b1ee:	68f9      	ldr	r1, [r7, #12]
 800b1f0:	2000      	movs	r0, #0
 800b1f2:	460c      	mov	r4, r1
 800b1f4:	4605      	mov	r5, r0
 800b1f6:	eb12 0804 	adds.w	r8, r2, r4
 800b1fa:	eb43 0905 	adc.w	r9, r3, r5
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	e9c3 8902 	strd	r8, r9, [r3, #8]
  s->ttype = type;
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	78fa      	ldrb	r2, [r7, #3]
 800b208:	759a      	strb	r2, [r3, #22]
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 800b20a:	4b0d      	ldr	r3, [pc, #52]	; (800b240 <settmout+0x84>)
 800b20c:	f641 7268 	movw	r2, #8040	; 0x1f68
 800b210:	490c      	ldr	r1, [pc, #48]	; (800b244 <settmout+0x88>)
 800b212:	2004      	movs	r0, #4
 800b214:	f7fb fe9a 	bl	8006f4c <mg_log_prefix>
 800b218:	4603      	mov	r3, r0
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d00b      	beq.n	800b236 <settmout+0x7a>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b222:	78f8      	ldrb	r0, [r7, #3]
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800b22a:	e9cd 2300 	strd	r2, r3, [sp]
 800b22e:	4602      	mov	r2, r0
 800b230:	4805      	ldr	r0, [pc, #20]	; (800b248 <settmout+0x8c>)
 800b232:	f7fb fee5 	bl	8007000 <mg_log>
}
 800b236:	bf00      	nop
 800b238:	3718      	adds	r7, #24
 800b23a:	46bd      	mov	sp, r7
 800b23c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b240:	08016390 	.word	0x08016390
 800b244:	08014270 	.word	0x08014270
 800b248:	08015924 	.word	0x08015924

0800b24c <accept_conn>:

static struct mg_connection *accept_conn(struct mg_connection *lsn,
                                         struct pkt *pkt) {
 800b24c:	b5b0      	push	{r4, r5, r7, lr}
 800b24e:	b084      	sub	sp, #16
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	685b      	ldr	r3, [r3, #4]
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7fc fa2a 	bl	80076b4 <mg_alloc_conn>
 800b260:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d10e      	bne.n	800b286 <accept_conn+0x3a>
    MG_ERROR(("OOM"));
 800b268:	4b4b      	ldr	r3, [pc, #300]	; (800b398 <accept_conn+0x14c>)
 800b26a:	f641 726f 	movw	r2, #8047	; 0x1f6f
 800b26e:	494b      	ldr	r1, [pc, #300]	; (800b39c <accept_conn+0x150>)
 800b270:	2001      	movs	r0, #1
 800b272:	f7fb fe6b 	bl	8006f4c <mg_log_prefix>
 800b276:	4603      	mov	r3, r0
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d002      	beq.n	800b282 <accept_conn+0x36>
 800b27c:	4848      	ldr	r0, [pc, #288]	; (800b3a0 <accept_conn+0x154>)
 800b27e:	f7fb febf 	bl	8007000 <mg_log>
    return NULL;
 800b282:	2300      	movs	r3, #0
 800b284:	e083      	b.n	800b38e <accept_conn+0x142>
  }
  struct connstate *s = (struct connstate *) (c + 1);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	3390      	adds	r3, #144	; 0x90
 800b28a:	60bb      	str	r3, [r7, #8]
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b290:	689b      	ldr	r3, [r3, #8]
 800b292:	4618      	mov	r0, r3
 800b294:	f7fe f898 	bl	80093c8 <mg_ntohl>
 800b298:	4602      	mov	r2, r0
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	601a      	str	r2, [r3, #0]
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f7fe f88f 	bl	80093c8 <mg_ntohl>
 800b2aa:	4602      	mov	r2, r0
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	605a      	str	r2, [r3, #4]
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	f103 0010 	add.w	r0, r3, #16
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	691b      	ldr	r3, [r3, #16]
 800b2ba:	3306      	adds	r3, #6
 800b2bc:	2206      	movs	r2, #6
 800b2be:	4619      	mov	r1, r3
 800b2c0:	f008 f9cc 	bl	801365c <memcpy>
  settmout(c, MIP_TTYPE_KEEPALIVE);
 800b2c4:	2100      	movs	r1, #0
 800b2c6:	68f8      	ldr	r0, [r7, #12]
 800b2c8:	f7ff ff78 	bl	800b1bc <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	331c      	adds	r3, #28
 800b2d0:	683a      	ldr	r2, [r7, #0]
 800b2d2:	69d2      	ldr	r2, [r2, #28]
 800b2d4:	320c      	adds	r2, #12
 800b2d6:	6812      	ldr	r2, [r2, #0]
 800b2d8:	601a      	str	r2, [r3, #0]
  c->rem.port = pkt->tcp->sport;
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2de:	881b      	ldrh	r3, [r3, #0]
 800b2e0:	b29a      	uxth	r2, r3
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	859a      	strh	r2, [r3, #44]	; 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 800b2e6:	4b2c      	ldr	r3, [pc, #176]	; (800b398 <accept_conn+0x14c>)
 800b2e8:	f641 7278 	movw	r2, #8056	; 0x1f78
 800b2ec:	492b      	ldr	r1, [pc, #172]	; (800b39c <accept_conn+0x150>)
 800b2ee:	2003      	movs	r0, #3
 800b2f0:	f7fb fe2c 	bl	8006f4c <mg_log_prefix>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d007      	beq.n	800b30a <accept_conn+0xbe>
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	331c      	adds	r3, #28
 800b302:	4a28      	ldr	r2, [pc, #160]	; (800b3a4 <accept_conn+0x158>)
 800b304:	4828      	ldr	r0, [pc, #160]	; (800b3a8 <accept_conn+0x15c>)
 800b306:	f7fb fe7b 	bl	8007000 <mg_log>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	681a      	ldr	r2, [r3, #0]
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	601a      	str	r2, [r3, #0]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	68fa      	ldr	r2, [r7, #12]
 800b31a:	601a      	str	r2, [r3, #0]
  c->is_accepted = 1;
 800b31c:	68fa      	ldr	r2, [r7, #12]
 800b31e:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 800b322:	f043 0304 	orr.w	r3, r3, #4
 800b326:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
  c->is_hexdumping = lsn->is_hexdumping;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800b330:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b334:	b2d9      	uxtb	r1, r3
 800b336:	68fa      	ldr	r2, [r7, #12]
 800b338:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800b33c:	f361 03c3 	bfi	r3, r1, #3, #1
 800b340:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
  c->pfn = lsn->pfn;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	661a      	str	r2, [r3, #96]	; 0x60
  c->loc = lsn->loc;
 800b34c:	68fa      	ldr	r2, [r7, #12]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f102 0408 	add.w	r4, r2, #8
 800b354:	f103 0508 	add.w	r5, r3, #8
 800b358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b35a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b35c:	682b      	ldr	r3, [r5, #0]
 800b35e:	6023      	str	r3, [r4, #0]
  c->pfn_data = lsn->pfn_data;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	665a      	str	r2, [r3, #100]	; 0x64
  c->fn = lsn->fn;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	659a      	str	r2, [r3, #88]	; 0x58
  c->fn_data = lsn->fn_data;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	65da      	str	r2, [r3, #92]	; 0x5c
  mg_call(c, MG_EV_OPEN, NULL);
 800b378:	2200      	movs	r2, #0
 800b37a:	2101      	movs	r1, #1
 800b37c:	68f8      	ldr	r0, [r7, #12]
 800b37e:	f7f6 fe05 	bl	8001f8c <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 800b382:	2200      	movs	r2, #0
 800b384:	2105      	movs	r1, #5
 800b386:	68f8      	ldr	r0, [r7, #12]
 800b388:	f7f6 fe00 	bl	8001f8c <mg_call>
  return c;
 800b38c:	68fb      	ldr	r3, [r7, #12]
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3710      	adds	r7, #16
 800b392:	46bd      	mov	sp, r7
 800b394:	bdb0      	pop	{r4, r5, r7, pc}
 800b396:	bf00      	nop
 800b398:	0801639c 	.word	0x0801639c
 800b39c:	08014270 	.word	0x08014270
 800b3a0:	08014f9c 	.word	0x08014f9c
 800b3a4:	08007d81 	.word	0x08007d81
 800b3a8:	08015934 	.word	0x08015934

0800b3ac <mg_io_send>:

long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 800b3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3ae:	b093      	sub	sp, #76	; 0x4c
 800b3b0:	af06      	add	r7, sp, #24
 800b3b2:	6178      	str	r0, [r7, #20]
 800b3b4:	6139      	str	r1, [r7, #16]
 800b3b6:	60fa      	str	r2, [r7, #12]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	685b      	ldr	r3, [r3, #4]
 800b3bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3be:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct connstate *s = (struct connstate *) (c + 1);
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	3390      	adds	r3, #144	; 0x90
 800b3c4:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	331c      	adds	r3, #28
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	61fb      	str	r3, [r7, #28]
  if (c->is_udp) {
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800b3d4:	f003 0301 	and.w	r3, r3, #1
 800b3d8:	b2db      	uxtb	r3, r3
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d024      	beq.n	800b428 <mg_io_send+0x7c>
    size_t max_headers_len = 14 + 24 /* max IP */ + 8 /* UDP */;
 800b3de:	232e      	movs	r3, #46	; 0x2e
 800b3e0:	623b      	str	r3, [r7, #32]
    if (len + max_headers_len > ifp->tx.len) {
 800b3e2:	68fa      	ldr	r2, [r7, #12]
 800b3e4:	6a3b      	ldr	r3, [r7, #32]
 800b3e6:	441a      	add	r2, r3
 800b3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ea:	699b      	ldr	r3, [r3, #24]
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	d904      	bls.n	800b3fa <mg_io_send+0x4e>
      len = ifp->tx.len - max_headers_len;
 800b3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3f2:	699a      	ldr	r2, [r3, #24]
 800b3f4:	6a3b      	ldr	r3, [r7, #32]
 800b3f6:	1ad3      	subs	r3, r2, r3
 800b3f8:	60fb      	str	r3, [r7, #12]
    }
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 800b3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3fc:	f103 0010 	add.w	r0, r3, #16
 800b400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b402:	689c      	ldr	r4, [r3, #8]
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	8b1d      	ldrh	r5, [r3, #24]
 800b408:	69fb      	ldr	r3, [r7, #28]
 800b40a:	697a      	ldr	r2, [r7, #20]
 800b40c:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800b40e:	68f9      	ldr	r1, [r7, #12]
 800b410:	9103      	str	r1, [sp, #12]
 800b412:	6939      	ldr	r1, [r7, #16]
 800b414:	9102      	str	r1, [sp, #8]
 800b416:	9201      	str	r2, [sp, #4]
 800b418:	9300      	str	r3, [sp, #0]
 800b41a:	462b      	mov	r3, r5
 800b41c:	4622      	mov	r2, r4
 800b41e:	4601      	mov	r1, r0
 800b420:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b422:	f7fe fe9d 	bl	800a160 <tx_udp>
 800b426:	e046      	b.n	800b4b6 <mg_io_send+0x10a>
  } else {
    size_t max_headers_len = 14 + 24 /* max IP */ + 60 /* max TCP */;
 800b428:	2362      	movs	r3, #98	; 0x62
 800b42a:	627b      	str	r3, [r7, #36]	; 0x24
    if (len + max_headers_len > ifp->tx.len)
 800b42c:	68fa      	ldr	r2, [r7, #12]
 800b42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b430:	441a      	add	r2, r3
 800b432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b434:	699b      	ldr	r3, [r3, #24]
 800b436:	429a      	cmp	r2, r3
 800b438:	d904      	bls.n	800b444 <mg_io_send+0x98>
      len = ifp->tx.len - max_headers_len;
 800b43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b43c:	699a      	ldr	r2, [r3, #24]
 800b43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b440:	1ad3      	subs	r3, r2, r3
 800b442:	60fb      	str	r3, [r7, #12]
    if (tx_tcp(ifp, s->mac, rem_ip, TH_PUSH | TH_ACK, c->loc.port, c->rem.port,
 800b444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b446:	f103 0610 	add.w	r6, r3, #16
 800b44a:	69fb      	ldr	r3, [r7, #28]
 800b44c:	60bb      	str	r3, [r7, #8]
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	8b1c      	ldrh	r4, [r3, #24]
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 800b456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7fd ffb4 	bl	80093c8 <mg_ntohl>
 800b460:	6078      	str	r0, [r7, #4]
 800b462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b464:	685b      	ldr	r3, [r3, #4]
 800b466:	4618      	mov	r0, r3
 800b468:	f7fd ffae 	bl	80093c8 <mg_ntohl>
 800b46c:	4602      	mov	r2, r0
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	9305      	str	r3, [sp, #20]
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	9304      	str	r3, [sp, #16]
 800b476:	9203      	str	r2, [sp, #12]
 800b478:	6879      	ldr	r1, [r7, #4]
 800b47a:	9102      	str	r1, [sp, #8]
 800b47c:	9501      	str	r5, [sp, #4]
 800b47e:	9400      	str	r4, [sp, #0]
 800b480:	2318      	movs	r3, #24
 800b482:	68ba      	ldr	r2, [r7, #8]
 800b484:	4631      	mov	r1, r6
 800b486:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b488:	f7ff fd88 	bl	800af9c <tx_tcp>
 800b48c:	4603      	mov	r3, r0
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d00e      	beq.n	800b4b0 <mg_io_send+0x104>
               mg_htonl(s->seq), mg_htonl(s->ack), buf, len) > 0) {
      s->seq += (uint32_t) len;
 800b492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b494:	681a      	ldr	r2, [r3, #0]
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	441a      	add	r2, r3
 800b49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b49c:	601a      	str	r2, [r3, #0]
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 800b49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4a0:	7d9b      	ldrb	r3, [r3, #22]
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d107      	bne.n	800b4b6 <mg_io_send+0x10a>
 800b4a6:	2100      	movs	r1, #0
 800b4a8:	6978      	ldr	r0, [r7, #20]
 800b4aa:	f7ff fe87 	bl	800b1bc <settmout>
 800b4ae:	e002      	b.n	800b4b6 <mg_io_send+0x10a>
    } else {
      return MG_IO_ERR;
 800b4b0:	f04f 33ff 	mov.w	r3, #4294967295
 800b4b4:	e000      	b.n	800b4b8 <mg_io_send+0x10c>
    }
  }
  return (long) len;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3734      	adds	r7, #52	; 0x34
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b4c0 <read_conn>:
  mg_iobuf_del(&s->raw, 0, len);
  MG_DEBUG(("%lu", len));
  return (long) len;
}

static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 800b4c0:	b590      	push	{r4, r7, lr}
 800b4c2:	b08b      	sub	sp, #44	; 0x2c
 800b4c4:	af02      	add	r7, sp, #8
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	6039      	str	r1, [r7, #0]
  struct connstate *s = (struct connstate *) (c + 1);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	3390      	adds	r3, #144	; 0x90
 800b4ce:	61fb      	str	r3, [r7, #28]
  struct mg_iobuf *io = c->is_tls ? &s->raw : &c->recv;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b4d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4da:	b2db      	uxtb	r3, r3
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d002      	beq.n	800b4e6 <read_conn+0x26>
 800b4e0:	69fb      	ldr	r3, [r7, #28]
 800b4e2:	3318      	adds	r3, #24
 800b4e4:	e001      	b.n	800b4ea <read_conn+0x2a>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	3338      	adds	r3, #56	; 0x38
 800b4ea:	61bb      	str	r3, [r7, #24]
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4f0:	685b      	ldr	r3, [r3, #4]
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f7fd ff68 	bl	80093c8 <mg_ntohl>
 800b4f8:	6178      	str	r0, [r7, #20]
  s->raw.align = c->recv.align;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b4fe:	69fb      	ldr	r3, [r7, #28]
 800b500:	625a      	str	r2, [r3, #36]	; 0x24
  if (pkt->tcp->flags & TH_FIN) {
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b506:	7b5b      	ldrb	r3, [r3, #13]
 800b508:	f003 0301 	and.w	r3, r3, #1
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d01a      	beq.n	800b546 <read_conn+0x86>
    s->ack = mg_htonl(pkt->tcp->seq) + 1, s->seq = mg_htonl(pkt->tcp->ack);
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	4618      	mov	r0, r3
 800b518:	f7fd ff56 	bl	80093c8 <mg_ntohl>
 800b51c:	4603      	mov	r3, r0
 800b51e:	1c5a      	adds	r2, r3, #1
 800b520:	69fb      	ldr	r3, [r7, #28]
 800b522:	605a      	str	r2, [r3, #4]
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b528:	689b      	ldr	r3, [r3, #8]
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7fd ff4c 	bl	80093c8 <mg_ntohl>
 800b530:	4602      	mov	r2, r0
 800b532:	69fb      	ldr	r3, [r7, #28]
 800b534:	601a      	str	r2, [r3, #0]
    c->is_closing = 1;
 800b536:	687a      	ldr	r2, [r7, #4]
 800b538:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800b53c:	f043 0320 	orr.w	r3, r3, #32
 800b540:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
      // Plain text connection, data is already in c->recv, trigger
      // MG_EV_READ
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 800b544:	e0e4      	b.n	800b710 <read_conn+0x250>
  } else if (pkt->pay.len == 0) {
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	68db      	ldr	r3, [r3, #12]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	f000 80e0 	beq.w	800b710 <read_conn+0x250>
  } else if (seq != s->ack) {
 800b550:	69fb      	ldr	r3, [r7, #28]
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	697a      	ldr	r2, [r7, #20]
 800b556:	429a      	cmp	r2, r3
 800b558:	d029      	beq.n	800b5ae <read_conn+0xee>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b55e:	685b      	ldr	r3, [r3, #4]
 800b560:	4618      	mov	r0, r3
 800b562:	f7fd ff31 	bl	80093c8 <mg_ntohl>
 800b566:	4602      	mov	r2, r0
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	68db      	ldr	r3, [r3, #12]
 800b56c:	4413      	add	r3, r2
 800b56e:	613b      	str	r3, [r7, #16]
    if (s->ack == ack) {
 800b570:	69fb      	ldr	r3, [r7, #28]
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	693a      	ldr	r2, [r7, #16]
 800b576:	429a      	cmp	r2, r3
 800b578:	d10e      	bne.n	800b598 <read_conn+0xd8>
      MG_VERBOSE(("ignoring duplicate pkt"));
 800b57a:	4b67      	ldr	r3, [pc, #412]	; (800b718 <read_conn+0x258>)
 800b57c:	f641 72b7 	movw	r2, #8119	; 0x1fb7
 800b580:	4966      	ldr	r1, [pc, #408]	; (800b71c <read_conn+0x25c>)
 800b582:	2004      	movs	r0, #4
 800b584:	f7fb fce2 	bl	8006f4c <mg_log_prefix>
 800b588:	4603      	mov	r3, r0
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	f000 80c0 	beq.w	800b710 <read_conn+0x250>
 800b590:	4863      	ldr	r0, [pc, #396]	; (800b720 <read_conn+0x260>)
 800b592:	f7fb fd35 	bl	8007000 <mg_log>
}
 800b596:	e0bb      	b.n	800b710 <read_conn+0x250>
      mg_error(c, "SEQ != ACK: %x %x %x", seq, s->ack, ack);
 800b598:	69fb      	ldr	r3, [r7, #28]
 800b59a:	685a      	ldr	r2, [r3, #4]
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	9300      	str	r3, [sp, #0]
 800b5a0:	4613      	mov	r3, r2
 800b5a2:	697a      	ldr	r2, [r7, #20]
 800b5a4:	495f      	ldr	r1, [pc, #380]	; (800b724 <read_conn+0x264>)
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f7f6 fd12 	bl	8001fd0 <mg_error>
}
 800b5ac:	e0b0      	b.n	800b710 <read_conn+0x250>
  } else if (io->size - io->len < pkt->pay.len &&
 800b5ae:	69bb      	ldr	r3, [r7, #24]
 800b5b0:	685a      	ldr	r2, [r3, #4]
 800b5b2:	69bb      	ldr	r3, [r7, #24]
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	1ad2      	subs	r2, r2, r3
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	68db      	ldr	r3, [r3, #12]
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d210      	bcs.n	800b5e2 <read_conn+0x122>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 800b5c0:	69bb      	ldr	r3, [r7, #24]
 800b5c2:	689a      	ldr	r2, [r3, #8]
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	68db      	ldr	r3, [r3, #12]
 800b5c8:	4413      	add	r3, r2
 800b5ca:	4619      	mov	r1, r3
 800b5cc:	69b8      	ldr	r0, [r7, #24]
 800b5ce:	f7fa fccd 	bl	8005f6c <mg_iobuf_resize>
 800b5d2:	4603      	mov	r3, r0
  } else if (io->size - io->len < pkt->pay.len &&
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d104      	bne.n	800b5e2 <read_conn+0x122>
    mg_error(c, "oom");
 800b5d8:	4953      	ldr	r1, [pc, #332]	; (800b728 <read_conn+0x268>)
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f7f6 fcf8 	bl	8001fd0 <mg_error>
 800b5e0:	e096      	b.n	800b710 <read_conn+0x250>
    memcpy(&io->buf[io->len], pkt->pay.ptr, pkt->pay.len);
 800b5e2:	69bb      	ldr	r3, [r7, #24]
 800b5e4:	681a      	ldr	r2, [r3, #0]
 800b5e6:	69bb      	ldr	r3, [r7, #24]
 800b5e8:	689b      	ldr	r3, [r3, #8]
 800b5ea:	18d0      	adds	r0, r2, r3
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	6899      	ldr	r1, [r3, #8]
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	68db      	ldr	r3, [r3, #12]
 800b5f4:	461a      	mov	r2, r3
 800b5f6:	f008 f831 	bl	801365c <memcpy>
    io->len += pkt->pay.len;
 800b5fa:	69bb      	ldr	r3, [r7, #24]
 800b5fc:	689a      	ldr	r2, [r3, #8]
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	68db      	ldr	r3, [r3, #12]
 800b602:	441a      	add	r2, r3
 800b604:	69bb      	ldr	r3, [r7, #24]
 800b606:	609a      	str	r2, [r3, #8]
    MG_DEBUG(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 800b608:	4b43      	ldr	r3, [pc, #268]	; (800b718 <read_conn+0x258>)
 800b60a:	f641 72c9 	movw	r2, #8137	; 0x1fc9
 800b60e:	4943      	ldr	r1, [pc, #268]	; (800b71c <read_conn+0x25c>)
 800b610:	2003      	movs	r0, #3
 800b612:	f7fb fc9b 	bl	8006f4c <mg_log_prefix>
 800b616:	4603      	mov	r3, r0
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d00e      	beq.n	800b63a <read_conn+0x17a>
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b624:	685b      	ldr	r3, [r3, #4]
 800b626:	4618      	mov	r0, r3
 800b628:	f7fd fece 	bl	80093c8 <mg_ntohl>
 800b62c:	4602      	mov	r2, r0
 800b62e:	69fb      	ldr	r3, [r7, #28]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	4621      	mov	r1, r4
 800b634:	483d      	ldr	r0, [pc, #244]	; (800b72c <read_conn+0x26c>)
 800b636:	f7fb fce3 	bl	8007000 <mg_log>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b63e:	685b      	ldr	r3, [r3, #4]
 800b640:	4618      	mov	r0, r3
 800b642:	f7fd fec1 	bl	80093c8 <mg_ntohl>
 800b646:	4602      	mov	r2, r0
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	68db      	ldr	r3, [r3, #12]
 800b64c:	441a      	add	r2, r3
 800b64e:	69fb      	ldr	r3, [r7, #28]
 800b650:	605a      	str	r2, [r3, #4]
    if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 800b652:	69fb      	ldr	r3, [r7, #28]
 800b654:	7d9b      	ldrb	r3, [r3, #22]
 800b656:	2b01      	cmp	r3, #1
 800b658:	d003      	beq.n	800b662 <read_conn+0x1a2>
 800b65a:	2101      	movs	r1, #1
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f7ff fdad 	bl	800b1bc <settmout>
    if (c->is_tls) {
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b66c:	b2db      	uxtb	r3, r3
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d046      	beq.n	800b700 <read_conn+0x240>
      io = &c->recv;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	3338      	adds	r3, #56	; 0x38
 800b676:	61bb      	str	r3, [r7, #24]
      if (io->size - io->len < pkt->pay.len &&
 800b678:	69bb      	ldr	r3, [r7, #24]
 800b67a:	685a      	ldr	r2, [r3, #4]
 800b67c:	69bb      	ldr	r3, [r7, #24]
 800b67e:	689b      	ldr	r3, [r3, #8]
 800b680:	1ad2      	subs	r2, r2, r3
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	68db      	ldr	r3, [r3, #12]
 800b686:	429a      	cmp	r2, r3
 800b688:	d210      	bcs.n	800b6ac <read_conn+0x1ec>
          !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 800b68a:	69bb      	ldr	r3, [r7, #24]
 800b68c:	689a      	ldr	r2, [r3, #8]
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	68db      	ldr	r3, [r3, #12]
 800b692:	4413      	add	r3, r2
 800b694:	4619      	mov	r1, r3
 800b696:	69b8      	ldr	r0, [r7, #24]
 800b698:	f7fa fc68 	bl	8005f6c <mg_iobuf_resize>
 800b69c:	4603      	mov	r3, r0
      if (io->size - io->len < pkt->pay.len &&
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d104      	bne.n	800b6ac <read_conn+0x1ec>
        mg_error(c, "oom");
 800b6a2:	4921      	ldr	r1, [pc, #132]	; (800b728 <read_conn+0x268>)
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f7f6 fc93 	bl	8001fd0 <mg_error>
 800b6aa:	e031      	b.n	800b710 <read_conn+0x250>
        long n = mg_tls_recv(c, &io->buf[io->len], io->size - io->len);
 800b6ac:	69bb      	ldr	r3, [r7, #24]
 800b6ae:	681a      	ldr	r2, [r3, #0]
 800b6b0:	69bb      	ldr	r3, [r7, #24]
 800b6b2:	689b      	ldr	r3, [r3, #8]
 800b6b4:	18d1      	adds	r1, r2, r3
 800b6b6:	69bb      	ldr	r3, [r7, #24]
 800b6b8:	685a      	ldr	r2, [r3, #4]
 800b6ba:	69bb      	ldr	r3, [r7, #24]
 800b6bc:	689b      	ldr	r3, [r3, #8]
 800b6be:	1ad3      	subs	r3, r2, r3
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f7fd fd36 	bl	8009134 <mg_tls_recv>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	60fb      	str	r3, [r7, #12]
        if (n == MG_IO_ERR) {
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6d2:	d104      	bne.n	800b6de <read_conn+0x21e>
          mg_error(c, "TLS recv error");
 800b6d4:	4916      	ldr	r1, [pc, #88]	; (800b730 <read_conn+0x270>)
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f7f6 fc7a 	bl	8001fd0 <mg_error>
}
 800b6dc:	e018      	b.n	800b710 <read_conn+0x250>
        } else if (n > 0) {
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	dd15      	ble.n	800b710 <read_conn+0x250>
          io->len += (size_t) n;
 800b6e4:	69bb      	ldr	r3, [r7, #24]
 800b6e6:	689b      	ldr	r3, [r3, #8]
 800b6e8:	68fa      	ldr	r2, [r7, #12]
 800b6ea:	441a      	add	r2, r3
 800b6ec:	69bb      	ldr	r3, [r7, #24]
 800b6ee:	609a      	str	r2, [r3, #8]
          mg_call(c, MG_EV_READ, &n);
 800b6f0:	f107 030c 	add.w	r3, r7, #12
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	2107      	movs	r1, #7
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f7f6 fc47 	bl	8001f8c <mg_call>
}
 800b6fe:	e007      	b.n	800b710 <read_conn+0x250>
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	330c      	adds	r3, #12
 800b704:	461a      	mov	r2, r3
 800b706:	2107      	movs	r1, #7
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f7f6 fc3f 	bl	8001f8c <mg_call>
}
 800b70e:	e7ff      	b.n	800b710 <read_conn+0x250>
 800b710:	bf00      	nop
 800b712:	3724      	adds	r7, #36	; 0x24
 800b714:	46bd      	mov	sp, r7
 800b716:	bd90      	pop	{r4, r7, pc}
 800b718:	080163a8 	.word	0x080163a8
 800b71c:	08014270 	.word	0x08014270
 800b720:	08015948 	.word	0x08015948
 800b724:	08015960 	.word	0x08015960
 800b728:	080158fc 	.word	0x080158fc
 800b72c:	08015978 	.word	0x08015978
 800b730:	0801598c 	.word	0x0801598c

0800b734 <rx_tcp>:

static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800b734:	b590      	push	{r4, r7, lr}
 800b736:	b089      	sub	sp, #36	; 0x24
 800b738:	af02      	add	r7, sp, #8
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b742:	2200      	movs	r2, #0
 800b744:	6839      	ldr	r1, [r7, #0]
 800b746:	4618      	mov	r0, r3
 800b748:	f7fe feb2 	bl	800a4b0 <getpeer>
 800b74c:	6178      	str	r0, [r7, #20]
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d002      	beq.n	800b75a <rx_tcp+0x26>
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	3390      	adds	r3, #144	; 0x90
 800b758:	e000      	b.n	800b75c <rx_tcp+0x28>
 800b75a:	2300      	movs	r3, #0
 800b75c:	613b      	str	r3, [r7, #16]
#if 0
  MG_INFO(("%lu %hhu %d", c ? c->id : 0, pkt->tcp->flags, (int) pkt->pay.len));
#endif
  if (c != NULL && c->is_connecting && pkt->tcp->flags & (TH_SYN | TH_ACK)) {
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d03e      	beq.n	800b7e2 <rx_tcp+0xae>
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b76a:	f003 0320 	and.w	r3, r3, #32
 800b76e:	b2db      	uxtb	r3, r3
 800b770:	2b00      	cmp	r3, #0
 800b772:	d036      	beq.n	800b7e2 <rx_tcp+0xae>
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b778:	7b5b      	ldrb	r3, [r3, #13]
 800b77a:	f003 0312 	and.w	r3, r3, #18
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d02f      	beq.n	800b7e2 <rx_tcp+0xae>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b786:	689b      	ldr	r3, [r3, #8]
 800b788:	4618      	mov	r0, r3
 800b78a:	f7fd fe1d 	bl	80093c8 <mg_ntohl>
 800b78e:	4602      	mov	r2, r0
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	601a      	str	r2, [r3, #0]
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7fd fe14 	bl	80093c8 <mg_ntohl>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	1c5a      	adds	r2, r3, #1
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	605a      	str	r2, [r3, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7ac:	689b      	ldr	r3, [r3, #8]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	9201      	str	r2, [sp, #4]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	9200      	str	r2, [sp, #0]
 800b7b6:	2210      	movs	r2, #16
 800b7b8:	6839      	ldr	r1, [r7, #0]
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f7ff fcb8 	bl	800b130 <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 800b7c0:	697a      	ldr	r2, [r7, #20]
 800b7c2:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 800b7c6:	f36f 1345 	bfc	r3, #5, #1
 800b7ca:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
    settmout(c, MIP_TTYPE_KEEPALIVE);
 800b7ce:	2100      	movs	r1, #0
 800b7d0:	6978      	ldr	r0, [r7, #20]
 800b7d2:	f7ff fcf3 	bl	800b1bc <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	2104      	movs	r1, #4
 800b7da:	6978      	ldr	r0, [r7, #20]
 800b7dc:	f7f6 fbd6 	bl	8001f8c <mg_call>
 800b7e0:	e0c3      	b.n	800b96a <rx_tcp+0x236>
  } else if (c != NULL && c->is_connecting) {
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d014      	beq.n	800b812 <rx_tcp+0xde>
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b7ee:	f003 0320 	and.w	r3, r3, #32
 800b7f2:	b2db      	uxtb	r3, r3
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d00c      	beq.n	800b812 <rx_tcp+0xde>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7fc:	689b      	ldr	r3, [r3, #8]
 800b7fe:	2200      	movs	r2, #0
 800b800:	9201      	str	r2, [sp, #4]
 800b802:	2200      	movs	r2, #0
 800b804:	9200      	str	r2, [sp, #0]
 800b806:	2214      	movs	r2, #20
 800b808:	6839      	ldr	r1, [r7, #0]
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f7ff fc90 	bl	800b130 <tx_tcp_pkt>
 800b810:	e0ab      	b.n	800b96a <rx_tcp+0x236>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d00b      	beq.n	800b830 <rx_tcp+0xfc>
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b81c:	7b5b      	ldrb	r3, [r3, #13]
 800b81e:	f003 0304 	and.w	r3, r3, #4
 800b822:	2b00      	cmp	r3, #0
 800b824:	d004      	beq.n	800b830 <rx_tcp+0xfc>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 800b826:	4953      	ldr	r1, [pc, #332]	; (800b974 <rx_tcp+0x240>)
 800b828:	6978      	ldr	r0, [r7, #20]
 800b82a:	f7f6 fbd1 	bl	8001fd0 <mg_error>
 800b82e:	e09c      	b.n	800b96a <rx_tcp+0x236>
  } else if (c != NULL) {
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d00f      	beq.n	800b856 <rx_tcp+0x122>
    MG_DEBUG(("%lu %d %M:%hu -> %M:%hu", c->id, (int) pkt->raw.len,
              mg_print_ip4, &pkt->ip->src, mg_ntohs(pkt->tcp->sport),
              mg_print_ip4, &pkt->ip->dst, mg_ntohs(pkt->tcp->dport)));
    mg_hexdump(pkt->pay.buf, pkt->pay.len);
#endif
    s->tmiss = 0;                         // Reset missed keep-alive counter
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	2200      	movs	r2, #0
 800b83a:	75da      	strb	r2, [r3, #23]
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	7d9b      	ldrb	r3, [r3, #22]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d103      	bne.n	800b84c <rx_tcp+0x118>
      settmout(c,
 800b844:	2100      	movs	r1, #0
 800b846:	6978      	ldr	r0, [r7, #20]
 800b848:	f7ff fcb8 	bl	800b1bc <settmout>
               MIP_TTYPE_KEEPALIVE);  // unless a former ACK timeout is pending
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 800b84c:	6839      	ldr	r1, [r7, #0]
 800b84e:	6978      	ldr	r0, [r7, #20]
 800b850:	f7ff fe36 	bl	800b4c0 <read_conn>
  } else if (!c->is_accepted) {  // no peer
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
  } else {
    // MG_DEBUG(("dropped silently.."));
  }
}
 800b854:	e089      	b.n	800b96a <rx_tcp+0x236>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b85a:	2201      	movs	r2, #1
 800b85c:	6839      	ldr	r1, [r7, #0]
 800b85e:	4618      	mov	r0, r3
 800b860:	f7fe fe26 	bl	800a4b0 <getpeer>
 800b864:	6178      	str	r0, [r7, #20]
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d10c      	bne.n	800b886 <rx_tcp+0x152>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b870:	689b      	ldr	r3, [r3, #8]
 800b872:	2200      	movs	r2, #0
 800b874:	9201      	str	r2, [sp, #4]
 800b876:	2200      	movs	r2, #0
 800b878:	9200      	str	r2, [sp, #0]
 800b87a:	2214      	movs	r2, #20
 800b87c:	6839      	ldr	r1, [r7, #0]
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f7ff fc56 	bl	800b130 <tx_tcp_pkt>
}
 800b884:	e071      	b.n	800b96a <rx_tcp+0x236>
  } else if (pkt->tcp->flags & TH_RST) {
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b88a:	7b5b      	ldrb	r3, [r3, #13]
 800b88c:	f003 0304 	and.w	r3, r3, #4
 800b890:	2b00      	cmp	r3, #0
 800b892:	d00c      	beq.n	800b8ae <rx_tcp+0x17a>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b89a:	f003 0304 	and.w	r3, r3, #4
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d062      	beq.n	800b96a <rx_tcp+0x236>
 800b8a4:	4933      	ldr	r1, [pc, #204]	; (800b974 <rx_tcp+0x240>)
 800b8a6:	6978      	ldr	r0, [r7, #20]
 800b8a8:	f7f6 fb92 	bl	8001fd0 <mg_error>
}
 800b8ac:	e05d      	b.n	800b96a <rx_tcp+0x236>
  } else if (pkt->tcp->flags & TH_SYN) {
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8b2:	7b5b      	ldrb	r3, [r3, #13]
 800b8b4:	f003 0302 	and.w	r3, r3, #2
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d016      	beq.n	800b8ea <rx_tcp+0x1b6>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8c0:	881b      	ldrh	r3, [r3, #0]
 800b8c2:	b29b      	uxth	r3, r3
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f7fd fd98 	bl	80093fa <mg_ntohs>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f7fd fd7b 	bl	80093c8 <mg_ntohl>
 800b8d2:	60f8      	str	r0, [r7, #12]
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	9301      	str	r3, [sp, #4]
 800b8d8:	2300      	movs	r3, #0
 800b8da:	9300      	str	r3, [sp, #0]
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	2212      	movs	r2, #18
 800b8e0:	6839      	ldr	r1, [r7, #0]
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f7ff fc24 	bl	800b130 <tx_tcp_pkt>
}
 800b8e8:	e03f      	b.n	800b96a <rx_tcp+0x236>
  } else if (pkt->tcp->flags & TH_FIN) {
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8ee:	7b5b      	ldrb	r3, [r3, #13]
 800b8f0:	f003 0301 	and.w	r3, r3, #1
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d00c      	beq.n	800b912 <rx_tcp+0x1de>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8fc:	689b      	ldr	r3, [r3, #8]
 800b8fe:	2200      	movs	r2, #0
 800b900:	9201      	str	r2, [sp, #4]
 800b902:	2200      	movs	r2, #0
 800b904:	9200      	str	r2, [sp, #0]
 800b906:	2211      	movs	r2, #17
 800b908:	6839      	ldr	r1, [r7, #0]
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f7ff fc10 	bl	800b130 <tx_tcp_pkt>
}
 800b910:	e02b      	b.n	800b96a <rx_tcp+0x236>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b916:	689b      	ldr	r3, [r3, #8]
 800b918:	4618      	mov	r0, r3
 800b91a:	f7fd fd55 	bl	80093c8 <mg_ntohl>
 800b91e:	4604      	mov	r4, r0
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b924:	881b      	ldrh	r3, [r3, #0]
 800b926:	b29b      	uxth	r3, r3
 800b928:	4618      	mov	r0, r3
 800b92a:	f7fd fd66 	bl	80093fa <mg_ntohs>
 800b92e:	4603      	mov	r3, r0
 800b930:	3301      	adds	r3, #1
 800b932:	429c      	cmp	r4, r3
 800b934:	d104      	bne.n	800b940 <rx_tcp+0x20c>
    accept_conn(c, pkt);
 800b936:	6839      	ldr	r1, [r7, #0]
 800b938:	6978      	ldr	r0, [r7, #20]
 800b93a:	f7ff fc87 	bl	800b24c <accept_conn>
}
 800b93e:	e014      	b.n	800b96a <rx_tcp+0x236>
  } else if (!c->is_accepted) {  // no peer
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b946:	f003 0304 	and.w	r3, r3, #4
 800b94a:	b2db      	uxtb	r3, r3
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d10c      	bne.n	800b96a <rx_tcp+0x236>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b954:	689b      	ldr	r3, [r3, #8]
 800b956:	2200      	movs	r2, #0
 800b958:	9201      	str	r2, [sp, #4]
 800b95a:	2200      	movs	r2, #0
 800b95c:	9200      	str	r2, [sp, #0]
 800b95e:	2214      	movs	r2, #20
 800b960:	6839      	ldr	r1, [r7, #0]
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f7ff fbe4 	bl	800b130 <tx_tcp_pkt>
}
 800b968:	e7ff      	b.n	800b96a <rx_tcp+0x236>
 800b96a:	bf00      	nop
 800b96c:	371c      	adds	r7, #28
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd90      	pop	{r4, r7, pc}
 800b972:	bf00      	nop
 800b974:	0801599c 	.word	0x0801599c

0800b978 <rx_ip>:

static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800b978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b97a:	b089      	sub	sp, #36	; 0x24
 800b97c:	af04      	add	r7, sp, #16
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	6039      	str	r1, [r7, #0]
  if (pkt->ip->proto == 1) {
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	69db      	ldr	r3, [r3, #28]
 800b986:	7a5b      	ldrb	r3, [r3, #9]
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d116      	bne.n	800b9ba <rx_ip+0x42>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	69db      	ldr	r3, [r3, #28]
 800b990:	f103 0214 	add.w	r2, r3, #20
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	625a      	str	r2, [r3, #36]	; 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	68db      	ldr	r3, [r3, #12]
 800b99c:	2b03      	cmp	r3, #3
 800b99e:	f240 8101 	bls.w	800bba4 <rx_ip+0x22c>
    mkpay(pkt, pkt->icmp + 1);
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a6:	3304      	adds	r3, #4
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	6838      	ldr	r0, [r7, #0]
 800b9ac:	f7fe fa0a 	bl	8009dc4 <mkpay>
    rx_icmp(ifp, pkt);
 800b9b0:	6839      	ldr	r1, [r7, #0]
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f7fe fed4 	bl	800a760 <rx_icmp>
 800b9b8:	e0f9      	b.n	800bbae <rx_ip+0x236>
  } else if (pkt->ip->proto == 17) {
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	69db      	ldr	r3, [r3, #28]
 800b9be:	7a5b      	ldrb	r3, [r3, #9]
 800b9c0:	2b11      	cmp	r3, #17
 800b9c2:	f040 8086 	bne.w	800bad2 <rx_ip+0x15a>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	69db      	ldr	r3, [r3, #28]
 800b9ca:	f103 0214 	add.w	r2, r3, #20
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	62da      	str	r2, [r3, #44]	; 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	68db      	ldr	r3, [r3, #12]
 800b9d6:	2b07      	cmp	r3, #7
 800b9d8:	f240 80e6 	bls.w	800bba8 <rx_ip+0x230>
    mkpay(pkt, pkt->udp + 1);
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9e0:	3308      	adds	r3, #8
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	6838      	ldr	r0, [r7, #0]
 800b9e6:	f7fe f9ed 	bl	8009dc4 <mkpay>
    MG_DEBUG(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 800b9ea:	4b72      	ldr	r3, [pc, #456]	; (800bbb4 <rx_ip+0x23c>)
 800b9ec:	f242 0229 	movw	r2, #8233	; 0x2029
 800b9f0:	4971      	ldr	r1, [pc, #452]	; (800bbb8 <rx_ip+0x240>)
 800b9f2:	2003      	movs	r0, #3
 800b9f4:	f7fb faaa 	bl	8006f4c <mg_log_prefix>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d026      	beq.n	800ba4c <rx_ip+0xd4>
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	69db      	ldr	r3, [r3, #28]
 800ba02:	f103 050c 	add.w	r5, r3, #12
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba0a:	881b      	ldrh	r3, [r3, #0]
 800ba0c:	b29b      	uxth	r3, r3
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f7fd fcf3 	bl	80093fa <mg_ntohs>
 800ba14:	4603      	mov	r3, r0
 800ba16:	461e      	mov	r6, r3
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	69db      	ldr	r3, [r3, #28]
 800ba1c:	f103 0410 	add.w	r4, r3, #16
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba24:	885b      	ldrh	r3, [r3, #2]
 800ba26:	b29b      	uxth	r3, r3
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f7fd fce6 	bl	80093fa <mg_ntohs>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	461a      	mov	r2, r3
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	68db      	ldr	r3, [r3, #12]
 800ba36:	9303      	str	r3, [sp, #12]
 800ba38:	9202      	str	r2, [sp, #8]
 800ba3a:	9401      	str	r4, [sp, #4]
 800ba3c:	4b5f      	ldr	r3, [pc, #380]	; (800bbbc <rx_ip+0x244>)
 800ba3e:	9300      	str	r3, [sp, #0]
 800ba40:	4633      	mov	r3, r6
 800ba42:	462a      	mov	r2, r5
 800ba44:	495d      	ldr	r1, [pc, #372]	; (800bbbc <rx_ip+0x244>)
 800ba46:	485e      	ldr	r0, [pc, #376]	; (800bbc0 <rx_ip+0x248>)
 800ba48:	f7fb fada 	bl	8007000 <mg_log>
              mg_ntohs(pkt->udp->sport), mg_print_ip4, &pkt->ip->dst,
              mg_ntohs(pkt->udp->dport), (int) pkt->pay.len));
    if (pkt->udp->dport == mg_htons(68)) {
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba50:	885b      	ldrh	r3, [r3, #2]
 800ba52:	b29c      	uxth	r4, r3
 800ba54:	2044      	movs	r0, #68	; 0x44
 800ba56:	f7fd fcd0 	bl	80093fa <mg_ntohs>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	429c      	cmp	r4, r3
 800ba5e:	d112      	bne.n	800ba86 <rx_ip+0x10e>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba64:	f103 0208 	add.w	r2, r3, #8
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	631a      	str	r2, [r3, #48]	; 0x30
      mkpay(pkt, pkt->dhcp + 1);
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba70:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800ba74:	4619      	mov	r1, r3
 800ba76:	6838      	ldr	r0, [r7, #0]
 800ba78:	f7fe f9a4 	bl	8009dc4 <mkpay>
      rx_dhcp_client(ifp, pkt);
 800ba7c:	6839      	ldr	r1, [r7, #0]
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f7fe feca 	bl	800a818 <rx_dhcp_client>
 800ba84:	e093      	b.n	800bbae <rx_ip+0x236>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	7f5b      	ldrb	r3, [r3, #29]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d01c      	beq.n	800bac8 <rx_ip+0x150>
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba92:	885b      	ldrh	r3, [r3, #2]
 800ba94:	b29c      	uxth	r4, r3
 800ba96:	2043      	movs	r0, #67	; 0x43
 800ba98:	f7fd fcaf 	bl	80093fa <mg_ntohs>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	429c      	cmp	r4, r3
 800baa0:	d112      	bne.n	800bac8 <rx_ip+0x150>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baa6:	f103 0208 	add.w	r2, r3, #8
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	631a      	str	r2, [r3, #48]	; 0x30
      mkpay(pkt, pkt->dhcp + 1);
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bab2:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800bab6:	4619      	mov	r1, r3
 800bab8:	6838      	ldr	r0, [r7, #0]
 800baba:	f7fe f983 	bl	8009dc4 <mkpay>
      rx_dhcp_server(ifp, pkt);
 800babe:	6839      	ldr	r1, [r7, #0]
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f7ff f82f 	bl	800ab24 <rx_dhcp_server>
 800bac6:	e072      	b.n	800bbae <rx_ip+0x236>
    } else {
      rx_udp(ifp, pkt);
 800bac8:	6839      	ldr	r1, [r7, #0]
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f7ff f9f4 	bl	800aeb8 <rx_udp>
 800bad0:	e06d      	b.n	800bbae <rx_ip+0x236>
    }
  } else if (pkt->ip->proto == 6) {
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	69db      	ldr	r3, [r3, #28]
 800bad6:	7a5b      	ldrb	r3, [r3, #9]
 800bad8:	2b06      	cmp	r3, #6
 800bada:	d168      	bne.n	800bbae <rx_ip+0x236>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	69db      	ldr	r3, [r3, #28]
 800bae0:	f103 0214 	add.w	r2, r3, #20
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	629a      	str	r2, [r3, #40]	; 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	68db      	ldr	r3, [r3, #12]
 800baec:	2b13      	cmp	r3, #19
 800baee:	d95d      	bls.n	800bbac <rx_ip+0x234>
    mkpay(pkt, pkt->tcp + 1);
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baf4:	3314      	adds	r3, #20
 800baf6:	4619      	mov	r1, r3
 800baf8:	6838      	ldr	r0, [r7, #0]
 800bafa:	f7fe f963 	bl	8009dc4 <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	69db      	ldr	r3, [r3, #28]
 800bb02:	885b      	ldrh	r3, [r3, #2]
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	4618      	mov	r0, r3
 800bb08:	f7fd fc77 	bl	80093fa <mg_ntohs>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	81fb      	strh	r3, [r7, #14]
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb14:	7b1b      	ldrb	r3, [r3, #12]
 800bb16:	091b      	lsrs	r3, r3, #4
 800bb18:	b2db      	uxtb	r3, r3
 800bb1a:	b29b      	uxth	r3, r3
 800bb1c:	3305      	adds	r3, #5
 800bb1e:	b29b      	uxth	r3, r3
 800bb20:	009b      	lsls	r3, r3, #2
 800bb22:	81bb      	strh	r3, [r7, #12]
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 800bb24:	89fa      	ldrh	r2, [r7, #14]
 800bb26:	89bb      	ldrh	r3, [r7, #12]
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d305      	bcc.n	800bb38 <rx_ip+0x1c0>
 800bb2c:	89fa      	ldrh	r2, [r7, #14]
 800bb2e:	89bb      	ldrh	r3, [r7, #12]
 800bb30:	1ad3      	subs	r3, r2, r3
 800bb32:	461a      	mov	r2, r3
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	60da      	str	r2, [r3, #12]
    MG_DEBUG(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 800bb38:	4b1e      	ldr	r3, [pc, #120]	; (800bbb4 <rx_ip+0x23c>)
 800bb3a:	f242 023e 	movw	r2, #8254	; 0x203e
 800bb3e:	491e      	ldr	r1, [pc, #120]	; (800bbb8 <rx_ip+0x240>)
 800bb40:	2003      	movs	r0, #3
 800bb42:	f7fb fa03 	bl	8006f4c <mg_log_prefix>
 800bb46:	4603      	mov	r3, r0
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d026      	beq.n	800bb9a <rx_ip+0x222>
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	69db      	ldr	r3, [r3, #28]
 800bb50:	f103 050c 	add.w	r5, r3, #12
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb58:	881b      	ldrh	r3, [r3, #0]
 800bb5a:	b29b      	uxth	r3, r3
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f7fd fc4c 	bl	80093fa <mg_ntohs>
 800bb62:	4603      	mov	r3, r0
 800bb64:	461e      	mov	r6, r3
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	69db      	ldr	r3, [r3, #28]
 800bb6a:	f103 0410 	add.w	r4, r3, #16
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb72:	885b      	ldrh	r3, [r3, #2]
 800bb74:	b29b      	uxth	r3, r3
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7fd fc3f 	bl	80093fa <mg_ntohs>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	461a      	mov	r2, r3
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	68db      	ldr	r3, [r3, #12]
 800bb84:	9303      	str	r3, [sp, #12]
 800bb86:	9202      	str	r2, [sp, #8]
 800bb88:	9401      	str	r4, [sp, #4]
 800bb8a:	4b0c      	ldr	r3, [pc, #48]	; (800bbbc <rx_ip+0x244>)
 800bb8c:	9300      	str	r3, [sp, #0]
 800bb8e:	4633      	mov	r3, r6
 800bb90:	462a      	mov	r2, r5
 800bb92:	490a      	ldr	r1, [pc, #40]	; (800bbbc <rx_ip+0x244>)
 800bb94:	480b      	ldr	r0, [pc, #44]	; (800bbc4 <rx_ip+0x24c>)
 800bb96:	f7fb fa33 	bl	8007000 <mg_log>
              mg_ntohs(pkt->tcp->sport), mg_print_ip4, &pkt->ip->dst,
              mg_ntohs(pkt->tcp->dport), (int) pkt->pay.len));
    rx_tcp(ifp, pkt);
 800bb9a:	6839      	ldr	r1, [r7, #0]
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f7ff fdc9 	bl	800b734 <rx_tcp>
 800bba2:	e004      	b.n	800bbae <rx_ip+0x236>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800bba4:	bf00      	nop
 800bba6:	e002      	b.n	800bbae <rx_ip+0x236>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800bba8:	bf00      	nop
 800bbaa:	e000      	b.n	800bbae <rx_ip+0x236>
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 800bbac:	bf00      	nop
  }
}
 800bbae:	3714      	adds	r7, #20
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbb4:	080163b4 	.word	0x080163b4
 800bbb8:	08014270 	.word	0x08014270
 800bbbc:	08007d09 	.word	0x08007d09
 800bbc0:	080159a8 	.word	0x080159a8
 800bbc4:	080159c4 	.word	0x080159c4

0800bbc8 <rx_ip6>:

static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b082      	sub	sp, #8
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("IP %d", (int) len));
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	6a1b      	ldr	r3, [r3, #32]
 800bbd6:	799b      	ldrb	r3, [r3, #6]
 800bbd8:	2b01      	cmp	r3, #1
 800bbda:	d004      	beq.n	800bbe6 <rx_ip6+0x1e>
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	6a1b      	ldr	r3, [r3, #32]
 800bbe0:	799b      	ldrb	r3, [r3, #6]
 800bbe2:	2b3a      	cmp	r3, #58	; 0x3a
 800bbe4:	d115      	bne.n	800bc12 <rx_ip6+0x4a>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	6a1b      	ldr	r3, [r3, #32]
 800bbea:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	625a      	str	r2, [r3, #36]	; 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	68db      	ldr	r3, [r3, #12]
 800bbf6:	2b03      	cmp	r3, #3
 800bbf8:	d922      	bls.n	800bc40 <rx_ip6+0x78>
    mkpay(pkt, pkt->icmp + 1);
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbfe:	3304      	adds	r3, #4
 800bc00:	4619      	mov	r1, r3
 800bc02:	6838      	ldr	r0, [r7, #0]
 800bc04:	f7fe f8de 	bl	8009dc4 <mkpay>
    rx_icmp(ifp, pkt);
 800bc08:	6839      	ldr	r1, [r7, #0]
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f7fe fda8 	bl	800a760 <rx_icmp>
 800bc10:	e019      	b.n	800bc46 <rx_ip6+0x7e>
  } else if (pkt->ip6->proto == 17) {
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	6a1b      	ldr	r3, [r3, #32]
 800bc16:	799b      	ldrb	r3, [r3, #6]
 800bc18:	2b11      	cmp	r3, #17
 800bc1a:	d114      	bne.n	800bc46 <rx_ip6+0x7e>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	6a1b      	ldr	r3, [r3, #32]
 800bc20:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	62da      	str	r2, [r3, #44]	; 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	68db      	ldr	r3, [r3, #12]
 800bc2c:	2b07      	cmp	r3, #7
 800bc2e:	d909      	bls.n	800bc44 <rx_ip6+0x7c>
    // MG_DEBUG(("  UDP %u %u -> %u", len, mg_htons(udp->sport),
    // mg_htons(udp->dport)));
    mkpay(pkt, pkt->udp + 1);
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc34:	3308      	adds	r3, #8
 800bc36:	4619      	mov	r1, r3
 800bc38:	6838      	ldr	r0, [r7, #0]
 800bc3a:	f7fe f8c3 	bl	8009dc4 <mkpay>
 800bc3e:	e002      	b.n	800bc46 <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800bc40:	bf00      	nop
 800bc42:	e000      	b.n	800bc46 <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800bc44:	bf00      	nop
  }
}
 800bc46:	3708      	adds	r7, #8
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}

0800bc4c <mg_tcpip_rx>:

static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 800bc4c:	b590      	push	{r4, r7, lr}
 800bc4e:	b093      	sub	sp, #76	; 0x4c
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	60f8      	str	r0, [r7, #12]
 800bc54:	60b9      	str	r1, [r7, #8]
 800bc56:	607a      	str	r2, [r7, #4]
  struct pkt pkt;
  memset(&pkt, 0, sizeof(pkt));
 800bc58:	f107 0314 	add.w	r3, r7, #20
 800bc5c:	2234      	movs	r2, #52	; 0x34
 800bc5e:	2100      	movs	r1, #0
 800bc60:	4618      	mov	r0, r3
 800bc62:	f007 fc14 	bl	801348e <memset>
  pkt.raw.ptr = (char *) buf;
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	617b      	str	r3, [r7, #20]
  pkt.raw.len = len;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	61bb      	str	r3, [r7, #24]
  pkt.eth = (struct eth *) buf;
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	627b      	str	r3, [r7, #36]	; 0x24
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 800bc72:	69bb      	ldr	r3, [r7, #24]
 800bc74:	2b0d      	cmp	r3, #13
 800bc76:	f240 80d1 	bls.w	800be1c <mg_tcpip_rx+0x1d0>
  if (ifp->enable_mac_check &&
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	7fdb      	ldrb	r3, [r3, #31]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d013      	beq.n	800bcaa <mg_tcpip_rx+0x5e>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 800bc82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc84:	4618      	mov	r0, r3
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	2206      	movs	r2, #6
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	f007 fbd5 	bl	801343a <memcmp>
 800bc90:	4603      	mov	r3, r0
  if (ifp->enable_mac_check &&
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d009      	beq.n	800bcaa <mg_tcpip_rx+0x5e>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 800bc96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc98:	2206      	movs	r2, #6
 800bc9a:	496a      	ldr	r1, [pc, #424]	; (800be44 <mg_tcpip_rx+0x1f8>)
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	f007 fbcc 	bl	801343a <memcmp>
 800bca2:	4603      	mov	r3, r0
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	f040 80bb 	bne.w	800be20 <mg_tcpip_rx+0x1d4>
    return;
  if (ifp->enable_crc32_check && len > 4) {
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	7f9b      	ldrb	r3, [r3, #30]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d01a      	beq.n	800bce8 <mg_tcpip_rx+0x9c>
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2b04      	cmp	r3, #4
 800bcb6:	d917      	bls.n	800bce8 <mg_tcpip_rx+0x9c>
    len -= 4;  // TODO(scaprile): check on bigendian
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	3b04      	subs	r3, #4
 800bcbc:	607b      	str	r3, [r7, #4]
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 800bcbe:	687a      	ldr	r2, [r7, #4]
 800bcc0:	68b9      	ldr	r1, [r7, #8]
 800bcc2:	2000      	movs	r0, #0
 800bcc4:	f7fd fbb0 	bl	8009428 <mg_crc32>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	613b      	str	r3, [r7, #16]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 800bccc:	68ba      	ldr	r2, [r7, #8]
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	4413      	add	r3, r2
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f107 0310 	add.w	r3, r7, #16
 800bcd8:	2204      	movs	r2, #4
 800bcda:	4619      	mov	r1, r3
 800bcdc:	f007 fbad 	bl	801343a <memcmp>
 800bce0:	4603      	mov	r3, r0
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	f040 809e 	bne.w	800be24 <mg_tcpip_rx+0x1d8>
  }
  if (pkt.eth->type == mg_htons(0x806)) {
 800bce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcea:	899b      	ldrh	r3, [r3, #12]
 800bcec:	b29c      	uxth	r4, r3
 800bcee:	f640 0006 	movw	r0, #2054	; 0x806
 800bcf2:	f7fd fb82 	bl	80093fa <mg_ntohs>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	429c      	cmp	r4, r3
 800bcfa:	d10d      	bne.n	800bd18 <mg_tcpip_rx+0xcc>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 800bcfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfe:	330e      	adds	r3, #14
 800bd00:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 800bd02:	69bb      	ldr	r3, [r7, #24]
 800bd04:	2b29      	cmp	r3, #41	; 0x29
 800bd06:	f240 808f 	bls.w	800be28 <mg_tcpip_rx+0x1dc>
    rx_arp(ifp, &pkt);
 800bd0a:	f107 0314 	add.w	r3, r7, #20
 800bd0e:	4619      	mov	r1, r3
 800bd10:	68f8      	ldr	r0, [r7, #12]
 800bd12:	f7fe fc25 	bl	800a560 <rx_arp>
 800bd16:	e092      	b.n	800be3e <mg_tcpip_rx+0x1f2>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 800bd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd1a:	899b      	ldrh	r3, [r3, #12]
 800bd1c:	b29c      	uxth	r4, r3
 800bd1e:	f248 60dd 	movw	r0, #34525	; 0x86dd
 800bd22:	f7fd fb6a 	bl	80093fa <mg_ntohs>
 800bd26:	4603      	mov	r3, r0
 800bd28:	429c      	cmp	r4, r3
 800bd2a:	d11b      	bne.n	800bd64 <mg_tcpip_rx+0x118>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 800bd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd2e:	330e      	adds	r3, #14
 800bd30:	637b      	str	r3, [r7, #52]	; 0x34
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 800bd32:	69bb      	ldr	r3, [r7, #24]
 800bd34:	2b35      	cmp	r3, #53	; 0x35
 800bd36:	d979      	bls.n	800be2c <mg_tcpip_rx+0x1e0>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 800bd38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	091b      	lsrs	r3, r3, #4
 800bd3e:	b2db      	uxtb	r3, r3
 800bd40:	2b06      	cmp	r3, #6
 800bd42:	d175      	bne.n	800be30 <mg_tcpip_rx+0x1e4>
    mkpay(&pkt, pkt.ip6 + 1);
 800bd44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd46:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800bd4a:	f107 0314 	add.w	r3, r7, #20
 800bd4e:	4611      	mov	r1, r2
 800bd50:	4618      	mov	r0, r3
 800bd52:	f7fe f837 	bl	8009dc4 <mkpay>
    rx_ip6(ifp, &pkt);
 800bd56:	f107 0314 	add.w	r3, r7, #20
 800bd5a:	4619      	mov	r1, r3
 800bd5c:	68f8      	ldr	r0, [r7, #12]
 800bd5e:	f7ff ff33 	bl	800bbc8 <rx_ip6>
 800bd62:	e06c      	b.n	800be3e <mg_tcpip_rx+0x1f2>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 800bd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd66:	899b      	ldrh	r3, [r3, #12]
 800bd68:	b29c      	uxth	r4, r3
 800bd6a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800bd6e:	f7fd fb44 	bl	80093fa <mg_ntohs>
 800bd72:	4603      	mov	r3, r0
 800bd74:	429c      	cmp	r4, r3
 800bd76:	d133      	bne.n	800bde0 <mg_tcpip_rx+0x194>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 800bd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd7a:	330e      	adds	r3, #14
 800bd7c:	633b      	str	r3, [r7, #48]	; 0x30
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800bd7e:	69bb      	ldr	r3, [r7, #24]
 800bd80:	2b21      	cmp	r3, #33	; 0x21
 800bd82:	d957      	bls.n	800be34 <mg_tcpip_rx+0x1e8>
    // Truncate frame to what IP header tells us
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 800bd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd86:	885b      	ldrh	r3, [r3, #2]
 800bd88:	b29b      	uxth	r3, r3
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f7fd fb35 	bl	80093fa <mg_ntohs>
 800bd90:	4603      	mov	r3, r0
 800bd92:	f103 020e 	add.w	r2, r3, #14
 800bd96:	69bb      	ldr	r3, [r7, #24]
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	d208      	bcs.n	800bdae <mg_tcpip_rx+0x162>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 800bd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd9e:	885b      	ldrh	r3, [r3, #2]
 800bda0:	b29b      	uxth	r3, r3
 800bda2:	4618      	mov	r0, r3
 800bda4:	f7fd fb29 	bl	80093fa <mg_ntohs>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	330e      	adds	r3, #14
 800bdac:	61bb      	str	r3, [r7, #24]
    }
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800bdae:	69bb      	ldr	r3, [r7, #24]
 800bdb0:	2b21      	cmp	r3, #33	; 0x21
 800bdb2:	d941      	bls.n	800be38 <mg_tcpip_rx+0x1ec>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 800bdb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb6:	781b      	ldrb	r3, [r3, #0]
 800bdb8:	091b      	lsrs	r3, r3, #4
 800bdba:	b2db      	uxtb	r3, r3
 800bdbc:	2b04      	cmp	r3, #4
 800bdbe:	d13d      	bne.n	800be3c <mg_tcpip_rx+0x1f0>
    mkpay(&pkt, pkt.ip + 1);
 800bdc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc2:	f103 0214 	add.w	r2, r3, #20
 800bdc6:	f107 0314 	add.w	r3, r7, #20
 800bdca:	4611      	mov	r1, r2
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f7fd fff9 	bl	8009dc4 <mkpay>
    rx_ip(ifp, &pkt);
 800bdd2:	f107 0314 	add.w	r3, r7, #20
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	68f8      	ldr	r0, [r7, #12]
 800bdda:	f7ff fdcd 	bl	800b978 <rx_ip>
 800bdde:	e02e      	b.n	800be3e <mg_tcpip_rx+0x1f2>
  } else {
    MG_DEBUG(("  Unknown eth type %x", mg_htons(pkt.eth->type)));
 800bde0:	4b19      	ldr	r3, [pc, #100]	; (800be48 <mg_tcpip_rx+0x1fc>)
 800bde2:	f242 027b 	movw	r2, #8315	; 0x207b
 800bde6:	4919      	ldr	r1, [pc, #100]	; (800be4c <mg_tcpip_rx+0x200>)
 800bde8:	2003      	movs	r0, #3
 800bdea:	f7fb f8af 	bl	8006f4c <mg_log_prefix>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d00a      	beq.n	800be0a <mg_tcpip_rx+0x1be>
 800bdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf6:	899b      	ldrh	r3, [r3, #12]
 800bdf8:	b29b      	uxth	r3, r3
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f7fd fafd 	bl	80093fa <mg_ntohs>
 800be00:	4603      	mov	r3, r0
 800be02:	4619      	mov	r1, r3
 800be04:	4812      	ldr	r0, [pc, #72]	; (800be50 <mg_tcpip_rx+0x204>)
 800be06:	f7fb f8fb 	bl	8007000 <mg_log>
    mg_hexdump(buf, len >= 16 ? 16 : len);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2b10      	cmp	r3, #16
 800be0e:	bf28      	it	cs
 800be10:	2310      	movcs	r3, #16
 800be12:	4619      	mov	r1, r3
 800be14:	68b8      	ldr	r0, [r7, #8]
 800be16:	f7fb f927 	bl	8007068 <mg_hexdump>
 800be1a:	e010      	b.n	800be3e <mg_tcpip_rx+0x1f2>
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 800be1c:	bf00      	nop
 800be1e:	e00e      	b.n	800be3e <mg_tcpip_rx+0x1f2>
    return;
 800be20:	bf00      	nop
 800be22:	e00c      	b.n	800be3e <mg_tcpip_rx+0x1f2>
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 800be24:	bf00      	nop
 800be26:	e00a      	b.n	800be3e <mg_tcpip_rx+0x1f2>
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 800be28:	bf00      	nop
 800be2a:	e008      	b.n	800be3e <mg_tcpip_rx+0x1f2>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 800be2c:	bf00      	nop
 800be2e:	e006      	b.n	800be3e <mg_tcpip_rx+0x1f2>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 800be30:	bf00      	nop
 800be32:	e004      	b.n	800be3e <mg_tcpip_rx+0x1f2>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800be34:	bf00      	nop
 800be36:	e002      	b.n	800be3e <mg_tcpip_rx+0x1f2>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800be38:	bf00      	nop
 800be3a:	e000      	b.n	800be3e <mg_tcpip_rx+0x1f2>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 800be3c:	bf00      	nop
  }
}
 800be3e:	374c      	adds	r7, #76	; 0x4c
 800be40:	46bd      	mov	sp, r7
 800be42:	bd90      	pop	{r4, r7, pc}
 800be44:	080161a4 	.word	0x080161a4
 800be48:	080163bc 	.word	0x080163bc
 800be4c:	08014270 	.word	0x08014270
 800be50:	080159e0 	.word	0x080159e0

0800be54 <mg_tcpip_poll>:

static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t uptime_ms) {
 800be54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be56:	b095      	sub	sp, #84	; 0x54
 800be58:	af06      	add	r7, sp, #24
 800be5a:	6178      	str	r0, [r7, #20]
 800be5c:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (ifp == NULL || ifp->driver == NULL) return;
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	2b00      	cmp	r3, #0
 800be64:	f000 81b9 	beq.w	800c1da <mg_tcpip_poll+0x386>
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	6a1b      	ldr	r3, [r3, #32]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	f000 81b4 	beq.w	800c1da <mg_tcpip_poll+0x386>
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, uptime_ms);
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800be78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800be7c:	e9cd 2300 	strd	r2, r3, [sp]
 800be80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800be84:	f04f 0300 	mov.w	r3, #0
 800be88:	4608      	mov	r0, r1
 800be8a:	f7fd f864 	bl	8008f56 <mg_timer_expired>
 800be8e:	4603      	mov	r3, r0
 800be90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  ifp->now = uptime_ms;
 800be94:	6979      	ldr	r1, [r7, #20]
 800be96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800be9a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

  // Handle physical interface up/down status
  if (expired_1000ms && ifp->driver->up) {
 800be9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d03f      	beq.n	800bf26 <mg_tcpip_poll+0xd2>
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	6a1b      	ldr	r3, [r3, #32]
 800beaa:	68db      	ldr	r3, [r3, #12]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d03a      	beq.n	800bf26 <mg_tcpip_poll+0xd2>
    bool up = ifp->driver->up(ifp);
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	6a1b      	ldr	r3, [r3, #32]
 800beb4:	68db      	ldr	r3, [r3, #12]
 800beb6:	6978      	ldr	r0, [r7, #20]
 800beb8:	4798      	blx	r3
 800beba:	4603      	mov	r3, r0
 800bebc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 800bec0:	697b      	ldr	r3, [r7, #20]
 800bec2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	bf14      	ite	ne
 800beca:	2301      	movne	r3, #1
 800becc:	2300      	moveq	r3, #0
 800bece:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    if (up != current) {
 800bed2:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800bed6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800beda:	429a      	cmp	r2, r3
 800bedc:	d023      	beq.n	800bf26 <mg_tcpip_poll+0xd2>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 800bede:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bee2:	f083 0301 	eor.w	r3, r3, #1
 800bee6:	b2db      	uxtb	r3, r3
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d001      	beq.n	800bef0 <mg_tcpip_poll+0x9c>
 800beec:	2300      	movs	r3, #0
 800beee:	e006      	b.n	800befe <mg_tcpip_poll+0xaa>
                   : ifp->enable_dhcp_client ? MG_TCPIP_STATE_UP
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	7f1b      	ldrb	r3, [r3, #28]
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d001      	beq.n	800befc <mg_tcpip_poll+0xa8>
 800bef8:	2301      	movs	r3, #1
 800befa:	e000      	b.n	800befe <mg_tcpip_poll+0xaa>
 800befc:	2303      	movs	r3, #3
 800befe:	697a      	ldr	r2, [r7, #20]
 800bf00:	f882 3074 	strb.w	r3, [r2, #116]	; 0x74
                                             : MG_TCPIP_STATE_READY;
      if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 800bf04:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bf08:	f083 0301 	eor.w	r3, r3, #1
 800bf0c:	b2db      	uxtb	r3, r3
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d006      	beq.n	800bf20 <mg_tcpip_poll+0xcc>
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	7f1b      	ldrb	r3, [r3, #28]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d002      	beq.n	800bf20 <mg_tcpip_poll+0xcc>
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	609a      	str	r2, [r3, #8]
      onstatechange(ifp);
 800bf20:	6978      	ldr	r0, [r7, #20]
 800bf22:	f7fe f841 	bl	8009fa8 <onstatechange>
    }
  }
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 800bf26:	697b      	ldr	r3, [r7, #20]
 800bf28:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	f000 8156 	beq.w	800c1de <mg_tcpip_poll+0x38a>

  // DHCP RFC-2131 (4.4)
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800bf38:	2b01      	cmp	r3, #1
 800bf3a:	d107      	bne.n	800bf4c <mg_tcpip_poll+0xf8>
 800bf3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d003      	beq.n	800bf4c <mg_tcpip_poll+0xf8>
    tx_dhcp_discover(ifp);  // INIT (4.4.1)
 800bf44:	6978      	ldr	r0, [r7, #20]
 800bf46:	f7fe fa79 	bl	800a43c <tx_dhcp_discover>
 800bf4a:	e04c      	b.n	800bfe6 <mg_tcpip_poll+0x192>
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 800bf4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d048      	beq.n	800bfe6 <mg_tcpip_poll+0x192>
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800bf5a:	2b03      	cmp	r3, #3
 800bf5c:	d143      	bne.n	800bfe6 <mg_tcpip_poll+0x192>
             ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 800bf64:	4313      	orrs	r3, r2
 800bf66:	d03e      	beq.n	800bfe6 <mg_tcpip_poll+0x192>
    if (ifp->now >= ifp->lease_expire) {
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800bf74:	4290      	cmp	r0, r2
 800bf76:	eb71 0303 	sbcs.w	r3, r1, r3
 800bf7a:	d30a      	bcc.n	800bf92 <mg_tcpip_poll+0x13e>
      ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	2201      	movs	r2, #1
 800bf80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800bf84:	697b      	ldr	r3, [r7, #20]
 800bf86:	2200      	movs	r2, #0
 800bf88:	609a      	str	r2, [r3, #8]
      onstatechange(ifp);
 800bf8a:	6978      	ldr	r0, [r7, #20]
 800bf8c:	f7fe f80c 	bl	8009fa8 <onstatechange>
 800bf90:	e029      	b.n	800bfe6 <mg_tcpip_poll+0x192>
    } else if (ifp->now + 30 * 60 * 1000 > ifp->lease_expire &&
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800bf98:	4993      	ldr	r1, [pc, #588]	; (800c1e8 <mg_tcpip_poll+0x394>)
 800bf9a:	1854      	adds	r4, r2, r1
 800bf9c:	f143 0500 	adc.w	r5, r3, #0
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800bfa6:	42a2      	cmp	r2, r4
 800bfa8:	41ab      	sbcs	r3, r5
 800bfaa:	d21c      	bcs.n	800bfe6 <mg_tcpip_poll+0x192>
               ((ifp->now / 1000) % 60) == 0) {
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800bfb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bfb6:	f04f 0300 	mov.w	r3, #0
 800bfba:	f7f4 fc1d 	bl	80007f8 <__aeabi_uldivmod>
 800bfbe:	4602      	mov	r2, r0
 800bfc0:	460b      	mov	r3, r1
 800bfc2:	4610      	mov	r0, r2
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	f04f 023c 	mov.w	r2, #60	; 0x3c
 800bfca:	f04f 0300 	mov.w	r3, #0
 800bfce:	f7f4 fc13 	bl	80007f8 <__aeabi_uldivmod>
    } else if (ifp->now + 30 * 60 * 1000 > ifp->lease_expire &&
 800bfd2:	4313      	orrs	r3, r2
 800bfd4:	d107      	bne.n	800bfe6 <mg_tcpip_poll+0x192>
      // hack: 30 min before deadline, try to rebind (4.3.6) every min
      tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	689a      	ldr	r2, [r3, #8]
 800bfda:	f04f 33ff 	mov.w	r3, #4294967295
 800bfde:	4983      	ldr	r1, [pc, #524]	; (800c1ec <mg_tcpip_poll+0x398>)
 800bfe0:	6978      	ldr	r0, [r7, #20]
 800bfe2:	f7fe f9fb 	bl	800a3dc <tx_dhcp_request_re>
    }  // TODO(): Handle T1 (RENEWING) and T2 (REBINDING) (4.4.5)
  }

  // Read data from the network
  if (ifp->driver->rx != NULL) {  // Polling driver. We must call it
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	6a1b      	ldr	r3, [r3, #32]
 800bfea:	689b      	ldr	r3, [r3, #8]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d014      	beq.n	800c01a <mg_tcpip_poll+0x1c6>
    size_t len =
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	6a1b      	ldr	r3, [r3, #32]
 800bff4:	689b      	ldr	r3, [r3, #8]
 800bff6:	697a      	ldr	r2, [r7, #20]
 800bff8:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800bffa:	697a      	ldr	r2, [r7, #20]
 800bffc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800bffe:	697a      	ldr	r2, [r7, #20]
 800c000:	4798      	blx	r3
 800c002:	62b8      	str	r0, [r7, #40]	; 0x28
    if (len > 0) mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 800c004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c006:	2b00      	cmp	r3, #0
 800c008:	d01f      	beq.n	800c04a <mg_tcpip_poll+0x1f6>
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c00e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c010:	4619      	mov	r1, r3
 800c012:	6978      	ldr	r0, [r7, #20]
 800c014:	f7ff fe1a 	bl	800bc4c <mg_tcpip_rx>
 800c018:	e017      	b.n	800c04a <mg_tcpip_poll+0x1f6>
  } else {  // Interrupt-based driver. Fills recv queue itself
    char *buf;
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 800c01a:	697b      	ldr	r3, [r7, #20]
 800c01c:	332c      	adds	r3, #44	; 0x2c
 800c01e:	f107 0220 	add.w	r2, r7, #32
 800c022:	4611      	mov	r1, r2
 800c024:	4618      	mov	r0, r3
 800c026:	f7fc f859 	bl	80080dc <mg_queue_next>
 800c02a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (len > 0) {
 800c02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d00b      	beq.n	800c04a <mg_tcpip_poll+0x1f6>
      mg_tcpip_rx(ifp, buf, len);
 800c032:	6a3b      	ldr	r3, [r7, #32]
 800c034:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c036:	4619      	mov	r1, r3
 800c038:	6978      	ldr	r0, [r7, #20]
 800c03a:	f7ff fe07 	bl	800bc4c <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 800c03e:	697b      	ldr	r3, [r7, #20]
 800c040:	332c      	adds	r3, #44	; 0x2c
 800c042:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c044:	4618      	mov	r0, r3
 800c046:	f7fc f8c7 	bl	80081d8 <mg_queue_del>
    }
  }

  // Process timeouts
  for (struct mg_connection *c = ifp->mgr->conns; c != NULL; c = c->next) {
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	637b      	str	r3, [r7, #52]	; 0x34
 800c052:	e0bd      	b.n	800c1d0 <mg_tcpip_poll+0x37c>
    if (c->is_udp || c->is_listening) continue;
 800c054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c056:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800c05a:	f003 0301 	and.w	r3, r3, #1
 800c05e:	b2db      	uxtb	r3, r3
 800c060:	2b00      	cmp	r3, #0
 800c062:	f040 80af 	bne.w	800c1c4 <mg_tcpip_poll+0x370>
 800c066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c068:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800c06c:	f003 0301 	and.w	r3, r3, #1
 800c070:	b2db      	uxtb	r3, r3
 800c072:	2b00      	cmp	r3, #0
 800c074:	f040 80a6 	bne.w	800c1c4 <mg_tcpip_poll+0x370>
    if (c->is_connecting || c->is_resolving) continue;
 800c078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c07a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800c07e:	f003 0320 	and.w	r3, r3, #32
 800c082:	b2db      	uxtb	r3, r3
 800c084:	2b00      	cmp	r3, #0
 800c086:	f040 809f 	bne.w	800c1c8 <mg_tcpip_poll+0x374>
 800c08a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c08c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800c090:	f003 0308 	and.w	r3, r3, #8
 800c094:	b2db      	uxtb	r3, r3
 800c096:	2b00      	cmp	r3, #0
 800c098:	f040 8096 	bne.w	800c1c8 <mg_tcpip_poll+0x374>
    struct connstate *s = (struct connstate *) (c + 1);
 800c09c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c09e:	3390      	adds	r3, #144	; 0x90
 800c0a0:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800c0a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0a4:	331c      	adds	r3, #28
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	61fb      	str	r3, [r7, #28]
    if (uptime_ms > s->timer) {
 800c0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ac:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800c0b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c0b4:	4290      	cmp	r0, r2
 800c0b6:	eb71 0303 	sbcs.w	r3, r1, r3
 800c0ba:	f080 8086 	bcs.w	800c1ca <mg_tcpip_poll+0x376>
      if (s->ttype == MIP_TTYPE_ACK) {
 800c0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c0:	7d9b      	ldrb	r3, [r3, #22]
 800c0c2:	2b01      	cmp	r3, #1
 800c0c4:	d137      	bne.n	800c136 <mg_tcpip_poll+0x2e2>
        MG_DEBUG(("%lu ack %x %x", c->id, s->seq, s->ack));
 800c0c6:	4b4a      	ldr	r3, [pc, #296]	; (800c1f0 <mg_tcpip_poll+0x39c>)
 800c0c8:	f242 02b9 	movw	r2, #8377	; 0x20b9
 800c0cc:	4949      	ldr	r1, [pc, #292]	; (800c1f4 <mg_tcpip_poll+0x3a0>)
 800c0ce:	2003      	movs	r0, #3
 800c0d0:	f7fa ff3c 	bl	8006f4c <mg_log_prefix>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d008      	beq.n	800c0ec <mg_tcpip_poll+0x298>
 800c0da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e0:	681a      	ldr	r2, [r3, #0]
 800c0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	4844      	ldr	r0, [pc, #272]	; (800c1f8 <mg_tcpip_poll+0x3a4>)
 800c0e8:	f7fa ff8a 	bl	8007000 <mg_log>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800c0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ee:	f103 0610 	add.w	r6, r3, #16
 800c0f2:	69fb      	ldr	r3, [r7, #28]
 800c0f4:	613b      	str	r3, [r7, #16]
 800c0f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0f8:	8b1c      	ldrh	r4, [r3, #24]
 800c0fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0fc:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 800c0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	4618      	mov	r0, r3
 800c104:	f7fd f960 	bl	80093c8 <mg_ntohl>
 800c108:	6078      	str	r0, [r7, #4]
 800c10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c10c:	685b      	ldr	r3, [r3, #4]
 800c10e:	4618      	mov	r0, r3
 800c110:	f7fd f95a 	bl	80093c8 <mg_ntohl>
 800c114:	4603      	mov	r3, r0
 800c116:	2200      	movs	r2, #0
 800c118:	9205      	str	r2, [sp, #20]
 800c11a:	4a38      	ldr	r2, [pc, #224]	; (800c1fc <mg_tcpip_poll+0x3a8>)
 800c11c:	9204      	str	r2, [sp, #16]
 800c11e:	9303      	str	r3, [sp, #12]
 800c120:	6879      	ldr	r1, [r7, #4]
 800c122:	9102      	str	r1, [sp, #8]
 800c124:	9501      	str	r5, [sp, #4]
 800c126:	9400      	str	r4, [sp, #0]
 800c128:	2310      	movs	r3, #16
 800c12a:	693a      	ldr	r2, [r7, #16]
 800c12c:	4631      	mov	r1, r6
 800c12e:	6978      	ldr	r0, [r7, #20]
 800c130:	f7fe ff34 	bl	800af9c <tx_tcp>
 800c134:	e041      	b.n	800c1ba <mg_tcpip_poll+0x366>
               mg_htonl(s->seq), mg_htonl(s->ack), "", 0);
      } else {
        if (s->tmiss++ > 2) {
 800c136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c138:	7ddb      	ldrb	r3, [r3, #23]
 800c13a:	1c5a      	adds	r2, r3, #1
 800c13c:	b2d1      	uxtb	r1, r2
 800c13e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c140:	75d1      	strb	r1, [r2, #23]
 800c142:	2b02      	cmp	r3, #2
 800c144:	d904      	bls.n	800c150 <mg_tcpip_poll+0x2fc>
          mg_error(c, "keepalive");
 800c146:	492e      	ldr	r1, [pc, #184]	; (800c200 <mg_tcpip_poll+0x3ac>)
 800c148:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c14a:	f7f5 ff41 	bl	8001fd0 <mg_error>
 800c14e:	e034      	b.n	800c1ba <mg_tcpip_poll+0x366>
        } else {
          MG_DEBUG(("%lu keepalive", c->id));
 800c150:	4b27      	ldr	r3, [pc, #156]	; (800c1f0 <mg_tcpip_poll+0x39c>)
 800c152:	f44f 5203 	mov.w	r2, #8384	; 0x20c0
 800c156:	4927      	ldr	r1, [pc, #156]	; (800c1f4 <mg_tcpip_poll+0x3a0>)
 800c158:	2003      	movs	r0, #3
 800c15a:	f7fa fef7 	bl	8006f4c <mg_log_prefix>
 800c15e:	4603      	mov	r3, r0
 800c160:	2b00      	cmp	r3, #0
 800c162:	d005      	beq.n	800c170 <mg_tcpip_poll+0x31c>
 800c164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c168:	4619      	mov	r1, r3
 800c16a:	4826      	ldr	r0, [pc, #152]	; (800c204 <mg_tcpip_poll+0x3b0>)
 800c16c:	f7fa ff48 	bl	8007000 <mg_log>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800c170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c172:	f103 0610 	add.w	r6, r3, #16
 800c176:	69fb      	ldr	r3, [r7, #28]
 800c178:	613b      	str	r3, [r7, #16]
 800c17a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c17c:	8b1c      	ldrh	r4, [r3, #24]
 800c17e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c180:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), "", 0);
 800c182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c184:	681b      	ldr	r3, [r3, #0]
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800c186:	3b01      	subs	r3, #1
 800c188:	4618      	mov	r0, r3
 800c18a:	f7fd f91d 	bl	80093c8 <mg_ntohl>
 800c18e:	6078      	str	r0, [r7, #4]
 800c190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c192:	685b      	ldr	r3, [r3, #4]
 800c194:	4618      	mov	r0, r3
 800c196:	f7fd f917 	bl	80093c8 <mg_ntohl>
 800c19a:	4603      	mov	r3, r0
 800c19c:	2200      	movs	r2, #0
 800c19e:	9205      	str	r2, [sp, #20]
 800c1a0:	4a16      	ldr	r2, [pc, #88]	; (800c1fc <mg_tcpip_poll+0x3a8>)
 800c1a2:	9204      	str	r2, [sp, #16]
 800c1a4:	9303      	str	r3, [sp, #12]
 800c1a6:	6879      	ldr	r1, [r7, #4]
 800c1a8:	9102      	str	r1, [sp, #8]
 800c1aa:	9501      	str	r5, [sp, #4]
 800c1ac:	9400      	str	r4, [sp, #0]
 800c1ae:	2310      	movs	r3, #16
 800c1b0:	693a      	ldr	r2, [r7, #16]
 800c1b2:	4631      	mov	r1, r6
 800c1b4:	6978      	ldr	r0, [r7, #20]
 800c1b6:	f7fe fef1 	bl	800af9c <tx_tcp>
        }
      }
      settmout(c, MIP_TTYPE_KEEPALIVE);
 800c1ba:	2100      	movs	r1, #0
 800c1bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c1be:	f7fe fffd 	bl	800b1bc <settmout>
 800c1c2:	e002      	b.n	800c1ca <mg_tcpip_poll+0x376>
    if (c->is_udp || c->is_listening) continue;
 800c1c4:	bf00      	nop
 800c1c6:	e000      	b.n	800c1ca <mg_tcpip_poll+0x376>
    if (c->is_connecting || c->is_resolving) continue;
 800c1c8:	bf00      	nop
  for (struct mg_connection *c = ifp->mgr->conns; c != NULL; c = c->next) {
 800c1ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	637b      	str	r3, [r7, #52]	; 0x34
 800c1d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	f47f af3e 	bne.w	800c054 <mg_tcpip_poll+0x200>
 800c1d8:	e002      	b.n	800c1e0 <mg_tcpip_poll+0x38c>
  if (ifp == NULL || ifp->driver == NULL) return;
 800c1da:	bf00      	nop
 800c1dc:	e000      	b.n	800c1e0 <mg_tcpip_poll+0x38c>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 800c1de:	bf00      	nop
    }
  }
}
 800c1e0:	373c      	adds	r7, #60	; 0x3c
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	001b7740 	.word	0x001b7740
 800c1ec:	080161a4 	.word	0x080161a4
 800c1f0:	080163c8 	.word	0x080163c8
 800c1f4:	08014270 	.word	0x08014270
 800c1f8:	080159f8 	.word	0x080159f8
 800c1fc:	0801490c 	.word	0x0801490c
 800c200:	08015a08 	.word	0x08015a08
 800c204:	08015a14 	.word	0x08015a14

0800c208 <mg_tcpip_qwrite>:

// This function executes in interrupt context, thus it should copy data
// somewhere fast. Note that newlib's malloc is not thread safe, thus use
// our lock-free queue with preallocated buffer to copy data and return asap
void mg_tcpip_qwrite(void *buf, size_t len, struct mg_tcpip_if *ifp) {
 800c208:	b580      	push	{r7, lr}
 800c20a:	b086      	sub	sp, #24
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	60f8      	str	r0, [r7, #12]
 800c210:	60b9      	str	r1, [r7, #8]
 800c212:	607a      	str	r2, [r7, #4]
  char *p;
  if (mg_queue_book(&ifp->recv_queue, &p, len) >= len) {
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	332c      	adds	r3, #44	; 0x2c
 800c218:	f107 0114 	add.w	r1, r7, #20
 800c21c:	68ba      	ldr	r2, [r7, #8]
 800c21e:	4618      	mov	r0, r3
 800c220:	f7fb ff04 	bl	800802c <mg_queue_book>
 800c224:	4602      	mov	r2, r0
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	4293      	cmp	r3, r2
 800c22a:	d811      	bhi.n	800c250 <mg_tcpip_qwrite+0x48>
    memcpy(p, buf, len);
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	68ba      	ldr	r2, [r7, #8]
 800c230:	68f9      	ldr	r1, [r7, #12]
 800c232:	4618      	mov	r0, r3
 800c234:	f007 fa12 	bl	801365c <memcpy>
    mg_queue_add(&ifp->recv_queue, len);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	332c      	adds	r3, #44	; 0x2c
 800c23c:	68b9      	ldr	r1, [r7, #8]
 800c23e:	4618      	mov	r0, r3
 800c240:	f7fb ff92 	bl	8008168 <mg_queue_add>
    ifp->nrecv++;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c248:	1c5a      	adds	r2, r3, #1
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	669a      	str	r2, [r3, #104]	; 0x68
  } else {
    ifp->ndrop++;
  }
}
 800c24e:	e004      	b.n	800c25a <mg_tcpip_qwrite+0x52>
    ifp->ndrop++;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c254:	1c5a      	adds	r2, r3, #1
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	665a      	str	r2, [r3, #100]	; 0x64
}
 800c25a:	bf00      	nop
 800c25c:	3718      	adds	r7, #24
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}
	...

0800c264 <mg_tcpip_init>:

void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 800c264:	b580      	push	{r7, lr}
 800c266:	b084      	sub	sp, #16
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	6039      	str	r1, [r7, #0]
  // If MAC address is not set, make a random one
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	781b      	ldrb	r3, [r3, #0]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d12c      	bne.n	800c2d0 <mg_tcpip_init+0x6c>
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	785b      	ldrb	r3, [r3, #1]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d128      	bne.n	800c2d0 <mg_tcpip_init+0x6c>
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	789b      	ldrb	r3, [r3, #2]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d124      	bne.n	800c2d0 <mg_tcpip_init+0x6c>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	78db      	ldrb	r3, [r3, #3]
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d120      	bne.n	800c2d0 <mg_tcpip_init+0x6c>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	791b      	ldrb	r3, [r3, #4]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d11c      	bne.n	800c2d0 <mg_tcpip_init+0x6c>
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	795b      	ldrb	r3, [r3, #5]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d118      	bne.n	800c2d0 <mg_tcpip_init+0x6c>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	2202      	movs	r2, #2
 800c2a2:	701a      	strb	r2, [r3, #0]
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	2105      	movs	r1, #5
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f7f4 fc86 	bl	8000bbc <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 800c2b0:	4b4d      	ldr	r3, [pc, #308]	; (800c3e8 <mg_tcpip_init+0x184>)
 800c2b2:	f242 02de 	movw	r2, #8414	; 0x20de
 800c2b6:	494d      	ldr	r1, [pc, #308]	; (800c3ec <mg_tcpip_init+0x188>)
 800c2b8:	2002      	movs	r0, #2
 800c2ba:	f7fa fe47 	bl	8006f4c <mg_log_prefix>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d005      	beq.n	800c2d0 <mg_tcpip_init+0x6c>
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	461a      	mov	r2, r3
 800c2c8:	4949      	ldr	r1, [pc, #292]	; (800c3f0 <mg_tcpip_init+0x18c>)
 800c2ca:	484a      	ldr	r0, [pc, #296]	; (800c3f4 <mg_tcpip_init+0x190>)
 800c2cc:	f7fa fe98 	bl	8007000 <mg_log>
  }

  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	6a1b      	ldr	r3, [r3, #32]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d018      	beq.n	800c30c <mg_tcpip_init+0xa8>
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	6a1b      	ldr	r3, [r3, #32]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	6838      	ldr	r0, [r7, #0]
 800c2e2:	4798      	blx	r3
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	f083 0301 	eor.w	r3, r3, #1
 800c2ea:	b2db      	uxtb	r3, r3
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d00d      	beq.n	800c30c <mg_tcpip_init+0xa8>
    MG_ERROR(("driver init failed"));
 800c2f0:	4b3d      	ldr	r3, [pc, #244]	; (800c3e8 <mg_tcpip_init+0x184>)
 800c2f2:	f242 02e2 	movw	r2, #8418	; 0x20e2
 800c2f6:	493d      	ldr	r1, [pc, #244]	; (800c3ec <mg_tcpip_init+0x188>)
 800c2f8:	2001      	movs	r0, #1
 800c2fa:	f7fa fe27 	bl	8006f4c <mg_log_prefix>
 800c2fe:	4603      	mov	r3, r0
 800c300:	2b00      	cmp	r3, #0
 800c302:	d06d      	beq.n	800c3e0 <mg_tcpip_init+0x17c>
 800c304:	483c      	ldr	r0, [pc, #240]	; (800c3f8 <mg_tcpip_init+0x194>)
 800c306:	f7fa fe7b 	bl	8007000 <mg_log>
 800c30a:	e069      	b.n	800c3e0 <mg_tcpip_init+0x17c>
  } else {
    size_t framesize = 1540;
 800c30c:	f240 6304 	movw	r3, #1540	; 0x604
 800c310:	60fb      	str	r3, [r7, #12]
    ifp->tx.ptr = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 800c312:	68f9      	ldr	r1, [r7, #12]
 800c314:	2001      	movs	r0, #1
 800c316:	f006 fdb1 	bl	8012e7c <calloc>
 800c31a:	4603      	mov	r3, r0
 800c31c:	461a      	mov	r2, r3
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	615a      	str	r2, [r3, #20]
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	68fa      	ldr	r2, [r7, #12]
 800c326:	619a      	str	r2, [r3, #24]
    if (ifp->recv_queue.size == 0)
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d10a      	bne.n	800c346 <mg_tcpip_init+0xe2>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	6a1b      	ldr	r3, [r3, #32]
 800c334:	689b      	ldr	r3, [r3, #8]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d001      	beq.n	800c33e <mg_tcpip_init+0xda>
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	e001      	b.n	800c342 <mg_tcpip_init+0xde>
 800c33e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c342:	683a      	ldr	r2, [r7, #0]
 800c344:	6313      	str	r3, [r2, #48]	; 0x30
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c34a:	4619      	mov	r1, r3
 800c34c:	2001      	movs	r0, #1
 800c34e:	f006 fd95 	bl	8012e7c <calloc>
 800c352:	4603      	mov	r3, r0
 800c354:	461a      	mov	r2, r3
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	62da      	str	r2, [r3, #44]	; 0x2c
    ifp->timer_1000ms = mg_millis();
 800c35a:	f7f4 fc21 	bl	8000ba0 <mg_millis>
 800c35e:	4602      	mov	r2, r0
 800c360:	460b      	mov	r3, r1
 800c362:	6839      	ldr	r1, [r7, #0]
 800c364:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    mgr->priv = ifp;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	683a      	ldr	r2, [r7, #0]
 800c36c:	63da      	str	r2, [r3, #60]	; 0x3c
    ifp->mgr = mgr;
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	687a      	ldr	r2, [r7, #4]
 800c372:	629a      	str	r2, [r3, #40]	; 0x28
    mgr->extraconnsize = sizeof(struct connstate);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2228      	movs	r2, #40	; 0x28
 800c378:	641a      	str	r2, [r3, #64]	; 0x40
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	689b      	ldr	r3, [r3, #8]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d102      	bne.n	800c388 <mg_tcpip_init+0x124>
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	2201      	movs	r2, #1
 800c386:	771a      	strb	r2, [r3, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set to broadcast
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	333c      	adds	r3, #60	; 0x3c
 800c38c:	2206      	movs	r2, #6
 800c38e:	21ff      	movs	r1, #255	; 0xff
 800c390:	4618      	mov	r0, r3
 800c392:	f007 f87c 	bl	801348e <memset>
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	3360      	adds	r3, #96	; 0x60
 800c39a:	2102      	movs	r1, #2
 800c39c:	4618      	mov	r0, r3
 800c39e:	f7f4 fc0d 	bl	8000bbc <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c3a8:	4b14      	ldr	r3, [pc, #80]	; (800c3fc <mg_tcpip_init+0x198>)
 800c3aa:	4313      	orrs	r3, r2
 800c3ac:	b29a      	uxth	r2, r3
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                           // MG_EPHEMERAL_PORT_BASE to 65535
    if (ifp->tx.ptr == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	695b      	ldr	r3, [r3, #20]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d003      	beq.n	800c3c4 <mg_tcpip_init+0x160>
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d10d      	bne.n	800c3e0 <mg_tcpip_init+0x17c>
 800c3c4:	4b08      	ldr	r3, [pc, #32]	; (800c3e8 <mg_tcpip_init+0x184>)
 800c3c6:	f242 02f2 	movw	r2, #8434	; 0x20f2
 800c3ca:	4908      	ldr	r1, [pc, #32]	; (800c3ec <mg_tcpip_init+0x188>)
 800c3cc:	2001      	movs	r0, #1
 800c3ce:	f7fa fdbd 	bl	8006f4c <mg_log_prefix>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d003      	beq.n	800c3e0 <mg_tcpip_init+0x17c>
 800c3d8:	4809      	ldr	r0, [pc, #36]	; (800c400 <mg_tcpip_init+0x19c>)
 800c3da:	f7fa fe11 	bl	8007000 <mg_log>
  }
}
 800c3de:	e7ff      	b.n	800c3e0 <mg_tcpip_init+0x17c>
 800c3e0:	bf00      	nop
 800c3e2:	3710      	adds	r7, #16
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}
 800c3e8:	080163d8 	.word	0x080163d8
 800c3ec:	08014270 	.word	0x08014270
 800c3f0:	08007dcd 	.word	0x08007dcd
 800c3f4:	08015a24 	.word	0x08015a24
 800c3f8:	08015a48 	.word	0x08015a48
 800c3fc:	ffff8000 	.word	0xffff8000
 800c400:	08014f9c 	.word	0x08014f9c

0800c404 <send_syn>:
  (void) m, (void) fn, (void) d, (void) udp;
  MG_ERROR(("Not implemented"));
  return -1;
}

static void send_syn(struct mg_connection *c) {
 800c404:	b590      	push	{r4, r7, lr}
 800c406:	b08d      	sub	sp, #52	; 0x34
 800c408:	af06      	add	r7, sp, #24
 800c40a:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	3390      	adds	r3, #144	; 0x90
 800c410:	617b      	str	r3, [r7, #20]
  uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	8b1b      	ldrh	r3, [r3, #24]
 800c416:	4618      	mov	r0, r3
 800c418:	f7fc ffef 	bl	80093fa <mg_ntohs>
 800c41c:	4603      	mov	r3, r0
 800c41e:	4618      	mov	r0, r3
 800c420:	f7fc ffd2 	bl	80093c8 <mg_ntohl>
 800c424:	6138      	str	r0, [r7, #16]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	685b      	ldr	r3, [r3, #4]
 800c42a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c42c:	60fb      	str	r3, [r7, #12]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	331c      	adds	r3, #28
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	60bb      	str	r3, [r7, #8]
  tx_tcp(ifp, s->mac, rem_ip, TH_SYN, c->loc.port, c->rem.port, isn, 0, NULL,
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	f103 0010 	add.w	r0, r3, #16
 800c43c:	68bc      	ldr	r4, [r7, #8]
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	8b1b      	ldrh	r3, [r3, #24]
 800c442:	687a      	ldr	r2, [r7, #4]
 800c444:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800c446:	2100      	movs	r1, #0
 800c448:	9105      	str	r1, [sp, #20]
 800c44a:	2100      	movs	r1, #0
 800c44c:	9104      	str	r1, [sp, #16]
 800c44e:	2100      	movs	r1, #0
 800c450:	9103      	str	r1, [sp, #12]
 800c452:	6939      	ldr	r1, [r7, #16]
 800c454:	9102      	str	r1, [sp, #8]
 800c456:	9201      	str	r2, [sp, #4]
 800c458:	9300      	str	r3, [sp, #0]
 800c45a:	2302      	movs	r3, #2
 800c45c:	4622      	mov	r2, r4
 800c45e:	4601      	mov	r1, r0
 800c460:	68f8      	ldr	r0, [r7, #12]
 800c462:	f7fe fd9b 	bl	800af9c <tx_tcp>
         0);
}
 800c466:	bf00      	nop
 800c468:	371c      	adds	r7, #28
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd90      	pop	{r4, r7, pc}
	...

0800c470 <mg_connect_resolved>:

void mg_connect_resolved(struct mg_connection *c) {
 800c470:	b580      	push	{r7, lr}
 800c472:	b08a      	sub	sp, #40	; 0x28
 800c474:	af02      	add	r7, sp, #8
 800c476:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	685b      	ldr	r3, [r3, #4]
 800c47c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c47e:	61fb      	str	r3, [r7, #28]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	331c      	adds	r3, #28
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	60fb      	str	r3, [r7, #12]
  c->is_resolving = 0;
 800c488:	687a      	ldr	r2, [r7, #4]
 800c48a:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 800c48e:	f36f 03c3 	bfc	r3, #3, #1
 800c492:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
  if (ifp->eport < MG_EPHEMERAL_PORT_BASE) ifp->eport = MG_EPHEMERAL_PORT_BASE;
 800c496:	69fb      	ldr	r3, [r7, #28]
 800c498:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c49c:	b21b      	sxth	r3, r3
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	db04      	blt.n	800c4ac <mg_connect_resolved+0x3c>
 800c4a2:	69fb      	ldr	r3, [r7, #28]
 800c4a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c4a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  memcpy(c->loc.ip, &ifp->ip, sizeof(uint32_t));
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	3308      	adds	r3, #8
 800c4b0:	69fa      	ldr	r2, [r7, #28]
 800c4b2:	3208      	adds	r2, #8
 800c4b4:	6812      	ldr	r2, [r2, #0]
 800c4b6:	601a      	str	r2, [r3, #0]
  c->loc.port = mg_htons(ifp->eport++);
 800c4b8:	69fb      	ldr	r3, [r7, #28]
 800c4ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c4be:	1c5a      	adds	r2, r3, #1
 800c4c0:	b291      	uxth	r1, r2
 800c4c2:	69fa      	ldr	r2, [r7, #28]
 800c4c4:	f8a2 1060 	strh.w	r1, [r2, #96]	; 0x60
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f7fc ff96 	bl	80093fa <mg_ntohs>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	831a      	strh	r2, [r3, #24]
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 800c4d6:	4b57      	ldr	r3, [pc, #348]	; (800c634 <mg_connect_resolved+0x1c4>)
 800c4d8:	f242 1213 	movw	r2, #8467	; 0x2113
 800c4dc:	4956      	ldr	r1, [pc, #344]	; (800c638 <mg_connect_resolved+0x1c8>)
 800c4de:	2003      	movs	r0, #3
 800c4e0:	f7fa fd34 	bl	8006f4c <mg_log_prefix>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d00e      	beq.n	800c508 <mg_connect_resolved+0x98>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f103 0208 	add.w	r2, r3, #8
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	331c      	adds	r3, #28
 800c4f8:	9301      	str	r3, [sp, #4]
 800c4fa:	4b50      	ldr	r3, [pc, #320]	; (800c63c <mg_connect_resolved+0x1cc>)
 800c4fc:	9300      	str	r3, [sp, #0]
 800c4fe:	4613      	mov	r3, r2
 800c500:	4a4e      	ldr	r2, [pc, #312]	; (800c63c <mg_connect_resolved+0x1cc>)
 800c502:	484f      	ldr	r0, [pc, #316]	; (800c640 <mg_connect_resolved+0x1d0>)
 800c504:	f7fa fd7c 	bl	8007000 <mg_log>
            &c->rem));
  mg_call(c, MG_EV_RESOLVE, NULL);
 800c508:	2200      	movs	r2, #0
 800c50a:	2103      	movs	r1, #3
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f7f5 fd3d 	bl	8001f8c <mg_call>
  if (((rem_ip & ifp->mask) == (ifp->ip & ifp->mask))) {
 800c512:	69fb      	ldr	r3, [r7, #28]
 800c514:	689a      	ldr	r2, [r3, #8]
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	405a      	eors	r2, r3
 800c51a:	69fb      	ldr	r3, [r7, #28]
 800c51c:	68db      	ldr	r3, [r3, #12]
 800c51e:	4013      	ands	r3, r2
 800c520:	2b00      	cmp	r3, #0
 800c522:	d11c      	bne.n	800c55e <mg_connect_resolved+0xee>
    // If we're in the same LAN, fire an ARP lookup. TODO(cpq): handle this!
    MG_DEBUG(("%lu ARP lookup...", c->id));
 800c524:	4b43      	ldr	r3, [pc, #268]	; (800c634 <mg_connect_resolved+0x1c4>)
 800c526:	f242 1218 	movw	r2, #8472	; 0x2118
 800c52a:	4943      	ldr	r1, [pc, #268]	; (800c638 <mg_connect_resolved+0x1c8>)
 800c52c:	2003      	movs	r0, #3
 800c52e:	f7fa fd0d 	bl	8006f4c <mg_log_prefix>
 800c532:	4603      	mov	r3, r0
 800c534:	2b00      	cmp	r3, #0
 800c536:	d005      	beq.n	800c544 <mg_connect_resolved+0xd4>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c53c:	4619      	mov	r1, r3
 800c53e:	4841      	ldr	r0, [pc, #260]	; (800c644 <mg_connect_resolved+0x1d4>)
 800c540:	f7fa fd5e 	bl	8007000 <mg_log>
    arp_ask(ifp, rem_ip);
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	4619      	mov	r1, r3
 800c548:	69f8      	ldr	r0, [r7, #28]
 800c54a:	f7fd fcd0 	bl	8009eee <arp_ask>
    c->is_arplooking = 1;
 800c54e:	687a      	ldr	r2, [r7, #4]
 800c550:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 800c554:	f043 0310 	orr.w	r3, r3, #16
 800c558:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
    } else {
      send_syn(c);
      c->is_connecting = 1;
    }
  }
}
 800c55c:	e065      	b.n	800c62a <mg_connect_resolved+0x1ba>
  } else if (rem_ip == (ifp->ip | ~ifp->mask)) {
 800c55e:	69fb      	ldr	r3, [r7, #28]
 800c560:	689a      	ldr	r2, [r3, #8]
 800c562:	69fb      	ldr	r3, [r7, #28]
 800c564:	68db      	ldr	r3, [r3, #12]
 800c566:	43db      	mvns	r3, r3
 800c568:	431a      	orrs	r2, r3
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d10a      	bne.n	800c586 <mg_connect_resolved+0x116>
    struct connstate *s = (struct connstate *) (c + 1);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	3390      	adds	r3, #144	; 0x90
 800c574:	613b      	str	r3, [r7, #16]
    memset(s->mac, 0xFF, sizeof(s->mac));  // local broadcast
 800c576:	693b      	ldr	r3, [r7, #16]
 800c578:	3310      	adds	r3, #16
 800c57a:	2206      	movs	r2, #6
 800c57c:	21ff      	movs	r1, #255	; 0xff
 800c57e:	4618      	mov	r0, r3
 800c580:	f006 ff85 	bl	801348e <memset>
}
 800c584:	e051      	b.n	800c62a <mg_connect_resolved+0x1ba>
  } else if ((*((uint8_t *) &rem_ip) & 0xE0) == 0xE0) {
 800c586:	f107 030c 	add.w	r3, r7, #12
 800c58a:	781b      	ldrb	r3, [r3, #0]
 800c58c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800c590:	2be0      	cmp	r3, #224	; 0xe0
 800c592:	d126      	bne.n	800c5e2 <mg_connect_resolved+0x172>
    struct connstate *s = (struct connstate *) (c + 1);  // 224 to 239, E0 to EF
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	3390      	adds	r3, #144	; 0x90
 800c598:	617b      	str	r3, [r7, #20]
    uint8_t mcastp[3] = {0x01, 0x00, 0x5E};              // multicast group
 800c59a:	4a2b      	ldr	r2, [pc, #172]	; (800c648 <mg_connect_resolved+0x1d8>)
 800c59c:	f107 0308 	add.w	r3, r7, #8
 800c5a0:	6812      	ldr	r2, [r2, #0]
 800c5a2:	4611      	mov	r1, r2
 800c5a4:	8019      	strh	r1, [r3, #0]
 800c5a6:	3302      	adds	r3, #2
 800c5a8:	0c12      	lsrs	r2, r2, #16
 800c5aa:	701a      	strb	r2, [r3, #0]
    memcpy(s->mac, mcastp, 3);
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	3310      	adds	r3, #16
 800c5b0:	461a      	mov	r2, r3
 800c5b2:	f107 0308 	add.w	r3, r7, #8
 800c5b6:	8819      	ldrh	r1, [r3, #0]
 800c5b8:	789b      	ldrb	r3, [r3, #2]
 800c5ba:	8011      	strh	r1, [r2, #0]
 800c5bc:	7093      	strb	r3, [r2, #2]
    memcpy(s->mac + 3, ((uint8_t *) &rem_ip) + 1, 3);  // 23 LSb
 800c5be:	697b      	ldr	r3, [r7, #20]
 800c5c0:	3310      	adds	r3, #16
 800c5c2:	1cd8      	adds	r0, r3, #3
 800c5c4:	f107 030c 	add.w	r3, r7, #12
 800c5c8:	3301      	adds	r3, #1
 800c5ca:	2203      	movs	r2, #3
 800c5cc:	4619      	mov	r1, r3
 800c5ce:	f007 f845 	bl	801365c <memcpy>
    s->mac[3] &= 0x7F;
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	7cdb      	ldrb	r3, [r3, #19]
 800c5d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5da:	b2da      	uxtb	r2, r3
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	74da      	strb	r2, [r3, #19]
}
 800c5e0:	e023      	b.n	800c62a <mg_connect_resolved+0x1ba>
    struct connstate *s = (struct connstate *) (c + 1);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	3390      	adds	r3, #144	; 0x90
 800c5e6:	61bb      	str	r3, [r7, #24]
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
 800c5e8:	69bb      	ldr	r3, [r7, #24]
 800c5ea:	f103 0010 	add.w	r0, r3, #16
 800c5ee:	69fb      	ldr	r3, [r7, #28]
 800c5f0:	333c      	adds	r3, #60	; 0x3c
 800c5f2:	2206      	movs	r2, #6
 800c5f4:	4619      	mov	r1, r3
 800c5f6:	f007 f831 	bl	801365c <memcpy>
    if (c->is_udp) {
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800c600:	f003 0301 	and.w	r3, r3, #1
 800c604:	b2db      	uxtb	r3, r3
 800c606:	2b00      	cmp	r3, #0
 800c608:	d005      	beq.n	800c616 <mg_connect_resolved+0x1a6>
      mg_call(c, MG_EV_CONNECT, NULL);
 800c60a:	2200      	movs	r2, #0
 800c60c:	2104      	movs	r1, #4
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f7f5 fcbc 	bl	8001f8c <mg_call>
}
 800c614:	e009      	b.n	800c62a <mg_connect_resolved+0x1ba>
      send_syn(c);
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f7ff fef4 	bl	800c404 <send_syn>
      c->is_connecting = 1;
 800c61c:	687a      	ldr	r2, [r7, #4]
 800c61e:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 800c622:	f043 0320 	orr.w	r3, r3, #32
 800c626:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
}
 800c62a:	bf00      	nop
 800c62c:	3720      	adds	r7, #32
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}
 800c632:	bf00      	nop
 800c634:	080163e8 	.word	0x080163e8
 800c638:	08014270 	.word	0x08014270
 800c63c:	08007d81 	.word	0x08007d81
 800c640:	08015a6c 	.word	0x08015a6c
 800c644:	08015a7c 	.word	0x08015a7c
 800c648:	08015a90 	.word	0x08015a90

0800c64c <mg_open_listener>:

bool mg_open_listener(struct mg_connection *c, const char *url) {
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b082      	sub	sp, #8
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	6039      	str	r1, [r7, #0]
  c->loc.port = mg_htons(mg_url_port(url));
 800c656:	6838      	ldr	r0, [r7, #0]
 800c658:	f7fc fe52 	bl	8009300 <mg_url_port>
 800c65c:	4603      	mov	r3, r0
 800c65e:	4618      	mov	r0, r3
 800c660:	f7fc fecb 	bl	80093fa <mg_ntohs>
 800c664:	4603      	mov	r3, r0
 800c666:	461a      	mov	r2, r3
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	831a      	strh	r2, [r3, #24]
  return true;
 800c66c:	2301      	movs	r3, #1
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3708      	adds	r7, #8
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}

0800c676 <write_conn>:

static void write_conn(struct mg_connection *c) {
 800c676:	b580      	push	{r7, lr}
 800c678:	b084      	sub	sp, #16
 800c67a:	af00      	add	r7, sp, #0
 800c67c:	6078      	str	r0, [r7, #4]
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800c684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c688:	b2db      	uxtb	r3, r3
                       : mg_io_send(c, c->send.buf, c->send.len);
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d009      	beq.n	800c6a2 <write_conn+0x2c>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c696:	461a      	mov	r2, r3
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f7fc fd64 	bl	8009166 <mg_tls_send>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	e008      	b.n	800c6b4 <write_conn+0x3e>
                       : mg_io_send(c, c->send.buf, c->send.len);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f7fe fe7d 	bl	800b3ac <mg_io_send>
 800c6b2:	4603      	mov	r3, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800c6b4:	60fb      	str	r3, [r7, #12]
  if (len > 0) {
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	dd0d      	ble.n	800c6d8 <write_conn+0x62>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	3348      	adds	r3, #72	; 0x48
 800c6c0:	68fa      	ldr	r2, [r7, #12]
 800c6c2:	2100      	movs	r1, #0
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f7f9 fd2d 	bl	8006124 <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 800c6ca:	f107 030c 	add.w	r3, r7, #12
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	2108      	movs	r1, #8
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f7f5 fc5a 	bl	8001f8c <mg_call>
  }
}
 800c6d8:	bf00      	nop
 800c6da:	3710      	adds	r7, #16
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}

0800c6e0 <close_conn>:

static void close_conn(struct mg_connection *c) {
 800c6e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6e2:	b08f      	sub	sp, #60	; 0x3c
 800c6e4:	af06      	add	r7, sp, #24
 800c6e6:	60f8      	str	r0, [r7, #12]
  struct connstate *s = (struct connstate *) (c + 1);
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	3390      	adds	r3, #144	; 0x90
 800c6ec:	61fb      	str	r3, [r7, #28]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	331c      	adds	r3, #28
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	617b      	str	r3, [r7, #20]
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 800c6f6:	69fb      	ldr	r3, [r7, #28]
 800c6f8:	3318      	adds	r3, #24
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f7f9 fd5d 	bl	80061ba <mg_iobuf_free>
  if (c->is_udp == false && c->is_listening == false) {  // For TCP conns,
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800c706:	f003 0301 	and.w	r3, r3, #1
 800c70a:	b2db      	uxtb	r3, r3
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d12f      	bne.n	800c770 <close_conn+0x90>
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800c716:	f003 0301 	and.w	r3, r3, #1
 800c71a:	b2db      	uxtb	r3, r3
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d127      	bne.n	800c770 <close_conn+0x90>
    struct mg_tcpip_if *ifp =
        (struct mg_tcpip_if *) c->mgr->priv;  // send TCP FIN
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	685b      	ldr	r3, [r3, #4]
    struct mg_tcpip_if *ifp =
 800c724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c726:	61bb      	str	r3, [r7, #24]
    tx_tcp(ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port, c->rem.port,
 800c728:	69fb      	ldr	r3, [r7, #28]
 800c72a:	f103 0610 	add.w	r6, r3, #16
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	60bb      	str	r3, [r7, #8]
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	8b1c      	ldrh	r4, [r3, #24]
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 800c73a:	69fb      	ldr	r3, [r7, #28]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	4618      	mov	r0, r3
 800c740:	f7fc fe42 	bl	80093c8 <mg_ntohl>
 800c744:	6078      	str	r0, [r7, #4]
 800c746:	69fb      	ldr	r3, [r7, #28]
 800c748:	685b      	ldr	r3, [r3, #4]
 800c74a:	4618      	mov	r0, r3
 800c74c:	f7fc fe3c 	bl	80093c8 <mg_ntohl>
 800c750:	4603      	mov	r3, r0
 800c752:	2200      	movs	r2, #0
 800c754:	9205      	str	r2, [sp, #20]
 800c756:	2200      	movs	r2, #0
 800c758:	9204      	str	r2, [sp, #16]
 800c75a:	9303      	str	r3, [sp, #12]
 800c75c:	6879      	ldr	r1, [r7, #4]
 800c75e:	9102      	str	r1, [sp, #8]
 800c760:	9501      	str	r5, [sp, #4]
 800c762:	9400      	str	r4, [sp, #0]
 800c764:	2311      	movs	r3, #17
 800c766:	68ba      	ldr	r2, [r7, #8]
 800c768:	4631      	mov	r1, r6
 800c76a:	69b8      	ldr	r0, [r7, #24]
 800c76c:	f7fe fc16 	bl	800af9c <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
  }
  mg_close_conn(c);
 800c770:	68f8      	ldr	r0, [r7, #12]
 800c772:	f7fa ffc9 	bl	8007708 <mg_close_conn>
}
 800c776:	bf00      	nop
 800c778:	3724      	adds	r7, #36	; 0x24
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c77e <can_write>:

static bool can_write(struct mg_connection *c) {
 800c77e:	b480      	push	{r7}
 800c780:	b083      	sub	sp, #12
 800c782:	af00      	add	r7, sp, #0
 800c784:	6078      	str	r0, [r7, #4]
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800c78c:	f003 0320 	and.w	r3, r3, #32
 800c790:	b2db      	uxtb	r3, r3
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800c792:	2b00      	cmp	r3, #0
 800c794:	d11d      	bne.n	800c7d2 <can_write+0x54>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800c79c:	f003 0308 	and.w	r3, r3, #8
 800c7a0:	b2db      	uxtb	r3, r3
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d115      	bne.n	800c7d2 <can_write+0x54>
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d011      	beq.n	800c7d2 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800c7b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c7b8:	b2db      	uxtb	r3, r3
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d109      	bne.n	800c7d2 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800c7c4:	f003 0310 	and.w	r3, r3, #16
 800c7c8:	b2db      	uxtb	r3, r3
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d101      	bne.n	800c7d2 <can_write+0x54>
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	e000      	b.n	800c7d4 <can_write+0x56>
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	f003 0301 	and.w	r3, r3, #1
 800c7d8:	b2db      	uxtb	r3, r3
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	370c      	adds	r7, #12
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e4:	4770      	bx	lr
	...

0800c7e8 <mg_mgr_poll>:

void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 800c7e8:	b5b0      	push	{r4, r5, r7, lr}
 800c7ea:	b08a      	sub	sp, #40	; 0x28
 800c7ec:	af04      	add	r7, sp, #16
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	6039      	str	r1, [r7, #0]
  struct mg_connection *c, *tmp;
  uint64_t now = mg_millis();
 800c7f2:	f7f4 f9d5 	bl	8000ba0 <mg_millis>
 800c7f6:	4602      	mov	r2, r0
 800c7f8:	460b      	mov	r3, r1
 800c7fa:	e9c7 2302 	strd	r2, r3, [r7, #8]
  mg_tcpip_poll((struct mg_tcpip_if *) mgr->priv, now);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800c802:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c806:	4608      	mov	r0, r1
 800c808:	f7ff fb24 	bl	800be54 <mg_tcpip_poll>
  mg_timer_poll(&mgr->timers, now);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c812:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c816:	4608      	mov	r0, r1
 800c818:	f7fc fc01 	bl	800901e <mg_timer_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	617b      	str	r3, [r7, #20]
 800c822:	e089      	b.n	800c938 <mg_mgr_poll+0x150>
    tmp = c->next;
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	613b      	str	r3, [r7, #16]
    mg_call(c, MG_EV_POLL, &now);
 800c82a:	f107 0308 	add.w	r3, r7, #8
 800c82e:	461a      	mov	r2, r3
 800c830:	2102      	movs	r1, #2
 800c832:	6978      	ldr	r0, [r7, #20]
 800c834:	f7f5 fbaa 	bl	8001f8c <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 800c838:	4b44      	ldr	r3, [pc, #272]	; (800c94c <mg_mgr_poll+0x164>)
 800c83a:	f242 1259 	movw	r2, #8537	; 0x2159
 800c83e:	4944      	ldr	r1, [pc, #272]	; (800c950 <mg_mgr_poll+0x168>)
 800c840:	2004      	movs	r0, #4
 800c842:	f7fa fb83 	bl	8006f4c <mg_log_prefix>
 800c846:	4603      	mov	r3, r0
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d041      	beq.n	800c8d0 <mg_mgr_poll+0xe8>
 800c84c:	697b      	ldr	r3, [r7, #20]
 800c84e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800c856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c85a:	b2db      	uxtb	r3, r3
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d001      	beq.n	800c864 <mg_mgr_poll+0x7c>
 800c860:	2454      	movs	r4, #84	; 0x54
 800c862:	e000      	b.n	800c866 <mg_mgr_poll+0x7e>
 800c864:	2474      	movs	r4, #116	; 0x74
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800c86c:	f003 0320 	and.w	r3, r3, #32
 800c870:	b2db      	uxtb	r3, r3
 800c872:	2b00      	cmp	r3, #0
 800c874:	d001      	beq.n	800c87a <mg_mgr_poll+0x92>
 800c876:	2543      	movs	r5, #67	; 0x43
 800c878:	e000      	b.n	800c87c <mg_mgr_poll+0x94>
 800c87a:	2563      	movs	r5, #99	; 0x63
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800c882:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c886:	b2db      	uxtb	r3, r3
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d001      	beq.n	800c890 <mg_mgr_poll+0xa8>
 800c88c:	2348      	movs	r3, #72	; 0x48
 800c88e:	e000      	b.n	800c892 <mg_mgr_poll+0xaa>
 800c890:	2368      	movs	r3, #104	; 0x68
 800c892:	697a      	ldr	r2, [r7, #20]
 800c894:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 800c898:	f002 0208 	and.w	r2, r2, #8
 800c89c:	b2d2      	uxtb	r2, r2
 800c89e:	2a00      	cmp	r2, #0
 800c8a0:	d001      	beq.n	800c8a6 <mg_mgr_poll+0xbe>
 800c8a2:	2252      	movs	r2, #82	; 0x52
 800c8a4:	e000      	b.n	800c8a8 <mg_mgr_poll+0xc0>
 800c8a6:	2272      	movs	r2, #114	; 0x72
 800c8a8:	6979      	ldr	r1, [r7, #20]
 800c8aa:	f891 108d 	ldrb.w	r1, [r1, #141]	; 0x8d
 800c8ae:	f001 0120 	and.w	r1, r1, #32
 800c8b2:	b2c9      	uxtb	r1, r1
 800c8b4:	2900      	cmp	r1, #0
 800c8b6:	d001      	beq.n	800c8bc <mg_mgr_poll+0xd4>
 800c8b8:	2143      	movs	r1, #67	; 0x43
 800c8ba:	e000      	b.n	800c8be <mg_mgr_poll+0xd6>
 800c8bc:	2163      	movs	r1, #99	; 0x63
 800c8be:	9102      	str	r1, [sp, #8]
 800c8c0:	9201      	str	r2, [sp, #4]
 800c8c2:	9300      	str	r3, [sp, #0]
 800c8c4:	462b      	mov	r3, r5
 800c8c6:	4622      	mov	r2, r4
 800c8c8:	4601      	mov	r1, r0
 800c8ca:	4822      	ldr	r0, [pc, #136]	; (800c954 <mg_mgr_poll+0x16c>)
 800c8cc:	f7fa fb98 	bl	8007000 <mg_log>
                c->is_connecting ? 'C' : 'c', c->is_tls_hs ? 'H' : 'h',
                c->is_resolving ? 'R' : 'r', c->is_closing ? 'C' : 'c'));
    if (c->is_tls_hs) mg_tls_handshake(c);
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800c8d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c8da:	b2db      	uxtb	r3, r3
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d002      	beq.n	800c8e6 <mg_mgr_poll+0xfe>
 800c8e0:	6978      	ldr	r0, [r7, #20]
 800c8e2:	f7fc fc13 	bl	800910c <mg_tls_handshake>
    if (can_write(c)) write_conn(c);
 800c8e6:	6978      	ldr	r0, [r7, #20]
 800c8e8:	f7ff ff49 	bl	800c77e <can_write>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d002      	beq.n	800c8f8 <mg_mgr_poll+0x110>
 800c8f2:	6978      	ldr	r0, [r7, #20]
 800c8f4:	f7ff febf 	bl	800c676 <write_conn>
    if (c->is_draining && c->send.len == 0) c->is_closing = 1;
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800c8fe:	f003 0310 	and.w	r3, r3, #16
 800c902:	b2db      	uxtb	r3, r3
 800c904:	2b00      	cmp	r3, #0
 800c906:	d00a      	beq.n	800c91e <mg_mgr_poll+0x136>
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d106      	bne.n	800c91e <mg_mgr_poll+0x136>
 800c910:	697a      	ldr	r2, [r7, #20]
 800c912:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800c916:	f043 0320 	orr.w	r3, r3, #32
 800c91a:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
    if (c->is_closing) close_conn(c);
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800c924:	f003 0320 	and.w	r3, r3, #32
 800c928:	b2db      	uxtb	r3, r3
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d002      	beq.n	800c934 <mg_mgr_poll+0x14c>
 800c92e:	6978      	ldr	r0, [r7, #20]
 800c930:	f7ff fed6 	bl	800c6e0 <close_conn>
  for (c = mgr->conns; c != NULL; c = tmp) {
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	617b      	str	r3, [r7, #20]
 800c938:	697b      	ldr	r3, [r7, #20]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	f47f af72 	bne.w	800c824 <mg_mgr_poll+0x3c>
  }
  (void) ms;
}
 800c940:	bf00      	nop
 800c942:	bf00      	nop
 800c944:	3718      	adds	r7, #24
 800c946:	46bd      	mov	sp, r7
 800c948:	bdb0      	pop	{r4, r5, r7, pc}
 800c94a:	bf00      	nop
 800c94c:	080163fc 	.word	0x080163fc
 800c950:	08014270 	.word	0x08014270
 800c954:	08015a94 	.word	0x08015a94

0800c958 <mg_send>:

bool mg_send(struct mg_connection *c, const void *buf, size_t len) {
 800c958:	b5b0      	push	{r4, r5, r7, lr}
 800c95a:	b08c      	sub	sp, #48	; 0x30
 800c95c:	af04      	add	r7, sp, #16
 800c95e:	60f8      	str	r0, [r7, #12]
 800c960:	60b9      	str	r1, [r7, #8]
 800c962:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	685b      	ldr	r3, [r3, #4]
 800c968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c96a:	61bb      	str	r3, [r7, #24]
  bool res = false;
 800c96c:	2300      	movs	r3, #0
 800c96e:	77fb      	strb	r3, [r7, #31]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	331c      	adds	r3, #28
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	613b      	str	r3, [r7, #16]
  if (ifp->ip == 0 || ifp->state != MG_TCPIP_STATE_READY) {
 800c978:	69bb      	ldr	r3, [r7, #24]
 800c97a:	689b      	ldr	r3, [r3, #8]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d004      	beq.n	800c98a <mg_send+0x32>
 800c980:	69bb      	ldr	r3, [r7, #24]
 800c982:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800c986:	2b03      	cmp	r3, #3
 800c988:	d004      	beq.n	800c994 <mg_send+0x3c>
    mg_error(c, "net down");
 800c98a:	491e      	ldr	r1, [pc, #120]	; (800ca04 <mg_send+0xac>)
 800c98c:	68f8      	ldr	r0, [r7, #12]
 800c98e:	f7f5 fb1f 	bl	8001fd0 <mg_error>
 800c992:	e032      	b.n	800c9fa <mg_send+0xa2>
  } else if (c->is_udp) {
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800c99a:	f003 0301 	and.w	r3, r3, #1
 800c99e:	b2db      	uxtb	r3, r3
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d01b      	beq.n	800c9dc <mg_send+0x84>
    struct connstate *s = (struct connstate *) (c + 1);
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	3390      	adds	r3, #144	; 0x90
 800c9a8:	617b      	str	r3, [r7, #20]
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	f103 0010 	add.w	r0, r3, #16
 800c9b0:	69bb      	ldr	r3, [r7, #24]
 800c9b2:	689c      	ldr	r4, [r3, #8]
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	8b1d      	ldrh	r5, [r3, #24]
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	68fa      	ldr	r2, [r7, #12]
 800c9bc:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800c9be:	6879      	ldr	r1, [r7, #4]
 800c9c0:	9103      	str	r1, [sp, #12]
 800c9c2:	68b9      	ldr	r1, [r7, #8]
 800c9c4:	9102      	str	r1, [sp, #8]
 800c9c6:	9201      	str	r2, [sp, #4]
 800c9c8:	9300      	str	r3, [sp, #0]
 800c9ca:	462b      	mov	r3, r5
 800c9cc:	4622      	mov	r2, r4
 800c9ce:	4601      	mov	r1, r0
 800c9d0:	69b8      	ldr	r0, [r7, #24]
 800c9d2:	f7fd fbc5 	bl	800a160 <tx_udp>
    res = true;
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	77fb      	strb	r3, [r7, #31]
 800c9da:	e00e      	b.n	800c9fa <mg_send+0xa2>
  } else {
    res = mg_iobuf_add(&c->send, c->send.len, buf, len);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	68ba      	ldr	r2, [r7, #8]
 800c9ea:	f7f9 fb49 	bl	8006080 <mg_iobuf_add>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	bf14      	ite	ne
 800c9f4:	2301      	movne	r3, #1
 800c9f6:	2300      	moveq	r3, #0
 800c9f8:	77fb      	strb	r3, [r7, #31]
  }
  return res;
 800c9fa:	7ffb      	ldrb	r3, [r7, #31]
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3720      	adds	r7, #32
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bdb0      	pop	{r4, r5, r7, pc}
 800ca04:	08015aa8 	.word	0x08015aa8

0800ca08 <mg_now>:
    "AwEHoUQDQgAEc0kEuTh3de5VHjSPupKfVmLtHMbhCIvyU46YWwpnSQ9XFL4ZszPf\n"
    "6YbyU/ZGtdGfbaGYYJwatKNMX00OIwtb8A==\n"
    "-----END EC PRIVATE KEY-----\n";

// This is for newlib and TLS (mbedTLS)
uint64_t mg_now(void) {
 800ca08:	b5b0      	push	{r4, r5, r7, lr}
 800ca0a:	af00      	add	r7, sp, #0
  return mg_millis() + s_boot_timestamp;
 800ca0c:	f7f4 f8c8 	bl	8000ba0 <mg_millis>
 800ca10:	4b05      	ldr	r3, [pc, #20]	; (800ca28 <mg_now+0x20>)
 800ca12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca16:	1884      	adds	r4, r0, r2
 800ca18:	eb41 0503 	adc.w	r5, r1, r3
 800ca1c:	4622      	mov	r2, r4
 800ca1e:	462b      	mov	r3, r5
}
 800ca20:	4610      	mov	r0, r2
 800ca22:	4619      	mov	r1, r3
 800ca24:	bdb0      	pop	{r4, r5, r7, pc}
 800ca26:	bf00      	nop
 800ca28:	24003630 	.word	0x24003630

0800ca2c <ui_event_next>:

int ui_event_next(int no, struct ui_event *e) {
 800ca2c:	b590      	push	{r4, r7, lr}
 800ca2e:	b083      	sub	sp, #12
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
 800ca34:	6039      	str	r1, [r7, #0]
  if (no < 0 || no >= MAX_EVENTS_NO)
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	db03      	blt.n	800ca44 <ui_event_next+0x18>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800ca42:	db01      	blt.n	800ca48 <ui_event_next+0x1c>
    return 0;
 800ca44:	2300      	movs	r3, #0
 800ca46:	e04b      	b.n	800cae0 <ui_event_next+0xb4>

  srand(no);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f006 faf0 	bl	8013030 <srand>
  e->type = (uint8_t) rand() % 4;
 800ca50:	f006 fb1c 	bl	801308c <rand>
 800ca54:	4603      	mov	r3, r0
 800ca56:	b2db      	uxtb	r3, r3
 800ca58:	f003 0303 	and.w	r3, r3, #3
 800ca5c:	b2da      	uxtb	r2, r3
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	701a      	strb	r2, [r3, #0]
  e->prio = (uint8_t) rand() % 3;
 800ca62:	f006 fb13 	bl	801308c <rand>
 800ca66:	4603      	mov	r3, r0
 800ca68:	b2da      	uxtb	r2, r3
 800ca6a:	4b1f      	ldr	r3, [pc, #124]	; (800cae8 <ui_event_next+0xbc>)
 800ca6c:	fba3 1302 	umull	r1, r3, r3, r2
 800ca70:	0859      	lsrs	r1, r3, #1
 800ca72:	460b      	mov	r3, r1
 800ca74:	005b      	lsls	r3, r3, #1
 800ca76:	440b      	add	r3, r1
 800ca78:	1ad3      	subs	r3, r2, r3
 800ca7a:	b2da      	uxtb	r2, r3
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	705a      	strb	r2, [r3, #1]
  e->timestamp = (unsigned long) (mg_now() - 86400 * 1000 /* one day back */ +
 800ca80:	f7ff ffc2 	bl	800ca08 <mg_now>
 800ca84:	4602      	mov	r2, r0
 800ca86:	460b      	mov	r3, r1
                              no * 300 * 1000 /* 5 mins between alerts */ +
 800ca88:	4614      	mov	r4, r2
                              1000 * (rand() % 300) /* randomize event time */) /
 800ca8a:	f006 faff 	bl	801308c <rand>
 800ca8e:	4602      	mov	r2, r0
 800ca90:	4b16      	ldr	r3, [pc, #88]	; (800caec <ui_event_next+0xc0>)
 800ca92:	fb83 1302 	smull	r1, r3, r3, r2
 800ca96:	1159      	asrs	r1, r3, #5
 800ca98:	17d3      	asrs	r3, r2, #31
 800ca9a:	1acb      	subs	r3, r1, r3
 800ca9c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800caa0:	fb01 f303 	mul.w	r3, r1, r3
 800caa4:	1ad3      	subs	r3, r2, r3
 800caa6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800caaa:	fb02 f303 	mul.w	r3, r2, r3
                              no * 300 * 1000 /* 5 mins between alerts */ +
 800caae:	4619      	mov	r1, r3
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	4a0f      	ldr	r2, [pc, #60]	; (800caf0 <ui_event_next+0xc4>)
 800cab4:	fb02 f303 	mul.w	r3, r2, r3
 800cab8:	440b      	add	r3, r1
 800caba:	18e2      	adds	r2, r4, r3
  e->timestamp = (unsigned long) (mg_now() - 86400 * 1000 /* one day back */ +
 800cabc:	4b0d      	ldr	r3, [pc, #52]	; (800caf4 <ui_event_next+0xc8>)
 800cabe:	4413      	add	r3, r2
                              1000 * (rand() % 300) /* randomize event time */) /
 800cac0:	4a0d      	ldr	r2, [pc, #52]	; (800caf8 <ui_event_next+0xcc>)
 800cac2:	fba2 2303 	umull	r2, r3, r2, r3
 800cac6:	099a      	lsrs	r2, r3, #6
  e->timestamp = (unsigned long) (mg_now() - 86400 * 1000 /* one day back */ +
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	605a      	str	r2, [r3, #4]
             1000;

  mg_snprintf(e->text, MAX_EVENT_TEXT_SIZE,
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	f103 0008 	add.w	r0, r3, #8
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	4a09      	ldr	r2, [pc, #36]	; (800cafc <ui_event_next+0xd0>)
 800cad6:	210a      	movs	r1, #10
 800cad8:	f7fb f86c 	bl	8007bb4 <mg_snprintf>
              "event#%d", no);
  return no + 1;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	3301      	adds	r3, #1
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	370c      	adds	r7, #12
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd90      	pop	{r4, r7, pc}
 800cae8:	aaaaaaab 	.word	0xaaaaaaab
 800caec:	1b4e81b5 	.word	0x1b4e81b5
 800caf0:	000493e0 	.word	0x000493e0
 800caf4:	fad9a400 	.word	0xfad9a400
 800caf8:	10624dd3 	.word	0x10624dd3
 800cafc:	08015d7c 	.word	0x08015d7c

0800cb00 <sfn>:

// SNTP connection event handler. When we get a response from an SNTP server,
// adjust s_boot_timestamp. We'll get a valid time from that point on
static void sfn(struct mg_connection *c, int ev, void *ev_data, void *fn_data) {
 800cb00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800cb04:	b088      	sub	sp, #32
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	60f8      	str	r0, [r7, #12]
 800cb0a:	60b9      	str	r1, [r7, #8]
 800cb0c:	607a      	str	r2, [r7, #4]
 800cb0e:	603b      	str	r3, [r7, #0]
  uint64_t *expiration_time = (uint64_t *) c->data;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	3368      	adds	r3, #104	; 0x68
 800cb14:	61fb      	str	r3, [r7, #28]
  if (ev == MG_EV_OPEN) {
 800cb16:	68bb      	ldr	r3, [r7, #8]
 800cb18:	2b01      	cmp	r3, #1
 800cb1a:	d10d      	bne.n	800cb38 <sfn+0x38>
    *expiration_time = mg_millis() + 3000;  // Store expiration time in 3s
 800cb1c:	f7f4 f840 	bl	8000ba0 <mg_millis>
 800cb20:	4602      	mov	r2, r0
 800cb22:	460b      	mov	r3, r1
 800cb24:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800cb28:	eb12 0801 	adds.w	r8, r2, r1
 800cb2c:	f143 0900 	adc.w	r9, r3, #0
 800cb30:	69fb      	ldr	r3, [r7, #28]
 800cb32:	e9c3 8900 	strd	r8, r9, [r3]
    c->is_closing = 1;
  } else if (ev == MG_EV_POLL) {
    if (mg_millis() > *expiration_time) c->is_closing = 1;
  }
  (void) fn_data;
}
 800cb36:	e02b      	b.n	800cb90 <sfn+0x90>
  } else if (ev == MG_EV_SNTP_TIME) {
 800cb38:	68bb      	ldr	r3, [r7, #8]
 800cb3a:	2b12      	cmp	r3, #18
 800cb3c:	d116      	bne.n	800cb6c <sfn+0x6c>
    uint64_t t = *(uint64_t *) ev_data;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb44:	e9c7 2304 	strd	r2, r3, [r7, #16]
    s_boot_timestamp = t - mg_millis();
 800cb48:	f7f4 f82a 	bl	8000ba0 <mg_millis>
 800cb4c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cb50:	1a14      	subs	r4, r2, r0
 800cb52:	eb63 0501 	sbc.w	r5, r3, r1
 800cb56:	4b11      	ldr	r3, [pc, #68]	; (800cb9c <sfn+0x9c>)
 800cb58:	e9c3 4500 	strd	r4, r5, [r3]
    c->is_closing = 1;
 800cb5c:	68fa      	ldr	r2, [r7, #12]
 800cb5e:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800cb62:	f043 0320 	orr.w	r3, r3, #32
 800cb66:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
}
 800cb6a:	e011      	b.n	800cb90 <sfn+0x90>
  } else if (ev == MG_EV_POLL) {
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	2b02      	cmp	r3, #2
 800cb70:	d10e      	bne.n	800cb90 <sfn+0x90>
    if (mg_millis() > *expiration_time) c->is_closing = 1;
 800cb72:	f7f4 f815 	bl	8000ba0 <mg_millis>
 800cb76:	69fb      	ldr	r3, [r7, #28]
 800cb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb7c:	4282      	cmp	r2, r0
 800cb7e:	418b      	sbcs	r3, r1
 800cb80:	d206      	bcs.n	800cb90 <sfn+0x90>
 800cb82:	68fa      	ldr	r2, [r7, #12]
 800cb84:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800cb88:	f043 0320 	orr.w	r3, r3, #32
 800cb8c:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
}
 800cb90:	bf00      	nop
 800cb92:	3720      	adds	r7, #32
 800cb94:	46bd      	mov	sp, r7
 800cb96:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800cb9a:	bf00      	nop
 800cb9c:	24003630 	.word	0x24003630

0800cba0 <timer_sntp_fn>:

static void timer_sntp_fn(void *param) {  // SNTP timer function. Sync up time
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b082      	sub	sp, #8
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
  mg_sntp_connect(param, "udp://time.google.com:123", sfn, NULL);
 800cba8:	2300      	movs	r3, #0
 800cbaa:	4a04      	ldr	r2, [pc, #16]	; (800cbbc <timer_sntp_fn+0x1c>)
 800cbac:	4904      	ldr	r1, [pc, #16]	; (800cbc0 <timer_sntp_fn+0x20>)
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f7fb fda2 	bl	80086f8 <mg_sntp_connect>
}
 800cbb4:	bf00      	nop
 800cbb6:	3708      	adds	r7, #8
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}
 800cbbc:	0800cb01 	.word	0x0800cb01
 800cbc0:	08015d88 	.word	0x08015d88

0800cbc4 <authenticate>:

// Parse HTTP requests, return authenticated user or NULL
static struct user *authenticate(struct mg_http_message *hm) {
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b0a6      	sub	sp, #152	; 0x98
 800cbc8:	af02      	add	r7, sp, #8
 800cbca:	6078      	str	r0, [r7, #4]
      {"user1", "user1", "user1_token"},
      {"user2", "user2", "user2_token"},
      {NULL, NULL, NULL},
  };
  char user[64], pass[64];
  struct user *u, *result = NULL;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  mg_http_creds(hm, user, sizeof(user), pass, sizeof(pass));
 800cbd2:	f107 0308 	add.w	r3, r7, #8
 800cbd6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800cbda:	2240      	movs	r2, #64	; 0x40
 800cbdc:	9200      	str	r2, [sp, #0]
 800cbde:	2240      	movs	r2, #64	; 0x40
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f7f8 fc79 	bl	80054d8 <mg_http_creds>
  MG_INFO(("user [%s] pass [%s]", user, pass));
 800cbe6:	4b3a      	ldr	r3, [pc, #232]	; (800ccd0 <authenticate+0x10c>)
 800cbe8:	226b      	movs	r2, #107	; 0x6b
 800cbea:	493a      	ldr	r1, [pc, #232]	; (800ccd4 <authenticate+0x110>)
 800cbec:	2002      	movs	r0, #2
 800cbee:	f7fa f9ad 	bl	8006f4c <mg_log_prefix>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d007      	beq.n	800cc08 <authenticate+0x44>
 800cbf8:	f107 0208 	add.w	r2, r7, #8
 800cbfc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cc00:	4619      	mov	r1, r3
 800cc02:	4835      	ldr	r0, [pc, #212]	; (800ccd8 <authenticate+0x114>)
 800cc04:	f7fa f9fc 	bl	8007000 <mg_log>

  if (user[0] != '\0' && pass[0] != '\0') {
 800cc08:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d031      	beq.n	800cc74 <authenticate+0xb0>
 800cc10:	7a3b      	ldrb	r3, [r7, #8]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d02e      	beq.n	800cc74 <authenticate+0xb0>
    // Both user and password is set, search by user/password
    for (u = users; result == NULL && u->name != NULL; u++)
 800cc16:	4b31      	ldr	r3, [pc, #196]	; (800ccdc <authenticate+0x118>)
 800cc18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800cc1c:	e020      	b.n	800cc60 <authenticate+0x9c>
      if (strcmp(user, u->name) == 0 && strcmp(pass, u->pass) == 0) result = u;
 800cc1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cc22:	681a      	ldr	r2, [r3, #0]
 800cc24:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cc28:	4611      	mov	r1, r2
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f7f3 fb70 	bl	8000310 <strcmp>
 800cc30:	4603      	mov	r3, r0
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d10f      	bne.n	800cc56 <authenticate+0x92>
 800cc36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cc3a:	685a      	ldr	r2, [r3, #4]
 800cc3c:	f107 0308 	add.w	r3, r7, #8
 800cc40:	4611      	mov	r1, r2
 800cc42:	4618      	mov	r0, r3
 800cc44:	f7f3 fb64 	bl	8000310 <strcmp>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d103      	bne.n	800cc56 <authenticate+0x92>
 800cc4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cc52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    for (u = users; result == NULL && u->name != NULL; u++)
 800cc56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cc5a:	330c      	adds	r3, #12
 800cc5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800cc60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d12c      	bne.n	800ccc2 <authenticate+0xfe>
 800cc68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d1d5      	bne.n	800cc1e <authenticate+0x5a>
  if (user[0] != '\0' && pass[0] != '\0') {
 800cc72:	e026      	b.n	800ccc2 <authenticate+0xfe>
  } else if (user[0] == '\0') {
 800cc74:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d123      	bne.n	800ccc4 <authenticate+0x100>
    // Only password is set, search by token
    for (u = users; result == NULL && u->name != NULL; u++)
 800cc7c:	4b17      	ldr	r3, [pc, #92]	; (800ccdc <authenticate+0x118>)
 800cc7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800cc82:	e014      	b.n	800ccae <authenticate+0xea>
      if (strcmp(pass, u->access_token) == 0) result = u;
 800cc84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cc88:	689a      	ldr	r2, [r3, #8]
 800cc8a:	f107 0308 	add.w	r3, r7, #8
 800cc8e:	4611      	mov	r1, r2
 800cc90:	4618      	mov	r0, r3
 800cc92:	f7f3 fb3d 	bl	8000310 <strcmp>
 800cc96:	4603      	mov	r3, r0
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d103      	bne.n	800cca4 <authenticate+0xe0>
 800cc9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cca0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    for (u = users; result == NULL && u->name != NULL; u++)
 800cca4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cca8:	330c      	adds	r3, #12
 800ccaa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ccae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d106      	bne.n	800ccc4 <authenticate+0x100>
 800ccb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d1e1      	bne.n	800cc84 <authenticate+0xc0>
 800ccc0:	e000      	b.n	800ccc4 <authenticate+0x100>
  if (user[0] != '\0' && pass[0] != '\0') {
 800ccc2:	bf00      	nop
  }
  return result;
 800ccc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3790      	adds	r7, #144	; 0x90
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}
 800ccd0:	08016408 	.word	0x08016408
 800ccd4:	08015da4 	.word	0x08015da4
 800ccd8:	08015db8 	.word	0x08015db8
 800ccdc:	2400026c 	.word	0x2400026c

0800cce0 <handle_login>:

static void handle_login(struct mg_connection *c, struct user *u) {
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b0c8      	sub	sp, #288	; 0x120
 800cce4:	af06      	add	r7, sp, #24
 800cce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ccee:	6018      	str	r0, [r3, #0]
 800ccf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ccf8:	6019      	str	r1, [r3, #0]
  char cookie[256];
  mg_snprintf(cookie, sizeof(cookie),
 800ccfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	689a      	ldr	r2, [r3, #8]
              "Set-Cookie: access_token=%s; Path=/; "
              "%sHttpOnly; SameSite=Lax; Max-Age=%d\r\n",
              u->access_token, c->is_tls ? "Secure; " : "", 3600 * 24);
 800cd06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800cd14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd18:	b2db      	uxtb	r3, r3
  mg_snprintf(cookie, sizeof(cookie),
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d001      	beq.n	800cd22 <handle_login+0x42>
 800cd1e:	4b17      	ldr	r3, [pc, #92]	; (800cd7c <handle_login+0x9c>)
 800cd20:	e000      	b.n	800cd24 <handle_login+0x44>
 800cd22:	4b17      	ldr	r3, [pc, #92]	; (800cd80 <handle_login+0xa0>)
 800cd24:	f107 0008 	add.w	r0, r7, #8
 800cd28:	4916      	ldr	r1, [pc, #88]	; (800cd84 <handle_login+0xa4>)
 800cd2a:	9101      	str	r1, [sp, #4]
 800cd2c:	9300      	str	r3, [sp, #0]
 800cd2e:	4613      	mov	r3, r2
 800cd30:	4a15      	ldr	r2, [pc, #84]	; (800cd88 <handle_login+0xa8>)
 800cd32:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cd36:	f7fa ff3d 	bl	8007bb4 <mg_snprintf>
  mg_http_reply(c, 200, cookie, "{%m:%m}", MG_ESC("user"), MG_ESC(u->name));
 800cd3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	f107 0208 	add.w	r2, r7, #8
 800cd4a:	f507 7184 	add.w	r1, r7, #264	; 0x108
 800cd4e:	f5a1 7082 	sub.w	r0, r1, #260	; 0x104
 800cd52:	9305      	str	r3, [sp, #20]
 800cd54:	2300      	movs	r3, #0
 800cd56:	9304      	str	r3, [sp, #16]
 800cd58:	4b0c      	ldr	r3, [pc, #48]	; (800cd8c <handle_login+0xac>)
 800cd5a:	9303      	str	r3, [sp, #12]
 800cd5c:	4b0c      	ldr	r3, [pc, #48]	; (800cd90 <handle_login+0xb0>)
 800cd5e:	9302      	str	r3, [sp, #8]
 800cd60:	2300      	movs	r3, #0
 800cd62:	9301      	str	r3, [sp, #4]
 800cd64:	4b09      	ldr	r3, [pc, #36]	; (800cd8c <handle_login+0xac>)
 800cd66:	9300      	str	r3, [sp, #0]
 800cd68:	4b0a      	ldr	r3, [pc, #40]	; (800cd94 <handle_login+0xb4>)
 800cd6a:	21c8      	movs	r1, #200	; 0xc8
 800cd6c:	6800      	ldr	r0, [r0, #0]
 800cd6e:	f7f7 fce1 	bl	8004734 <mg_http_reply>
}
 800cd72:	bf00      	nop
 800cd74:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}
 800cd7c:	08015dcc 	.word	0x08015dcc
 800cd80:	08015dd8 	.word	0x08015dd8
 800cd84:	00015180 	.word	0x00015180
 800cd88:	08015ddc 	.word	0x08015ddc
 800cd8c:	08007f55 	.word	0x08007f55
 800cd90:	08015e30 	.word	0x08015e30
 800cd94:	08015e28 	.word	0x08015e28

0800cd98 <handle_logout>:

static void handle_logout(struct mg_connection *c) {
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b0c2      	sub	sp, #264	; 0x108
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cda2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cda6:	6018      	str	r0, [r3, #0]
  char cookie[256];
  mg_snprintf(cookie, sizeof(cookie),
              "Set-Cookie: access_token=; Path=/; "
              "Expires=Thu, 01 Jan 1970 00:00:00 UTC; "
              "%sHttpOnly; Max-Age=0; \r\n",
              c->is_tls ? "Secure; " : "");
 800cda8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800cdb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdba:	b2db      	uxtb	r3, r3
  mg_snprintf(cookie, sizeof(cookie),
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d001      	beq.n	800cdc4 <handle_logout+0x2c>
 800cdc0:	4b0c      	ldr	r3, [pc, #48]	; (800cdf4 <handle_logout+0x5c>)
 800cdc2:	e000      	b.n	800cdc6 <handle_logout+0x2e>
 800cdc4:	4b0c      	ldr	r3, [pc, #48]	; (800cdf8 <handle_logout+0x60>)
 800cdc6:	f107 0008 	add.w	r0, r7, #8
 800cdca:	4a0c      	ldr	r2, [pc, #48]	; (800cdfc <handle_logout+0x64>)
 800cdcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cdd0:	f7fa fef0 	bl	8007bb4 <mg_snprintf>
  mg_http_reply(c, 200, cookie, "true\n");
 800cdd4:	f107 0208 	add.w	r2, r7, #8
 800cdd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cddc:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 800cde0:	4b07      	ldr	r3, [pc, #28]	; (800ce00 <handle_logout+0x68>)
 800cde2:	21c8      	movs	r1, #200	; 0xc8
 800cde4:	6800      	ldr	r0, [r0, #0]
 800cde6:	f7f7 fca5 	bl	8004734 <mg_http_reply>
}
 800cdea:	bf00      	nop
 800cdec:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}
 800cdf4:	08015dcc 	.word	0x08015dcc
 800cdf8:	08015dd8 	.word	0x08015dd8
 800cdfc:	08015e38 	.word	0x08015e38
 800ce00:	08015e9c 	.word	0x08015e9c

0800ce04 <handle_debug>:

static void handle_debug(struct mg_connection *c, struct mg_http_message *hm) {
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b086      	sub	sp, #24
 800ce08:	af02      	add	r7, sp, #8
 800ce0a:	6078      	str	r0, [r7, #4]
 800ce0c:	6039      	str	r1, [r7, #0]
  int level = mg_json_get_long(hm->body, "$.level", MG_LL_DEBUG);
 800ce0e:	6839      	ldr	r1, [r7, #0]
 800ce10:	2303      	movs	r3, #3
 800ce12:	4a0b      	ldr	r2, [pc, #44]	; (800ce40 <handle_debug+0x3c>)
 800ce14:	f501 7100 	add.w	r1, r1, #512	; 0x200
 800ce18:	c903      	ldmia	r1, {r0, r1}
 800ce1a:	f7fa f823 	bl	8006e64 <mg_json_get_long>
 800ce1e:	60f8      	str	r0, [r7, #12]
  mg_log_set(level);
 800ce20:	68f8      	ldr	r0, [r7, #12]
 800ce22:	f7fa f871 	bl	8006f08 <mg_log_set>
  mg_http_reply(c, 200, "", "Debug level set to %d\n", level);
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	9300      	str	r3, [sp, #0]
 800ce2a:	4b06      	ldr	r3, [pc, #24]	; (800ce44 <handle_debug+0x40>)
 800ce2c:	4a06      	ldr	r2, [pc, #24]	; (800ce48 <handle_debug+0x44>)
 800ce2e:	21c8      	movs	r1, #200	; 0xc8
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f7f7 fc7f 	bl	8004734 <mg_http_reply>
}
 800ce36:	bf00      	nop
 800ce38:	3710      	adds	r7, #16
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}
 800ce3e:	bf00      	nop
 800ce40:	08015ea4 	.word	0x08015ea4
 800ce44:	08015eac 	.word	0x08015eac
 800ce48:	08015dd8 	.word	0x08015dd8

0800ce4c <print_int_arr>:

static size_t print_int_arr(void (*out)(char, void *), void *ptr, va_list *ap) {
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b08a      	sub	sp, #40	; 0x28
 800ce50:	af02      	add	r7, sp, #8
 800ce52:	60f8      	str	r0, [r7, #12]
 800ce54:	60b9      	str	r1, [r7, #8]
 800ce56:	607a      	str	r2, [r7, #4]
  size_t len = 0, num = va_arg(*ap, size_t);  // Number of items in the array
 800ce58:	2300      	movs	r3, #0
 800ce5a:	61fb      	str	r3, [r7, #28]
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	1d19      	adds	r1, r3, #4
 800ce62:	687a      	ldr	r2, [r7, #4]
 800ce64:	6011      	str	r1, [r2, #0]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	617b      	str	r3, [r7, #20]
  int *arr = va_arg(*ap, int *);              // Array ptr
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	1d19      	adds	r1, r3, #4
 800ce70:	687a      	ldr	r2, [r7, #4]
 800ce72:	6011      	str	r1, [r2, #0]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	613b      	str	r3, [r7, #16]
  for (size_t i = 0; i < num; i++) {
 800ce78:	2300      	movs	r3, #0
 800ce7a:	61bb      	str	r3, [r7, #24]
 800ce7c:	e018      	b.n	800ceb0 <print_int_arr+0x64>
    len += mg_xprintf(out, ptr, "%s%d", i == 0 ? "" : ",", arr[i]);
 800ce7e:	69bb      	ldr	r3, [r7, #24]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d101      	bne.n	800ce88 <print_int_arr+0x3c>
 800ce84:	490f      	ldr	r1, [pc, #60]	; (800cec4 <print_int_arr+0x78>)
 800ce86:	e000      	b.n	800ce8a <print_int_arr+0x3e>
 800ce88:	490f      	ldr	r1, [pc, #60]	; (800cec8 <print_int_arr+0x7c>)
 800ce8a:	69bb      	ldr	r3, [r7, #24]
 800ce8c:	009b      	lsls	r3, r3, #2
 800ce8e:	693a      	ldr	r2, [r7, #16]
 800ce90:	4413      	add	r3, r2
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	9300      	str	r3, [sp, #0]
 800ce96:	460b      	mov	r3, r1
 800ce98:	4a0c      	ldr	r2, [pc, #48]	; (800cecc <print_int_arr+0x80>)
 800ce9a:	68b9      	ldr	r1, [r7, #8]
 800ce9c:	68f8      	ldr	r0, [r7, #12]
 800ce9e:	f7f5 fd28 	bl	80028f2 <mg_xprintf>
 800cea2:	4602      	mov	r2, r0
 800cea4:	69fb      	ldr	r3, [r7, #28]
 800cea6:	4413      	add	r3, r2
 800cea8:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < num; i++) {
 800ceaa:	69bb      	ldr	r3, [r7, #24]
 800ceac:	3301      	adds	r3, #1
 800ceae:	61bb      	str	r3, [r7, #24]
 800ceb0:	69ba      	ldr	r2, [r7, #24]
 800ceb2:	697b      	ldr	r3, [r7, #20]
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d3e2      	bcc.n	800ce7e <print_int_arr+0x32>
  }
  return len;
 800ceb8:	69fb      	ldr	r3, [r7, #28]
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3720      	adds	r7, #32
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}
 800cec2:	bf00      	nop
 800cec4:	08015dd8 	.word	0x08015dd8
 800cec8:	08015ec4 	.word	0x08015ec4
 800cecc:	08015ec8 	.word	0x08015ec8

0800ced0 <handle_stats_get>:

static void handle_stats_get(struct mg_connection *c) {
 800ced0:	b5b0      	push	{r4, r5, r7, lr}
 800ced2:	b09e      	sub	sp, #120	; 0x78
 800ced4:	af0e      	add	r7, sp, #56	; 0x38
 800ced6:	6078      	str	r0, [r7, #4]
  int points[] = {21, 22, 22, 19, 18, 20, 23, 23, 22, 22, 22, 23, 22};
 800ced8:	4b19      	ldr	r3, [pc, #100]	; (800cf40 <handle_stats_get+0x70>)
 800ceda:	f107 040c 	add.w	r4, r7, #12
 800cede:	461d      	mov	r5, r3
 800cee0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cee2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cee4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cee6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cee8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ceea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ceec:	682b      	ldr	r3, [r5, #0]
 800ceee:	6023      	str	r3, [r4, #0]
  mg_http_reply(c, 200, s_json_header, "{%m:%d,%m:%d,%m:[%M]}",
 800cef0:	4b14      	ldr	r3, [pc, #80]	; (800cf44 <handle_stats_get+0x74>)
 800cef2:	681a      	ldr	r2, [r3, #0]
 800cef4:	f107 030c 	add.w	r3, r7, #12
 800cef8:	930d      	str	r3, [sp, #52]	; 0x34
 800cefa:	230d      	movs	r3, #13
 800cefc:	930c      	str	r3, [sp, #48]	; 0x30
 800cefe:	4b12      	ldr	r3, [pc, #72]	; (800cf48 <handle_stats_get+0x78>)
 800cf00:	930b      	str	r3, [sp, #44]	; 0x2c
 800cf02:	4b12      	ldr	r3, [pc, #72]	; (800cf4c <handle_stats_get+0x7c>)
 800cf04:	930a      	str	r3, [sp, #40]	; 0x28
 800cf06:	2300      	movs	r3, #0
 800cf08:	9309      	str	r3, [sp, #36]	; 0x24
 800cf0a:	4b11      	ldr	r3, [pc, #68]	; (800cf50 <handle_stats_get+0x80>)
 800cf0c:	9308      	str	r3, [sp, #32]
 800cf0e:	2343      	movs	r3, #67	; 0x43
 800cf10:	9307      	str	r3, [sp, #28]
 800cf12:	4b10      	ldr	r3, [pc, #64]	; (800cf54 <handle_stats_get+0x84>)
 800cf14:	9306      	str	r3, [sp, #24]
 800cf16:	2300      	movs	r3, #0
 800cf18:	9305      	str	r3, [sp, #20]
 800cf1a:	4b0d      	ldr	r3, [pc, #52]	; (800cf50 <handle_stats_get+0x80>)
 800cf1c:	9304      	str	r3, [sp, #16]
 800cf1e:	2315      	movs	r3, #21
 800cf20:	9303      	str	r3, [sp, #12]
 800cf22:	4b0d      	ldr	r3, [pc, #52]	; (800cf58 <handle_stats_get+0x88>)
 800cf24:	9302      	str	r3, [sp, #8]
 800cf26:	2300      	movs	r3, #0
 800cf28:	9301      	str	r3, [sp, #4]
 800cf2a:	4b09      	ldr	r3, [pc, #36]	; (800cf50 <handle_stats_get+0x80>)
 800cf2c:	9300      	str	r3, [sp, #0]
 800cf2e:	4b0b      	ldr	r3, [pc, #44]	; (800cf5c <handle_stats_get+0x8c>)
 800cf30:	21c8      	movs	r1, #200	; 0xc8
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	f7f7 fbfe 	bl	8004734 <mg_http_reply>
                MG_ESC("temperature"), 21,  //
                MG_ESC("humidity"), 67,     //
                MG_ESC("points"), print_int_arr,
                sizeof(points) / sizeof(points[0]), points);
}
 800cf38:	bf00      	nop
 800cf3a:	3740      	adds	r7, #64	; 0x40
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bdb0      	pop	{r4, r5, r7, pc}
 800cf40:	08015f08 	.word	0x08015f08
 800cf44:	24000260 	.word	0x24000260
 800cf48:	0800ce4d 	.word	0x0800ce4d
 800cf4c:	08015ee8 	.word	0x08015ee8
 800cf50:	08007f55 	.word	0x08007f55
 800cf54:	08015ef0 	.word	0x08015ef0
 800cf58:	08015efc 	.word	0x08015efc
 800cf5c:	08015ed0 	.word	0x08015ed0

0800cf60 <print_events>:

static size_t print_events(void (*out)(char, void *), void *ptr, va_list *ap) {
 800cf60:	b590      	push	{r4, r7, lr}
 800cf62:	b0a1      	sub	sp, #132	; 0x84
 800cf64:	af12      	add	r7, sp, #72	; 0x48
 800cf66:	60f8      	str	r0, [r7, #12]
 800cf68:	60b9      	str	r1, [r7, #8]
 800cf6a:	607a      	str	r2, [r7, #4]
  size_t len = 0;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	637b      	str	r3, [r7, #52]	; 0x34
  struct ui_event ev;
  int pageno = va_arg(*ap, unsigned);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	1d19      	adds	r1, r3, #4
 800cf76:	687a      	ldr	r2, [r7, #4]
 800cf78:	6011      	str	r1, [r2, #0]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int no = (pageno - 1) * EVENTS_PER_PAGE;
 800cf7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf80:	1e5a      	subs	r2, r3, #1
 800cf82:	4613      	mov	r3, r2
 800cf84:	009b      	lsls	r3, r3, #2
 800cf86:	4413      	add	r3, r2
 800cf88:	009b      	lsls	r3, r3, #2
 800cf8a:	633b      	str	r3, [r7, #48]	; 0x30
  int end = no + EVENTS_PER_PAGE;
 800cf8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf8e:	3314      	adds	r3, #20
 800cf90:	62bb      	str	r3, [r7, #40]	; 0x28

  while ((no = ui_event_next(no, &ev)) != 0 && no <= end) {
 800cf92:	e037      	b.n	800d004 <print_events+0xa4>
    len += mg_xprintf(out, ptr, "%s{%m:%lu,%m:%d,%m:%d,%m:%m}",  //
 800cf94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d101      	bne.n	800cf9e <print_events+0x3e>
 800cf9a:	4924      	ldr	r1, [pc, #144]	; (800d02c <print_events+0xcc>)
 800cf9c:	e000      	b.n	800cfa0 <print_events+0x40>
 800cf9e:	4924      	ldr	r1, [pc, #144]	; (800d030 <print_events+0xd0>)
 800cfa0:	69bb      	ldr	r3, [r7, #24]
                      len == 0 ? "" : ",",                       //
                      MG_ESC("time"), ev.timestamp,       //
                      MG_ESC("type"), ev.type,            //
 800cfa2:	7d3a      	ldrb	r2, [r7, #20]
    len += mg_xprintf(out, ptr, "%s{%m:%lu,%m:%d,%m:%d,%m:%m}",  //
 800cfa4:	4610      	mov	r0, r2
                      MG_ESC("prio"), ev.prio,            //
 800cfa6:	7d7a      	ldrb	r2, [r7, #21]
    len += mg_xprintf(out, ptr, "%s{%m:%lu,%m:%d,%m:%d,%m:%m}",  //
 800cfa8:	4614      	mov	r4, r2
 800cfaa:	f107 0214 	add.w	r2, r7, #20
 800cfae:	3208      	adds	r2, #8
 800cfb0:	9211      	str	r2, [sp, #68]	; 0x44
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	9210      	str	r2, [sp, #64]	; 0x40
 800cfb6:	4a1f      	ldr	r2, [pc, #124]	; (800d034 <print_events+0xd4>)
 800cfb8:	920f      	str	r2, [sp, #60]	; 0x3c
 800cfba:	4a1f      	ldr	r2, [pc, #124]	; (800d038 <print_events+0xd8>)
 800cfbc:	920e      	str	r2, [sp, #56]	; 0x38
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	920d      	str	r2, [sp, #52]	; 0x34
 800cfc2:	4a1c      	ldr	r2, [pc, #112]	; (800d034 <print_events+0xd4>)
 800cfc4:	920c      	str	r2, [sp, #48]	; 0x30
 800cfc6:	940b      	str	r4, [sp, #44]	; 0x2c
 800cfc8:	4a1c      	ldr	r2, [pc, #112]	; (800d03c <print_events+0xdc>)
 800cfca:	920a      	str	r2, [sp, #40]	; 0x28
 800cfcc:	2200      	movs	r2, #0
 800cfce:	9209      	str	r2, [sp, #36]	; 0x24
 800cfd0:	4a18      	ldr	r2, [pc, #96]	; (800d034 <print_events+0xd4>)
 800cfd2:	9208      	str	r2, [sp, #32]
 800cfd4:	9007      	str	r0, [sp, #28]
 800cfd6:	4a1a      	ldr	r2, [pc, #104]	; (800d040 <print_events+0xe0>)
 800cfd8:	9206      	str	r2, [sp, #24]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	9205      	str	r2, [sp, #20]
 800cfde:	4a15      	ldr	r2, [pc, #84]	; (800d034 <print_events+0xd4>)
 800cfe0:	9204      	str	r2, [sp, #16]
 800cfe2:	9303      	str	r3, [sp, #12]
 800cfe4:	4b17      	ldr	r3, [pc, #92]	; (800d044 <print_events+0xe4>)
 800cfe6:	9302      	str	r3, [sp, #8]
 800cfe8:	2300      	movs	r3, #0
 800cfea:	9301      	str	r3, [sp, #4]
 800cfec:	4b11      	ldr	r3, [pc, #68]	; (800d034 <print_events+0xd4>)
 800cfee:	9300      	str	r3, [sp, #0]
 800cff0:	460b      	mov	r3, r1
 800cff2:	4a15      	ldr	r2, [pc, #84]	; (800d048 <print_events+0xe8>)
 800cff4:	68b9      	ldr	r1, [r7, #8]
 800cff6:	68f8      	ldr	r0, [r7, #12]
 800cff8:	f7f5 fc7b 	bl	80028f2 <mg_xprintf>
 800cffc:	4602      	mov	r2, r0
 800cffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d000:	4413      	add	r3, r2
 800d002:	637b      	str	r3, [r7, #52]	; 0x34
  while ((no = ui_event_next(no, &ev)) != 0 && no <= end) {
 800d004:	f107 0314 	add.w	r3, r7, #20
 800d008:	4619      	mov	r1, r3
 800d00a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d00c:	f7ff fd0e 	bl	800ca2c <ui_event_next>
 800d010:	6338      	str	r0, [r7, #48]	; 0x30
 800d012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d014:	2b00      	cmp	r3, #0
 800d016:	d003      	beq.n	800d020 <print_events+0xc0>
 800d018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d01c:	429a      	cmp	r2, r3
 800d01e:	ddb9      	ble.n	800cf94 <print_events+0x34>
                      MG_ESC("text"), MG_ESC(ev.text));
  }

  return len;
 800d020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d022:	4618      	mov	r0, r3
 800d024:	373c      	adds	r7, #60	; 0x3c
 800d026:	46bd      	mov	sp, r7
 800d028:	bd90      	pop	{r4, r7, pc}
 800d02a:	bf00      	nop
 800d02c:	08015dd8 	.word	0x08015dd8
 800d030:	08015ec4 	.word	0x08015ec4
 800d034:	08007f55 	.word	0x08007f55
 800d038:	08015f5c 	.word	0x08015f5c
 800d03c:	08015f64 	.word	0x08015f64
 800d040:	08015f6c 	.word	0x08015f6c
 800d044:	08015f74 	.word	0x08015f74
 800d048:	08015f3c 	.word	0x08015f3c

0800d04c <handle_events_get>:

static void handle_events_get(struct mg_connection *c, struct mg_http_message *hm) {
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b08e      	sub	sp, #56	; 0x38
 800d050:	af0a      	add	r7, sp, #40	; 0x28
 800d052:	6078      	str	r0, [r7, #4]
 800d054:	6039      	str	r1, [r7, #0]
  int pageno = mg_json_get_long(hm->body, "$.page", 1);
 800d056:	6839      	ldr	r1, [r7, #0]
 800d058:	2301      	movs	r3, #1
 800d05a:	4a12      	ldr	r2, [pc, #72]	; (800d0a4 <handle_events_get+0x58>)
 800d05c:	f501 7100 	add.w	r1, r1, #512	; 0x200
 800d060:	c903      	ldmia	r1, {r0, r1}
 800d062:	f7f9 feff 	bl	8006e64 <mg_json_get_long>
 800d066:	60f8      	str	r0, [r7, #12]
  mg_http_reply(c, 200, s_json_header, "{%m:[%M], %m:%d}", MG_ESC("arr"),
 800d068:	4b0f      	ldr	r3, [pc, #60]	; (800d0a8 <handle_events_get+0x5c>)
 800d06a:	681a      	ldr	r2, [r3, #0]
 800d06c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800d070:	9308      	str	r3, [sp, #32]
 800d072:	4b0e      	ldr	r3, [pc, #56]	; (800d0ac <handle_events_get+0x60>)
 800d074:	9307      	str	r3, [sp, #28]
 800d076:	2300      	movs	r3, #0
 800d078:	9306      	str	r3, [sp, #24]
 800d07a:	4b0d      	ldr	r3, [pc, #52]	; (800d0b0 <handle_events_get+0x64>)
 800d07c:	9305      	str	r3, [sp, #20]
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	9304      	str	r3, [sp, #16]
 800d082:	4b0c      	ldr	r3, [pc, #48]	; (800d0b4 <handle_events_get+0x68>)
 800d084:	9303      	str	r3, [sp, #12]
 800d086:	4b0c      	ldr	r3, [pc, #48]	; (800d0b8 <handle_events_get+0x6c>)
 800d088:	9302      	str	r3, [sp, #8]
 800d08a:	2300      	movs	r3, #0
 800d08c:	9301      	str	r3, [sp, #4]
 800d08e:	4b08      	ldr	r3, [pc, #32]	; (800d0b0 <handle_events_get+0x64>)
 800d090:	9300      	str	r3, [sp, #0]
 800d092:	4b0a      	ldr	r3, [pc, #40]	; (800d0bc <handle_events_get+0x70>)
 800d094:	21c8      	movs	r1, #200	; 0xc8
 800d096:	6878      	ldr	r0, [r7, #4]
 800d098:	f7f7 fb4c 	bl	8004734 <mg_http_reply>
                print_events, pageno, MG_ESC("totalCount"), MAX_EVENTS_NO);
}
 800d09c:	bf00      	nop
 800d09e:	3710      	adds	r7, #16
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}
 800d0a4:	08015f7c 	.word	0x08015f7c
 800d0a8:	24000260 	.word	0x24000260
 800d0ac:	08015f98 	.word	0x08015f98
 800d0b0:	08007f55 	.word	0x08007f55
 800d0b4:	0800cf61 	.word	0x0800cf61
 800d0b8:	08015fa4 	.word	0x08015fa4
 800d0bc:	08015f84 	.word	0x08015f84

0800d0c0 <handle_settings_set>:

static void handle_settings_set(struct mg_connection *c, struct mg_str body) {
 800d0c0:	b590      	push	{r4, r7, lr}
 800d0c2:	b095      	sub	sp, #84	; 0x54
 800d0c4:	af0a      	add	r7, sp, #40	; 0x28
 800d0c6:	60f8      	str	r0, [r7, #12]
 800d0c8:	1d3b      	adds	r3, r7, #4
 800d0ca:	e883 0006 	stmia.w	r3, {r1, r2}
  struct settings settings;
  memset(&settings, 0, sizeof(settings));
 800d0ce:	f107 0310 	add.w	r3, r7, #16
 800d0d2:	2210      	movs	r2, #16
 800d0d4:	2100      	movs	r1, #0
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f006 f9d9 	bl	801348e <memset>
  mg_json_get_bool(body, "$.log_enabled", &settings.log_enabled);
 800d0dc:	f107 0310 	add.w	r3, r7, #16
 800d0e0:	4a32      	ldr	r2, [pc, #200]	; (800d1ac <handle_settings_set+0xec>)
 800d0e2:	1d39      	adds	r1, r7, #4
 800d0e4:	c903      	ldmia	r1, {r0, r1}
 800d0e6:	f7f9 fda4 	bl	8006c32 <mg_json_get_bool>
  settings.log_level = mg_json_get_long(body, "$.log_level", 0);
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	4a30      	ldr	r2, [pc, #192]	; (800d1b0 <handle_settings_set+0xf0>)
 800d0ee:	1d39      	adds	r1, r7, #4
 800d0f0:	c903      	ldmia	r1, {r0, r1}
 800d0f2:	f7f9 feb7 	bl	8006e64 <mg_json_get_long>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	617b      	str	r3, [r7, #20]
  settings.brightness = mg_json_get_long(body, "$.brightness", 0);
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	4a2d      	ldr	r2, [pc, #180]	; (800d1b4 <handle_settings_set+0xf4>)
 800d0fe:	1d39      	adds	r1, r7, #4
 800d100:	c903      	ldmia	r1, {r0, r1}
 800d102:	f7f9 feaf 	bl	8006e64 <mg_json_get_long>
 800d106:	4603      	mov	r3, r0
 800d108:	61bb      	str	r3, [r7, #24]
  char *s = mg_json_get_str(body, "$.device_name");
 800d10a:	4a2b      	ldr	r2, [pc, #172]	; (800d1b8 <handle_settings_set+0xf8>)
 800d10c:	1d3b      	adds	r3, r7, #4
 800d10e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d112:	f7f9 fe59 	bl	8006dc8 <mg_json_get_str>
 800d116:	6278      	str	r0, [r7, #36]	; 0x24
  if (s && strlen(s) < MAX_DEVICE_NAME) {
 800d118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d00c      	beq.n	800d138 <handle_settings_set+0x78>
 800d11e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d120:	f7f3 f956 	bl	80003d0 <strlen>
 800d124:	4603      	mov	r3, r0
 800d126:	2b27      	cmp	r3, #39	; 0x27
 800d128:	d806      	bhi.n	800d138 <handle_settings_set+0x78>
    free(settings.device_name);
 800d12a:	69fb      	ldr	r3, [r7, #28]
 800d12c:	4618      	mov	r0, r3
 800d12e:	f005 fecb 	bl	8012ec8 <free>
    settings.device_name = s;
 800d132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d134:	61fb      	str	r3, [r7, #28]
 800d136:	e002      	b.n	800d13e <handle_settings_set+0x7e>
  } else {
    free(s);
 800d138:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d13a:	f005 fec5 	bl	8012ec8 <free>
  }

  // Save to the device flash
  s_settings = settings;
 800d13e:	4b1f      	ldr	r3, [pc, #124]	; (800d1bc <handle_settings_set+0xfc>)
 800d140:	461c      	mov	r4, r3
 800d142:	f107 0310 	add.w	r3, r7, #16
 800d146:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d148:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  bool ok = true;
 800d14c:	2301      	movs	r3, #1
 800d14e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  mg_http_reply(c, 200, s_json_header,
 800d152:	4b1b      	ldr	r3, [pc, #108]	; (800d1c0 <handle_settings_set+0x100>)
 800d154:	6819      	ldr	r1, [r3, #0]
 800d156:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d001      	beq.n	800d162 <handle_settings_set+0xa2>
 800d15e:	4b19      	ldr	r3, [pc, #100]	; (800d1c4 <handle_settings_set+0x104>)
 800d160:	e000      	b.n	800d164 <handle_settings_set+0xa4>
 800d162:	4b19      	ldr	r3, [pc, #100]	; (800d1c8 <handle_settings_set+0x108>)
 800d164:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800d168:	2a00      	cmp	r2, #0
 800d16a:	d001      	beq.n	800d170 <handle_settings_set+0xb0>
 800d16c:	4a17      	ldr	r2, [pc, #92]	; (800d1cc <handle_settings_set+0x10c>)
 800d16e:	e000      	b.n	800d172 <handle_settings_set+0xb2>
 800d170:	4a17      	ldr	r2, [pc, #92]	; (800d1d0 <handle_settings_set+0x110>)
 800d172:	9209      	str	r2, [sp, #36]	; 0x24
 800d174:	2200      	movs	r2, #0
 800d176:	9208      	str	r2, [sp, #32]
 800d178:	4a16      	ldr	r2, [pc, #88]	; (800d1d4 <handle_settings_set+0x114>)
 800d17a:	9207      	str	r2, [sp, #28]
 800d17c:	4a16      	ldr	r2, [pc, #88]	; (800d1d8 <handle_settings_set+0x118>)
 800d17e:	9206      	str	r2, [sp, #24]
 800d180:	2200      	movs	r2, #0
 800d182:	9205      	str	r2, [sp, #20]
 800d184:	4a13      	ldr	r2, [pc, #76]	; (800d1d4 <handle_settings_set+0x114>)
 800d186:	9204      	str	r2, [sp, #16]
 800d188:	9303      	str	r3, [sp, #12]
 800d18a:	4b14      	ldr	r3, [pc, #80]	; (800d1dc <handle_settings_set+0x11c>)
 800d18c:	9302      	str	r3, [sp, #8]
 800d18e:	2300      	movs	r3, #0
 800d190:	9301      	str	r3, [sp, #4]
 800d192:	4b10      	ldr	r3, [pc, #64]	; (800d1d4 <handle_settings_set+0x114>)
 800d194:	9300      	str	r3, [sp, #0]
 800d196:	4b12      	ldr	r3, [pc, #72]	; (800d1e0 <handle_settings_set+0x120>)
 800d198:	460a      	mov	r2, r1
 800d19a:	21c8      	movs	r1, #200	; 0xc8
 800d19c:	68f8      	ldr	r0, [r7, #12]
 800d19e:	f7f7 fac9 	bl	8004734 <mg_http_reply>
                "{%m:%s,%m:%m}",                          //
                MG_ESC("status"), ok ? "true" : "false",  //
                MG_ESC("message"), MG_ESC(ok ? "Success" : "Failed"));
}
 800d1a2:	bf00      	nop
 800d1a4:	372c      	adds	r7, #44	; 0x2c
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd90      	pop	{r4, r7, pc}
 800d1aa:	bf00      	nop
 800d1ac:	08015fa8 	.word	0x08015fa8
 800d1b0:	08015fb8 	.word	0x08015fb8
 800d1b4:	08015fc4 	.word	0x08015fc4
 800d1b8:	08015fd4 	.word	0x08015fd4
 800d1bc:	24000250 	.word	0x24000250
 800d1c0:	24000260 	.word	0x24000260
 800d1c4:	08015fe4 	.word	0x08015fe4
 800d1c8:	08015fec 	.word	0x08015fec
 800d1cc:	08015ff4 	.word	0x08015ff4
 800d1d0:	08015ffc 	.word	0x08015ffc
 800d1d4:	08007f55 	.word	0x08007f55
 800d1d8:	08016014 	.word	0x08016014
 800d1dc:	0801601c 	.word	0x0801601c
 800d1e0:	08016004 	.word	0x08016004

0800d1e4 <handle_settings_get>:

static void handle_settings_get(struct mg_connection *c) {
 800d1e4:	b590      	push	{r4, r7, lr}
 800d1e6:	b095      	sub	sp, #84	; 0x54
 800d1e8:	af12      	add	r7, sp, #72	; 0x48
 800d1ea:	6078      	str	r0, [r7, #4]
  mg_http_reply(c, 200, s_json_header, "{%m:%s,%m:%hhu,%m:%hhu,%m:%m}",  //
 800d1ec:	4b1c      	ldr	r3, [pc, #112]	; (800d260 <handle_settings_get+0x7c>)
 800d1ee:	681c      	ldr	r4, [r3, #0]
                MG_ESC("log_enabled"),
                s_settings.log_enabled ? "true" : "false",    //
 800d1f0:	4b1c      	ldr	r3, [pc, #112]	; (800d264 <handle_settings_get+0x80>)
 800d1f2:	781b      	ldrb	r3, [r3, #0]
  mg_http_reply(c, 200, s_json_header, "{%m:%s,%m:%hhu,%m:%hhu,%m:%m}",  //
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d001      	beq.n	800d1fc <handle_settings_get+0x18>
 800d1f8:	4b1b      	ldr	r3, [pc, #108]	; (800d268 <handle_settings_get+0x84>)
 800d1fa:	e000      	b.n	800d1fe <handle_settings_get+0x1a>
 800d1fc:	4b1b      	ldr	r3, [pc, #108]	; (800d26c <handle_settings_get+0x88>)
 800d1fe:	4a19      	ldr	r2, [pc, #100]	; (800d264 <handle_settings_get+0x80>)
 800d200:	6852      	ldr	r2, [r2, #4]
 800d202:	4918      	ldr	r1, [pc, #96]	; (800d264 <handle_settings_get+0x80>)
 800d204:	6889      	ldr	r1, [r1, #8]
 800d206:	4817      	ldr	r0, [pc, #92]	; (800d264 <handle_settings_get+0x80>)
 800d208:	68c0      	ldr	r0, [r0, #12]
 800d20a:	9011      	str	r0, [sp, #68]	; 0x44
 800d20c:	2000      	movs	r0, #0
 800d20e:	9010      	str	r0, [sp, #64]	; 0x40
 800d210:	4817      	ldr	r0, [pc, #92]	; (800d270 <handle_settings_get+0x8c>)
 800d212:	900f      	str	r0, [sp, #60]	; 0x3c
 800d214:	4817      	ldr	r0, [pc, #92]	; (800d274 <handle_settings_get+0x90>)
 800d216:	900e      	str	r0, [sp, #56]	; 0x38
 800d218:	2000      	movs	r0, #0
 800d21a:	900d      	str	r0, [sp, #52]	; 0x34
 800d21c:	4814      	ldr	r0, [pc, #80]	; (800d270 <handle_settings_get+0x8c>)
 800d21e:	900c      	str	r0, [sp, #48]	; 0x30
 800d220:	910b      	str	r1, [sp, #44]	; 0x2c
 800d222:	4915      	ldr	r1, [pc, #84]	; (800d278 <handle_settings_get+0x94>)
 800d224:	910a      	str	r1, [sp, #40]	; 0x28
 800d226:	2100      	movs	r1, #0
 800d228:	9109      	str	r1, [sp, #36]	; 0x24
 800d22a:	4911      	ldr	r1, [pc, #68]	; (800d270 <handle_settings_get+0x8c>)
 800d22c:	9108      	str	r1, [sp, #32]
 800d22e:	9207      	str	r2, [sp, #28]
 800d230:	4a12      	ldr	r2, [pc, #72]	; (800d27c <handle_settings_get+0x98>)
 800d232:	9206      	str	r2, [sp, #24]
 800d234:	2200      	movs	r2, #0
 800d236:	9205      	str	r2, [sp, #20]
 800d238:	4a0d      	ldr	r2, [pc, #52]	; (800d270 <handle_settings_get+0x8c>)
 800d23a:	9204      	str	r2, [sp, #16]
 800d23c:	9303      	str	r3, [sp, #12]
 800d23e:	4b10      	ldr	r3, [pc, #64]	; (800d280 <handle_settings_get+0x9c>)
 800d240:	9302      	str	r3, [sp, #8]
 800d242:	2300      	movs	r3, #0
 800d244:	9301      	str	r3, [sp, #4]
 800d246:	4b0a      	ldr	r3, [pc, #40]	; (800d270 <handle_settings_get+0x8c>)
 800d248:	9300      	str	r3, [sp, #0]
 800d24a:	4b0e      	ldr	r3, [pc, #56]	; (800d284 <handle_settings_get+0xa0>)
 800d24c:	4622      	mov	r2, r4
 800d24e:	21c8      	movs	r1, #200	; 0xc8
 800d250:	6878      	ldr	r0, [r7, #4]
 800d252:	f7f7 fa6f 	bl	8004734 <mg_http_reply>
                MG_ESC("log_level"), s_settings.log_level,    //
                MG_ESC("brightness"), s_settings.brightness,  //
                MG_ESC("device_name"), MG_ESC(s_settings.device_name));
}
 800d256:	bf00      	nop
 800d258:	370c      	adds	r7, #12
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd90      	pop	{r4, r7, pc}
 800d25e:	bf00      	nop
 800d260:	24000260 	.word	0x24000260
 800d264:	24000250 	.word	0x24000250
 800d268:	08015fe4 	.word	0x08015fe4
 800d26c:	08015fec 	.word	0x08015fec
 800d270:	08007f55 	.word	0x08007f55
 800d274:	08016044 	.word	0x08016044
 800d278:	08016050 	.word	0x08016050
 800d27c:	0801605c 	.word	0x0801605c
 800d280:	08016068 	.word	0x08016068
 800d284:	08016024 	.word	0x08016024

0800d288 <fn>:

// HTTP request handler function
static void fn(struct mg_connection *c, int ev, void *ev_data, void *fn_data) {
 800d288:	b5b0      	push	{r4, r5, r7, lr}
 800d28a:	b098      	sub	sp, #96	; 0x60
 800d28c:	af04      	add	r7, sp, #16
 800d28e:	60f8      	str	r0, [r7, #12]
 800d290:	60b9      	str	r1, [r7, #8]
 800d292:	607a      	str	r2, [r7, #4]
 800d294:	603b      	str	r3, [r7, #0]
  if (ev == MG_EV_ACCEPT && fn_data != NULL) {
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	2b05      	cmp	r3, #5
 800d29a:	d117      	bne.n	800d2cc <fn+0x44>
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d014      	beq.n	800d2cc <fn+0x44>
    struct mg_tls_opts opts = {.cert = s_ssl_cert, .certkey = s_ssl_key};
 800d2a2:	f107 0310 	add.w	r3, r7, #16
 800d2a6:	2220      	movs	r2, #32
 800d2a8:	2100      	movs	r1, #0
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f006 f8ef 	bl	801348e <memset>
 800d2b0:	4b5b      	ldr	r3, [pc, #364]	; (800d420 <fn+0x198>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	61bb      	str	r3, [r7, #24]
 800d2b6:	4b5b      	ldr	r3, [pc, #364]	; (800d424 <fn+0x19c>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	61fb      	str	r3, [r7, #28]
    mg_tls_init(c, &opts);
 800d2bc:	f107 0310 	add.w	r3, r7, #16
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	68f8      	ldr	r0, [r7, #12]
 800d2c4:	f7fb ff12 	bl	80090ec <mg_tls_init>
  if (ev == MG_EV_ACCEPT && fn_data != NULL) {
 800d2c8:	bf00      	nop
    }
    MG_DEBUG(("%lu %.*s %.*s -> %.*s", c->id, (int) hm->method.len,
              hm->method.ptr, (int) hm->uri.len, hm->uri.ptr, (int) 3,
              &c->send.buf[9]));
  }
}
 800d2ca:	e0a5      	b.n	800d418 <fn+0x190>
  } else if (ev == MG_EV_HTTP_MSG) {
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	2b0a      	cmp	r3, #10
 800d2d0:	f040 80a2 	bne.w	800d418 <fn+0x190>
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	64fb      	str	r3, [r7, #76]	; 0x4c
    struct user *u = authenticate(hm);
 800d2d8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d2da:	f7ff fc73 	bl	800cbc4 <authenticate>
 800d2de:	64b8      	str	r0, [r7, #72]	; 0x48
    if (mg_http_match_uri(hm, "/api/#") && u == NULL) {
 800d2e0:	4951      	ldr	r1, [pc, #324]	; (800d428 <fn+0x1a0>)
 800d2e2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d2e4:	f7f8 fad3 	bl	800588e <mg_http_match_uri>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d00a      	beq.n	800d304 <fn+0x7c>
 800d2ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d107      	bne.n	800d304 <fn+0x7c>
      mg_http_reply(c, 403, "", "Not Authorised\n");
 800d2f4:	4b4d      	ldr	r3, [pc, #308]	; (800d42c <fn+0x1a4>)
 800d2f6:	4a4e      	ldr	r2, [pc, #312]	; (800d430 <fn+0x1a8>)
 800d2f8:	f240 1193 	movw	r1, #403	; 0x193
 800d2fc:	68f8      	ldr	r0, [r7, #12]
 800d2fe:	f7f7 fa19 	bl	8004734 <mg_http_reply>
 800d302:	e066      	b.n	800d3d2 <fn+0x14a>
    } else if (mg_http_match_uri(hm, "/api/login")) {
 800d304:	494b      	ldr	r1, [pc, #300]	; (800d434 <fn+0x1ac>)
 800d306:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d308:	f7f8 fac1 	bl	800588e <mg_http_match_uri>
 800d30c:	4603      	mov	r3, r0
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d004      	beq.n	800d31c <fn+0x94>
      handle_login(c, u);
 800d312:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d314:	68f8      	ldr	r0, [r7, #12]
 800d316:	f7ff fce3 	bl	800cce0 <handle_login>
 800d31a:	e05a      	b.n	800d3d2 <fn+0x14a>
    } else if (mg_http_match_uri(hm, "/api/logout")) {
 800d31c:	4946      	ldr	r1, [pc, #280]	; (800d438 <fn+0x1b0>)
 800d31e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d320:	f7f8 fab5 	bl	800588e <mg_http_match_uri>
 800d324:	4603      	mov	r3, r0
 800d326:	2b00      	cmp	r3, #0
 800d328:	d003      	beq.n	800d332 <fn+0xaa>
      handle_logout(c);
 800d32a:	68f8      	ldr	r0, [r7, #12]
 800d32c:	f7ff fd34 	bl	800cd98 <handle_logout>
 800d330:	e04f      	b.n	800d3d2 <fn+0x14a>
    } else if (mg_http_match_uri(hm, "/api/debug")) {
 800d332:	4942      	ldr	r1, [pc, #264]	; (800d43c <fn+0x1b4>)
 800d334:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d336:	f7f8 faaa 	bl	800588e <mg_http_match_uri>
 800d33a:	4603      	mov	r3, r0
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d004      	beq.n	800d34a <fn+0xc2>
      handle_debug(c, hm);
 800d340:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d342:	68f8      	ldr	r0, [r7, #12]
 800d344:	f7ff fd5e 	bl	800ce04 <handle_debug>
 800d348:	e043      	b.n	800d3d2 <fn+0x14a>
    } else if (mg_http_match_uri(hm, "/api/stats/get")) {
 800d34a:	493d      	ldr	r1, [pc, #244]	; (800d440 <fn+0x1b8>)
 800d34c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d34e:	f7f8 fa9e 	bl	800588e <mg_http_match_uri>
 800d352:	4603      	mov	r3, r0
 800d354:	2b00      	cmp	r3, #0
 800d356:	d003      	beq.n	800d360 <fn+0xd8>
      handle_stats_get(c);
 800d358:	68f8      	ldr	r0, [r7, #12]
 800d35a:	f7ff fdb9 	bl	800ced0 <handle_stats_get>
 800d35e:	e038      	b.n	800d3d2 <fn+0x14a>
    } else if (mg_http_match_uri(hm, "/api/events/get")) {
 800d360:	4938      	ldr	r1, [pc, #224]	; (800d444 <fn+0x1bc>)
 800d362:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d364:	f7f8 fa93 	bl	800588e <mg_http_match_uri>
 800d368:	4603      	mov	r3, r0
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d004      	beq.n	800d378 <fn+0xf0>
      handle_events_get(c, hm);
 800d36e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d370:	68f8      	ldr	r0, [r7, #12]
 800d372:	f7ff fe6b 	bl	800d04c <handle_events_get>
 800d376:	e02c      	b.n	800d3d2 <fn+0x14a>
    } else if (mg_http_match_uri(hm, "/api/settings/get")) {
 800d378:	4933      	ldr	r1, [pc, #204]	; (800d448 <fn+0x1c0>)
 800d37a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d37c:	f7f8 fa87 	bl	800588e <mg_http_match_uri>
 800d380:	4603      	mov	r3, r0
 800d382:	2b00      	cmp	r3, #0
 800d384:	d003      	beq.n	800d38e <fn+0x106>
      handle_settings_get(c);
 800d386:	68f8      	ldr	r0, [r7, #12]
 800d388:	f7ff ff2c 	bl	800d1e4 <handle_settings_get>
 800d38c:	e021      	b.n	800d3d2 <fn+0x14a>
    } else if (mg_http_match_uri(hm, "/api/settings/set")) {
 800d38e:	492f      	ldr	r1, [pc, #188]	; (800d44c <fn+0x1c4>)
 800d390:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d392:	f7f8 fa7c 	bl	800588e <mg_http_match_uri>
 800d396:	4603      	mov	r3, r0
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d008      	beq.n	800d3ae <fn+0x126>
      handle_settings_set(c, hm->body);
 800d39c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d39e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800d3a2:	e893 0006 	ldmia.w	r3, {r1, r2}
 800d3a6:	68f8      	ldr	r0, [r7, #12]
 800d3a8:	f7ff fe8a 	bl	800d0c0 <handle_settings_set>
 800d3ac:	e011      	b.n	800d3d2 <fn+0x14a>
      memset(&opts, 0, sizeof(opts));
 800d3ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d3b2:	2218      	movs	r2, #24
 800d3b4:	2100      	movs	r1, #0
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f006 f869 	bl	801348e <memset>
      opts.root_dir = "/web_root";
 800d3bc:	4b24      	ldr	r3, [pc, #144]	; (800d450 <fn+0x1c8>)
 800d3be:	633b      	str	r3, [r7, #48]	; 0x30
      opts.fs = &mg_fs_packed;
 800d3c0:	4b24      	ldr	r3, [pc, #144]	; (800d454 <fn+0x1cc>)
 800d3c2:	647b      	str	r3, [r7, #68]	; 0x44
      mg_http_serve_dir(c, ev_data, &opts);
 800d3c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d3c8:	461a      	mov	r2, r3
 800d3ca:	6879      	ldr	r1, [r7, #4]
 800d3cc:	68f8      	ldr	r0, [r7, #12]
 800d3ce:	f7f8 f82f 	bl	8005430 <mg_http_serve_dir>
    MG_DEBUG(("%lu %.*s %.*s -> %.*s", c->id, (int) hm->method.len,
 800d3d2:	4b21      	ldr	r3, [pc, #132]	; (800d458 <fn+0x1d0>)
 800d3d4:	f240 1201 	movw	r2, #257	; 0x101
 800d3d8:	4920      	ldr	r1, [pc, #128]	; (800d45c <fn+0x1d4>)
 800d3da:	2003      	movs	r0, #3
 800d3dc:	f7f9 fdb6 	bl	8006f4c <mg_log_prefix>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d018      	beq.n	800d418 <fn+0x190>
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800d3ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3ec:	685b      	ldr	r3, [r3, #4]
 800d3ee:	461d      	mov	r5, r3
 800d3f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3f2:	6818      	ldr	r0, [r3, #0]
 800d3f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3f6:	68db      	ldr	r3, [r3, #12]
 800d3f8:	461c      	mov	r4, r3
 800d3fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3fc:	689b      	ldr	r3, [r3, #8]
 800d3fe:	68fa      	ldr	r2, [r7, #12]
 800d400:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d402:	3209      	adds	r2, #9
 800d404:	9203      	str	r2, [sp, #12]
 800d406:	2203      	movs	r2, #3
 800d408:	9202      	str	r2, [sp, #8]
 800d40a:	9301      	str	r3, [sp, #4]
 800d40c:	9400      	str	r4, [sp, #0]
 800d40e:	4603      	mov	r3, r0
 800d410:	462a      	mov	r2, r5
 800d412:	4813      	ldr	r0, [pc, #76]	; (800d460 <fn+0x1d8>)
 800d414:	f7f9 fdf4 	bl	8007000 <mg_log>
}
 800d418:	bf00      	nop
 800d41a:	3750      	adds	r7, #80	; 0x50
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bdb0      	pop	{r4, r5, r7, pc}
 800d420:	24000264 	.word	0x24000264
 800d424:	24000268 	.word	0x24000268
 800d428:	08016074 	.word	0x08016074
 800d42c:	0801607c 	.word	0x0801607c
 800d430:	08015dd8 	.word	0x08015dd8
 800d434:	0801608c 	.word	0x0801608c
 800d438:	08016098 	.word	0x08016098
 800d43c:	080160a4 	.word	0x080160a4
 800d440:	080160b0 	.word	0x080160b0
 800d444:	080160c0 	.word	0x080160c0
 800d448:	080160d0 	.word	0x080160d0
 800d44c:	080160e4 	.word	0x080160e4
 800d450:	080160f8 	.word	0x080160f8
 800d454:	24000000 	.word	0x24000000
 800d458:	08016418 	.word	0x08016418
 800d45c:	08015da4 	.word	0x08015da4
 800d460:	08016104 	.word	0x08016104

0800d464 <web_init>:

void web_init(struct mg_mgr *mgr) {
 800d464:	b580      	push	{r7, lr}
 800d466:	b086      	sub	sp, #24
 800d468:	af04      	add	r7, sp, #16
 800d46a:	6078      	str	r0, [r7, #4]
  s_settings.device_name = strdup("My Device");
 800d46c:	480e      	ldr	r0, [pc, #56]	; (800d4a8 <web_init+0x44>)
 800d46e:	f006 f823 	bl	80134b8 <strdup>
 800d472:	4603      	mov	r3, r0
 800d474:	461a      	mov	r2, r3
 800d476:	4b0d      	ldr	r3, [pc, #52]	; (800d4ac <web_init+0x48>)
 800d478:	60da      	str	r2, [r3, #12]

  mg_http_listen(mgr, HTTP_URL, fn, NULL);
 800d47a:	2300      	movs	r3, #0
 800d47c:	4a0c      	ldr	r2, [pc, #48]	; (800d4b0 <web_init+0x4c>)
 800d47e:	490d      	ldr	r1, [pc, #52]	; (800d4b4 <web_init+0x50>)
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f7f8 fd23 	bl	8005ecc <mg_http_listen>
#if MG_ENABLE_MBEDTLS || MG_ENABLE_OPENSSL
  mg_http_listen(mgr, HTTPS_URL, fn, "");
#endif

  // mg_timer_add(c->mgr, 1000, MG_TIMER_REPEAT, timer_mqtt_fn, c->mgr);
  mg_timer_add(mgr, 3600 * 1000, MG_TIMER_RUN_NOW | MG_TIMER_REPEAT,
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	9302      	str	r3, [sp, #8]
 800d48a:	4b0b      	ldr	r3, [pc, #44]	; (800d4b8 <web_init+0x54>)
 800d48c:	9301      	str	r3, [sp, #4]
 800d48e:	2303      	movs	r3, #3
 800d490:	9300      	str	r3, [sp, #0]
 800d492:	4a0a      	ldr	r2, [pc, #40]	; (800d4bc <web_init+0x58>)
 800d494:	f04f 0300 	mov.w	r3, #0
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f7fa fab1 	bl	8007a00 <mg_timer_add>
               timer_sntp_fn, mgr);
}
 800d49e:	bf00      	nop
 800d4a0:	3708      	adds	r7, #8
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}
 800d4a6:	bf00      	nop
 800d4a8:	0801611c 	.word	0x0801611c
 800d4ac:	24000250 	.word	0x24000250
 800d4b0:	0800d289 	.word	0x0800d289
 800d4b4:	08016128 	.word	0x08016128
 800d4b8:	0800cba1 	.word	0x0800cba1
 800d4bc:	0036ee80 	.word	0x0036ee80

0800d4c0 <scmp>:


  {NULL, NULL, 0, 0}
};

static int scmp(const char *a, const char *b) {
 800d4c0:	b480      	push	{r7}
 800d4c2:	b083      	sub	sp, #12
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	6039      	str	r1, [r7, #0]
  while (*a && (*a == *b)) a++, b++;
 800d4ca:	e005      	b.n	800d4d8 <scmp+0x18>
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	3301      	adds	r3, #1
 800d4d0:	607b      	str	r3, [r7, #4]
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	3301      	adds	r3, #1
 800d4d6:	603b      	str	r3, [r7, #0]
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	781b      	ldrb	r3, [r3, #0]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d005      	beq.n	800d4ec <scmp+0x2c>
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	781a      	ldrb	r2, [r3, #0]
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	781b      	ldrb	r3, [r3, #0]
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d0ef      	beq.n	800d4cc <scmp+0xc>
  return *(const unsigned char *) a - *(const unsigned char *) b;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	461a      	mov	r2, r3
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	781b      	ldrb	r3, [r3, #0]
 800d4f6:	1ad3      	subs	r3, r2, r3
}
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	370c      	adds	r7, #12
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d502:	4770      	bx	lr

0800d504 <mg_unlist>:
const char *mg_unlist(size_t no);
const char *mg_unlist(size_t no) {
 800d504:	b480      	push	{r7}
 800d506:	b083      	sub	sp, #12
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
  return packed_files[no].name;
 800d50c:	4906      	ldr	r1, [pc, #24]	; (800d528 <mg_unlist+0x24>)
 800d50e:	687a      	ldr	r2, [r7, #4]
 800d510:	4613      	mov	r3, r2
 800d512:	005b      	lsls	r3, r3, #1
 800d514:	4413      	add	r3, r2
 800d516:	00db      	lsls	r3, r3, #3
 800d518:	440b      	add	r3, r1
 800d51a:	681b      	ldr	r3, [r3, #0]
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	370c      	adds	r7, #12
 800d520:	46bd      	mov	sp, r7
 800d522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d526:	4770      	bx	lr
 800d528:	08016ef8 	.word	0x08016ef8

0800d52c <mg_unpack>:
const char *mg_unpack(const char *path, size_t *size, time_t *mtime);
const char *mg_unpack(const char *name, size_t *size, time_t *mtime) {
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b086      	sub	sp, #24
 800d530:	af00      	add	r7, sp, #0
 800d532:	60f8      	str	r0, [r7, #12]
 800d534:	60b9      	str	r1, [r7, #8]
 800d536:	607a      	str	r2, [r7, #4]
  const struct packed_file *p;
  for (p = packed_files; p->name != NULL; p++) {
 800d538:	4b16      	ldr	r3, [pc, #88]	; (800d594 <mg_unpack+0x68>)
 800d53a:	617b      	str	r3, [r7, #20]
 800d53c:	e020      	b.n	800d580 <mg_unpack+0x54>
    if (scmp(p->name, name) != 0) continue;
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	68f9      	ldr	r1, [r7, #12]
 800d544:	4618      	mov	r0, r3
 800d546:	f7ff ffbb 	bl	800d4c0 <scmp>
 800d54a:	4603      	mov	r3, r0
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d113      	bne.n	800d578 <mg_unpack+0x4c>
    if (size != NULL) *size = p->size - 1;
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d004      	beq.n	800d560 <mg_unpack+0x34>
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	689b      	ldr	r3, [r3, #8]
 800d55a:	1e5a      	subs	r2, r3, #1
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	601a      	str	r2, [r3, #0]
    if (mtime != NULL) *mtime = p->mtime;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d005      	beq.n	800d572 <mg_unpack+0x46>
 800d566:	697b      	ldr	r3, [r7, #20]
 800d568:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d56c:	6879      	ldr	r1, [r7, #4]
 800d56e:	e9c1 2300 	strd	r2, r3, [r1]
    return (const char *) p->data;
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	685b      	ldr	r3, [r3, #4]
 800d576:	e008      	b.n	800d58a <mg_unpack+0x5e>
    if (scmp(p->name, name) != 0) continue;
 800d578:	bf00      	nop
  for (p = packed_files; p->name != NULL; p++) {
 800d57a:	697b      	ldr	r3, [r7, #20]
 800d57c:	3318      	adds	r3, #24
 800d57e:	617b      	str	r3, [r7, #20]
 800d580:	697b      	ldr	r3, [r7, #20]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d1da      	bne.n	800d53e <mg_unpack+0x12>
  }
  return NULL;
 800d588:	2300      	movs	r3, #0
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3718      	adds	r7, #24
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}
 800d592:	bf00      	nop
 800d594:	08016ef8 	.word	0x08016ef8

0800d598 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d598:	b480      	push	{r7}
 800d59a:	b083      	sub	sp, #12
 800d59c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d59e:	4b0a      	ldr	r3, [pc, #40]	; (800d5c8 <HAL_MspInit+0x30>)
 800d5a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d5a4:	4a08      	ldr	r2, [pc, #32]	; (800d5c8 <HAL_MspInit+0x30>)
 800d5a6:	f043 0302 	orr.w	r3, r3, #2
 800d5aa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800d5ae:	4b06      	ldr	r3, [pc, #24]	; (800d5c8 <HAL_MspInit+0x30>)
 800d5b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d5b4:	f003 0302 	and.w	r3, r3, #2
 800d5b8:	607b      	str	r3, [r7, #4]
 800d5ba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d5bc:	bf00      	nop
 800d5be:	370c      	adds	r7, #12
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c6:	4770      	bx	lr
 800d5c8:	58024400 	.word	0x58024400

0800d5cc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b08e      	sub	sp, #56	; 0x38
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d5d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d5d8:	2200      	movs	r2, #0
 800d5da:	601a      	str	r2, [r3, #0]
 800d5dc:	605a      	str	r2, [r3, #4]
 800d5de:	609a      	str	r2, [r3, #8]
 800d5e0:	60da      	str	r2, [r3, #12]
 800d5e2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	4a5d      	ldr	r2, [pc, #372]	; (800d760 <HAL_ETH_MspInit+0x194>)
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	f040 80b3 	bne.w	800d756 <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800d5f0:	4b5c      	ldr	r3, [pc, #368]	; (800d764 <HAL_ETH_MspInit+0x198>)
 800d5f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d5f6:	4a5b      	ldr	r2, [pc, #364]	; (800d764 <HAL_ETH_MspInit+0x198>)
 800d5f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d5fc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800d600:	4b58      	ldr	r3, [pc, #352]	; (800d764 <HAL_ETH_MspInit+0x198>)
 800d602:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d606:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d60a:	623b      	str	r3, [r7, #32]
 800d60c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800d60e:	4b55      	ldr	r3, [pc, #340]	; (800d764 <HAL_ETH_MspInit+0x198>)
 800d610:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d614:	4a53      	ldr	r2, [pc, #332]	; (800d764 <HAL_ETH_MspInit+0x198>)
 800d616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d61a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800d61e:	4b51      	ldr	r3, [pc, #324]	; (800d764 <HAL_ETH_MspInit+0x198>)
 800d620:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d628:	61fb      	str	r3, [r7, #28]
 800d62a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800d62c:	4b4d      	ldr	r3, [pc, #308]	; (800d764 <HAL_ETH_MspInit+0x198>)
 800d62e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d632:	4a4c      	ldr	r2, [pc, #304]	; (800d764 <HAL_ETH_MspInit+0x198>)
 800d634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d638:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800d63c:	4b49      	ldr	r3, [pc, #292]	; (800d764 <HAL_ETH_MspInit+0x198>)
 800d63e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d646:	61bb      	str	r3, [r7, #24]
 800d648:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d64a:	4b46      	ldr	r3, [pc, #280]	; (800d764 <HAL_ETH_MspInit+0x198>)
 800d64c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d650:	4a44      	ldr	r2, [pc, #272]	; (800d764 <HAL_ETH_MspInit+0x198>)
 800d652:	f043 0304 	orr.w	r3, r3, #4
 800d656:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d65a:	4b42      	ldr	r3, [pc, #264]	; (800d764 <HAL_ETH_MspInit+0x198>)
 800d65c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d660:	f003 0304 	and.w	r3, r3, #4
 800d664:	617b      	str	r3, [r7, #20]
 800d666:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d668:	4b3e      	ldr	r3, [pc, #248]	; (800d764 <HAL_ETH_MspInit+0x198>)
 800d66a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d66e:	4a3d      	ldr	r2, [pc, #244]	; (800d764 <HAL_ETH_MspInit+0x198>)
 800d670:	f043 0301 	orr.w	r3, r3, #1
 800d674:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d678:	4b3a      	ldr	r3, [pc, #232]	; (800d764 <HAL_ETH_MspInit+0x198>)
 800d67a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d67e:	f003 0301 	and.w	r3, r3, #1
 800d682:	613b      	str	r3, [r7, #16]
 800d684:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d686:	4b37      	ldr	r3, [pc, #220]	; (800d764 <HAL_ETH_MspInit+0x198>)
 800d688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d68c:	4a35      	ldr	r2, [pc, #212]	; (800d764 <HAL_ETH_MspInit+0x198>)
 800d68e:	f043 0302 	orr.w	r3, r3, #2
 800d692:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d696:	4b33      	ldr	r3, [pc, #204]	; (800d764 <HAL_ETH_MspInit+0x198>)
 800d698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d69c:	f003 0302 	and.w	r3, r3, #2
 800d6a0:	60fb      	str	r3, [r7, #12]
 800d6a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800d6a4:	4b2f      	ldr	r3, [pc, #188]	; (800d764 <HAL_ETH_MspInit+0x198>)
 800d6a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d6aa:	4a2e      	ldr	r2, [pc, #184]	; (800d764 <HAL_ETH_MspInit+0x198>)
 800d6ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d6b4:	4b2b      	ldr	r3, [pc, #172]	; (800d764 <HAL_ETH_MspInit+0x198>)
 800d6b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d6ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6be:	60bb      	str	r3, [r7, #8]
 800d6c0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800d6c2:	2332      	movs	r3, #50	; 0x32
 800d6c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d6c6:	2302      	movs	r3, #2
 800d6c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d6d2:	230b      	movs	r3, #11
 800d6d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d6d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d6da:	4619      	mov	r1, r3
 800d6dc:	4822      	ldr	r0, [pc, #136]	; (800d768 <HAL_ETH_MspInit+0x19c>)
 800d6de:	f001 f857 	bl	800e790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800d6e2:	2386      	movs	r3, #134	; 0x86
 800d6e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d6e6:	2302      	movs	r3, #2
 800d6e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d6f2:	230b      	movs	r3, #11
 800d6f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d6f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d6fa:	4619      	mov	r1, r3
 800d6fc:	481b      	ldr	r0, [pc, #108]	; (800d76c <HAL_ETH_MspInit+0x1a0>)
 800d6fe:	f001 f847 	bl	800e790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800d702:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d706:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d708:	2302      	movs	r3, #2
 800d70a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d70c:	2300      	movs	r3, #0
 800d70e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d710:	2300      	movs	r3, #0
 800d712:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d714:	230b      	movs	r3, #11
 800d716:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800d718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d71c:	4619      	mov	r1, r3
 800d71e:	4814      	ldr	r0, [pc, #80]	; (800d770 <HAL_ETH_MspInit+0x1a4>)
 800d720:	f001 f836 	bl	800e790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800d724:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d728:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d72a:	2302      	movs	r3, #2
 800d72c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d72e:	2300      	movs	r3, #0
 800d730:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d732:	2300      	movs	r3, #0
 800d734:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d736:	230b      	movs	r3, #11
 800d738:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800d73a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d73e:	4619      	mov	r1, r3
 800d740:	480c      	ldr	r0, [pc, #48]	; (800d774 <HAL_ETH_MspInit+0x1a8>)
 800d742:	f001 f825 	bl	800e790 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800d746:	2200      	movs	r2, #0
 800d748:	2100      	movs	r1, #0
 800d74a:	203d      	movs	r0, #61	; 0x3d
 800d74c:	f000 fbc7 	bl	800dede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800d750:	203d      	movs	r0, #61	; 0x3d
 800d752:	f000 fbde 	bl	800df12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800d756:	bf00      	nop
 800d758:	3738      	adds	r7, #56	; 0x38
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}
 800d75e:	bf00      	nop
 800d760:	40028000 	.word	0x40028000
 800d764:	58024400 	.word	0x58024400
 800d768:	58020800 	.word	0x58020800
 800d76c:	58020000 	.word	0x58020000
 800d770:	58020400 	.word	0x58020400
 800d774:	58021800 	.word	0x58021800

0800d778 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b0b2      	sub	sp, #200	; 0xc8
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d780:	f107 0310 	add.w	r3, r7, #16
 800d784:	22b8      	movs	r2, #184	; 0xb8
 800d786:	2100      	movs	r1, #0
 800d788:	4618      	mov	r0, r3
 800d78a:	f005 fe80 	bl	801348e <memset>
  if(hrng->Instance==RNG)
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	4a14      	ldr	r2, [pc, #80]	; (800d7e4 <HAL_RNG_MspInit+0x6c>)
 800d794:	4293      	cmp	r3, r2
 800d796:	d121      	bne.n	800d7dc <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800d798:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800d79c:	f04f 0300 	mov.w	r3, #0
 800d7a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d7aa:	f107 0310 	add.w	r3, r7, #16
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f002 f96a 	bl	800fa88 <HAL_RCCEx_PeriphCLKConfig>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d001      	beq.n	800d7be <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 800d7ba:	f7f3 fd6b 	bl	8001294 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800d7be:	4b0a      	ldr	r3, [pc, #40]	; (800d7e8 <HAL_RNG_MspInit+0x70>)
 800d7c0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800d7c4:	4a08      	ldr	r2, [pc, #32]	; (800d7e8 <HAL_RNG_MspInit+0x70>)
 800d7c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7ca:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800d7ce:	4b06      	ldr	r3, [pc, #24]	; (800d7e8 <HAL_RNG_MspInit+0x70>)
 800d7d0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800d7d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7d8:	60fb      	str	r3, [r7, #12]
 800d7da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800d7dc:	bf00      	nop
 800d7de:	37c8      	adds	r7, #200	; 0xc8
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}
 800d7e4:	48021800 	.word	0x48021800
 800d7e8:	58024400 	.word	0x58024400

0800d7ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b0b8      	sub	sp, #224	; 0xe0
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d7f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	601a      	str	r2, [r3, #0]
 800d7fc:	605a      	str	r2, [r3, #4]
 800d7fe:	609a      	str	r2, [r3, #8]
 800d800:	60da      	str	r2, [r3, #12]
 800d802:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d804:	f107 0310 	add.w	r3, r7, #16
 800d808:	22b8      	movs	r2, #184	; 0xb8
 800d80a:	2100      	movs	r1, #0
 800d80c:	4618      	mov	r0, r3
 800d80e:	f005 fe3e 	bl	801348e <memset>
  if(huart->Instance==USART3)
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	4a27      	ldr	r2, [pc, #156]	; (800d8b4 <HAL_UART_MspInit+0xc8>)
 800d818:	4293      	cmp	r3, r2
 800d81a:	d146      	bne.n	800d8aa <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800d81c:	f04f 0202 	mov.w	r2, #2
 800d820:	f04f 0300 	mov.w	r3, #0
 800d824:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800d828:	2300      	movs	r3, #0
 800d82a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d82e:	f107 0310 	add.w	r3, r7, #16
 800d832:	4618      	mov	r0, r3
 800d834:	f002 f928 	bl	800fa88 <HAL_RCCEx_PeriphCLKConfig>
 800d838:	4603      	mov	r3, r0
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d001      	beq.n	800d842 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800d83e:	f7f3 fd29 	bl	8001294 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800d842:	4b1d      	ldr	r3, [pc, #116]	; (800d8b8 <HAL_UART_MspInit+0xcc>)
 800d844:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d848:	4a1b      	ldr	r2, [pc, #108]	; (800d8b8 <HAL_UART_MspInit+0xcc>)
 800d84a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d84e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800d852:	4b19      	ldr	r3, [pc, #100]	; (800d8b8 <HAL_UART_MspInit+0xcc>)
 800d854:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d858:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d85c:	60fb      	str	r3, [r7, #12]
 800d85e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800d860:	4b15      	ldr	r3, [pc, #84]	; (800d8b8 <HAL_UART_MspInit+0xcc>)
 800d862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d866:	4a14      	ldr	r2, [pc, #80]	; (800d8b8 <HAL_UART_MspInit+0xcc>)
 800d868:	f043 0308 	orr.w	r3, r3, #8
 800d86c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d870:	4b11      	ldr	r3, [pc, #68]	; (800d8b8 <HAL_UART_MspInit+0xcc>)
 800d872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d876:	f003 0308 	and.w	r3, r3, #8
 800d87a:	60bb      	str	r3, [r7, #8]
 800d87c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800d87e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d882:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d886:	2302      	movs	r3, #2
 800d888:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d88c:	2300      	movs	r3, #0
 800d88e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d892:	2300      	movs	r3, #0
 800d894:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800d898:	2307      	movs	r3, #7
 800d89a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d89e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800d8a2:	4619      	mov	r1, r3
 800d8a4:	4805      	ldr	r0, [pc, #20]	; (800d8bc <HAL_UART_MspInit+0xd0>)
 800d8a6:	f000 ff73 	bl	800e790 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800d8aa:	bf00      	nop
 800d8ac:	37e0      	adds	r7, #224	; 0xe0
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	bd80      	pop	{r7, pc}
 800d8b2:	bf00      	nop
 800d8b4:	40004800 	.word	0x40004800
 800d8b8:	58024400 	.word	0x58024400
 800d8bc:	58020c00 	.word	0x58020c00

0800d8c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d8c0:	b480      	push	{r7}
 800d8c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800d8c4:	e7fe      	b.n	800d8c4 <NMI_Handler+0x4>

0800d8c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d8c6:	b480      	push	{r7}
 800d8c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d8ca:	e7fe      	b.n	800d8ca <HardFault_Handler+0x4>

0800d8cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d8cc:	b480      	push	{r7}
 800d8ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d8d0:	e7fe      	b.n	800d8d0 <MemManage_Handler+0x4>

0800d8d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d8d2:	b480      	push	{r7}
 800d8d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d8d6:	e7fe      	b.n	800d8d6 <BusFault_Handler+0x4>

0800d8d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d8d8:	b480      	push	{r7}
 800d8da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d8dc:	e7fe      	b.n	800d8dc <UsageFault_Handler+0x4>

0800d8de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d8de:	b480      	push	{r7}
 800d8e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800d8e2:	bf00      	nop
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ea:	4770      	bx	lr

0800d8ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d8ec:	b480      	push	{r7}
 800d8ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d8f0:	bf00      	nop
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f8:	4770      	bx	lr

0800d8fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d8fa:	b480      	push	{r7}
 800d8fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d8fe:	bf00      	nop
 800d900:	46bd      	mov	sp, r7
 800d902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d906:	4770      	bx	lr

0800d908 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d90c:	f000 f9d8 	bl	800dcc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d910:	bf00      	nop
 800d912:	bd80      	pop	{r7, pc}

0800d914 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800d914:	b480      	push	{r7}
 800d916:	af00      	add	r7, sp, #0
  return 1;
 800d918:	2301      	movs	r3, #1
}
 800d91a:	4618      	mov	r0, r3
 800d91c:	46bd      	mov	sp, r7
 800d91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d922:	4770      	bx	lr

0800d924 <_kill>:

int _kill(int pid, int sig)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b082      	sub	sp, #8
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800d92e:	f005 fe61 	bl	80135f4 <__errno>
 800d932:	4603      	mov	r3, r0
 800d934:	2216      	movs	r2, #22
 800d936:	601a      	str	r2, [r3, #0]
  return -1;
 800d938:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	3708      	adds	r7, #8
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}

0800d944 <_exit>:

void _exit (int status)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b082      	sub	sp, #8
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800d94c:	f04f 31ff 	mov.w	r1, #4294967295
 800d950:	6878      	ldr	r0, [r7, #4]
 800d952:	f7ff ffe7 	bl	800d924 <_kill>
  while (1) {}    /* Make sure we hang here */
 800d956:	e7fe      	b.n	800d956 <_exit+0x12>

0800d958 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b086      	sub	sp, #24
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	60f8      	str	r0, [r7, #12]
 800d960:	60b9      	str	r1, [r7, #8]
 800d962:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d964:	2300      	movs	r3, #0
 800d966:	617b      	str	r3, [r7, #20]
 800d968:	e00a      	b.n	800d980 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800d96a:	f3af 8000 	nop.w
 800d96e:	4601      	mov	r1, r0
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	1c5a      	adds	r2, r3, #1
 800d974:	60ba      	str	r2, [r7, #8]
 800d976:	b2ca      	uxtb	r2, r1
 800d978:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	3301      	adds	r3, #1
 800d97e:	617b      	str	r3, [r7, #20]
 800d980:	697a      	ldr	r2, [r7, #20]
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	429a      	cmp	r2, r3
 800d986:	dbf0      	blt.n	800d96a <_read+0x12>
  }

  return len;
 800d988:	687b      	ldr	r3, [r7, #4]
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	3718      	adds	r7, #24
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}
	...

0800d994 <_write>:
  if (file == 1) uart_write_buf(USART1, ptr, len);
  return len;
}
#else
__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b084      	sub	sp, #16
 800d998:	af00      	add	r7, sp, #0
 800d99a:	60f8      	str	r0, [r7, #12]
 800d99c:	60b9      	str	r1, [r7, #8]
 800d99e:	607a      	str	r2, [r7, #4]
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	extern UART_HandleTypeDef huart3;
	if (file == 1) HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 1000);
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	2b01      	cmp	r3, #1
 800d9a4:	d107      	bne.n	800d9b6 <_write+0x22>
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	b29a      	uxth	r2, r3
 800d9aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d9ae:	68b9      	ldr	r1, [r7, #8]
 800d9b0:	4803      	ldr	r0, [pc, #12]	; (800d9c0 <_write+0x2c>)
 800d9b2:	f004 f829 	bl	8011a08 <HAL_UART_Transmit>
  return len;
 800d9b6:	687b      	ldr	r3, [r7, #4]
}
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	3710      	adds	r7, #16
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd80      	pop	{r7, pc}
 800d9c0:	240004e0 	.word	0x240004e0

0800d9c4 <_close>:
#endif

int _close(int file)
{
 800d9c4:	b480      	push	{r7}
 800d9c6:	b083      	sub	sp, #12
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800d9cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	370c      	adds	r7, #12
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9da:	4770      	bx	lr

0800d9dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 800d9dc:	b480      	push	{r7}
 800d9de:	b083      	sub	sp, #12
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d9ec:	605a      	str	r2, [r3, #4]
  return 0;
 800d9ee:	2300      	movs	r3, #0
}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	370c      	adds	r7, #12
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fa:	4770      	bx	lr

0800d9fc <_isatty>:

int _isatty(int file)
{
 800d9fc:	b480      	push	{r7}
 800d9fe:	b083      	sub	sp, #12
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800da04:	2301      	movs	r3, #1
}
 800da06:	4618      	mov	r0, r3
 800da08:	370c      	adds	r7, #12
 800da0a:	46bd      	mov	sp, r7
 800da0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da10:	4770      	bx	lr

0800da12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800da12:	b480      	push	{r7}
 800da14:	b085      	sub	sp, #20
 800da16:	af00      	add	r7, sp, #0
 800da18:	60f8      	str	r0, [r7, #12]
 800da1a:	60b9      	str	r1, [r7, #8]
 800da1c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800da1e:	2300      	movs	r3, #0
}
 800da20:	4618      	mov	r0, r3
 800da22:	3714      	adds	r7, #20
 800da24:	46bd      	mov	sp, r7
 800da26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2a:	4770      	bx	lr

0800da2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b086      	sub	sp, #24
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800da34:	4a14      	ldr	r2, [pc, #80]	; (800da88 <_sbrk+0x5c>)
 800da36:	4b15      	ldr	r3, [pc, #84]	; (800da8c <_sbrk+0x60>)
 800da38:	1ad3      	subs	r3, r2, r3
 800da3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800da3c:	697b      	ldr	r3, [r7, #20]
 800da3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800da40:	4b13      	ldr	r3, [pc, #76]	; (800da90 <_sbrk+0x64>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d102      	bne.n	800da4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800da48:	4b11      	ldr	r3, [pc, #68]	; (800da90 <_sbrk+0x64>)
 800da4a:	4a12      	ldr	r2, [pc, #72]	; (800da94 <_sbrk+0x68>)
 800da4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800da4e:	4b10      	ldr	r3, [pc, #64]	; (800da90 <_sbrk+0x64>)
 800da50:	681a      	ldr	r2, [r3, #0]
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	4413      	add	r3, r2
 800da56:	693a      	ldr	r2, [r7, #16]
 800da58:	429a      	cmp	r2, r3
 800da5a:	d207      	bcs.n	800da6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800da5c:	f005 fdca 	bl	80135f4 <__errno>
 800da60:	4603      	mov	r3, r0
 800da62:	220c      	movs	r2, #12
 800da64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800da66:	f04f 33ff 	mov.w	r3, #4294967295
 800da6a:	e009      	b.n	800da80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800da6c:	4b08      	ldr	r3, [pc, #32]	; (800da90 <_sbrk+0x64>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800da72:	4b07      	ldr	r3, [pc, #28]	; (800da90 <_sbrk+0x64>)
 800da74:	681a      	ldr	r2, [r3, #0]
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	4413      	add	r3, r2
 800da7a:	4a05      	ldr	r2, [pc, #20]	; (800da90 <_sbrk+0x64>)
 800da7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800da7e:	68fb      	ldr	r3, [r7, #12]
}
 800da80:	4618      	mov	r0, r3
 800da82:	3718      	adds	r7, #24
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}
 800da88:	24050000 	.word	0x24050000
 800da8c:	00000400 	.word	0x00000400
 800da90:	24003638 	.word	0x24003638
 800da94:	24003790 	.word	0x24003790

0800da98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800da98:	b480      	push	{r7}
 800da9a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800da9c:	4b32      	ldr	r3, [pc, #200]	; (800db68 <SystemInit+0xd0>)
 800da9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800daa2:	4a31      	ldr	r2, [pc, #196]	; (800db68 <SystemInit+0xd0>)
 800daa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800daa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800daac:	4b2f      	ldr	r3, [pc, #188]	; (800db6c <SystemInit+0xd4>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	f003 030f 	and.w	r3, r3, #15
 800dab4:	2b06      	cmp	r3, #6
 800dab6:	d807      	bhi.n	800dac8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800dab8:	4b2c      	ldr	r3, [pc, #176]	; (800db6c <SystemInit+0xd4>)
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	f023 030f 	bic.w	r3, r3, #15
 800dac0:	4a2a      	ldr	r2, [pc, #168]	; (800db6c <SystemInit+0xd4>)
 800dac2:	f043 0307 	orr.w	r3, r3, #7
 800dac6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800dac8:	4b29      	ldr	r3, [pc, #164]	; (800db70 <SystemInit+0xd8>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	4a28      	ldr	r2, [pc, #160]	; (800db70 <SystemInit+0xd8>)
 800dace:	f043 0301 	orr.w	r3, r3, #1
 800dad2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800dad4:	4b26      	ldr	r3, [pc, #152]	; (800db70 <SystemInit+0xd8>)
 800dad6:	2200      	movs	r2, #0
 800dad8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800dada:	4b25      	ldr	r3, [pc, #148]	; (800db70 <SystemInit+0xd8>)
 800dadc:	681a      	ldr	r2, [r3, #0]
 800dade:	4924      	ldr	r1, [pc, #144]	; (800db70 <SystemInit+0xd8>)
 800dae0:	4b24      	ldr	r3, [pc, #144]	; (800db74 <SystemInit+0xdc>)
 800dae2:	4013      	ands	r3, r2
 800dae4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800dae6:	4b21      	ldr	r3, [pc, #132]	; (800db6c <SystemInit+0xd4>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	f003 0308 	and.w	r3, r3, #8
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d007      	beq.n	800db02 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800daf2:	4b1e      	ldr	r3, [pc, #120]	; (800db6c <SystemInit+0xd4>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	f023 030f 	bic.w	r3, r3, #15
 800dafa:	4a1c      	ldr	r2, [pc, #112]	; (800db6c <SystemInit+0xd4>)
 800dafc:	f043 0307 	orr.w	r3, r3, #7
 800db00:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800db02:	4b1b      	ldr	r3, [pc, #108]	; (800db70 <SystemInit+0xd8>)
 800db04:	2200      	movs	r2, #0
 800db06:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800db08:	4b19      	ldr	r3, [pc, #100]	; (800db70 <SystemInit+0xd8>)
 800db0a:	2200      	movs	r2, #0
 800db0c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800db0e:	4b18      	ldr	r3, [pc, #96]	; (800db70 <SystemInit+0xd8>)
 800db10:	2200      	movs	r2, #0
 800db12:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800db14:	4b16      	ldr	r3, [pc, #88]	; (800db70 <SystemInit+0xd8>)
 800db16:	4a18      	ldr	r2, [pc, #96]	; (800db78 <SystemInit+0xe0>)
 800db18:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800db1a:	4b15      	ldr	r3, [pc, #84]	; (800db70 <SystemInit+0xd8>)
 800db1c:	4a17      	ldr	r2, [pc, #92]	; (800db7c <SystemInit+0xe4>)
 800db1e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800db20:	4b13      	ldr	r3, [pc, #76]	; (800db70 <SystemInit+0xd8>)
 800db22:	4a17      	ldr	r2, [pc, #92]	; (800db80 <SystemInit+0xe8>)
 800db24:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800db26:	4b12      	ldr	r3, [pc, #72]	; (800db70 <SystemInit+0xd8>)
 800db28:	2200      	movs	r2, #0
 800db2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800db2c:	4b10      	ldr	r3, [pc, #64]	; (800db70 <SystemInit+0xd8>)
 800db2e:	4a14      	ldr	r2, [pc, #80]	; (800db80 <SystemInit+0xe8>)
 800db30:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800db32:	4b0f      	ldr	r3, [pc, #60]	; (800db70 <SystemInit+0xd8>)
 800db34:	2200      	movs	r2, #0
 800db36:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800db38:	4b0d      	ldr	r3, [pc, #52]	; (800db70 <SystemInit+0xd8>)
 800db3a:	4a11      	ldr	r2, [pc, #68]	; (800db80 <SystemInit+0xe8>)
 800db3c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800db3e:	4b0c      	ldr	r3, [pc, #48]	; (800db70 <SystemInit+0xd8>)
 800db40:	2200      	movs	r2, #0
 800db42:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800db44:	4b0a      	ldr	r3, [pc, #40]	; (800db70 <SystemInit+0xd8>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	4a09      	ldr	r2, [pc, #36]	; (800db70 <SystemInit+0xd8>)
 800db4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800db4e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800db50:	4b07      	ldr	r3, [pc, #28]	; (800db70 <SystemInit+0xd8>)
 800db52:	2200      	movs	r2, #0
 800db54:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800db56:	4b0b      	ldr	r3, [pc, #44]	; (800db84 <SystemInit+0xec>)
 800db58:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800db5c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800db5e:	bf00      	nop
 800db60:	46bd      	mov	sp, r7
 800db62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db66:	4770      	bx	lr
 800db68:	e000ed00 	.word	0xe000ed00
 800db6c:	52002000 	.word	0x52002000
 800db70:	58024400 	.word	0x58024400
 800db74:	eaf6ed7f 	.word	0xeaf6ed7f
 800db78:	02020200 	.word	0x02020200
 800db7c:	01ff0000 	.word	0x01ff0000
 800db80:	01010280 	.word	0x01010280
 800db84:	52004000 	.word	0x52004000

0800db88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800db88:	f8df d034 	ldr.w	sp, [pc, #52]	; 800dbc0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800db8c:	f7ff ff84 	bl	800da98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800db90:	480c      	ldr	r0, [pc, #48]	; (800dbc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800db92:	490d      	ldr	r1, [pc, #52]	; (800dbc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800db94:	4a0d      	ldr	r2, [pc, #52]	; (800dbcc <LoopFillZerobss+0x1a>)
  movs r3, #0
 800db96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800db98:	e002      	b.n	800dba0 <LoopCopyDataInit>

0800db9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800db9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800db9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800db9e:	3304      	adds	r3, #4

0800dba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800dba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800dba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800dba4:	d3f9      	bcc.n	800db9a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800dba6:	4a0a      	ldr	r2, [pc, #40]	; (800dbd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800dba8:	4c0a      	ldr	r4, [pc, #40]	; (800dbd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800dbaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 800dbac:	e001      	b.n	800dbb2 <LoopFillZerobss>

0800dbae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800dbae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800dbb0:	3204      	adds	r2, #4

0800dbb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800dbb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800dbb4:	d3fb      	bcc.n	800dbae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800dbb6:	f005 fd23 	bl	8013600 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800dbba:	f7f3 f875 	bl	8000ca8 <main>
  bx  lr
 800dbbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800dbc0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800dbc4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800dbc8:	24000308 	.word	0x24000308
  ldr r2, =_sidata
 800dbcc:	08017150 	.word	0x08017150
  ldr r2, =_sbss
 800dbd0:	240003c8 	.word	0x240003c8
  ldr r4, =_ebss
 800dbd4:	2400378c 	.word	0x2400378c

0800dbd8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800dbd8:	e7fe      	b.n	800dbd8 <ADC3_IRQHandler>
	...

0800dbdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b082      	sub	sp, #8
 800dbe0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800dbe2:	2003      	movs	r0, #3
 800dbe4:	f000 f970 	bl	800dec8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800dbe8:	f001 fd78 	bl	800f6dc <HAL_RCC_GetSysClockFreq>
 800dbec:	4602      	mov	r2, r0
 800dbee:	4b15      	ldr	r3, [pc, #84]	; (800dc44 <HAL_Init+0x68>)
 800dbf0:	699b      	ldr	r3, [r3, #24]
 800dbf2:	0a1b      	lsrs	r3, r3, #8
 800dbf4:	f003 030f 	and.w	r3, r3, #15
 800dbf8:	4913      	ldr	r1, [pc, #76]	; (800dc48 <HAL_Init+0x6c>)
 800dbfa:	5ccb      	ldrb	r3, [r1, r3]
 800dbfc:	f003 031f 	and.w	r3, r3, #31
 800dc00:	fa22 f303 	lsr.w	r3, r2, r3
 800dc04:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800dc06:	4b0f      	ldr	r3, [pc, #60]	; (800dc44 <HAL_Init+0x68>)
 800dc08:	699b      	ldr	r3, [r3, #24]
 800dc0a:	f003 030f 	and.w	r3, r3, #15
 800dc0e:	4a0e      	ldr	r2, [pc, #56]	; (800dc48 <HAL_Init+0x6c>)
 800dc10:	5cd3      	ldrb	r3, [r2, r3]
 800dc12:	f003 031f 	and.w	r3, r3, #31
 800dc16:	687a      	ldr	r2, [r7, #4]
 800dc18:	fa22 f303 	lsr.w	r3, r2, r3
 800dc1c:	4a0b      	ldr	r2, [pc, #44]	; (800dc4c <HAL_Init+0x70>)
 800dc1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800dc20:	4a0b      	ldr	r2, [pc, #44]	; (800dc50 <HAL_Init+0x74>)
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800dc26:	2000      	movs	r0, #0
 800dc28:	f000 f814 	bl	800dc54 <HAL_InitTick>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d001      	beq.n	800dc36 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800dc32:	2301      	movs	r3, #1
 800dc34:	e002      	b.n	800dc3c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800dc36:	f7ff fcaf 	bl	800d598 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800dc3a:	2300      	movs	r3, #0
}
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	3708      	adds	r7, #8
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}
 800dc44:	58024400 	.word	0x58024400
 800dc48:	08016f28 	.word	0x08016f28
 800dc4c:	240002a0 	.word	0x240002a0
 800dc50:	2400029c 	.word	0x2400029c

0800dc54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b082      	sub	sp, #8
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800dc5c:	4b15      	ldr	r3, [pc, #84]	; (800dcb4 <HAL_InitTick+0x60>)
 800dc5e:	781b      	ldrb	r3, [r3, #0]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d101      	bne.n	800dc68 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800dc64:	2301      	movs	r3, #1
 800dc66:	e021      	b.n	800dcac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800dc68:	4b13      	ldr	r3, [pc, #76]	; (800dcb8 <HAL_InitTick+0x64>)
 800dc6a:	681a      	ldr	r2, [r3, #0]
 800dc6c:	4b11      	ldr	r3, [pc, #68]	; (800dcb4 <HAL_InitTick+0x60>)
 800dc6e:	781b      	ldrb	r3, [r3, #0]
 800dc70:	4619      	mov	r1, r3
 800dc72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dc76:	fbb3 f3f1 	udiv	r3, r3, r1
 800dc7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f000 f955 	bl	800df2e <HAL_SYSTICK_Config>
 800dc84:	4603      	mov	r3, r0
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d001      	beq.n	800dc8e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800dc8a:	2301      	movs	r3, #1
 800dc8c:	e00e      	b.n	800dcac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2b0f      	cmp	r3, #15
 800dc92:	d80a      	bhi.n	800dcaa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800dc94:	2200      	movs	r2, #0
 800dc96:	6879      	ldr	r1, [r7, #4]
 800dc98:	f04f 30ff 	mov.w	r0, #4294967295
 800dc9c:	f000 f91f 	bl	800dede <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800dca0:	4a06      	ldr	r2, [pc, #24]	; (800dcbc <HAL_InitTick+0x68>)
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800dca6:	2300      	movs	r3, #0
 800dca8:	e000      	b.n	800dcac <HAL_InitTick+0x58>
    return HAL_ERROR;
 800dcaa:	2301      	movs	r3, #1
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	3708      	adds	r7, #8
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}
 800dcb4:	240002a8 	.word	0x240002a8
 800dcb8:	2400029c 	.word	0x2400029c
 800dcbc:	240002a4 	.word	0x240002a4

0800dcc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800dcc0:	b480      	push	{r7}
 800dcc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800dcc4:	4b06      	ldr	r3, [pc, #24]	; (800dce0 <HAL_IncTick+0x20>)
 800dcc6:	781b      	ldrb	r3, [r3, #0]
 800dcc8:	461a      	mov	r2, r3
 800dcca:	4b06      	ldr	r3, [pc, #24]	; (800dce4 <HAL_IncTick+0x24>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	4413      	add	r3, r2
 800dcd0:	4a04      	ldr	r2, [pc, #16]	; (800dce4 <HAL_IncTick+0x24>)
 800dcd2:	6013      	str	r3, [r2, #0]
}
 800dcd4:	bf00      	nop
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcdc:	4770      	bx	lr
 800dcde:	bf00      	nop
 800dce0:	240002a8 	.word	0x240002a8
 800dce4:	2400363c 	.word	0x2400363c

0800dce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800dce8:	b480      	push	{r7}
 800dcea:	af00      	add	r7, sp, #0
  return uwTick;
 800dcec:	4b03      	ldr	r3, [pc, #12]	; (800dcfc <HAL_GetTick+0x14>)
 800dcee:	681b      	ldr	r3, [r3, #0]
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf8:	4770      	bx	lr
 800dcfa:	bf00      	nop
 800dcfc:	2400363c 	.word	0x2400363c

0800dd00 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800dd00:	b480      	push	{r7}
 800dd02:	b083      	sub	sp, #12
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800dd08:	4b06      	ldr	r3, [pc, #24]	; (800dd24 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800dd0a:	685b      	ldr	r3, [r3, #4]
 800dd0c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800dd10:	4904      	ldr	r1, [pc, #16]	; (800dd24 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	4313      	orrs	r3, r2
 800dd16:	604b      	str	r3, [r1, #4]
}
 800dd18:	bf00      	nop
 800dd1a:	370c      	adds	r7, #12
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd22:	4770      	bx	lr
 800dd24:	58000400 	.word	0x58000400

0800dd28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800dd28:	b480      	push	{r7}
 800dd2a:	b085      	sub	sp, #20
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f003 0307 	and.w	r3, r3, #7
 800dd36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800dd38:	4b0b      	ldr	r3, [pc, #44]	; (800dd68 <__NVIC_SetPriorityGrouping+0x40>)
 800dd3a:	68db      	ldr	r3, [r3, #12]
 800dd3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800dd3e:	68ba      	ldr	r2, [r7, #8]
 800dd40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800dd44:	4013      	ands	r3, r2
 800dd46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800dd50:	4b06      	ldr	r3, [pc, #24]	; (800dd6c <__NVIC_SetPriorityGrouping+0x44>)
 800dd52:	4313      	orrs	r3, r2
 800dd54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800dd56:	4a04      	ldr	r2, [pc, #16]	; (800dd68 <__NVIC_SetPriorityGrouping+0x40>)
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	60d3      	str	r3, [r2, #12]
}
 800dd5c:	bf00      	nop
 800dd5e:	3714      	adds	r7, #20
 800dd60:	46bd      	mov	sp, r7
 800dd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd66:	4770      	bx	lr
 800dd68:	e000ed00 	.word	0xe000ed00
 800dd6c:	05fa0000 	.word	0x05fa0000

0800dd70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800dd70:	b480      	push	{r7}
 800dd72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800dd74:	4b04      	ldr	r3, [pc, #16]	; (800dd88 <__NVIC_GetPriorityGrouping+0x18>)
 800dd76:	68db      	ldr	r3, [r3, #12]
 800dd78:	0a1b      	lsrs	r3, r3, #8
 800dd7a:	f003 0307 	and.w	r3, r3, #7
}
 800dd7e:	4618      	mov	r0, r3
 800dd80:	46bd      	mov	sp, r7
 800dd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd86:	4770      	bx	lr
 800dd88:	e000ed00 	.word	0xe000ed00

0800dd8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800dd8c:	b480      	push	{r7}
 800dd8e:	b083      	sub	sp, #12
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	4603      	mov	r3, r0
 800dd94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800dd96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	db0b      	blt.n	800ddb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800dd9e:	88fb      	ldrh	r3, [r7, #6]
 800dda0:	f003 021f 	and.w	r2, r3, #31
 800dda4:	4907      	ldr	r1, [pc, #28]	; (800ddc4 <__NVIC_EnableIRQ+0x38>)
 800dda6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ddaa:	095b      	lsrs	r3, r3, #5
 800ddac:	2001      	movs	r0, #1
 800ddae:	fa00 f202 	lsl.w	r2, r0, r2
 800ddb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800ddb6:	bf00      	nop
 800ddb8:	370c      	adds	r7, #12
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc0:	4770      	bx	lr
 800ddc2:	bf00      	nop
 800ddc4:	e000e100 	.word	0xe000e100

0800ddc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b083      	sub	sp, #12
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	4603      	mov	r3, r0
 800ddd0:	6039      	str	r1, [r7, #0]
 800ddd2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800ddd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	db0a      	blt.n	800ddf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	b2da      	uxtb	r2, r3
 800dde0:	490c      	ldr	r1, [pc, #48]	; (800de14 <__NVIC_SetPriority+0x4c>)
 800dde2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dde6:	0112      	lsls	r2, r2, #4
 800dde8:	b2d2      	uxtb	r2, r2
 800ddea:	440b      	add	r3, r1
 800ddec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800ddf0:	e00a      	b.n	800de08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	b2da      	uxtb	r2, r3
 800ddf6:	4908      	ldr	r1, [pc, #32]	; (800de18 <__NVIC_SetPriority+0x50>)
 800ddf8:	88fb      	ldrh	r3, [r7, #6]
 800ddfa:	f003 030f 	and.w	r3, r3, #15
 800ddfe:	3b04      	subs	r3, #4
 800de00:	0112      	lsls	r2, r2, #4
 800de02:	b2d2      	uxtb	r2, r2
 800de04:	440b      	add	r3, r1
 800de06:	761a      	strb	r2, [r3, #24]
}
 800de08:	bf00      	nop
 800de0a:	370c      	adds	r7, #12
 800de0c:	46bd      	mov	sp, r7
 800de0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de12:	4770      	bx	lr
 800de14:	e000e100 	.word	0xe000e100
 800de18:	e000ed00 	.word	0xe000ed00

0800de1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800de1c:	b480      	push	{r7}
 800de1e:	b089      	sub	sp, #36	; 0x24
 800de20:	af00      	add	r7, sp, #0
 800de22:	60f8      	str	r0, [r7, #12]
 800de24:	60b9      	str	r1, [r7, #8]
 800de26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	f003 0307 	and.w	r3, r3, #7
 800de2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800de30:	69fb      	ldr	r3, [r7, #28]
 800de32:	f1c3 0307 	rsb	r3, r3, #7
 800de36:	2b04      	cmp	r3, #4
 800de38:	bf28      	it	cs
 800de3a:	2304      	movcs	r3, #4
 800de3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800de3e:	69fb      	ldr	r3, [r7, #28]
 800de40:	3304      	adds	r3, #4
 800de42:	2b06      	cmp	r3, #6
 800de44:	d902      	bls.n	800de4c <NVIC_EncodePriority+0x30>
 800de46:	69fb      	ldr	r3, [r7, #28]
 800de48:	3b03      	subs	r3, #3
 800de4a:	e000      	b.n	800de4e <NVIC_EncodePriority+0x32>
 800de4c:	2300      	movs	r3, #0
 800de4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800de50:	f04f 32ff 	mov.w	r2, #4294967295
 800de54:	69bb      	ldr	r3, [r7, #24]
 800de56:	fa02 f303 	lsl.w	r3, r2, r3
 800de5a:	43da      	mvns	r2, r3
 800de5c:	68bb      	ldr	r3, [r7, #8]
 800de5e:	401a      	ands	r2, r3
 800de60:	697b      	ldr	r3, [r7, #20]
 800de62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800de64:	f04f 31ff 	mov.w	r1, #4294967295
 800de68:	697b      	ldr	r3, [r7, #20]
 800de6a:	fa01 f303 	lsl.w	r3, r1, r3
 800de6e:	43d9      	mvns	r1, r3
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800de74:	4313      	orrs	r3, r2
         );
}
 800de76:	4618      	mov	r0, r3
 800de78:	3724      	adds	r7, #36	; 0x24
 800de7a:	46bd      	mov	sp, r7
 800de7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de80:	4770      	bx	lr
	...

0800de84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b082      	sub	sp, #8
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	3b01      	subs	r3, #1
 800de90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800de94:	d301      	bcc.n	800de9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800de96:	2301      	movs	r3, #1
 800de98:	e00f      	b.n	800deba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800de9a:	4a0a      	ldr	r2, [pc, #40]	; (800dec4 <SysTick_Config+0x40>)
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	3b01      	subs	r3, #1
 800dea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800dea2:	210f      	movs	r1, #15
 800dea4:	f04f 30ff 	mov.w	r0, #4294967295
 800dea8:	f7ff ff8e 	bl	800ddc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800deac:	4b05      	ldr	r3, [pc, #20]	; (800dec4 <SysTick_Config+0x40>)
 800deae:	2200      	movs	r2, #0
 800deb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800deb2:	4b04      	ldr	r3, [pc, #16]	; (800dec4 <SysTick_Config+0x40>)
 800deb4:	2207      	movs	r2, #7
 800deb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800deb8:	2300      	movs	r3, #0
}
 800deba:	4618      	mov	r0, r3
 800debc:	3708      	adds	r7, #8
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}
 800dec2:	bf00      	nop
 800dec4:	e000e010 	.word	0xe000e010

0800dec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b082      	sub	sp, #8
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	f7ff ff29 	bl	800dd28 <__NVIC_SetPriorityGrouping>
}
 800ded6:	bf00      	nop
 800ded8:	3708      	adds	r7, #8
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}

0800dede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800dede:	b580      	push	{r7, lr}
 800dee0:	b086      	sub	sp, #24
 800dee2:	af00      	add	r7, sp, #0
 800dee4:	4603      	mov	r3, r0
 800dee6:	60b9      	str	r1, [r7, #8]
 800dee8:	607a      	str	r2, [r7, #4]
 800deea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800deec:	f7ff ff40 	bl	800dd70 <__NVIC_GetPriorityGrouping>
 800def0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800def2:	687a      	ldr	r2, [r7, #4]
 800def4:	68b9      	ldr	r1, [r7, #8]
 800def6:	6978      	ldr	r0, [r7, #20]
 800def8:	f7ff ff90 	bl	800de1c <NVIC_EncodePriority>
 800defc:	4602      	mov	r2, r0
 800defe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800df02:	4611      	mov	r1, r2
 800df04:	4618      	mov	r0, r3
 800df06:	f7ff ff5f 	bl	800ddc8 <__NVIC_SetPriority>
}
 800df0a:	bf00      	nop
 800df0c:	3718      	adds	r7, #24
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}

0800df12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800df12:	b580      	push	{r7, lr}
 800df14:	b082      	sub	sp, #8
 800df16:	af00      	add	r7, sp, #0
 800df18:	4603      	mov	r3, r0
 800df1a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800df1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800df20:	4618      	mov	r0, r3
 800df22:	f7ff ff33 	bl	800dd8c <__NVIC_EnableIRQ>
}
 800df26:	bf00      	nop
 800df28:	3708      	adds	r7, #8
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd80      	pop	{r7, pc}

0800df2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800df2e:	b580      	push	{r7, lr}
 800df30:	b082      	sub	sp, #8
 800df32:	af00      	add	r7, sp, #0
 800df34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	f7ff ffa4 	bl	800de84 <SysTick_Config>
 800df3c:	4603      	mov	r3, r0
}
 800df3e:	4618      	mov	r0, r3
 800df40:	3708      	adds	r7, #8
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}
	...

0800df48 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b084      	sub	sp, #16
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d101      	bne.n	800df5a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800df56:	2301      	movs	r3, #1
 800df58:	e0cf      	b.n	800e0fa <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df60:	2b00      	cmp	r3, #0
 800df62:	d106      	bne.n	800df72 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2223      	movs	r2, #35	; 0x23
 800df68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800df6c:	6878      	ldr	r0, [r7, #4]
 800df6e:	f7ff fb2d 	bl	800d5cc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800df72:	4b64      	ldr	r3, [pc, #400]	; (800e104 <HAL_ETH_Init+0x1bc>)
 800df74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800df78:	4a62      	ldr	r2, [pc, #392]	; (800e104 <HAL_ETH_Init+0x1bc>)
 800df7a:	f043 0302 	orr.w	r3, r3, #2
 800df7e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800df82:	4b60      	ldr	r3, [pc, #384]	; (800e104 <HAL_ETH_Init+0x1bc>)
 800df84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800df88:	f003 0302 	and.w	r3, r3, #2
 800df8c:	60bb      	str	r3, [r7, #8]
 800df8e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	7a1b      	ldrb	r3, [r3, #8]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d103      	bne.n	800dfa0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800df98:	2000      	movs	r0, #0
 800df9a:	f7ff feb1 	bl	800dd00 <HAL_SYSCFG_ETHInterfaceSelect>
 800df9e:	e003      	b.n	800dfa8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800dfa0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800dfa4:	f7ff feac 	bl	800dd00 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800dfa8:	4b57      	ldr	r3, [pc, #348]	; (800e108 <HAL_ETH_Init+0x1c0>)
 800dfaa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	687a      	ldr	r2, [r7, #4]
 800dfb8:	6812      	ldr	r2, [r2, #0]
 800dfba:	f043 0301 	orr.w	r3, r3, #1
 800dfbe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800dfc2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800dfc4:	f7ff fe90 	bl	800dce8 <HAL_GetTick>
 800dfc8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800dfca:	e011      	b.n	800dff0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800dfcc:	f7ff fe8c 	bl	800dce8 <HAL_GetTick>
 800dfd0:	4602      	mov	r2, r0
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	1ad3      	subs	r3, r2, r3
 800dfd6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800dfda:	d909      	bls.n	800dff0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2204      	movs	r2, #4
 800dfe0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	22e0      	movs	r2, #224	; 0xe0
 800dfe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800dfec:	2301      	movs	r3, #1
 800dfee:	e084      	b.n	800e0fa <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	f003 0301 	and.w	r3, r3, #1
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d1e4      	bne.n	800dfcc <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f000 f886 	bl	800e114 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800e008:	f001 fce2 	bl	800f9d0 <HAL_RCC_GetHCLKFreq>
 800e00c:	4603      	mov	r3, r0
 800e00e:	4a3f      	ldr	r2, [pc, #252]	; (800e10c <HAL_ETH_Init+0x1c4>)
 800e010:	fba2 2303 	umull	r2, r3, r2, r3
 800e014:	0c9a      	lsrs	r2, r3, #18
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	3a01      	subs	r2, #1
 800e01c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f000 fa71 	bl	800e508 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e02e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800e032:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800e036:	687a      	ldr	r2, [r7, #4]
 800e038:	6812      	ldr	r2, [r2, #0]
 800e03a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e03e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800e042:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	695b      	ldr	r3, [r3, #20]
 800e04a:	f003 0303 	and.w	r3, r3, #3
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d009      	beq.n	800e066 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2201      	movs	r2, #1
 800e056:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	22e0      	movs	r2, #224	; 0xe0
 800e05e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800e062:	2301      	movs	r3, #1
 800e064:	e049      	b.n	800e0fa <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e06e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800e072:	4b27      	ldr	r3, [pc, #156]	; (800e110 <HAL_ETH_Init+0x1c8>)
 800e074:	4013      	ands	r3, r2
 800e076:	687a      	ldr	r2, [r7, #4]
 800e078:	6952      	ldr	r2, [r2, #20]
 800e07a:	0051      	lsls	r1, r2, #1
 800e07c:	687a      	ldr	r2, [r7, #4]
 800e07e:	6812      	ldr	r2, [r2, #0]
 800e080:	430b      	orrs	r3, r1
 800e082:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800e086:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	f000 fad9 	bl	800e642 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800e090:	6878      	ldr	r0, [r7, #4]
 800e092:	f000 fb1f 	bl	800e6d4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	685b      	ldr	r3, [r3, #4]
 800e09a:	3305      	adds	r3, #5
 800e09c:	781b      	ldrb	r3, [r3, #0]
 800e09e:	021a      	lsls	r2, r3, #8
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	685b      	ldr	r3, [r3, #4]
 800e0a4:	3304      	adds	r3, #4
 800e0a6:	781b      	ldrb	r3, [r3, #0]
 800e0a8:	4619      	mov	r1, r3
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	430a      	orrs	r2, r1
 800e0b0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	685b      	ldr	r3, [r3, #4]
 800e0b8:	3303      	adds	r3, #3
 800e0ba:	781b      	ldrb	r3, [r3, #0]
 800e0bc:	061a      	lsls	r2, r3, #24
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	685b      	ldr	r3, [r3, #4]
 800e0c2:	3302      	adds	r3, #2
 800e0c4:	781b      	ldrb	r3, [r3, #0]
 800e0c6:	041b      	lsls	r3, r3, #16
 800e0c8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	685b      	ldr	r3, [r3, #4]
 800e0ce:	3301      	adds	r3, #1
 800e0d0:	781b      	ldrb	r3, [r3, #0]
 800e0d2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800e0d4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	685b      	ldr	r3, [r3, #4]
 800e0da:	781b      	ldrb	r3, [r3, #0]
 800e0dc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800e0e2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800e0e4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2210      	movs	r2, #16
 800e0f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e0f8:	2300      	movs	r3, #0
}
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	3710      	adds	r7, #16
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd80      	pop	{r7, pc}
 800e102:	bf00      	nop
 800e104:	58024400 	.word	0x58024400
 800e108:	58000400 	.word	0x58000400
 800e10c:	431bde83 	.word	0x431bde83
 800e110:	ffff8001 	.word	0xffff8001

0800e114 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b084      	sub	sp, #16
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e124:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800e12c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800e12e:	f001 fc4f 	bl	800f9d0 <HAL_RCC_GetHCLKFreq>
 800e132:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800e134:	68bb      	ldr	r3, [r7, #8]
 800e136:	4a1e      	ldr	r2, [pc, #120]	; (800e1b0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800e138:	4293      	cmp	r3, r2
 800e13a:	d908      	bls.n	800e14e <HAL_ETH_SetMDIOClockRange+0x3a>
 800e13c:	68bb      	ldr	r3, [r7, #8]
 800e13e:	4a1d      	ldr	r2, [pc, #116]	; (800e1b4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800e140:	4293      	cmp	r3, r2
 800e142:	d804      	bhi.n	800e14e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e14a:	60fb      	str	r3, [r7, #12]
 800e14c:	e027      	b.n	800e19e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	4a18      	ldr	r2, [pc, #96]	; (800e1b4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800e152:	4293      	cmp	r3, r2
 800e154:	d908      	bls.n	800e168 <HAL_ETH_SetMDIOClockRange+0x54>
 800e156:	68bb      	ldr	r3, [r7, #8]
 800e158:	4a17      	ldr	r2, [pc, #92]	; (800e1b8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800e15a:	4293      	cmp	r3, r2
 800e15c:	d204      	bcs.n	800e168 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800e164:	60fb      	str	r3, [r7, #12]
 800e166:	e01a      	b.n	800e19e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	4a13      	ldr	r2, [pc, #76]	; (800e1b8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800e16c:	4293      	cmp	r3, r2
 800e16e:	d303      	bcc.n	800e178 <HAL_ETH_SetMDIOClockRange+0x64>
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	4a12      	ldr	r2, [pc, #72]	; (800e1bc <HAL_ETH_SetMDIOClockRange+0xa8>)
 800e174:	4293      	cmp	r3, r2
 800e176:	d911      	bls.n	800e19c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800e178:	68bb      	ldr	r3, [r7, #8]
 800e17a:	4a10      	ldr	r2, [pc, #64]	; (800e1bc <HAL_ETH_SetMDIOClockRange+0xa8>)
 800e17c:	4293      	cmp	r3, r2
 800e17e:	d908      	bls.n	800e192 <HAL_ETH_SetMDIOClockRange+0x7e>
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	4a0f      	ldr	r2, [pc, #60]	; (800e1c0 <HAL_ETH_SetMDIOClockRange+0xac>)
 800e184:	4293      	cmp	r3, r2
 800e186:	d804      	bhi.n	800e192 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e18e:	60fb      	str	r3, [r7, #12]
 800e190:	e005      	b.n	800e19e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e198:	60fb      	str	r3, [r7, #12]
 800e19a:	e000      	b.n	800e19e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800e19c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	68fa      	ldr	r2, [r7, #12]
 800e1a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800e1a8:	bf00      	nop
 800e1aa:	3710      	adds	r7, #16
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}
 800e1b0:	01312cff 	.word	0x01312cff
 800e1b4:	02160ebf 	.word	0x02160ebf
 800e1b8:	03938700 	.word	0x03938700
 800e1bc:	05f5e0ff 	.word	0x05f5e0ff
 800e1c0:	08f0d17f 	.word	0x08f0d17f

0800e1c4 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800e1c4:	b480      	push	{r7}
 800e1c6:	b085      	sub	sp, #20
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
 800e1cc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800e1d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	791b      	ldrb	r3, [r3, #4]
 800e1dc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800e1de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	7b1b      	ldrb	r3, [r3, #12]
 800e1e4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800e1e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	7b5b      	ldrb	r3, [r3, #13]
 800e1ec:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800e1ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	7b9b      	ldrb	r3, [r3, #14]
 800e1f4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800e1f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	7bdb      	ldrb	r3, [r3, #15]
 800e1fc:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800e1fe:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800e200:	683a      	ldr	r2, [r7, #0]
 800e202:	7c12      	ldrb	r2, [r2, #16]
 800e204:	2a00      	cmp	r2, #0
 800e206:	d102      	bne.n	800e20e <ETH_SetMACConfig+0x4a>
 800e208:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800e20c:	e000      	b.n	800e210 <ETH_SetMACConfig+0x4c>
 800e20e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800e210:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800e212:	683a      	ldr	r2, [r7, #0]
 800e214:	7c52      	ldrb	r2, [r2, #17]
 800e216:	2a00      	cmp	r2, #0
 800e218:	d102      	bne.n	800e220 <ETH_SetMACConfig+0x5c>
 800e21a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800e21e:	e000      	b.n	800e222 <ETH_SetMACConfig+0x5e>
 800e220:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800e222:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	7c9b      	ldrb	r3, [r3, #18]
 800e228:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800e22a:	431a      	orrs	r2, r3
               macconf->Speed |
 800e22c:	683b      	ldr	r3, [r7, #0]
 800e22e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800e230:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800e236:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	7f1b      	ldrb	r3, [r3, #28]
 800e23c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800e23e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	7f5b      	ldrb	r3, [r3, #29]
 800e244:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800e246:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800e248:	683a      	ldr	r2, [r7, #0]
 800e24a:	7f92      	ldrb	r2, [r2, #30]
 800e24c:	2a00      	cmp	r2, #0
 800e24e:	d102      	bne.n	800e256 <ETH_SetMACConfig+0x92>
 800e250:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e254:	e000      	b.n	800e258 <ETH_SetMACConfig+0x94>
 800e256:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800e258:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	7fdb      	ldrb	r3, [r3, #31]
 800e25e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800e260:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800e262:	683a      	ldr	r2, [r7, #0]
 800e264:	f892 2020 	ldrb.w	r2, [r2, #32]
 800e268:	2a00      	cmp	r2, #0
 800e26a:	d102      	bne.n	800e272 <ETH_SetMACConfig+0xae>
 800e26c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e270:	e000      	b.n	800e274 <ETH_SetMACConfig+0xb0>
 800e272:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800e274:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800e27a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e282:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800e284:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800e28a:	4313      	orrs	r3, r2
 800e28c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	681a      	ldr	r2, [r3, #0]
 800e294:	4b56      	ldr	r3, [pc, #344]	; (800e3f0 <ETH_SetMACConfig+0x22c>)
 800e296:	4013      	ands	r3, r2
 800e298:	687a      	ldr	r2, [r7, #4]
 800e29a:	6812      	ldr	r2, [r2, #0]
 800e29c:	68f9      	ldr	r1, [r7, #12]
 800e29e:	430b      	orrs	r3, r1
 800e2a0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2a6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800e2a8:	683b      	ldr	r3, [r7, #0]
 800e2aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e2ae:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800e2b0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e2b8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800e2ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e2c2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800e2c4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800e2c6:	683a      	ldr	r2, [r7, #0]
 800e2c8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800e2cc:	2a00      	cmp	r2, #0
 800e2ce:	d102      	bne.n	800e2d6 <ETH_SetMACConfig+0x112>
 800e2d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800e2d4:	e000      	b.n	800e2d8 <ETH_SetMACConfig+0x114>
 800e2d6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800e2d8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800e2de:	4313      	orrs	r3, r2
 800e2e0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	685a      	ldr	r2, [r3, #4]
 800e2e8:	4b42      	ldr	r3, [pc, #264]	; (800e3f4 <ETH_SetMACConfig+0x230>)
 800e2ea:	4013      	ands	r3, r2
 800e2ec:	687a      	ldr	r2, [r7, #4]
 800e2ee:	6812      	ldr	r2, [r2, #0]
 800e2f0:	68f9      	ldr	r1, [r7, #12]
 800e2f2:	430b      	orrs	r3, r1
 800e2f4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e2fc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800e302:	4313      	orrs	r3, r2
 800e304:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	68da      	ldr	r2, [r3, #12]
 800e30c:	4b3a      	ldr	r3, [pc, #232]	; (800e3f8 <ETH_SetMACConfig+0x234>)
 800e30e:	4013      	ands	r3, r2
 800e310:	687a      	ldr	r2, [r7, #4]
 800e312:	6812      	ldr	r2, [r2, #0]
 800e314:	68f9      	ldr	r1, [r7, #12]
 800e316:	430b      	orrs	r3, r1
 800e318:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800e320:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800e326:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800e328:	683a      	ldr	r2, [r7, #0]
 800e32a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800e32e:	2a00      	cmp	r2, #0
 800e330:	d101      	bne.n	800e336 <ETH_SetMACConfig+0x172>
 800e332:	2280      	movs	r2, #128	; 0x80
 800e334:	e000      	b.n	800e338 <ETH_SetMACConfig+0x174>
 800e336:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800e338:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e33e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800e340:	4313      	orrs	r3, r2
 800e342:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e34a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800e34e:	4013      	ands	r3, r2
 800e350:	687a      	ldr	r2, [r7, #4]
 800e352:	6812      	ldr	r2, [r2, #0]
 800e354:	68f9      	ldr	r1, [r7, #12]
 800e356:	430b      	orrs	r3, r1
 800e358:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800e360:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e368:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800e36a:	4313      	orrs	r3, r2
 800e36c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e376:	f023 0103 	bic.w	r1, r3, #3
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	68fa      	ldr	r2, [r7, #12]
 800e380:	430a      	orrs	r2, r1
 800e382:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800e38e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800e392:	683b      	ldr	r3, [r7, #0]
 800e394:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	430a      	orrs	r2, r1
 800e39c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800e3a0:	683b      	ldr	r3, [r7, #0]
 800e3a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800e3a4:	683a      	ldr	r2, [r7, #0]
 800e3a6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800e3aa:	2a00      	cmp	r2, #0
 800e3ac:	d101      	bne.n	800e3b2 <ETH_SetMACConfig+0x1ee>
 800e3ae:	2240      	movs	r2, #64	; 0x40
 800e3b0:	e000      	b.n	800e3b4 <ETH_SetMACConfig+0x1f0>
 800e3b2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800e3b4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800e3bc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800e3be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800e3c6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800e3c8:	4313      	orrs	r3, r2
 800e3ca:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800e3d4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	68fa      	ldr	r2, [r7, #12]
 800e3de:	430a      	orrs	r2, r1
 800e3e0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800e3e4:	bf00      	nop
 800e3e6:	3714      	adds	r7, #20
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ee:	4770      	bx	lr
 800e3f0:	00048083 	.word	0x00048083
 800e3f4:	c0f88000 	.word	0xc0f88000
 800e3f8:	fffffef0 	.word	0xfffffef0

0800e3fc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	b085      	sub	sp, #20
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e40e:	681a      	ldr	r2, [r3, #0]
 800e410:	4b38      	ldr	r3, [pc, #224]	; (800e4f4 <ETH_SetDMAConfig+0xf8>)
 800e412:	4013      	ands	r3, r2
 800e414:	683a      	ldr	r2, [r7, #0]
 800e416:	6811      	ldr	r1, [r2, #0]
 800e418:	687a      	ldr	r2, [r7, #4]
 800e41a:	6812      	ldr	r2, [r2, #0]
 800e41c:	430b      	orrs	r3, r1
 800e41e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800e422:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	791b      	ldrb	r3, [r3, #4]
 800e428:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800e42e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	7b1b      	ldrb	r3, [r3, #12]
 800e434:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800e436:	4313      	orrs	r3, r2
 800e438:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e442:	685a      	ldr	r2, [r3, #4]
 800e444:	4b2c      	ldr	r3, [pc, #176]	; (800e4f8 <ETH_SetDMAConfig+0xfc>)
 800e446:	4013      	ands	r3, r2
 800e448:	687a      	ldr	r2, [r7, #4]
 800e44a:	6812      	ldr	r2, [r2, #0]
 800e44c:	68f9      	ldr	r1, [r7, #12]
 800e44e:	430b      	orrs	r3, r1
 800e450:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800e454:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	7b5b      	ldrb	r3, [r3, #13]
 800e45a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800e460:	4313      	orrs	r3, r2
 800e462:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e46c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800e470:	4b22      	ldr	r3, [pc, #136]	; (800e4fc <ETH_SetDMAConfig+0x100>)
 800e472:	4013      	ands	r3, r2
 800e474:	687a      	ldr	r2, [r7, #4]
 800e476:	6812      	ldr	r2, [r2, #0]
 800e478:	68f9      	ldr	r1, [r7, #12]
 800e47a:	430b      	orrs	r3, r1
 800e47c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800e480:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	7d1b      	ldrb	r3, [r3, #20]
 800e48c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800e48e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	7f5b      	ldrb	r3, [r3, #29]
 800e494:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800e496:	4313      	orrs	r3, r2
 800e498:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4a2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800e4a6:	4b16      	ldr	r3, [pc, #88]	; (800e500 <ETH_SetDMAConfig+0x104>)
 800e4a8:	4013      	ands	r3, r2
 800e4aa:	687a      	ldr	r2, [r7, #4]
 800e4ac:	6812      	ldr	r2, [r2, #0]
 800e4ae:	68f9      	ldr	r1, [r7, #12]
 800e4b0:	430b      	orrs	r3, r1
 800e4b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800e4b6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	7f1b      	ldrb	r3, [r3, #28]
 800e4be:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800e4c0:	683b      	ldr	r3, [r7, #0]
 800e4c2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800e4c4:	4313      	orrs	r3, r2
 800e4c6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4d0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800e4d4:	4b0b      	ldr	r3, [pc, #44]	; (800e504 <ETH_SetDMAConfig+0x108>)
 800e4d6:	4013      	ands	r3, r2
 800e4d8:	687a      	ldr	r2, [r7, #4]
 800e4da:	6812      	ldr	r2, [r2, #0]
 800e4dc:	68f9      	ldr	r1, [r7, #12]
 800e4de:	430b      	orrs	r3, r1
 800e4e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800e4e4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800e4e8:	bf00      	nop
 800e4ea:	3714      	adds	r7, #20
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f2:	4770      	bx	lr
 800e4f4:	ffff87fd 	.word	0xffff87fd
 800e4f8:	ffff2ffe 	.word	0xffff2ffe
 800e4fc:	fffec000 	.word	0xfffec000
 800e500:	ffc0efef 	.word	0xffc0efef
 800e504:	7fc0ffff 	.word	0x7fc0ffff

0800e508 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b0a4      	sub	sp, #144	; 0x90
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800e510:	2301      	movs	r3, #1
 800e512:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800e516:	2300      	movs	r3, #0
 800e518:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800e51a:	2300      	movs	r3, #0
 800e51c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800e520:	2300      	movs	r3, #0
 800e522:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800e526:	2301      	movs	r3, #1
 800e528:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800e52c:	2301      	movs	r3, #1
 800e52e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800e532:	2301      	movs	r3, #1
 800e534:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800e538:	2300      	movs	r3, #0
 800e53a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800e53e:	2301      	movs	r3, #1
 800e540:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800e544:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e548:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800e54a:	2300      	movs	r3, #0
 800e54c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800e550:	2300      	movs	r3, #0
 800e552:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800e554:	2300      	movs	r3, #0
 800e556:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800e55a:	2300      	movs	r3, #0
 800e55c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800e560:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800e564:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800e566:	2300      	movs	r3, #0
 800e568:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800e56c:	2300      	movs	r3, #0
 800e56e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800e570:	2301      	movs	r3, #1
 800e572:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800e576:	2300      	movs	r3, #0
 800e578:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800e57c:	2300      	movs	r3, #0
 800e57e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800e582:	2300      	movs	r3, #0
 800e584:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800e586:	2300      	movs	r3, #0
 800e588:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800e58a:	2300      	movs	r3, #0
 800e58c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800e58e:	2300      	movs	r3, #0
 800e590:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800e594:	2300      	movs	r3, #0
 800e596:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800e59a:	2301      	movs	r3, #1
 800e59c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800e5a0:	2320      	movs	r3, #32
 800e5a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800e5b2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800e5b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800e5b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e5bc:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800e5c4:	2302      	movs	r3, #2
 800e5c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800e5dc:	2301      	movs	r3, #1
 800e5de:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800e5e6:	2301      	movs	r3, #1
 800e5e8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800e5ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e5f0:	4619      	mov	r1, r3
 800e5f2:	6878      	ldr	r0, [r7, #4]
 800e5f4:	f7ff fde6 	bl	800e1c4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800e5f8:	2301      	movs	r3, #1
 800e5fa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800e600:	2300      	movs	r3, #0
 800e602:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800e604:	2300      	movs	r3, #0
 800e606:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800e60a:	2300      	movs	r3, #0
 800e60c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800e60e:	2300      	movs	r3, #0
 800e610:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800e612:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e616:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800e618:	2300      	movs	r3, #0
 800e61a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800e61c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e620:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800e622:	2300      	movs	r3, #0
 800e624:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800e628:	f44f 7306 	mov.w	r3, #536	; 0x218
 800e62c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800e62e:	f107 0308 	add.w	r3, r7, #8
 800e632:	4619      	mov	r1, r3
 800e634:	6878      	ldr	r0, [r7, #4]
 800e636:	f7ff fee1 	bl	800e3fc <ETH_SetDMAConfig>
}
 800e63a:	bf00      	nop
 800e63c:	3790      	adds	r7, #144	; 0x90
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}

0800e642 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800e642:	b480      	push	{r7}
 800e644:	b085      	sub	sp, #20
 800e646:	af00      	add	r7, sp, #0
 800e648:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800e64a:	2300      	movs	r3, #0
 800e64c:	60fb      	str	r3, [r7, #12]
 800e64e:	e01d      	b.n	800e68c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	68d9      	ldr	r1, [r3, #12]
 800e654:	68fa      	ldr	r2, [r7, #12]
 800e656:	4613      	mov	r3, r2
 800e658:	005b      	lsls	r3, r3, #1
 800e65a:	4413      	add	r3, r2
 800e65c:	00db      	lsls	r3, r3, #3
 800e65e:	440b      	add	r3, r1
 800e660:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800e662:	68bb      	ldr	r3, [r7, #8]
 800e664:	2200      	movs	r2, #0
 800e666:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800e668:	68bb      	ldr	r3, [r7, #8]
 800e66a:	2200      	movs	r2, #0
 800e66c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	2200      	movs	r2, #0
 800e672:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800e674:	68bb      	ldr	r3, [r7, #8]
 800e676:	2200      	movs	r2, #0
 800e678:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800e67a:	68b9      	ldr	r1, [r7, #8]
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	68fa      	ldr	r2, [r7, #12]
 800e680:	3206      	adds	r2, #6
 800e682:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	3301      	adds	r3, #1
 800e68a:	60fb      	str	r3, [r7, #12]
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	2b03      	cmp	r3, #3
 800e690:	d9de      	bls.n	800e650 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	2200      	movs	r2, #0
 800e696:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6a0:	461a      	mov	r2, r3
 800e6a2:	2303      	movs	r3, #3
 800e6a4:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	68da      	ldr	r2, [r3, #12]
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6b4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	68da      	ldr	r2, [r3, #12]
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6c4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800e6c8:	bf00      	nop
 800e6ca:	3714      	adds	r7, #20
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d2:	4770      	bx	lr

0800e6d4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800e6d4:	b480      	push	{r7}
 800e6d6:	b085      	sub	sp, #20
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800e6dc:	2300      	movs	r3, #0
 800e6de:	60fb      	str	r3, [r7, #12]
 800e6e0:	e023      	b.n	800e72a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6919      	ldr	r1, [r3, #16]
 800e6e6:	68fa      	ldr	r2, [r7, #12]
 800e6e8:	4613      	mov	r3, r2
 800e6ea:	005b      	lsls	r3, r3, #1
 800e6ec:	4413      	add	r3, r2
 800e6ee:	00db      	lsls	r3, r3, #3
 800e6f0:	440b      	add	r3, r1
 800e6f2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800e6f4:	68bb      	ldr	r3, [r7, #8]
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800e6fa:	68bb      	ldr	r3, [r7, #8]
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800e700:	68bb      	ldr	r3, [r7, #8]
 800e702:	2200      	movs	r2, #0
 800e704:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	2200      	movs	r2, #0
 800e70a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	2200      	movs	r2, #0
 800e710:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800e712:	68bb      	ldr	r3, [r7, #8]
 800e714:	2200      	movs	r2, #0
 800e716:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800e718:	68b9      	ldr	r1, [r7, #8]
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	68fa      	ldr	r2, [r7, #12]
 800e71e:	3212      	adds	r2, #18
 800e720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	3301      	adds	r3, #1
 800e728:	60fb      	str	r3, [r7, #12]
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	2b03      	cmp	r3, #3
 800e72e:	d9d8      	bls.n	800e6e2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	2200      	movs	r2, #0
 800e734:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2200      	movs	r2, #0
 800e73a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	2200      	movs	r2, #0
 800e740:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	2200      	movs	r2, #0
 800e746:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	2200      	movs	r2, #0
 800e74c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e756:	461a      	mov	r2, r3
 800e758:	2303      	movs	r3, #3
 800e75a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	691a      	ldr	r2, [r3, #16]
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e76a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	691b      	ldr	r3, [r3, #16]
 800e772:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e77e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800e782:	bf00      	nop
 800e784:	3714      	adds	r7, #20
 800e786:	46bd      	mov	sp, r7
 800e788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78c:	4770      	bx	lr
	...

0800e790 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e790:	b480      	push	{r7}
 800e792:	b089      	sub	sp, #36	; 0x24
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
 800e798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800e79a:	2300      	movs	r3, #0
 800e79c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800e79e:	4b86      	ldr	r3, [pc, #536]	; (800e9b8 <HAL_GPIO_Init+0x228>)
 800e7a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e7a2:	e18c      	b.n	800eabe <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	681a      	ldr	r2, [r3, #0]
 800e7a8:	2101      	movs	r1, #1
 800e7aa:	69fb      	ldr	r3, [r7, #28]
 800e7ac:	fa01 f303 	lsl.w	r3, r1, r3
 800e7b0:	4013      	ands	r3, r2
 800e7b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800e7b4:	693b      	ldr	r3, [r7, #16]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	f000 817e 	beq.w	800eab8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	685b      	ldr	r3, [r3, #4]
 800e7c0:	f003 0303 	and.w	r3, r3, #3
 800e7c4:	2b01      	cmp	r3, #1
 800e7c6:	d005      	beq.n	800e7d4 <HAL_GPIO_Init+0x44>
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	685b      	ldr	r3, [r3, #4]
 800e7cc:	f003 0303 	and.w	r3, r3, #3
 800e7d0:	2b02      	cmp	r3, #2
 800e7d2:	d130      	bne.n	800e836 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	689b      	ldr	r3, [r3, #8]
 800e7d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e7da:	69fb      	ldr	r3, [r7, #28]
 800e7dc:	005b      	lsls	r3, r3, #1
 800e7de:	2203      	movs	r2, #3
 800e7e0:	fa02 f303 	lsl.w	r3, r2, r3
 800e7e4:	43db      	mvns	r3, r3
 800e7e6:	69ba      	ldr	r2, [r7, #24]
 800e7e8:	4013      	ands	r3, r2
 800e7ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	68da      	ldr	r2, [r3, #12]
 800e7f0:	69fb      	ldr	r3, [r7, #28]
 800e7f2:	005b      	lsls	r3, r3, #1
 800e7f4:	fa02 f303 	lsl.w	r3, r2, r3
 800e7f8:	69ba      	ldr	r2, [r7, #24]
 800e7fa:	4313      	orrs	r3, r2
 800e7fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	69ba      	ldr	r2, [r7, #24]
 800e802:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	685b      	ldr	r3, [r3, #4]
 800e808:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e80a:	2201      	movs	r2, #1
 800e80c:	69fb      	ldr	r3, [r7, #28]
 800e80e:	fa02 f303 	lsl.w	r3, r2, r3
 800e812:	43db      	mvns	r3, r3
 800e814:	69ba      	ldr	r2, [r7, #24]
 800e816:	4013      	ands	r3, r2
 800e818:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	685b      	ldr	r3, [r3, #4]
 800e81e:	091b      	lsrs	r3, r3, #4
 800e820:	f003 0201 	and.w	r2, r3, #1
 800e824:	69fb      	ldr	r3, [r7, #28]
 800e826:	fa02 f303 	lsl.w	r3, r2, r3
 800e82a:	69ba      	ldr	r2, [r7, #24]
 800e82c:	4313      	orrs	r3, r2
 800e82e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	69ba      	ldr	r2, [r7, #24]
 800e834:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e836:	683b      	ldr	r3, [r7, #0]
 800e838:	685b      	ldr	r3, [r3, #4]
 800e83a:	f003 0303 	and.w	r3, r3, #3
 800e83e:	2b03      	cmp	r3, #3
 800e840:	d017      	beq.n	800e872 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	68db      	ldr	r3, [r3, #12]
 800e846:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e848:	69fb      	ldr	r3, [r7, #28]
 800e84a:	005b      	lsls	r3, r3, #1
 800e84c:	2203      	movs	r2, #3
 800e84e:	fa02 f303 	lsl.w	r3, r2, r3
 800e852:	43db      	mvns	r3, r3
 800e854:	69ba      	ldr	r2, [r7, #24]
 800e856:	4013      	ands	r3, r2
 800e858:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	689a      	ldr	r2, [r3, #8]
 800e85e:	69fb      	ldr	r3, [r7, #28]
 800e860:	005b      	lsls	r3, r3, #1
 800e862:	fa02 f303 	lsl.w	r3, r2, r3
 800e866:	69ba      	ldr	r2, [r7, #24]
 800e868:	4313      	orrs	r3, r2
 800e86a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	69ba      	ldr	r2, [r7, #24]
 800e870:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	685b      	ldr	r3, [r3, #4]
 800e876:	f003 0303 	and.w	r3, r3, #3
 800e87a:	2b02      	cmp	r3, #2
 800e87c:	d123      	bne.n	800e8c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e87e:	69fb      	ldr	r3, [r7, #28]
 800e880:	08da      	lsrs	r2, r3, #3
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	3208      	adds	r2, #8
 800e886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e88a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800e88c:	69fb      	ldr	r3, [r7, #28]
 800e88e:	f003 0307 	and.w	r3, r3, #7
 800e892:	009b      	lsls	r3, r3, #2
 800e894:	220f      	movs	r2, #15
 800e896:	fa02 f303 	lsl.w	r3, r2, r3
 800e89a:	43db      	mvns	r3, r3
 800e89c:	69ba      	ldr	r2, [r7, #24]
 800e89e:	4013      	ands	r3, r2
 800e8a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	691a      	ldr	r2, [r3, #16]
 800e8a6:	69fb      	ldr	r3, [r7, #28]
 800e8a8:	f003 0307 	and.w	r3, r3, #7
 800e8ac:	009b      	lsls	r3, r3, #2
 800e8ae:	fa02 f303 	lsl.w	r3, r2, r3
 800e8b2:	69ba      	ldr	r2, [r7, #24]
 800e8b4:	4313      	orrs	r3, r2
 800e8b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800e8b8:	69fb      	ldr	r3, [r7, #28]
 800e8ba:	08da      	lsrs	r2, r3, #3
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	3208      	adds	r2, #8
 800e8c0:	69b9      	ldr	r1, [r7, #24]
 800e8c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800e8cc:	69fb      	ldr	r3, [r7, #28]
 800e8ce:	005b      	lsls	r3, r3, #1
 800e8d0:	2203      	movs	r2, #3
 800e8d2:	fa02 f303 	lsl.w	r3, r2, r3
 800e8d6:	43db      	mvns	r3, r3
 800e8d8:	69ba      	ldr	r2, [r7, #24]
 800e8da:	4013      	ands	r3, r2
 800e8dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e8de:	683b      	ldr	r3, [r7, #0]
 800e8e0:	685b      	ldr	r3, [r3, #4]
 800e8e2:	f003 0203 	and.w	r2, r3, #3
 800e8e6:	69fb      	ldr	r3, [r7, #28]
 800e8e8:	005b      	lsls	r3, r3, #1
 800e8ea:	fa02 f303 	lsl.w	r3, r2, r3
 800e8ee:	69ba      	ldr	r2, [r7, #24]
 800e8f0:	4313      	orrs	r3, r2
 800e8f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	69ba      	ldr	r2, [r7, #24]
 800e8f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	685b      	ldr	r3, [r3, #4]
 800e8fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e902:	2b00      	cmp	r3, #0
 800e904:	f000 80d8 	beq.w	800eab8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e908:	4b2c      	ldr	r3, [pc, #176]	; (800e9bc <HAL_GPIO_Init+0x22c>)
 800e90a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e90e:	4a2b      	ldr	r2, [pc, #172]	; (800e9bc <HAL_GPIO_Init+0x22c>)
 800e910:	f043 0302 	orr.w	r3, r3, #2
 800e914:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800e918:	4b28      	ldr	r3, [pc, #160]	; (800e9bc <HAL_GPIO_Init+0x22c>)
 800e91a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e91e:	f003 0302 	and.w	r3, r3, #2
 800e922:	60fb      	str	r3, [r7, #12]
 800e924:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800e926:	4a26      	ldr	r2, [pc, #152]	; (800e9c0 <HAL_GPIO_Init+0x230>)
 800e928:	69fb      	ldr	r3, [r7, #28]
 800e92a:	089b      	lsrs	r3, r3, #2
 800e92c:	3302      	adds	r3, #2
 800e92e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e932:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800e934:	69fb      	ldr	r3, [r7, #28]
 800e936:	f003 0303 	and.w	r3, r3, #3
 800e93a:	009b      	lsls	r3, r3, #2
 800e93c:	220f      	movs	r2, #15
 800e93e:	fa02 f303 	lsl.w	r3, r2, r3
 800e942:	43db      	mvns	r3, r3
 800e944:	69ba      	ldr	r2, [r7, #24]
 800e946:	4013      	ands	r3, r2
 800e948:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	4a1d      	ldr	r2, [pc, #116]	; (800e9c4 <HAL_GPIO_Init+0x234>)
 800e94e:	4293      	cmp	r3, r2
 800e950:	d04a      	beq.n	800e9e8 <HAL_GPIO_Init+0x258>
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	4a1c      	ldr	r2, [pc, #112]	; (800e9c8 <HAL_GPIO_Init+0x238>)
 800e956:	4293      	cmp	r3, r2
 800e958:	d02b      	beq.n	800e9b2 <HAL_GPIO_Init+0x222>
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	4a1b      	ldr	r2, [pc, #108]	; (800e9cc <HAL_GPIO_Init+0x23c>)
 800e95e:	4293      	cmp	r3, r2
 800e960:	d025      	beq.n	800e9ae <HAL_GPIO_Init+0x21e>
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	4a1a      	ldr	r2, [pc, #104]	; (800e9d0 <HAL_GPIO_Init+0x240>)
 800e966:	4293      	cmp	r3, r2
 800e968:	d01f      	beq.n	800e9aa <HAL_GPIO_Init+0x21a>
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	4a19      	ldr	r2, [pc, #100]	; (800e9d4 <HAL_GPIO_Init+0x244>)
 800e96e:	4293      	cmp	r3, r2
 800e970:	d019      	beq.n	800e9a6 <HAL_GPIO_Init+0x216>
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	4a18      	ldr	r2, [pc, #96]	; (800e9d8 <HAL_GPIO_Init+0x248>)
 800e976:	4293      	cmp	r3, r2
 800e978:	d013      	beq.n	800e9a2 <HAL_GPIO_Init+0x212>
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	4a17      	ldr	r2, [pc, #92]	; (800e9dc <HAL_GPIO_Init+0x24c>)
 800e97e:	4293      	cmp	r3, r2
 800e980:	d00d      	beq.n	800e99e <HAL_GPIO_Init+0x20e>
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	4a16      	ldr	r2, [pc, #88]	; (800e9e0 <HAL_GPIO_Init+0x250>)
 800e986:	4293      	cmp	r3, r2
 800e988:	d007      	beq.n	800e99a <HAL_GPIO_Init+0x20a>
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	4a15      	ldr	r2, [pc, #84]	; (800e9e4 <HAL_GPIO_Init+0x254>)
 800e98e:	4293      	cmp	r3, r2
 800e990:	d101      	bne.n	800e996 <HAL_GPIO_Init+0x206>
 800e992:	2309      	movs	r3, #9
 800e994:	e029      	b.n	800e9ea <HAL_GPIO_Init+0x25a>
 800e996:	230a      	movs	r3, #10
 800e998:	e027      	b.n	800e9ea <HAL_GPIO_Init+0x25a>
 800e99a:	2307      	movs	r3, #7
 800e99c:	e025      	b.n	800e9ea <HAL_GPIO_Init+0x25a>
 800e99e:	2306      	movs	r3, #6
 800e9a0:	e023      	b.n	800e9ea <HAL_GPIO_Init+0x25a>
 800e9a2:	2305      	movs	r3, #5
 800e9a4:	e021      	b.n	800e9ea <HAL_GPIO_Init+0x25a>
 800e9a6:	2304      	movs	r3, #4
 800e9a8:	e01f      	b.n	800e9ea <HAL_GPIO_Init+0x25a>
 800e9aa:	2303      	movs	r3, #3
 800e9ac:	e01d      	b.n	800e9ea <HAL_GPIO_Init+0x25a>
 800e9ae:	2302      	movs	r3, #2
 800e9b0:	e01b      	b.n	800e9ea <HAL_GPIO_Init+0x25a>
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	e019      	b.n	800e9ea <HAL_GPIO_Init+0x25a>
 800e9b6:	bf00      	nop
 800e9b8:	58000080 	.word	0x58000080
 800e9bc:	58024400 	.word	0x58024400
 800e9c0:	58000400 	.word	0x58000400
 800e9c4:	58020000 	.word	0x58020000
 800e9c8:	58020400 	.word	0x58020400
 800e9cc:	58020800 	.word	0x58020800
 800e9d0:	58020c00 	.word	0x58020c00
 800e9d4:	58021000 	.word	0x58021000
 800e9d8:	58021400 	.word	0x58021400
 800e9dc:	58021800 	.word	0x58021800
 800e9e0:	58021c00 	.word	0x58021c00
 800e9e4:	58022400 	.word	0x58022400
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	69fa      	ldr	r2, [r7, #28]
 800e9ec:	f002 0203 	and.w	r2, r2, #3
 800e9f0:	0092      	lsls	r2, r2, #2
 800e9f2:	4093      	lsls	r3, r2
 800e9f4:	69ba      	ldr	r2, [r7, #24]
 800e9f6:	4313      	orrs	r3, r2
 800e9f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e9fa:	4938      	ldr	r1, [pc, #224]	; (800eadc <HAL_GPIO_Init+0x34c>)
 800e9fc:	69fb      	ldr	r3, [r7, #28]
 800e9fe:	089b      	lsrs	r3, r3, #2
 800ea00:	3302      	adds	r3, #2
 800ea02:	69ba      	ldr	r2, [r7, #24]
 800ea04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ea08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ea10:	693b      	ldr	r3, [r7, #16]
 800ea12:	43db      	mvns	r3, r3
 800ea14:	69ba      	ldr	r2, [r7, #24]
 800ea16:	4013      	ands	r3, r2
 800ea18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ea1a:	683b      	ldr	r3, [r7, #0]
 800ea1c:	685b      	ldr	r3, [r3, #4]
 800ea1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d003      	beq.n	800ea2e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800ea26:	69ba      	ldr	r2, [r7, #24]
 800ea28:	693b      	ldr	r3, [r7, #16]
 800ea2a:	4313      	orrs	r3, r2
 800ea2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800ea2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ea32:	69bb      	ldr	r3, [r7, #24]
 800ea34:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800ea36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ea3a:	685b      	ldr	r3, [r3, #4]
 800ea3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ea3e:	693b      	ldr	r3, [r7, #16]
 800ea40:	43db      	mvns	r3, r3
 800ea42:	69ba      	ldr	r2, [r7, #24]
 800ea44:	4013      	ands	r3, r2
 800ea46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	685b      	ldr	r3, [r3, #4]
 800ea4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d003      	beq.n	800ea5c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800ea54:	69ba      	ldr	r2, [r7, #24]
 800ea56:	693b      	ldr	r3, [r7, #16]
 800ea58:	4313      	orrs	r3, r2
 800ea5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800ea5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ea60:	69bb      	ldr	r3, [r7, #24]
 800ea62:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800ea64:	697b      	ldr	r3, [r7, #20]
 800ea66:	685b      	ldr	r3, [r3, #4]
 800ea68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ea6a:	693b      	ldr	r3, [r7, #16]
 800ea6c:	43db      	mvns	r3, r3
 800ea6e:	69ba      	ldr	r2, [r7, #24]
 800ea70:	4013      	ands	r3, r2
 800ea72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	685b      	ldr	r3, [r3, #4]
 800ea78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d003      	beq.n	800ea88 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800ea80:	69ba      	ldr	r2, [r7, #24]
 800ea82:	693b      	ldr	r3, [r7, #16]
 800ea84:	4313      	orrs	r3, r2
 800ea86:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800ea88:	697b      	ldr	r3, [r7, #20]
 800ea8a:	69ba      	ldr	r2, [r7, #24]
 800ea8c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ea94:	693b      	ldr	r3, [r7, #16]
 800ea96:	43db      	mvns	r3, r3
 800ea98:	69ba      	ldr	r2, [r7, #24]
 800ea9a:	4013      	ands	r3, r2
 800ea9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	685b      	ldr	r3, [r3, #4]
 800eaa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d003      	beq.n	800eab2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800eaaa:	69ba      	ldr	r2, [r7, #24]
 800eaac:	693b      	ldr	r3, [r7, #16]
 800eaae:	4313      	orrs	r3, r2
 800eab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800eab2:	697b      	ldr	r3, [r7, #20]
 800eab4:	69ba      	ldr	r2, [r7, #24]
 800eab6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800eab8:	69fb      	ldr	r3, [r7, #28]
 800eaba:	3301      	adds	r3, #1
 800eabc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	681a      	ldr	r2, [r3, #0]
 800eac2:	69fb      	ldr	r3, [r7, #28]
 800eac4:	fa22 f303 	lsr.w	r3, r2, r3
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	f47f ae6b 	bne.w	800e7a4 <HAL_GPIO_Init+0x14>
  }
}
 800eace:	bf00      	nop
 800ead0:	bf00      	nop
 800ead2:	3724      	adds	r7, #36	; 0x24
 800ead4:	46bd      	mov	sp, r7
 800ead6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eada:	4770      	bx	lr
 800eadc:	58000400 	.word	0x58000400

0800eae0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800eae0:	b480      	push	{r7}
 800eae2:	b083      	sub	sp, #12
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	460b      	mov	r3, r1
 800eaea:	807b      	strh	r3, [r7, #2]
 800eaec:	4613      	mov	r3, r2
 800eaee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800eaf0:	787b      	ldrb	r3, [r7, #1]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d003      	beq.n	800eafe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800eaf6:	887a      	ldrh	r2, [r7, #2]
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800eafc:	e003      	b.n	800eb06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800eafe:	887b      	ldrh	r3, [r7, #2]
 800eb00:	041a      	lsls	r2, r3, #16
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	619a      	str	r2, [r3, #24]
}
 800eb06:	bf00      	nop
 800eb08:	370c      	adds	r7, #12
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb10:	4770      	bx	lr

0800eb12 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800eb12:	b480      	push	{r7}
 800eb14:	b085      	sub	sp, #20
 800eb16:	af00      	add	r7, sp, #0
 800eb18:	6078      	str	r0, [r7, #4]
 800eb1a:	460b      	mov	r3, r1
 800eb1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	695b      	ldr	r3, [r3, #20]
 800eb22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800eb24:	887a      	ldrh	r2, [r7, #2]
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	4013      	ands	r3, r2
 800eb2a:	041a      	lsls	r2, r3, #16
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	43d9      	mvns	r1, r3
 800eb30:	887b      	ldrh	r3, [r7, #2]
 800eb32:	400b      	ands	r3, r1
 800eb34:	431a      	orrs	r2, r3
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	619a      	str	r2, [r3, #24]
}
 800eb3a:	bf00      	nop
 800eb3c:	3714      	adds	r7, #20
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb44:	4770      	bx	lr
	...

0800eb48 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b084      	sub	sp, #16
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800eb50:	4b19      	ldr	r3, [pc, #100]	; (800ebb8 <HAL_PWREx_ConfigSupply+0x70>)
 800eb52:	68db      	ldr	r3, [r3, #12]
 800eb54:	f003 0304 	and.w	r3, r3, #4
 800eb58:	2b04      	cmp	r3, #4
 800eb5a:	d00a      	beq.n	800eb72 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800eb5c:	4b16      	ldr	r3, [pc, #88]	; (800ebb8 <HAL_PWREx_ConfigSupply+0x70>)
 800eb5e:	68db      	ldr	r3, [r3, #12]
 800eb60:	f003 0307 	and.w	r3, r3, #7
 800eb64:	687a      	ldr	r2, [r7, #4]
 800eb66:	429a      	cmp	r2, r3
 800eb68:	d001      	beq.n	800eb6e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	e01f      	b.n	800ebae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800eb6e:	2300      	movs	r3, #0
 800eb70:	e01d      	b.n	800ebae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800eb72:	4b11      	ldr	r3, [pc, #68]	; (800ebb8 <HAL_PWREx_ConfigSupply+0x70>)
 800eb74:	68db      	ldr	r3, [r3, #12]
 800eb76:	f023 0207 	bic.w	r2, r3, #7
 800eb7a:	490f      	ldr	r1, [pc, #60]	; (800ebb8 <HAL_PWREx_ConfigSupply+0x70>)
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	4313      	orrs	r3, r2
 800eb80:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800eb82:	f7ff f8b1 	bl	800dce8 <HAL_GetTick>
 800eb86:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800eb88:	e009      	b.n	800eb9e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800eb8a:	f7ff f8ad 	bl	800dce8 <HAL_GetTick>
 800eb8e:	4602      	mov	r2, r0
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	1ad3      	subs	r3, r2, r3
 800eb94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800eb98:	d901      	bls.n	800eb9e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	e007      	b.n	800ebae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800eb9e:	4b06      	ldr	r3, [pc, #24]	; (800ebb8 <HAL_PWREx_ConfigSupply+0x70>)
 800eba0:	685b      	ldr	r3, [r3, #4]
 800eba2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800eba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ebaa:	d1ee      	bne.n	800eb8a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800ebac:	2300      	movs	r3, #0
}
 800ebae:	4618      	mov	r0, r3
 800ebb0:	3710      	adds	r7, #16
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	bd80      	pop	{r7, pc}
 800ebb6:	bf00      	nop
 800ebb8:	58024800 	.word	0x58024800

0800ebbc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b08c      	sub	sp, #48	; 0x30
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d101      	bne.n	800ebce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ebca:	2301      	movs	r3, #1
 800ebcc:	e3c8      	b.n	800f360 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	f003 0301 	and.w	r3, r3, #1
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	f000 8087 	beq.w	800ecea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ebdc:	4b88      	ldr	r3, [pc, #544]	; (800ee00 <HAL_RCC_OscConfig+0x244>)
 800ebde:	691b      	ldr	r3, [r3, #16]
 800ebe0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ebe4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ebe6:	4b86      	ldr	r3, [pc, #536]	; (800ee00 <HAL_RCC_OscConfig+0x244>)
 800ebe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebea:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800ebec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebee:	2b10      	cmp	r3, #16
 800ebf0:	d007      	beq.n	800ec02 <HAL_RCC_OscConfig+0x46>
 800ebf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf4:	2b18      	cmp	r3, #24
 800ebf6:	d110      	bne.n	800ec1a <HAL_RCC_OscConfig+0x5e>
 800ebf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebfa:	f003 0303 	and.w	r3, r3, #3
 800ebfe:	2b02      	cmp	r3, #2
 800ec00:	d10b      	bne.n	800ec1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ec02:	4b7f      	ldr	r3, [pc, #508]	; (800ee00 <HAL_RCC_OscConfig+0x244>)
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d06c      	beq.n	800ece8 <HAL_RCC_OscConfig+0x12c>
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	685b      	ldr	r3, [r3, #4]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d168      	bne.n	800ece8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800ec16:	2301      	movs	r3, #1
 800ec18:	e3a2      	b.n	800f360 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	685b      	ldr	r3, [r3, #4]
 800ec1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec22:	d106      	bne.n	800ec32 <HAL_RCC_OscConfig+0x76>
 800ec24:	4b76      	ldr	r3, [pc, #472]	; (800ee00 <HAL_RCC_OscConfig+0x244>)
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	4a75      	ldr	r2, [pc, #468]	; (800ee00 <HAL_RCC_OscConfig+0x244>)
 800ec2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ec2e:	6013      	str	r3, [r2, #0]
 800ec30:	e02e      	b.n	800ec90 <HAL_RCC_OscConfig+0xd4>
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	685b      	ldr	r3, [r3, #4]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d10c      	bne.n	800ec54 <HAL_RCC_OscConfig+0x98>
 800ec3a:	4b71      	ldr	r3, [pc, #452]	; (800ee00 <HAL_RCC_OscConfig+0x244>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	4a70      	ldr	r2, [pc, #448]	; (800ee00 <HAL_RCC_OscConfig+0x244>)
 800ec40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ec44:	6013      	str	r3, [r2, #0]
 800ec46:	4b6e      	ldr	r3, [pc, #440]	; (800ee00 <HAL_RCC_OscConfig+0x244>)
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	4a6d      	ldr	r2, [pc, #436]	; (800ee00 <HAL_RCC_OscConfig+0x244>)
 800ec4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ec50:	6013      	str	r3, [r2, #0]
 800ec52:	e01d      	b.n	800ec90 <HAL_RCC_OscConfig+0xd4>
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	685b      	ldr	r3, [r3, #4]
 800ec58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ec5c:	d10c      	bne.n	800ec78 <HAL_RCC_OscConfig+0xbc>
 800ec5e:	4b68      	ldr	r3, [pc, #416]	; (800ee00 <HAL_RCC_OscConfig+0x244>)
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	4a67      	ldr	r2, [pc, #412]	; (800ee00 <HAL_RCC_OscConfig+0x244>)
 800ec64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ec68:	6013      	str	r3, [r2, #0]
 800ec6a:	4b65      	ldr	r3, [pc, #404]	; (800ee00 <HAL_RCC_OscConfig+0x244>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	4a64      	ldr	r2, [pc, #400]	; (800ee00 <HAL_RCC_OscConfig+0x244>)
 800ec70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ec74:	6013      	str	r3, [r2, #0]
 800ec76:	e00b      	b.n	800ec90 <HAL_RCC_OscConfig+0xd4>
 800ec78:	4b61      	ldr	r3, [pc, #388]	; (800ee00 <HAL_RCC_OscConfig+0x244>)
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	4a60      	ldr	r2, [pc, #384]	; (800ee00 <HAL_RCC_OscConfig+0x244>)
 800ec7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ec82:	6013      	str	r3, [r2, #0]
 800ec84:	4b5e      	ldr	r3, [pc, #376]	; (800ee00 <HAL_RCC_OscConfig+0x244>)
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	4a5d      	ldr	r2, [pc, #372]	; (800ee00 <HAL_RCC_OscConfig+0x244>)
 800ec8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ec8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	685b      	ldr	r3, [r3, #4]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d013      	beq.n	800ecc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ec98:	f7ff f826 	bl	800dce8 <HAL_GetTick>
 800ec9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ec9e:	e008      	b.n	800ecb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800eca0:	f7ff f822 	bl	800dce8 <HAL_GetTick>
 800eca4:	4602      	mov	r2, r0
 800eca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eca8:	1ad3      	subs	r3, r2, r3
 800ecaa:	2b64      	cmp	r3, #100	; 0x64
 800ecac:	d901      	bls.n	800ecb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800ecae:	2303      	movs	r3, #3
 800ecb0:	e356      	b.n	800f360 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ecb2:	4b53      	ldr	r3, [pc, #332]	; (800ee00 <HAL_RCC_OscConfig+0x244>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d0f0      	beq.n	800eca0 <HAL_RCC_OscConfig+0xe4>
 800ecbe:	e014      	b.n	800ecea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ecc0:	f7ff f812 	bl	800dce8 <HAL_GetTick>
 800ecc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ecc6:	e008      	b.n	800ecda <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ecc8:	f7ff f80e 	bl	800dce8 <HAL_GetTick>
 800eccc:	4602      	mov	r2, r0
 800ecce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecd0:	1ad3      	subs	r3, r2, r3
 800ecd2:	2b64      	cmp	r3, #100	; 0x64
 800ecd4:	d901      	bls.n	800ecda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800ecd6:	2303      	movs	r3, #3
 800ecd8:	e342      	b.n	800f360 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ecda:	4b49      	ldr	r3, [pc, #292]	; (800ee00 <HAL_RCC_OscConfig+0x244>)
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d1f0      	bne.n	800ecc8 <HAL_RCC_OscConfig+0x10c>
 800ece6:	e000      	b.n	800ecea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ece8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	f003 0302 	and.w	r3, r3, #2
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	f000 808c 	beq.w	800ee10 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ecf8:	4b41      	ldr	r3, [pc, #260]	; (800ee00 <HAL_RCC_OscConfig+0x244>)
 800ecfa:	691b      	ldr	r3, [r3, #16]
 800ecfc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ed00:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ed02:	4b3f      	ldr	r3, [pc, #252]	; (800ee00 <HAL_RCC_OscConfig+0x244>)
 800ed04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed06:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ed08:	6a3b      	ldr	r3, [r7, #32]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d007      	beq.n	800ed1e <HAL_RCC_OscConfig+0x162>
 800ed0e:	6a3b      	ldr	r3, [r7, #32]
 800ed10:	2b18      	cmp	r3, #24
 800ed12:	d137      	bne.n	800ed84 <HAL_RCC_OscConfig+0x1c8>
 800ed14:	69fb      	ldr	r3, [r7, #28]
 800ed16:	f003 0303 	and.w	r3, r3, #3
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d132      	bne.n	800ed84 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ed1e:	4b38      	ldr	r3, [pc, #224]	; (800ee00 <HAL_RCC_OscConfig+0x244>)
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	f003 0304 	and.w	r3, r3, #4
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d005      	beq.n	800ed36 <HAL_RCC_OscConfig+0x17a>
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	68db      	ldr	r3, [r3, #12]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d101      	bne.n	800ed36 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800ed32:	2301      	movs	r3, #1
 800ed34:	e314      	b.n	800f360 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ed36:	4b32      	ldr	r3, [pc, #200]	; (800ee00 <HAL_RCC_OscConfig+0x244>)
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	f023 0219 	bic.w	r2, r3, #25
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	68db      	ldr	r3, [r3, #12]
 800ed42:	492f      	ldr	r1, [pc, #188]	; (800ee00 <HAL_RCC_OscConfig+0x244>)
 800ed44:	4313      	orrs	r3, r2
 800ed46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ed48:	f7fe ffce 	bl	800dce8 <HAL_GetTick>
 800ed4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ed4e:	e008      	b.n	800ed62 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ed50:	f7fe ffca 	bl	800dce8 <HAL_GetTick>
 800ed54:	4602      	mov	r2, r0
 800ed56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed58:	1ad3      	subs	r3, r2, r3
 800ed5a:	2b02      	cmp	r3, #2
 800ed5c:	d901      	bls.n	800ed62 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800ed5e:	2303      	movs	r3, #3
 800ed60:	e2fe      	b.n	800f360 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ed62:	4b27      	ldr	r3, [pc, #156]	; (800ee00 <HAL_RCC_OscConfig+0x244>)
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	f003 0304 	and.w	r3, r3, #4
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d0f0      	beq.n	800ed50 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ed6e:	4b24      	ldr	r3, [pc, #144]	; (800ee00 <HAL_RCC_OscConfig+0x244>)
 800ed70:	685b      	ldr	r3, [r3, #4]
 800ed72:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	691b      	ldr	r3, [r3, #16]
 800ed7a:	061b      	lsls	r3, r3, #24
 800ed7c:	4920      	ldr	r1, [pc, #128]	; (800ee00 <HAL_RCC_OscConfig+0x244>)
 800ed7e:	4313      	orrs	r3, r2
 800ed80:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ed82:	e045      	b.n	800ee10 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	68db      	ldr	r3, [r3, #12]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d026      	beq.n	800edda <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ed8c:	4b1c      	ldr	r3, [pc, #112]	; (800ee00 <HAL_RCC_OscConfig+0x244>)
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	f023 0219 	bic.w	r2, r3, #25
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	68db      	ldr	r3, [r3, #12]
 800ed98:	4919      	ldr	r1, [pc, #100]	; (800ee00 <HAL_RCC_OscConfig+0x244>)
 800ed9a:	4313      	orrs	r3, r2
 800ed9c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ed9e:	f7fe ffa3 	bl	800dce8 <HAL_GetTick>
 800eda2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800eda4:	e008      	b.n	800edb8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800eda6:	f7fe ff9f 	bl	800dce8 <HAL_GetTick>
 800edaa:	4602      	mov	r2, r0
 800edac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edae:	1ad3      	subs	r3, r2, r3
 800edb0:	2b02      	cmp	r3, #2
 800edb2:	d901      	bls.n	800edb8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800edb4:	2303      	movs	r3, #3
 800edb6:	e2d3      	b.n	800f360 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800edb8:	4b11      	ldr	r3, [pc, #68]	; (800ee00 <HAL_RCC_OscConfig+0x244>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	f003 0304 	and.w	r3, r3, #4
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d0f0      	beq.n	800eda6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800edc4:	4b0e      	ldr	r3, [pc, #56]	; (800ee00 <HAL_RCC_OscConfig+0x244>)
 800edc6:	685b      	ldr	r3, [r3, #4]
 800edc8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	691b      	ldr	r3, [r3, #16]
 800edd0:	061b      	lsls	r3, r3, #24
 800edd2:	490b      	ldr	r1, [pc, #44]	; (800ee00 <HAL_RCC_OscConfig+0x244>)
 800edd4:	4313      	orrs	r3, r2
 800edd6:	604b      	str	r3, [r1, #4]
 800edd8:	e01a      	b.n	800ee10 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800edda:	4b09      	ldr	r3, [pc, #36]	; (800ee00 <HAL_RCC_OscConfig+0x244>)
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	4a08      	ldr	r2, [pc, #32]	; (800ee00 <HAL_RCC_OscConfig+0x244>)
 800ede0:	f023 0301 	bic.w	r3, r3, #1
 800ede4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ede6:	f7fe ff7f 	bl	800dce8 <HAL_GetTick>
 800edea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800edec:	e00a      	b.n	800ee04 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800edee:	f7fe ff7b 	bl	800dce8 <HAL_GetTick>
 800edf2:	4602      	mov	r2, r0
 800edf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf6:	1ad3      	subs	r3, r2, r3
 800edf8:	2b02      	cmp	r3, #2
 800edfa:	d903      	bls.n	800ee04 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800edfc:	2303      	movs	r3, #3
 800edfe:	e2af      	b.n	800f360 <HAL_RCC_OscConfig+0x7a4>
 800ee00:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ee04:	4b96      	ldr	r3, [pc, #600]	; (800f060 <HAL_RCC_OscConfig+0x4a4>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	f003 0304 	and.w	r3, r3, #4
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d1ee      	bne.n	800edee <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	f003 0310 	and.w	r3, r3, #16
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d06a      	beq.n	800eef2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ee1c:	4b90      	ldr	r3, [pc, #576]	; (800f060 <HAL_RCC_OscConfig+0x4a4>)
 800ee1e:	691b      	ldr	r3, [r3, #16]
 800ee20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ee24:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ee26:	4b8e      	ldr	r3, [pc, #568]	; (800f060 <HAL_RCC_OscConfig+0x4a4>)
 800ee28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee2a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ee2c:	69bb      	ldr	r3, [r7, #24]
 800ee2e:	2b08      	cmp	r3, #8
 800ee30:	d007      	beq.n	800ee42 <HAL_RCC_OscConfig+0x286>
 800ee32:	69bb      	ldr	r3, [r7, #24]
 800ee34:	2b18      	cmp	r3, #24
 800ee36:	d11b      	bne.n	800ee70 <HAL_RCC_OscConfig+0x2b4>
 800ee38:	697b      	ldr	r3, [r7, #20]
 800ee3a:	f003 0303 	and.w	r3, r3, #3
 800ee3e:	2b01      	cmp	r3, #1
 800ee40:	d116      	bne.n	800ee70 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ee42:	4b87      	ldr	r3, [pc, #540]	; (800f060 <HAL_RCC_OscConfig+0x4a4>)
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d005      	beq.n	800ee5a <HAL_RCC_OscConfig+0x29e>
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	69db      	ldr	r3, [r3, #28]
 800ee52:	2b80      	cmp	r3, #128	; 0x80
 800ee54:	d001      	beq.n	800ee5a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800ee56:	2301      	movs	r3, #1
 800ee58:	e282      	b.n	800f360 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ee5a:	4b81      	ldr	r3, [pc, #516]	; (800f060 <HAL_RCC_OscConfig+0x4a4>)
 800ee5c:	68db      	ldr	r3, [r3, #12]
 800ee5e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	6a1b      	ldr	r3, [r3, #32]
 800ee66:	061b      	lsls	r3, r3, #24
 800ee68:	497d      	ldr	r1, [pc, #500]	; (800f060 <HAL_RCC_OscConfig+0x4a4>)
 800ee6a:	4313      	orrs	r3, r2
 800ee6c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ee6e:	e040      	b.n	800eef2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	69db      	ldr	r3, [r3, #28]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d023      	beq.n	800eec0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800ee78:	4b79      	ldr	r3, [pc, #484]	; (800f060 <HAL_RCC_OscConfig+0x4a4>)
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	4a78      	ldr	r2, [pc, #480]	; (800f060 <HAL_RCC_OscConfig+0x4a4>)
 800ee7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ee84:	f7fe ff30 	bl	800dce8 <HAL_GetTick>
 800ee88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ee8a:	e008      	b.n	800ee9e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ee8c:	f7fe ff2c 	bl	800dce8 <HAL_GetTick>
 800ee90:	4602      	mov	r2, r0
 800ee92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee94:	1ad3      	subs	r3, r2, r3
 800ee96:	2b02      	cmp	r3, #2
 800ee98:	d901      	bls.n	800ee9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800ee9a:	2303      	movs	r3, #3
 800ee9c:	e260      	b.n	800f360 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ee9e:	4b70      	ldr	r3, [pc, #448]	; (800f060 <HAL_RCC_OscConfig+0x4a4>)
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d0f0      	beq.n	800ee8c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800eeaa:	4b6d      	ldr	r3, [pc, #436]	; (800f060 <HAL_RCC_OscConfig+0x4a4>)
 800eeac:	68db      	ldr	r3, [r3, #12]
 800eeae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	6a1b      	ldr	r3, [r3, #32]
 800eeb6:	061b      	lsls	r3, r3, #24
 800eeb8:	4969      	ldr	r1, [pc, #420]	; (800f060 <HAL_RCC_OscConfig+0x4a4>)
 800eeba:	4313      	orrs	r3, r2
 800eebc:	60cb      	str	r3, [r1, #12]
 800eebe:	e018      	b.n	800eef2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800eec0:	4b67      	ldr	r3, [pc, #412]	; (800f060 <HAL_RCC_OscConfig+0x4a4>)
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	4a66      	ldr	r2, [pc, #408]	; (800f060 <HAL_RCC_OscConfig+0x4a4>)
 800eec6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eeca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eecc:	f7fe ff0c 	bl	800dce8 <HAL_GetTick>
 800eed0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800eed2:	e008      	b.n	800eee6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800eed4:	f7fe ff08 	bl	800dce8 <HAL_GetTick>
 800eed8:	4602      	mov	r2, r0
 800eeda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eedc:	1ad3      	subs	r3, r2, r3
 800eede:	2b02      	cmp	r3, #2
 800eee0:	d901      	bls.n	800eee6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800eee2:	2303      	movs	r3, #3
 800eee4:	e23c      	b.n	800f360 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800eee6:	4b5e      	ldr	r3, [pc, #376]	; (800f060 <HAL_RCC_OscConfig+0x4a4>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d1f0      	bne.n	800eed4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	f003 0308 	and.w	r3, r3, #8
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d036      	beq.n	800ef6c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	695b      	ldr	r3, [r3, #20]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d019      	beq.n	800ef3a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ef06:	4b56      	ldr	r3, [pc, #344]	; (800f060 <HAL_RCC_OscConfig+0x4a4>)
 800ef08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef0a:	4a55      	ldr	r2, [pc, #340]	; (800f060 <HAL_RCC_OscConfig+0x4a4>)
 800ef0c:	f043 0301 	orr.w	r3, r3, #1
 800ef10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ef12:	f7fe fee9 	bl	800dce8 <HAL_GetTick>
 800ef16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ef18:	e008      	b.n	800ef2c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ef1a:	f7fe fee5 	bl	800dce8 <HAL_GetTick>
 800ef1e:	4602      	mov	r2, r0
 800ef20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef22:	1ad3      	subs	r3, r2, r3
 800ef24:	2b02      	cmp	r3, #2
 800ef26:	d901      	bls.n	800ef2c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800ef28:	2303      	movs	r3, #3
 800ef2a:	e219      	b.n	800f360 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ef2c:	4b4c      	ldr	r3, [pc, #304]	; (800f060 <HAL_RCC_OscConfig+0x4a4>)
 800ef2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef30:	f003 0302 	and.w	r3, r3, #2
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d0f0      	beq.n	800ef1a <HAL_RCC_OscConfig+0x35e>
 800ef38:	e018      	b.n	800ef6c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ef3a:	4b49      	ldr	r3, [pc, #292]	; (800f060 <HAL_RCC_OscConfig+0x4a4>)
 800ef3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef3e:	4a48      	ldr	r2, [pc, #288]	; (800f060 <HAL_RCC_OscConfig+0x4a4>)
 800ef40:	f023 0301 	bic.w	r3, r3, #1
 800ef44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ef46:	f7fe fecf 	bl	800dce8 <HAL_GetTick>
 800ef4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ef4c:	e008      	b.n	800ef60 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ef4e:	f7fe fecb 	bl	800dce8 <HAL_GetTick>
 800ef52:	4602      	mov	r2, r0
 800ef54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef56:	1ad3      	subs	r3, r2, r3
 800ef58:	2b02      	cmp	r3, #2
 800ef5a:	d901      	bls.n	800ef60 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800ef5c:	2303      	movs	r3, #3
 800ef5e:	e1ff      	b.n	800f360 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ef60:	4b3f      	ldr	r3, [pc, #252]	; (800f060 <HAL_RCC_OscConfig+0x4a4>)
 800ef62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef64:	f003 0302 	and.w	r3, r3, #2
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d1f0      	bne.n	800ef4e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	f003 0320 	and.w	r3, r3, #32
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d036      	beq.n	800efe6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	699b      	ldr	r3, [r3, #24]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d019      	beq.n	800efb4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ef80:	4b37      	ldr	r3, [pc, #220]	; (800f060 <HAL_RCC_OscConfig+0x4a4>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	4a36      	ldr	r2, [pc, #216]	; (800f060 <HAL_RCC_OscConfig+0x4a4>)
 800ef86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ef8a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ef8c:	f7fe feac 	bl	800dce8 <HAL_GetTick>
 800ef90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ef92:	e008      	b.n	800efa6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ef94:	f7fe fea8 	bl	800dce8 <HAL_GetTick>
 800ef98:	4602      	mov	r2, r0
 800ef9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef9c:	1ad3      	subs	r3, r2, r3
 800ef9e:	2b02      	cmp	r3, #2
 800efa0:	d901      	bls.n	800efa6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800efa2:	2303      	movs	r3, #3
 800efa4:	e1dc      	b.n	800f360 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800efa6:	4b2e      	ldr	r3, [pc, #184]	; (800f060 <HAL_RCC_OscConfig+0x4a4>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d0f0      	beq.n	800ef94 <HAL_RCC_OscConfig+0x3d8>
 800efb2:	e018      	b.n	800efe6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800efb4:	4b2a      	ldr	r3, [pc, #168]	; (800f060 <HAL_RCC_OscConfig+0x4a4>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	4a29      	ldr	r2, [pc, #164]	; (800f060 <HAL_RCC_OscConfig+0x4a4>)
 800efba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800efbe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800efc0:	f7fe fe92 	bl	800dce8 <HAL_GetTick>
 800efc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800efc6:	e008      	b.n	800efda <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800efc8:	f7fe fe8e 	bl	800dce8 <HAL_GetTick>
 800efcc:	4602      	mov	r2, r0
 800efce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd0:	1ad3      	subs	r3, r2, r3
 800efd2:	2b02      	cmp	r3, #2
 800efd4:	d901      	bls.n	800efda <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800efd6:	2303      	movs	r3, #3
 800efd8:	e1c2      	b.n	800f360 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800efda:	4b21      	ldr	r3, [pc, #132]	; (800f060 <HAL_RCC_OscConfig+0x4a4>)
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d1f0      	bne.n	800efc8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	f003 0304 	and.w	r3, r3, #4
 800efee:	2b00      	cmp	r3, #0
 800eff0:	f000 8086 	beq.w	800f100 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800eff4:	4b1b      	ldr	r3, [pc, #108]	; (800f064 <HAL_RCC_OscConfig+0x4a8>)
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	4a1a      	ldr	r2, [pc, #104]	; (800f064 <HAL_RCC_OscConfig+0x4a8>)
 800effa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800effe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f000:	f7fe fe72 	bl	800dce8 <HAL_GetTick>
 800f004:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f006:	e008      	b.n	800f01a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f008:	f7fe fe6e 	bl	800dce8 <HAL_GetTick>
 800f00c:	4602      	mov	r2, r0
 800f00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f010:	1ad3      	subs	r3, r2, r3
 800f012:	2b64      	cmp	r3, #100	; 0x64
 800f014:	d901      	bls.n	800f01a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800f016:	2303      	movs	r3, #3
 800f018:	e1a2      	b.n	800f360 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f01a:	4b12      	ldr	r3, [pc, #72]	; (800f064 <HAL_RCC_OscConfig+0x4a8>)
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f022:	2b00      	cmp	r3, #0
 800f024:	d0f0      	beq.n	800f008 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	689b      	ldr	r3, [r3, #8]
 800f02a:	2b01      	cmp	r3, #1
 800f02c:	d106      	bne.n	800f03c <HAL_RCC_OscConfig+0x480>
 800f02e:	4b0c      	ldr	r3, [pc, #48]	; (800f060 <HAL_RCC_OscConfig+0x4a4>)
 800f030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f032:	4a0b      	ldr	r2, [pc, #44]	; (800f060 <HAL_RCC_OscConfig+0x4a4>)
 800f034:	f043 0301 	orr.w	r3, r3, #1
 800f038:	6713      	str	r3, [r2, #112]	; 0x70
 800f03a:	e032      	b.n	800f0a2 <HAL_RCC_OscConfig+0x4e6>
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	689b      	ldr	r3, [r3, #8]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d111      	bne.n	800f068 <HAL_RCC_OscConfig+0x4ac>
 800f044:	4b06      	ldr	r3, [pc, #24]	; (800f060 <HAL_RCC_OscConfig+0x4a4>)
 800f046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f048:	4a05      	ldr	r2, [pc, #20]	; (800f060 <HAL_RCC_OscConfig+0x4a4>)
 800f04a:	f023 0301 	bic.w	r3, r3, #1
 800f04e:	6713      	str	r3, [r2, #112]	; 0x70
 800f050:	4b03      	ldr	r3, [pc, #12]	; (800f060 <HAL_RCC_OscConfig+0x4a4>)
 800f052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f054:	4a02      	ldr	r2, [pc, #8]	; (800f060 <HAL_RCC_OscConfig+0x4a4>)
 800f056:	f023 0304 	bic.w	r3, r3, #4
 800f05a:	6713      	str	r3, [r2, #112]	; 0x70
 800f05c:	e021      	b.n	800f0a2 <HAL_RCC_OscConfig+0x4e6>
 800f05e:	bf00      	nop
 800f060:	58024400 	.word	0x58024400
 800f064:	58024800 	.word	0x58024800
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	689b      	ldr	r3, [r3, #8]
 800f06c:	2b05      	cmp	r3, #5
 800f06e:	d10c      	bne.n	800f08a <HAL_RCC_OscConfig+0x4ce>
 800f070:	4b83      	ldr	r3, [pc, #524]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f074:	4a82      	ldr	r2, [pc, #520]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f076:	f043 0304 	orr.w	r3, r3, #4
 800f07a:	6713      	str	r3, [r2, #112]	; 0x70
 800f07c:	4b80      	ldr	r3, [pc, #512]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f07e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f080:	4a7f      	ldr	r2, [pc, #508]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f082:	f043 0301 	orr.w	r3, r3, #1
 800f086:	6713      	str	r3, [r2, #112]	; 0x70
 800f088:	e00b      	b.n	800f0a2 <HAL_RCC_OscConfig+0x4e6>
 800f08a:	4b7d      	ldr	r3, [pc, #500]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f08c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f08e:	4a7c      	ldr	r2, [pc, #496]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f090:	f023 0301 	bic.w	r3, r3, #1
 800f094:	6713      	str	r3, [r2, #112]	; 0x70
 800f096:	4b7a      	ldr	r3, [pc, #488]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f09a:	4a79      	ldr	r2, [pc, #484]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f09c:	f023 0304 	bic.w	r3, r3, #4
 800f0a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	689b      	ldr	r3, [r3, #8]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d015      	beq.n	800f0d6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f0aa:	f7fe fe1d 	bl	800dce8 <HAL_GetTick>
 800f0ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f0b0:	e00a      	b.n	800f0c8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f0b2:	f7fe fe19 	bl	800dce8 <HAL_GetTick>
 800f0b6:	4602      	mov	r2, r0
 800f0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ba:	1ad3      	subs	r3, r2, r3
 800f0bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800f0c0:	4293      	cmp	r3, r2
 800f0c2:	d901      	bls.n	800f0c8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800f0c4:	2303      	movs	r3, #3
 800f0c6:	e14b      	b.n	800f360 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f0c8:	4b6d      	ldr	r3, [pc, #436]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f0ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0cc:	f003 0302 	and.w	r3, r3, #2
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d0ee      	beq.n	800f0b2 <HAL_RCC_OscConfig+0x4f6>
 800f0d4:	e014      	b.n	800f100 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f0d6:	f7fe fe07 	bl	800dce8 <HAL_GetTick>
 800f0da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800f0dc:	e00a      	b.n	800f0f4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f0de:	f7fe fe03 	bl	800dce8 <HAL_GetTick>
 800f0e2:	4602      	mov	r2, r0
 800f0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0e6:	1ad3      	subs	r3, r2, r3
 800f0e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800f0ec:	4293      	cmp	r3, r2
 800f0ee:	d901      	bls.n	800f0f4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800f0f0:	2303      	movs	r3, #3
 800f0f2:	e135      	b.n	800f360 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800f0f4:	4b62      	ldr	r3, [pc, #392]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f0f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0f8:	f003 0302 	and.w	r3, r3, #2
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d1ee      	bne.n	800f0de <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f104:	2b00      	cmp	r3, #0
 800f106:	f000 812a 	beq.w	800f35e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800f10a:	4b5d      	ldr	r3, [pc, #372]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f10c:	691b      	ldr	r3, [r3, #16]
 800f10e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f112:	2b18      	cmp	r3, #24
 800f114:	f000 80ba 	beq.w	800f28c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f11c:	2b02      	cmp	r3, #2
 800f11e:	f040 8095 	bne.w	800f24c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f122:	4b57      	ldr	r3, [pc, #348]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	4a56      	ldr	r2, [pc, #344]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f128:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f12c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f12e:	f7fe fddb 	bl	800dce8 <HAL_GetTick>
 800f132:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f134:	e008      	b.n	800f148 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f136:	f7fe fdd7 	bl	800dce8 <HAL_GetTick>
 800f13a:	4602      	mov	r2, r0
 800f13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f13e:	1ad3      	subs	r3, r2, r3
 800f140:	2b02      	cmp	r3, #2
 800f142:	d901      	bls.n	800f148 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800f144:	2303      	movs	r3, #3
 800f146:	e10b      	b.n	800f360 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f148:	4b4d      	ldr	r3, [pc, #308]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f150:	2b00      	cmp	r3, #0
 800f152:	d1f0      	bne.n	800f136 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f154:	4b4a      	ldr	r3, [pc, #296]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f156:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f158:	4b4a      	ldr	r3, [pc, #296]	; (800f284 <HAL_RCC_OscConfig+0x6c8>)
 800f15a:	4013      	ands	r3, r2
 800f15c:	687a      	ldr	r2, [r7, #4]
 800f15e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800f160:	687a      	ldr	r2, [r7, #4]
 800f162:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800f164:	0112      	lsls	r2, r2, #4
 800f166:	430a      	orrs	r2, r1
 800f168:	4945      	ldr	r1, [pc, #276]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f16a:	4313      	orrs	r3, r2
 800f16c:	628b      	str	r3, [r1, #40]	; 0x28
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f172:	3b01      	subs	r3, #1
 800f174:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f17c:	3b01      	subs	r3, #1
 800f17e:	025b      	lsls	r3, r3, #9
 800f180:	b29b      	uxth	r3, r3
 800f182:	431a      	orrs	r2, r3
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f188:	3b01      	subs	r3, #1
 800f18a:	041b      	lsls	r3, r3, #16
 800f18c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800f190:	431a      	orrs	r2, r3
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f196:	3b01      	subs	r3, #1
 800f198:	061b      	lsls	r3, r3, #24
 800f19a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800f19e:	4938      	ldr	r1, [pc, #224]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f1a0:	4313      	orrs	r3, r2
 800f1a2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800f1a4:	4b36      	ldr	r3, [pc, #216]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1a8:	4a35      	ldr	r2, [pc, #212]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f1aa:	f023 0301 	bic.w	r3, r3, #1
 800f1ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800f1b0:	4b33      	ldr	r3, [pc, #204]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f1b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f1b4:	4b34      	ldr	r3, [pc, #208]	; (800f288 <HAL_RCC_OscConfig+0x6cc>)
 800f1b6:	4013      	ands	r3, r2
 800f1b8:	687a      	ldr	r2, [r7, #4]
 800f1ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800f1bc:	00d2      	lsls	r2, r2, #3
 800f1be:	4930      	ldr	r1, [pc, #192]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f1c0:	4313      	orrs	r3, r2
 800f1c2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800f1c4:	4b2e      	ldr	r3, [pc, #184]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1c8:	f023 020c 	bic.w	r2, r3, #12
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1d0:	492b      	ldr	r1, [pc, #172]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f1d2:	4313      	orrs	r3, r2
 800f1d4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800f1d6:	4b2a      	ldr	r3, [pc, #168]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f1d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1da:	f023 0202 	bic.w	r2, r3, #2
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1e2:	4927      	ldr	r1, [pc, #156]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f1e4:	4313      	orrs	r3, r2
 800f1e6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800f1e8:	4b25      	ldr	r3, [pc, #148]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f1ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1ec:	4a24      	ldr	r2, [pc, #144]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f1ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f1f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f1f4:	4b22      	ldr	r3, [pc, #136]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1f8:	4a21      	ldr	r2, [pc, #132]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f1fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f1fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800f200:	4b1f      	ldr	r3, [pc, #124]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f204:	4a1e      	ldr	r2, [pc, #120]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f206:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f20a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800f20c:	4b1c      	ldr	r3, [pc, #112]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f210:	4a1b      	ldr	r2, [pc, #108]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f212:	f043 0301 	orr.w	r3, r3, #1
 800f216:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f218:	4b19      	ldr	r3, [pc, #100]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	4a18      	ldr	r2, [pc, #96]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f21e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f222:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f224:	f7fe fd60 	bl	800dce8 <HAL_GetTick>
 800f228:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f22a:	e008      	b.n	800f23e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f22c:	f7fe fd5c 	bl	800dce8 <HAL_GetTick>
 800f230:	4602      	mov	r2, r0
 800f232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f234:	1ad3      	subs	r3, r2, r3
 800f236:	2b02      	cmp	r3, #2
 800f238:	d901      	bls.n	800f23e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800f23a:	2303      	movs	r3, #3
 800f23c:	e090      	b.n	800f360 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f23e:	4b10      	ldr	r3, [pc, #64]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f246:	2b00      	cmp	r3, #0
 800f248:	d0f0      	beq.n	800f22c <HAL_RCC_OscConfig+0x670>
 800f24a:	e088      	b.n	800f35e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f24c:	4b0c      	ldr	r3, [pc, #48]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	4a0b      	ldr	r2, [pc, #44]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f252:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f256:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f258:	f7fe fd46 	bl	800dce8 <HAL_GetTick>
 800f25c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f25e:	e008      	b.n	800f272 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f260:	f7fe fd42 	bl	800dce8 <HAL_GetTick>
 800f264:	4602      	mov	r2, r0
 800f266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f268:	1ad3      	subs	r3, r2, r3
 800f26a:	2b02      	cmp	r3, #2
 800f26c:	d901      	bls.n	800f272 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800f26e:	2303      	movs	r3, #3
 800f270:	e076      	b.n	800f360 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f272:	4b03      	ldr	r3, [pc, #12]	; (800f280 <HAL_RCC_OscConfig+0x6c4>)
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d1f0      	bne.n	800f260 <HAL_RCC_OscConfig+0x6a4>
 800f27e:	e06e      	b.n	800f35e <HAL_RCC_OscConfig+0x7a2>
 800f280:	58024400 	.word	0x58024400
 800f284:	fffffc0c 	.word	0xfffffc0c
 800f288:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800f28c:	4b36      	ldr	r3, [pc, #216]	; (800f368 <HAL_RCC_OscConfig+0x7ac>)
 800f28e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f290:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800f292:	4b35      	ldr	r3, [pc, #212]	; (800f368 <HAL_RCC_OscConfig+0x7ac>)
 800f294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f296:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f29c:	2b01      	cmp	r3, #1
 800f29e:	d031      	beq.n	800f304 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f2a0:	693b      	ldr	r3, [r7, #16]
 800f2a2:	f003 0203 	and.w	r2, r3, #3
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f2aa:	429a      	cmp	r2, r3
 800f2ac:	d12a      	bne.n	800f304 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800f2ae:	693b      	ldr	r3, [r7, #16]
 800f2b0:	091b      	lsrs	r3, r3, #4
 800f2b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f2ba:	429a      	cmp	r2, r3
 800f2bc:	d122      	bne.n	800f304 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800f2ca:	429a      	cmp	r2, r3
 800f2cc:	d11a      	bne.n	800f304 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	0a5b      	lsrs	r3, r3, #9
 800f2d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2da:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800f2dc:	429a      	cmp	r2, r3
 800f2de:	d111      	bne.n	800f304 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	0c1b      	lsrs	r3, r3, #16
 800f2e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800f2ee:	429a      	cmp	r2, r3
 800f2f0:	d108      	bne.n	800f304 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	0e1b      	lsrs	r3, r3, #24
 800f2f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2fe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800f300:	429a      	cmp	r2, r3
 800f302:	d001      	beq.n	800f308 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800f304:	2301      	movs	r3, #1
 800f306:	e02b      	b.n	800f360 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800f308:	4b17      	ldr	r3, [pc, #92]	; (800f368 <HAL_RCC_OscConfig+0x7ac>)
 800f30a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f30c:	08db      	lsrs	r3, r3, #3
 800f30e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f312:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f318:	693a      	ldr	r2, [r7, #16]
 800f31a:	429a      	cmp	r2, r3
 800f31c:	d01f      	beq.n	800f35e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800f31e:	4b12      	ldr	r3, [pc, #72]	; (800f368 <HAL_RCC_OscConfig+0x7ac>)
 800f320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f322:	4a11      	ldr	r2, [pc, #68]	; (800f368 <HAL_RCC_OscConfig+0x7ac>)
 800f324:	f023 0301 	bic.w	r3, r3, #1
 800f328:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f32a:	f7fe fcdd 	bl	800dce8 <HAL_GetTick>
 800f32e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800f330:	bf00      	nop
 800f332:	f7fe fcd9 	bl	800dce8 <HAL_GetTick>
 800f336:	4602      	mov	r2, r0
 800f338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f33a:	4293      	cmp	r3, r2
 800f33c:	d0f9      	beq.n	800f332 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800f33e:	4b0a      	ldr	r3, [pc, #40]	; (800f368 <HAL_RCC_OscConfig+0x7ac>)
 800f340:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f342:	4b0a      	ldr	r3, [pc, #40]	; (800f36c <HAL_RCC_OscConfig+0x7b0>)
 800f344:	4013      	ands	r3, r2
 800f346:	687a      	ldr	r2, [r7, #4]
 800f348:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800f34a:	00d2      	lsls	r2, r2, #3
 800f34c:	4906      	ldr	r1, [pc, #24]	; (800f368 <HAL_RCC_OscConfig+0x7ac>)
 800f34e:	4313      	orrs	r3, r2
 800f350:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800f352:	4b05      	ldr	r3, [pc, #20]	; (800f368 <HAL_RCC_OscConfig+0x7ac>)
 800f354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f356:	4a04      	ldr	r2, [pc, #16]	; (800f368 <HAL_RCC_OscConfig+0x7ac>)
 800f358:	f043 0301 	orr.w	r3, r3, #1
 800f35c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800f35e:	2300      	movs	r3, #0
}
 800f360:	4618      	mov	r0, r3
 800f362:	3730      	adds	r7, #48	; 0x30
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}
 800f368:	58024400 	.word	0x58024400
 800f36c:	ffff0007 	.word	0xffff0007

0800f370 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b086      	sub	sp, #24
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
 800f378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d101      	bne.n	800f384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f380:	2301      	movs	r3, #1
 800f382:	e19c      	b.n	800f6be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800f384:	4b8a      	ldr	r3, [pc, #552]	; (800f5b0 <HAL_RCC_ClockConfig+0x240>)
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	f003 030f 	and.w	r3, r3, #15
 800f38c:	683a      	ldr	r2, [r7, #0]
 800f38e:	429a      	cmp	r2, r3
 800f390:	d910      	bls.n	800f3b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f392:	4b87      	ldr	r3, [pc, #540]	; (800f5b0 <HAL_RCC_ClockConfig+0x240>)
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	f023 020f 	bic.w	r2, r3, #15
 800f39a:	4985      	ldr	r1, [pc, #532]	; (800f5b0 <HAL_RCC_ClockConfig+0x240>)
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	4313      	orrs	r3, r2
 800f3a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f3a2:	4b83      	ldr	r3, [pc, #524]	; (800f5b0 <HAL_RCC_ClockConfig+0x240>)
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	f003 030f 	and.w	r3, r3, #15
 800f3aa:	683a      	ldr	r2, [r7, #0]
 800f3ac:	429a      	cmp	r2, r3
 800f3ae:	d001      	beq.n	800f3b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800f3b0:	2301      	movs	r3, #1
 800f3b2:	e184      	b.n	800f6be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	f003 0304 	and.w	r3, r3, #4
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d010      	beq.n	800f3e2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	691a      	ldr	r2, [r3, #16]
 800f3c4:	4b7b      	ldr	r3, [pc, #492]	; (800f5b4 <HAL_RCC_ClockConfig+0x244>)
 800f3c6:	699b      	ldr	r3, [r3, #24]
 800f3c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800f3cc:	429a      	cmp	r2, r3
 800f3ce:	d908      	bls.n	800f3e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800f3d0:	4b78      	ldr	r3, [pc, #480]	; (800f5b4 <HAL_RCC_ClockConfig+0x244>)
 800f3d2:	699b      	ldr	r3, [r3, #24]
 800f3d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	691b      	ldr	r3, [r3, #16]
 800f3dc:	4975      	ldr	r1, [pc, #468]	; (800f5b4 <HAL_RCC_ClockConfig+0x244>)
 800f3de:	4313      	orrs	r3, r2
 800f3e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	f003 0308 	and.w	r3, r3, #8
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d010      	beq.n	800f410 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	695a      	ldr	r2, [r3, #20]
 800f3f2:	4b70      	ldr	r3, [pc, #448]	; (800f5b4 <HAL_RCC_ClockConfig+0x244>)
 800f3f4:	69db      	ldr	r3, [r3, #28]
 800f3f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800f3fa:	429a      	cmp	r2, r3
 800f3fc:	d908      	bls.n	800f410 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800f3fe:	4b6d      	ldr	r3, [pc, #436]	; (800f5b4 <HAL_RCC_ClockConfig+0x244>)
 800f400:	69db      	ldr	r3, [r3, #28]
 800f402:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	695b      	ldr	r3, [r3, #20]
 800f40a:	496a      	ldr	r1, [pc, #424]	; (800f5b4 <HAL_RCC_ClockConfig+0x244>)
 800f40c:	4313      	orrs	r3, r2
 800f40e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	f003 0310 	and.w	r3, r3, #16
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d010      	beq.n	800f43e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	699a      	ldr	r2, [r3, #24]
 800f420:	4b64      	ldr	r3, [pc, #400]	; (800f5b4 <HAL_RCC_ClockConfig+0x244>)
 800f422:	69db      	ldr	r3, [r3, #28]
 800f424:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f428:	429a      	cmp	r2, r3
 800f42a:	d908      	bls.n	800f43e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800f42c:	4b61      	ldr	r3, [pc, #388]	; (800f5b4 <HAL_RCC_ClockConfig+0x244>)
 800f42e:	69db      	ldr	r3, [r3, #28]
 800f430:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	699b      	ldr	r3, [r3, #24]
 800f438:	495e      	ldr	r1, [pc, #376]	; (800f5b4 <HAL_RCC_ClockConfig+0x244>)
 800f43a:	4313      	orrs	r3, r2
 800f43c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	f003 0320 	and.w	r3, r3, #32
 800f446:	2b00      	cmp	r3, #0
 800f448:	d010      	beq.n	800f46c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	69da      	ldr	r2, [r3, #28]
 800f44e:	4b59      	ldr	r3, [pc, #356]	; (800f5b4 <HAL_RCC_ClockConfig+0x244>)
 800f450:	6a1b      	ldr	r3, [r3, #32]
 800f452:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800f456:	429a      	cmp	r2, r3
 800f458:	d908      	bls.n	800f46c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800f45a:	4b56      	ldr	r3, [pc, #344]	; (800f5b4 <HAL_RCC_ClockConfig+0x244>)
 800f45c:	6a1b      	ldr	r3, [r3, #32]
 800f45e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	69db      	ldr	r3, [r3, #28]
 800f466:	4953      	ldr	r1, [pc, #332]	; (800f5b4 <HAL_RCC_ClockConfig+0x244>)
 800f468:	4313      	orrs	r3, r2
 800f46a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	f003 0302 	and.w	r3, r3, #2
 800f474:	2b00      	cmp	r3, #0
 800f476:	d010      	beq.n	800f49a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	68da      	ldr	r2, [r3, #12]
 800f47c:	4b4d      	ldr	r3, [pc, #308]	; (800f5b4 <HAL_RCC_ClockConfig+0x244>)
 800f47e:	699b      	ldr	r3, [r3, #24]
 800f480:	f003 030f 	and.w	r3, r3, #15
 800f484:	429a      	cmp	r2, r3
 800f486:	d908      	bls.n	800f49a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f488:	4b4a      	ldr	r3, [pc, #296]	; (800f5b4 <HAL_RCC_ClockConfig+0x244>)
 800f48a:	699b      	ldr	r3, [r3, #24]
 800f48c:	f023 020f 	bic.w	r2, r3, #15
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	68db      	ldr	r3, [r3, #12]
 800f494:	4947      	ldr	r1, [pc, #284]	; (800f5b4 <HAL_RCC_ClockConfig+0x244>)
 800f496:	4313      	orrs	r3, r2
 800f498:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	f003 0301 	and.w	r3, r3, #1
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d055      	beq.n	800f552 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800f4a6:	4b43      	ldr	r3, [pc, #268]	; (800f5b4 <HAL_RCC_ClockConfig+0x244>)
 800f4a8:	699b      	ldr	r3, [r3, #24]
 800f4aa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	689b      	ldr	r3, [r3, #8]
 800f4b2:	4940      	ldr	r1, [pc, #256]	; (800f5b4 <HAL_RCC_ClockConfig+0x244>)
 800f4b4:	4313      	orrs	r3, r2
 800f4b6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	685b      	ldr	r3, [r3, #4]
 800f4bc:	2b02      	cmp	r3, #2
 800f4be:	d107      	bne.n	800f4d0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f4c0:	4b3c      	ldr	r3, [pc, #240]	; (800f5b4 <HAL_RCC_ClockConfig+0x244>)
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d121      	bne.n	800f510 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800f4cc:	2301      	movs	r3, #1
 800f4ce:	e0f6      	b.n	800f6be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	685b      	ldr	r3, [r3, #4]
 800f4d4:	2b03      	cmp	r3, #3
 800f4d6:	d107      	bne.n	800f4e8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f4d8:	4b36      	ldr	r3, [pc, #216]	; (800f5b4 <HAL_RCC_ClockConfig+0x244>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d115      	bne.n	800f510 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800f4e4:	2301      	movs	r3, #1
 800f4e6:	e0ea      	b.n	800f6be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	685b      	ldr	r3, [r3, #4]
 800f4ec:	2b01      	cmp	r3, #1
 800f4ee:	d107      	bne.n	800f500 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f4f0:	4b30      	ldr	r3, [pc, #192]	; (800f5b4 <HAL_RCC_ClockConfig+0x244>)
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d109      	bne.n	800f510 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800f4fc:	2301      	movs	r3, #1
 800f4fe:	e0de      	b.n	800f6be <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f500:	4b2c      	ldr	r3, [pc, #176]	; (800f5b4 <HAL_RCC_ClockConfig+0x244>)
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	f003 0304 	and.w	r3, r3, #4
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d101      	bne.n	800f510 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800f50c:	2301      	movs	r3, #1
 800f50e:	e0d6      	b.n	800f6be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800f510:	4b28      	ldr	r3, [pc, #160]	; (800f5b4 <HAL_RCC_ClockConfig+0x244>)
 800f512:	691b      	ldr	r3, [r3, #16]
 800f514:	f023 0207 	bic.w	r2, r3, #7
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	685b      	ldr	r3, [r3, #4]
 800f51c:	4925      	ldr	r1, [pc, #148]	; (800f5b4 <HAL_RCC_ClockConfig+0x244>)
 800f51e:	4313      	orrs	r3, r2
 800f520:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f522:	f7fe fbe1 	bl	800dce8 <HAL_GetTick>
 800f526:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f528:	e00a      	b.n	800f540 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f52a:	f7fe fbdd 	bl	800dce8 <HAL_GetTick>
 800f52e:	4602      	mov	r2, r0
 800f530:	697b      	ldr	r3, [r7, #20]
 800f532:	1ad3      	subs	r3, r2, r3
 800f534:	f241 3288 	movw	r2, #5000	; 0x1388
 800f538:	4293      	cmp	r3, r2
 800f53a:	d901      	bls.n	800f540 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800f53c:	2303      	movs	r3, #3
 800f53e:	e0be      	b.n	800f6be <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f540:	4b1c      	ldr	r3, [pc, #112]	; (800f5b4 <HAL_RCC_ClockConfig+0x244>)
 800f542:	691b      	ldr	r3, [r3, #16]
 800f544:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	685b      	ldr	r3, [r3, #4]
 800f54c:	00db      	lsls	r3, r3, #3
 800f54e:	429a      	cmp	r2, r3
 800f550:	d1eb      	bne.n	800f52a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	f003 0302 	and.w	r3, r3, #2
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d010      	beq.n	800f580 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	68da      	ldr	r2, [r3, #12]
 800f562:	4b14      	ldr	r3, [pc, #80]	; (800f5b4 <HAL_RCC_ClockConfig+0x244>)
 800f564:	699b      	ldr	r3, [r3, #24]
 800f566:	f003 030f 	and.w	r3, r3, #15
 800f56a:	429a      	cmp	r2, r3
 800f56c:	d208      	bcs.n	800f580 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f56e:	4b11      	ldr	r3, [pc, #68]	; (800f5b4 <HAL_RCC_ClockConfig+0x244>)
 800f570:	699b      	ldr	r3, [r3, #24]
 800f572:	f023 020f 	bic.w	r2, r3, #15
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	68db      	ldr	r3, [r3, #12]
 800f57a:	490e      	ldr	r1, [pc, #56]	; (800f5b4 <HAL_RCC_ClockConfig+0x244>)
 800f57c:	4313      	orrs	r3, r2
 800f57e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800f580:	4b0b      	ldr	r3, [pc, #44]	; (800f5b0 <HAL_RCC_ClockConfig+0x240>)
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	f003 030f 	and.w	r3, r3, #15
 800f588:	683a      	ldr	r2, [r7, #0]
 800f58a:	429a      	cmp	r2, r3
 800f58c:	d214      	bcs.n	800f5b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f58e:	4b08      	ldr	r3, [pc, #32]	; (800f5b0 <HAL_RCC_ClockConfig+0x240>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	f023 020f 	bic.w	r2, r3, #15
 800f596:	4906      	ldr	r1, [pc, #24]	; (800f5b0 <HAL_RCC_ClockConfig+0x240>)
 800f598:	683b      	ldr	r3, [r7, #0]
 800f59a:	4313      	orrs	r3, r2
 800f59c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f59e:	4b04      	ldr	r3, [pc, #16]	; (800f5b0 <HAL_RCC_ClockConfig+0x240>)
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	f003 030f 	and.w	r3, r3, #15
 800f5a6:	683a      	ldr	r2, [r7, #0]
 800f5a8:	429a      	cmp	r2, r3
 800f5aa:	d005      	beq.n	800f5b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800f5ac:	2301      	movs	r3, #1
 800f5ae:	e086      	b.n	800f6be <HAL_RCC_ClockConfig+0x34e>
 800f5b0:	52002000 	.word	0x52002000
 800f5b4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	f003 0304 	and.w	r3, r3, #4
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d010      	beq.n	800f5e6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	691a      	ldr	r2, [r3, #16]
 800f5c8:	4b3f      	ldr	r3, [pc, #252]	; (800f6c8 <HAL_RCC_ClockConfig+0x358>)
 800f5ca:	699b      	ldr	r3, [r3, #24]
 800f5cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800f5d0:	429a      	cmp	r2, r3
 800f5d2:	d208      	bcs.n	800f5e6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800f5d4:	4b3c      	ldr	r3, [pc, #240]	; (800f6c8 <HAL_RCC_ClockConfig+0x358>)
 800f5d6:	699b      	ldr	r3, [r3, #24]
 800f5d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	691b      	ldr	r3, [r3, #16]
 800f5e0:	4939      	ldr	r1, [pc, #228]	; (800f6c8 <HAL_RCC_ClockConfig+0x358>)
 800f5e2:	4313      	orrs	r3, r2
 800f5e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	f003 0308 	and.w	r3, r3, #8
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d010      	beq.n	800f614 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	695a      	ldr	r2, [r3, #20]
 800f5f6:	4b34      	ldr	r3, [pc, #208]	; (800f6c8 <HAL_RCC_ClockConfig+0x358>)
 800f5f8:	69db      	ldr	r3, [r3, #28]
 800f5fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800f5fe:	429a      	cmp	r2, r3
 800f600:	d208      	bcs.n	800f614 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800f602:	4b31      	ldr	r3, [pc, #196]	; (800f6c8 <HAL_RCC_ClockConfig+0x358>)
 800f604:	69db      	ldr	r3, [r3, #28]
 800f606:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	695b      	ldr	r3, [r3, #20]
 800f60e:	492e      	ldr	r1, [pc, #184]	; (800f6c8 <HAL_RCC_ClockConfig+0x358>)
 800f610:	4313      	orrs	r3, r2
 800f612:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	f003 0310 	and.w	r3, r3, #16
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d010      	beq.n	800f642 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	699a      	ldr	r2, [r3, #24]
 800f624:	4b28      	ldr	r3, [pc, #160]	; (800f6c8 <HAL_RCC_ClockConfig+0x358>)
 800f626:	69db      	ldr	r3, [r3, #28]
 800f628:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f62c:	429a      	cmp	r2, r3
 800f62e:	d208      	bcs.n	800f642 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800f630:	4b25      	ldr	r3, [pc, #148]	; (800f6c8 <HAL_RCC_ClockConfig+0x358>)
 800f632:	69db      	ldr	r3, [r3, #28]
 800f634:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	699b      	ldr	r3, [r3, #24]
 800f63c:	4922      	ldr	r1, [pc, #136]	; (800f6c8 <HAL_RCC_ClockConfig+0x358>)
 800f63e:	4313      	orrs	r3, r2
 800f640:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	f003 0320 	and.w	r3, r3, #32
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d010      	beq.n	800f670 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	69da      	ldr	r2, [r3, #28]
 800f652:	4b1d      	ldr	r3, [pc, #116]	; (800f6c8 <HAL_RCC_ClockConfig+0x358>)
 800f654:	6a1b      	ldr	r3, [r3, #32]
 800f656:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800f65a:	429a      	cmp	r2, r3
 800f65c:	d208      	bcs.n	800f670 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800f65e:	4b1a      	ldr	r3, [pc, #104]	; (800f6c8 <HAL_RCC_ClockConfig+0x358>)
 800f660:	6a1b      	ldr	r3, [r3, #32]
 800f662:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	69db      	ldr	r3, [r3, #28]
 800f66a:	4917      	ldr	r1, [pc, #92]	; (800f6c8 <HAL_RCC_ClockConfig+0x358>)
 800f66c:	4313      	orrs	r3, r2
 800f66e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800f670:	f000 f834 	bl	800f6dc <HAL_RCC_GetSysClockFreq>
 800f674:	4602      	mov	r2, r0
 800f676:	4b14      	ldr	r3, [pc, #80]	; (800f6c8 <HAL_RCC_ClockConfig+0x358>)
 800f678:	699b      	ldr	r3, [r3, #24]
 800f67a:	0a1b      	lsrs	r3, r3, #8
 800f67c:	f003 030f 	and.w	r3, r3, #15
 800f680:	4912      	ldr	r1, [pc, #72]	; (800f6cc <HAL_RCC_ClockConfig+0x35c>)
 800f682:	5ccb      	ldrb	r3, [r1, r3]
 800f684:	f003 031f 	and.w	r3, r3, #31
 800f688:	fa22 f303 	lsr.w	r3, r2, r3
 800f68c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f68e:	4b0e      	ldr	r3, [pc, #56]	; (800f6c8 <HAL_RCC_ClockConfig+0x358>)
 800f690:	699b      	ldr	r3, [r3, #24]
 800f692:	f003 030f 	and.w	r3, r3, #15
 800f696:	4a0d      	ldr	r2, [pc, #52]	; (800f6cc <HAL_RCC_ClockConfig+0x35c>)
 800f698:	5cd3      	ldrb	r3, [r2, r3]
 800f69a:	f003 031f 	and.w	r3, r3, #31
 800f69e:	693a      	ldr	r2, [r7, #16]
 800f6a0:	fa22 f303 	lsr.w	r3, r2, r3
 800f6a4:	4a0a      	ldr	r2, [pc, #40]	; (800f6d0 <HAL_RCC_ClockConfig+0x360>)
 800f6a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800f6a8:	4a0a      	ldr	r2, [pc, #40]	; (800f6d4 <HAL_RCC_ClockConfig+0x364>)
 800f6aa:	693b      	ldr	r3, [r7, #16]
 800f6ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800f6ae:	4b0a      	ldr	r3, [pc, #40]	; (800f6d8 <HAL_RCC_ClockConfig+0x368>)
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	f7fe face 	bl	800dc54 <HAL_InitTick>
 800f6b8:	4603      	mov	r3, r0
 800f6ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800f6bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6be:	4618      	mov	r0, r3
 800f6c0:	3718      	adds	r7, #24
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	bd80      	pop	{r7, pc}
 800f6c6:	bf00      	nop
 800f6c8:	58024400 	.word	0x58024400
 800f6cc:	08016f28 	.word	0x08016f28
 800f6d0:	240002a0 	.word	0x240002a0
 800f6d4:	2400029c 	.word	0x2400029c
 800f6d8:	240002a4 	.word	0x240002a4

0800f6dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f6dc:	b480      	push	{r7}
 800f6de:	b089      	sub	sp, #36	; 0x24
 800f6e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f6e2:	4bb3      	ldr	r3, [pc, #716]	; (800f9b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f6e4:	691b      	ldr	r3, [r3, #16]
 800f6e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f6ea:	2b18      	cmp	r3, #24
 800f6ec:	f200 8155 	bhi.w	800f99a <HAL_RCC_GetSysClockFreq+0x2be>
 800f6f0:	a201      	add	r2, pc, #4	; (adr r2, 800f6f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800f6f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6f6:	bf00      	nop
 800f6f8:	0800f75d 	.word	0x0800f75d
 800f6fc:	0800f99b 	.word	0x0800f99b
 800f700:	0800f99b 	.word	0x0800f99b
 800f704:	0800f99b 	.word	0x0800f99b
 800f708:	0800f99b 	.word	0x0800f99b
 800f70c:	0800f99b 	.word	0x0800f99b
 800f710:	0800f99b 	.word	0x0800f99b
 800f714:	0800f99b 	.word	0x0800f99b
 800f718:	0800f783 	.word	0x0800f783
 800f71c:	0800f99b 	.word	0x0800f99b
 800f720:	0800f99b 	.word	0x0800f99b
 800f724:	0800f99b 	.word	0x0800f99b
 800f728:	0800f99b 	.word	0x0800f99b
 800f72c:	0800f99b 	.word	0x0800f99b
 800f730:	0800f99b 	.word	0x0800f99b
 800f734:	0800f99b 	.word	0x0800f99b
 800f738:	0800f789 	.word	0x0800f789
 800f73c:	0800f99b 	.word	0x0800f99b
 800f740:	0800f99b 	.word	0x0800f99b
 800f744:	0800f99b 	.word	0x0800f99b
 800f748:	0800f99b 	.word	0x0800f99b
 800f74c:	0800f99b 	.word	0x0800f99b
 800f750:	0800f99b 	.word	0x0800f99b
 800f754:	0800f99b 	.word	0x0800f99b
 800f758:	0800f78f 	.word	0x0800f78f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f75c:	4b94      	ldr	r3, [pc, #592]	; (800f9b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	f003 0320 	and.w	r3, r3, #32
 800f764:	2b00      	cmp	r3, #0
 800f766:	d009      	beq.n	800f77c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f768:	4b91      	ldr	r3, [pc, #580]	; (800f9b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	08db      	lsrs	r3, r3, #3
 800f76e:	f003 0303 	and.w	r3, r3, #3
 800f772:	4a90      	ldr	r2, [pc, #576]	; (800f9b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800f774:	fa22 f303 	lsr.w	r3, r2, r3
 800f778:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800f77a:	e111      	b.n	800f9a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800f77c:	4b8d      	ldr	r3, [pc, #564]	; (800f9b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800f77e:	61bb      	str	r3, [r7, #24]
      break;
 800f780:	e10e      	b.n	800f9a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800f782:	4b8d      	ldr	r3, [pc, #564]	; (800f9b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800f784:	61bb      	str	r3, [r7, #24]
      break;
 800f786:	e10b      	b.n	800f9a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800f788:	4b8c      	ldr	r3, [pc, #560]	; (800f9bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800f78a:	61bb      	str	r3, [r7, #24]
      break;
 800f78c:	e108      	b.n	800f9a0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f78e:	4b88      	ldr	r3, [pc, #544]	; (800f9b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f792:	f003 0303 	and.w	r3, r3, #3
 800f796:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800f798:	4b85      	ldr	r3, [pc, #532]	; (800f9b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f79a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f79c:	091b      	lsrs	r3, r3, #4
 800f79e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f7a2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800f7a4:	4b82      	ldr	r3, [pc, #520]	; (800f9b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f7a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7a8:	f003 0301 	and.w	r3, r3, #1
 800f7ac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800f7ae:	4b80      	ldr	r3, [pc, #512]	; (800f9b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f7b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7b2:	08db      	lsrs	r3, r3, #3
 800f7b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f7b8:	68fa      	ldr	r2, [r7, #12]
 800f7ba:	fb02 f303 	mul.w	r3, r2, r3
 800f7be:	ee07 3a90 	vmov	s15, r3
 800f7c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f7c6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800f7ca:	693b      	ldr	r3, [r7, #16]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	f000 80e1 	beq.w	800f994 <HAL_RCC_GetSysClockFreq+0x2b8>
 800f7d2:	697b      	ldr	r3, [r7, #20]
 800f7d4:	2b02      	cmp	r3, #2
 800f7d6:	f000 8083 	beq.w	800f8e0 <HAL_RCC_GetSysClockFreq+0x204>
 800f7da:	697b      	ldr	r3, [r7, #20]
 800f7dc:	2b02      	cmp	r3, #2
 800f7de:	f200 80a1 	bhi.w	800f924 <HAL_RCC_GetSysClockFreq+0x248>
 800f7e2:	697b      	ldr	r3, [r7, #20]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d003      	beq.n	800f7f0 <HAL_RCC_GetSysClockFreq+0x114>
 800f7e8:	697b      	ldr	r3, [r7, #20]
 800f7ea:	2b01      	cmp	r3, #1
 800f7ec:	d056      	beq.n	800f89c <HAL_RCC_GetSysClockFreq+0x1c0>
 800f7ee:	e099      	b.n	800f924 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f7f0:	4b6f      	ldr	r3, [pc, #444]	; (800f9b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	f003 0320 	and.w	r3, r3, #32
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d02d      	beq.n	800f858 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f7fc:	4b6c      	ldr	r3, [pc, #432]	; (800f9b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	08db      	lsrs	r3, r3, #3
 800f802:	f003 0303 	and.w	r3, r3, #3
 800f806:	4a6b      	ldr	r2, [pc, #428]	; (800f9b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800f808:	fa22 f303 	lsr.w	r3, r2, r3
 800f80c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	ee07 3a90 	vmov	s15, r3
 800f814:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f818:	693b      	ldr	r3, [r7, #16]
 800f81a:	ee07 3a90 	vmov	s15, r3
 800f81e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f826:	4b62      	ldr	r3, [pc, #392]	; (800f9b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f82a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f82e:	ee07 3a90 	vmov	s15, r3
 800f832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f836:	ed97 6a02 	vldr	s12, [r7, #8]
 800f83a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800f9c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800f83e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f84a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f84e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f852:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800f856:	e087      	b.n	800f968 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f858:	693b      	ldr	r3, [r7, #16]
 800f85a:	ee07 3a90 	vmov	s15, r3
 800f85e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f862:	eddf 6a58 	vldr	s13, [pc, #352]	; 800f9c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 800f866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f86a:	4b51      	ldr	r3, [pc, #324]	; (800f9b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f86c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f86e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f872:	ee07 3a90 	vmov	s15, r3
 800f876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f87a:	ed97 6a02 	vldr	s12, [r7, #8]
 800f87e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800f9c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800f882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f88a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f88e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f892:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f896:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800f89a:	e065      	b.n	800f968 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f89c:	693b      	ldr	r3, [r7, #16]
 800f89e:	ee07 3a90 	vmov	s15, r3
 800f8a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f8a6:	eddf 6a48 	vldr	s13, [pc, #288]	; 800f9c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800f8aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f8ae:	4b40      	ldr	r3, [pc, #256]	; (800f9b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f8b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8b6:	ee07 3a90 	vmov	s15, r3
 800f8ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f8be:	ed97 6a02 	vldr	s12, [r7, #8]
 800f8c2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800f9c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800f8c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f8ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f8ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f8d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f8d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f8da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800f8de:	e043      	b.n	800f968 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f8e0:	693b      	ldr	r3, [r7, #16]
 800f8e2:	ee07 3a90 	vmov	s15, r3
 800f8e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f8ea:	eddf 6a38 	vldr	s13, [pc, #224]	; 800f9cc <HAL_RCC_GetSysClockFreq+0x2f0>
 800f8ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f8f2:	4b2f      	ldr	r3, [pc, #188]	; (800f9b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f8f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8fa:	ee07 3a90 	vmov	s15, r3
 800f8fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f902:	ed97 6a02 	vldr	s12, [r7, #8]
 800f906:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800f9c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800f90a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f90e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f912:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f91a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f91e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800f922:	e021      	b.n	800f968 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f924:	693b      	ldr	r3, [r7, #16]
 800f926:	ee07 3a90 	vmov	s15, r3
 800f92a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f92e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800f9c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800f932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f936:	4b1e      	ldr	r3, [pc, #120]	; (800f9b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f93a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f93e:	ee07 3a90 	vmov	s15, r3
 800f942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f946:	ed97 6a02 	vldr	s12, [r7, #8]
 800f94a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800f9c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800f94e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f956:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f95a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f95e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f962:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800f966:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800f968:	4b11      	ldr	r3, [pc, #68]	; (800f9b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f96a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f96c:	0a5b      	lsrs	r3, r3, #9
 800f96e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f972:	3301      	adds	r3, #1
 800f974:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800f976:	683b      	ldr	r3, [r7, #0]
 800f978:	ee07 3a90 	vmov	s15, r3
 800f97c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f980:	edd7 6a07 	vldr	s13, [r7, #28]
 800f984:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f988:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f98c:	ee17 3a90 	vmov	r3, s15
 800f990:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800f992:	e005      	b.n	800f9a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800f994:	2300      	movs	r3, #0
 800f996:	61bb      	str	r3, [r7, #24]
      break;
 800f998:	e002      	b.n	800f9a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800f99a:	4b07      	ldr	r3, [pc, #28]	; (800f9b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800f99c:	61bb      	str	r3, [r7, #24]
      break;
 800f99e:	bf00      	nop
  }

  return sysclockfreq;
 800f9a0:	69bb      	ldr	r3, [r7, #24]
}
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	3724      	adds	r7, #36	; 0x24
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ac:	4770      	bx	lr
 800f9ae:	bf00      	nop
 800f9b0:	58024400 	.word	0x58024400
 800f9b4:	03d09000 	.word	0x03d09000
 800f9b8:	003d0900 	.word	0x003d0900
 800f9bc:	007a1200 	.word	0x007a1200
 800f9c0:	46000000 	.word	0x46000000
 800f9c4:	4c742400 	.word	0x4c742400
 800f9c8:	4a742400 	.word	0x4a742400
 800f9cc:	4af42400 	.word	0x4af42400

0800f9d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	b082      	sub	sp, #8
 800f9d4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f9d6:	f7ff fe81 	bl	800f6dc <HAL_RCC_GetSysClockFreq>
 800f9da:	4602      	mov	r2, r0
 800f9dc:	4b10      	ldr	r3, [pc, #64]	; (800fa20 <HAL_RCC_GetHCLKFreq+0x50>)
 800f9de:	699b      	ldr	r3, [r3, #24]
 800f9e0:	0a1b      	lsrs	r3, r3, #8
 800f9e2:	f003 030f 	and.w	r3, r3, #15
 800f9e6:	490f      	ldr	r1, [pc, #60]	; (800fa24 <HAL_RCC_GetHCLKFreq+0x54>)
 800f9e8:	5ccb      	ldrb	r3, [r1, r3]
 800f9ea:	f003 031f 	and.w	r3, r3, #31
 800f9ee:	fa22 f303 	lsr.w	r3, r2, r3
 800f9f2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f9f4:	4b0a      	ldr	r3, [pc, #40]	; (800fa20 <HAL_RCC_GetHCLKFreq+0x50>)
 800f9f6:	699b      	ldr	r3, [r3, #24]
 800f9f8:	f003 030f 	and.w	r3, r3, #15
 800f9fc:	4a09      	ldr	r2, [pc, #36]	; (800fa24 <HAL_RCC_GetHCLKFreq+0x54>)
 800f9fe:	5cd3      	ldrb	r3, [r2, r3]
 800fa00:	f003 031f 	and.w	r3, r3, #31
 800fa04:	687a      	ldr	r2, [r7, #4]
 800fa06:	fa22 f303 	lsr.w	r3, r2, r3
 800fa0a:	4a07      	ldr	r2, [pc, #28]	; (800fa28 <HAL_RCC_GetHCLKFreq+0x58>)
 800fa0c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800fa0e:	4a07      	ldr	r2, [pc, #28]	; (800fa2c <HAL_RCC_GetHCLKFreq+0x5c>)
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800fa14:	4b04      	ldr	r3, [pc, #16]	; (800fa28 <HAL_RCC_GetHCLKFreq+0x58>)
 800fa16:	681b      	ldr	r3, [r3, #0]
}
 800fa18:	4618      	mov	r0, r3
 800fa1a:	3708      	adds	r7, #8
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}
 800fa20:	58024400 	.word	0x58024400
 800fa24:	08016f28 	.word	0x08016f28
 800fa28:	240002a0 	.word	0x240002a0
 800fa2c:	2400029c 	.word	0x2400029c

0800fa30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800fa34:	f7ff ffcc 	bl	800f9d0 <HAL_RCC_GetHCLKFreq>
 800fa38:	4602      	mov	r2, r0
 800fa3a:	4b06      	ldr	r3, [pc, #24]	; (800fa54 <HAL_RCC_GetPCLK1Freq+0x24>)
 800fa3c:	69db      	ldr	r3, [r3, #28]
 800fa3e:	091b      	lsrs	r3, r3, #4
 800fa40:	f003 0307 	and.w	r3, r3, #7
 800fa44:	4904      	ldr	r1, [pc, #16]	; (800fa58 <HAL_RCC_GetPCLK1Freq+0x28>)
 800fa46:	5ccb      	ldrb	r3, [r1, r3]
 800fa48:	f003 031f 	and.w	r3, r3, #31
 800fa4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800fa50:	4618      	mov	r0, r3
 800fa52:	bd80      	pop	{r7, pc}
 800fa54:	58024400 	.word	0x58024400
 800fa58:	08016f28 	.word	0x08016f28

0800fa5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800fa60:	f7ff ffb6 	bl	800f9d0 <HAL_RCC_GetHCLKFreq>
 800fa64:	4602      	mov	r2, r0
 800fa66:	4b06      	ldr	r3, [pc, #24]	; (800fa80 <HAL_RCC_GetPCLK2Freq+0x24>)
 800fa68:	69db      	ldr	r3, [r3, #28]
 800fa6a:	0a1b      	lsrs	r3, r3, #8
 800fa6c:	f003 0307 	and.w	r3, r3, #7
 800fa70:	4904      	ldr	r1, [pc, #16]	; (800fa84 <HAL_RCC_GetPCLK2Freq+0x28>)
 800fa72:	5ccb      	ldrb	r3, [r1, r3]
 800fa74:	f003 031f 	and.w	r3, r3, #31
 800fa78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	bd80      	pop	{r7, pc}
 800fa80:	58024400 	.word	0x58024400
 800fa84:	08016f28 	.word	0x08016f28

0800fa88 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800fa88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fa8c:	b0c6      	sub	sp, #280	; 0x118
 800fa8e:	af00      	add	r7, sp, #0
 800fa90:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800fa94:	2300      	movs	r3, #0
 800fa96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800faa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800faa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faa8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800faac:	2500      	movs	r5, #0
 800faae:	ea54 0305 	orrs.w	r3, r4, r5
 800fab2:	d049      	beq.n	800fb48 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800fab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fab8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800faba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fabe:	d02f      	beq.n	800fb20 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800fac0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fac4:	d828      	bhi.n	800fb18 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800fac6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800faca:	d01a      	beq.n	800fb02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800facc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fad0:	d822      	bhi.n	800fb18 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d003      	beq.n	800fade <HAL_RCCEx_PeriphCLKConfig+0x56>
 800fad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fada:	d007      	beq.n	800faec <HAL_RCCEx_PeriphCLKConfig+0x64>
 800fadc:	e01c      	b.n	800fb18 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fade:	4bab      	ldr	r3, [pc, #684]	; (800fd8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800fae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fae2:	4aaa      	ldr	r2, [pc, #680]	; (800fd8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800fae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fae8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800faea:	e01a      	b.n	800fb22 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800faec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800faf0:	3308      	adds	r3, #8
 800faf2:	2102      	movs	r1, #2
 800faf4:	4618      	mov	r0, r3
 800faf6:	f001 fc25 	bl	8011344 <RCCEx_PLL2_Config>
 800fafa:	4603      	mov	r3, r0
 800fafc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800fb00:	e00f      	b.n	800fb22 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fb02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb06:	3328      	adds	r3, #40	; 0x28
 800fb08:	2102      	movs	r1, #2
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	f001 fccc 	bl	80114a8 <RCCEx_PLL3_Config>
 800fb10:	4603      	mov	r3, r0
 800fb12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800fb16:	e004      	b.n	800fb22 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fb18:	2301      	movs	r3, #1
 800fb1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800fb1e:	e000      	b.n	800fb22 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800fb20:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fb22:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d10a      	bne.n	800fb40 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800fb2a:	4b98      	ldr	r3, [pc, #608]	; (800fd8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800fb2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb2e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800fb32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fb38:	4a94      	ldr	r2, [pc, #592]	; (800fd8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800fb3a:	430b      	orrs	r3, r1
 800fb3c:	6513      	str	r3, [r2, #80]	; 0x50
 800fb3e:	e003      	b.n	800fb48 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fb40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800fb44:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800fb48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb50:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800fb54:	f04f 0900 	mov.w	r9, #0
 800fb58:	ea58 0309 	orrs.w	r3, r8, r9
 800fb5c:	d047      	beq.n	800fbee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800fb5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb64:	2b04      	cmp	r3, #4
 800fb66:	d82a      	bhi.n	800fbbe <HAL_RCCEx_PeriphCLKConfig+0x136>
 800fb68:	a201      	add	r2, pc, #4	; (adr r2, 800fb70 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800fb6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb6e:	bf00      	nop
 800fb70:	0800fb85 	.word	0x0800fb85
 800fb74:	0800fb93 	.word	0x0800fb93
 800fb78:	0800fba9 	.word	0x0800fba9
 800fb7c:	0800fbc7 	.word	0x0800fbc7
 800fb80:	0800fbc7 	.word	0x0800fbc7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fb84:	4b81      	ldr	r3, [pc, #516]	; (800fd8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800fb86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb88:	4a80      	ldr	r2, [pc, #512]	; (800fd8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800fb8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fb8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800fb90:	e01a      	b.n	800fbc8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fb92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb96:	3308      	adds	r3, #8
 800fb98:	2100      	movs	r1, #0
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	f001 fbd2 	bl	8011344 <RCCEx_PLL2_Config>
 800fba0:	4603      	mov	r3, r0
 800fba2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800fba6:	e00f      	b.n	800fbc8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800fba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fbac:	3328      	adds	r3, #40	; 0x28
 800fbae:	2100      	movs	r1, #0
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	f001 fc79 	bl	80114a8 <RCCEx_PLL3_Config>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800fbbc:	e004      	b.n	800fbc8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fbbe:	2301      	movs	r3, #1
 800fbc0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800fbc4:	e000      	b.n	800fbc8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800fbc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fbc8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d10a      	bne.n	800fbe6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800fbd0:	4b6e      	ldr	r3, [pc, #440]	; (800fd8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800fbd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fbd4:	f023 0107 	bic.w	r1, r3, #7
 800fbd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fbdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fbde:	4a6b      	ldr	r2, [pc, #428]	; (800fd8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800fbe0:	430b      	orrs	r3, r1
 800fbe2:	6513      	str	r3, [r2, #80]	; 0x50
 800fbe4:	e003      	b.n	800fbee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fbe6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800fbea:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800fbee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbf6:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800fbfa:	f04f 0b00 	mov.w	fp, #0
 800fbfe:	ea5a 030b 	orrs.w	r3, sl, fp
 800fc02:	d05b      	beq.n	800fcbc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800fc04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fc0c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800fc10:	d03b      	beq.n	800fc8a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800fc12:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800fc16:	d834      	bhi.n	800fc82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800fc18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800fc1c:	d037      	beq.n	800fc8e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800fc1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800fc22:	d82e      	bhi.n	800fc82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800fc24:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800fc28:	d033      	beq.n	800fc92 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800fc2a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800fc2e:	d828      	bhi.n	800fc82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800fc30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fc34:	d01a      	beq.n	800fc6c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800fc36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fc3a:	d822      	bhi.n	800fc82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d003      	beq.n	800fc48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800fc40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fc44:	d007      	beq.n	800fc56 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800fc46:	e01c      	b.n	800fc82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fc48:	4b50      	ldr	r3, [pc, #320]	; (800fd8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800fc4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc4c:	4a4f      	ldr	r2, [pc, #316]	; (800fd8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800fc4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fc52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800fc54:	e01e      	b.n	800fc94 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fc56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc5a:	3308      	adds	r3, #8
 800fc5c:	2100      	movs	r1, #0
 800fc5e:	4618      	mov	r0, r3
 800fc60:	f001 fb70 	bl	8011344 <RCCEx_PLL2_Config>
 800fc64:	4603      	mov	r3, r0
 800fc66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800fc6a:	e013      	b.n	800fc94 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800fc6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc70:	3328      	adds	r3, #40	; 0x28
 800fc72:	2100      	movs	r1, #0
 800fc74:	4618      	mov	r0, r3
 800fc76:	f001 fc17 	bl	80114a8 <RCCEx_PLL3_Config>
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800fc80:	e008      	b.n	800fc94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800fc82:	2301      	movs	r3, #1
 800fc84:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800fc88:	e004      	b.n	800fc94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800fc8a:	bf00      	nop
 800fc8c:	e002      	b.n	800fc94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800fc8e:	bf00      	nop
 800fc90:	e000      	b.n	800fc94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800fc92:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fc94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d10b      	bne.n	800fcb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800fc9c:	4b3b      	ldr	r3, [pc, #236]	; (800fd8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800fc9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fca0:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800fca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fca8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fcac:	4a37      	ldr	r2, [pc, #220]	; (800fd8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800fcae:	430b      	orrs	r3, r1
 800fcb0:	6593      	str	r3, [r2, #88]	; 0x58
 800fcb2:	e003      	b.n	800fcbc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fcb4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800fcb8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800fcbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fcc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcc4:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800fcc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800fccc:	2300      	movs	r3, #0
 800fcce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800fcd2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800fcd6:	460b      	mov	r3, r1
 800fcd8:	4313      	orrs	r3, r2
 800fcda:	d05d      	beq.n	800fd98 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800fcdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fce0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800fce4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800fce8:	d03b      	beq.n	800fd62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800fcea:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800fcee:	d834      	bhi.n	800fd5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800fcf0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800fcf4:	d037      	beq.n	800fd66 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800fcf6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800fcfa:	d82e      	bhi.n	800fd5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800fcfc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800fd00:	d033      	beq.n	800fd6a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800fd02:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800fd06:	d828      	bhi.n	800fd5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800fd08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fd0c:	d01a      	beq.n	800fd44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800fd0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fd12:	d822      	bhi.n	800fd5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d003      	beq.n	800fd20 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800fd18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fd1c:	d007      	beq.n	800fd2e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800fd1e:	e01c      	b.n	800fd5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fd20:	4b1a      	ldr	r3, [pc, #104]	; (800fd8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800fd22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd24:	4a19      	ldr	r2, [pc, #100]	; (800fd8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800fd26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fd2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800fd2c:	e01e      	b.n	800fd6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fd2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd32:	3308      	adds	r3, #8
 800fd34:	2100      	movs	r1, #0
 800fd36:	4618      	mov	r0, r3
 800fd38:	f001 fb04 	bl	8011344 <RCCEx_PLL2_Config>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800fd42:	e013      	b.n	800fd6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800fd44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd48:	3328      	adds	r3, #40	; 0x28
 800fd4a:	2100      	movs	r1, #0
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	f001 fbab 	bl	80114a8 <RCCEx_PLL3_Config>
 800fd52:	4603      	mov	r3, r0
 800fd54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800fd58:	e008      	b.n	800fd6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800fd5a:	2301      	movs	r3, #1
 800fd5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800fd60:	e004      	b.n	800fd6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800fd62:	bf00      	nop
 800fd64:	e002      	b.n	800fd6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800fd66:	bf00      	nop
 800fd68:	e000      	b.n	800fd6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800fd6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fd6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d10d      	bne.n	800fd90 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800fd74:	4b05      	ldr	r3, [pc, #20]	; (800fd8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800fd76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd78:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800fd7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800fd84:	4a01      	ldr	r2, [pc, #4]	; (800fd8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800fd86:	430b      	orrs	r3, r1
 800fd88:	6593      	str	r3, [r2, #88]	; 0x58
 800fd8a:	e005      	b.n	800fd98 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800fd8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fd90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800fd94:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800fd98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fda0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800fda4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800fda8:	2300      	movs	r3, #0
 800fdaa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800fdae:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800fdb2:	460b      	mov	r3, r1
 800fdb4:	4313      	orrs	r3, r2
 800fdb6:	d03a      	beq.n	800fe2e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800fdb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fdbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fdbe:	2b30      	cmp	r3, #48	; 0x30
 800fdc0:	d01f      	beq.n	800fe02 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800fdc2:	2b30      	cmp	r3, #48	; 0x30
 800fdc4:	d819      	bhi.n	800fdfa <HAL_RCCEx_PeriphCLKConfig+0x372>
 800fdc6:	2b20      	cmp	r3, #32
 800fdc8:	d00c      	beq.n	800fde4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800fdca:	2b20      	cmp	r3, #32
 800fdcc:	d815      	bhi.n	800fdfa <HAL_RCCEx_PeriphCLKConfig+0x372>
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d019      	beq.n	800fe06 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800fdd2:	2b10      	cmp	r3, #16
 800fdd4:	d111      	bne.n	800fdfa <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fdd6:	4baa      	ldr	r3, [pc, #680]	; (8010080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800fdd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdda:	4aa9      	ldr	r2, [pc, #676]	; (8010080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800fddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fde0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800fde2:	e011      	b.n	800fe08 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800fde4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fde8:	3308      	adds	r3, #8
 800fdea:	2102      	movs	r1, #2
 800fdec:	4618      	mov	r0, r3
 800fdee:	f001 faa9 	bl	8011344 <RCCEx_PLL2_Config>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800fdf8:	e006      	b.n	800fe08 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800fdfa:	2301      	movs	r3, #1
 800fdfc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800fe00:	e002      	b.n	800fe08 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800fe02:	bf00      	nop
 800fe04:	e000      	b.n	800fe08 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800fe06:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fe08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d10a      	bne.n	800fe26 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800fe10:	4b9b      	ldr	r3, [pc, #620]	; (8010080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800fe12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe14:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800fe18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe1e:	4a98      	ldr	r2, [pc, #608]	; (8010080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800fe20:	430b      	orrs	r3, r1
 800fe22:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fe24:	e003      	b.n	800fe2e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fe26:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800fe2a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800fe2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe36:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800fe3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fe3e:	2300      	movs	r3, #0
 800fe40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800fe44:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800fe48:	460b      	mov	r3, r1
 800fe4a:	4313      	orrs	r3, r2
 800fe4c:	d051      	beq.n	800fef2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800fe4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fe58:	d035      	beq.n	800fec6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800fe5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fe5e:	d82e      	bhi.n	800febe <HAL_RCCEx_PeriphCLKConfig+0x436>
 800fe60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800fe64:	d031      	beq.n	800feca <HAL_RCCEx_PeriphCLKConfig+0x442>
 800fe66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800fe6a:	d828      	bhi.n	800febe <HAL_RCCEx_PeriphCLKConfig+0x436>
 800fe6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fe70:	d01a      	beq.n	800fea8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800fe72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fe76:	d822      	bhi.n	800febe <HAL_RCCEx_PeriphCLKConfig+0x436>
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d003      	beq.n	800fe84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800fe7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fe80:	d007      	beq.n	800fe92 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800fe82:	e01c      	b.n	800febe <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fe84:	4b7e      	ldr	r3, [pc, #504]	; (8010080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800fe86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe88:	4a7d      	ldr	r2, [pc, #500]	; (8010080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800fe8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fe8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800fe90:	e01c      	b.n	800fecc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fe92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe96:	3308      	adds	r3, #8
 800fe98:	2100      	movs	r1, #0
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	f001 fa52 	bl	8011344 <RCCEx_PLL2_Config>
 800fea0:	4603      	mov	r3, r0
 800fea2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800fea6:	e011      	b.n	800fecc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800fea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800feac:	3328      	adds	r3, #40	; 0x28
 800feae:	2100      	movs	r1, #0
 800feb0:	4618      	mov	r0, r3
 800feb2:	f001 faf9 	bl	80114a8 <RCCEx_PLL3_Config>
 800feb6:	4603      	mov	r3, r0
 800feb8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800febc:	e006      	b.n	800fecc <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800febe:	2301      	movs	r3, #1
 800fec0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800fec4:	e002      	b.n	800fecc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800fec6:	bf00      	nop
 800fec8:	e000      	b.n	800fecc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800feca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fecc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d10a      	bne.n	800feea <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800fed4:	4b6a      	ldr	r3, [pc, #424]	; (8010080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800fed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fed8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800fedc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fee2:	4a67      	ldr	r2, [pc, #412]	; (8010080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800fee4:	430b      	orrs	r3, r1
 800fee6:	6513      	str	r3, [r2, #80]	; 0x50
 800fee8:	e003      	b.n	800fef2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800feea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800feee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800fef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fefa:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800fefe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ff02:	2300      	movs	r3, #0
 800ff04:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ff08:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800ff0c:	460b      	mov	r3, r1
 800ff0e:	4313      	orrs	r3, r2
 800ff10:	d053      	beq.n	800ffba <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ff12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ff18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ff1c:	d033      	beq.n	800ff86 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800ff1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ff22:	d82c      	bhi.n	800ff7e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ff24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ff28:	d02f      	beq.n	800ff8a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800ff2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ff2e:	d826      	bhi.n	800ff7e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ff30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ff34:	d02b      	beq.n	800ff8e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800ff36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ff3a:	d820      	bhi.n	800ff7e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ff3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ff40:	d012      	beq.n	800ff68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800ff42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ff46:	d81a      	bhi.n	800ff7e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d022      	beq.n	800ff92 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800ff4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff50:	d115      	bne.n	800ff7e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ff52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff56:	3308      	adds	r3, #8
 800ff58:	2101      	movs	r1, #1
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f001 f9f2 	bl	8011344 <RCCEx_PLL2_Config>
 800ff60:	4603      	mov	r3, r0
 800ff62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ff66:	e015      	b.n	800ff94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ff68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff6c:	3328      	adds	r3, #40	; 0x28
 800ff6e:	2101      	movs	r1, #1
 800ff70:	4618      	mov	r0, r3
 800ff72:	f001 fa99 	bl	80114a8 <RCCEx_PLL3_Config>
 800ff76:	4603      	mov	r3, r0
 800ff78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ff7c:	e00a      	b.n	800ff94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ff7e:	2301      	movs	r3, #1
 800ff80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ff84:	e006      	b.n	800ff94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ff86:	bf00      	nop
 800ff88:	e004      	b.n	800ff94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ff8a:	bf00      	nop
 800ff8c:	e002      	b.n	800ff94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ff8e:	bf00      	nop
 800ff90:	e000      	b.n	800ff94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ff92:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ff94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d10a      	bne.n	800ffb2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ff9c:	4b38      	ldr	r3, [pc, #224]	; (8010080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ff9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ffa0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800ffa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ffa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ffaa:	4a35      	ldr	r2, [pc, #212]	; (8010080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ffac:	430b      	orrs	r3, r1
 800ffae:	6513      	str	r3, [r2, #80]	; 0x50
 800ffb0:	e003      	b.n	800ffba <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ffb2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ffb6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ffba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ffbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffc2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800ffc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ffca:	2300      	movs	r3, #0
 800ffcc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ffd0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ffd4:	460b      	mov	r3, r1
 800ffd6:	4313      	orrs	r3, r2
 800ffd8:	d058      	beq.n	801008c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800ffda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ffde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ffe2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ffe6:	d033      	beq.n	8010050 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800ffe8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ffec:	d82c      	bhi.n	8010048 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ffee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fff2:	d02f      	beq.n	8010054 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800fff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fff8:	d826      	bhi.n	8010048 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800fffa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800fffe:	d02b      	beq.n	8010058 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8010000:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010004:	d820      	bhi.n	8010048 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8010006:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801000a:	d012      	beq.n	8010032 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 801000c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010010:	d81a      	bhi.n	8010048 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8010012:	2b00      	cmp	r3, #0
 8010014:	d022      	beq.n	801005c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8010016:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801001a:	d115      	bne.n	8010048 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801001c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010020:	3308      	adds	r3, #8
 8010022:	2101      	movs	r1, #1
 8010024:	4618      	mov	r0, r3
 8010026:	f001 f98d 	bl	8011344 <RCCEx_PLL2_Config>
 801002a:	4603      	mov	r3, r0
 801002c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8010030:	e015      	b.n	801005e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010036:	3328      	adds	r3, #40	; 0x28
 8010038:	2101      	movs	r1, #1
 801003a:	4618      	mov	r0, r3
 801003c:	f001 fa34 	bl	80114a8 <RCCEx_PLL3_Config>
 8010040:	4603      	mov	r3, r0
 8010042:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8010046:	e00a      	b.n	801005e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8010048:	2301      	movs	r3, #1
 801004a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801004e:	e006      	b.n	801005e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8010050:	bf00      	nop
 8010052:	e004      	b.n	801005e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8010054:	bf00      	nop
 8010056:	e002      	b.n	801005e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8010058:	bf00      	nop
 801005a:	e000      	b.n	801005e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801005c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801005e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010062:	2b00      	cmp	r3, #0
 8010064:	d10e      	bne.n	8010084 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8010066:	4b06      	ldr	r3, [pc, #24]	; (8010080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8010068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801006a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 801006e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010072:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8010076:	4a02      	ldr	r2, [pc, #8]	; (8010080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8010078:	430b      	orrs	r3, r1
 801007a:	6593      	str	r3, [r2, #88]	; 0x58
 801007c:	e006      	b.n	801008c <HAL_RCCEx_PeriphCLKConfig+0x604>
 801007e:	bf00      	nop
 8010080:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010084:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010088:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801008c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010094:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8010098:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801009c:	2300      	movs	r3, #0
 801009e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80100a2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80100a6:	460b      	mov	r3, r1
 80100a8:	4313      	orrs	r3, r2
 80100aa:	d037      	beq.n	801011c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80100ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80100b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80100b6:	d00e      	beq.n	80100d6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80100b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80100bc:	d816      	bhi.n	80100ec <HAL_RCCEx_PeriphCLKConfig+0x664>
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d018      	beq.n	80100f4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80100c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80100c6:	d111      	bne.n	80100ec <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80100c8:	4bc4      	ldr	r3, [pc, #784]	; (80103dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80100ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100cc:	4ac3      	ldr	r2, [pc, #780]	; (80103dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80100ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80100d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80100d4:	e00f      	b.n	80100f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80100d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80100da:	3308      	adds	r3, #8
 80100dc:	2101      	movs	r1, #1
 80100de:	4618      	mov	r0, r3
 80100e0:	f001 f930 	bl	8011344 <RCCEx_PLL2_Config>
 80100e4:	4603      	mov	r3, r0
 80100e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80100ea:	e004      	b.n	80100f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80100ec:	2301      	movs	r3, #1
 80100ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80100f2:	e000      	b.n	80100f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80100f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80100f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d10a      	bne.n	8010114 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80100fe:	4bb7      	ldr	r3, [pc, #732]	; (80103dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8010100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010102:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8010106:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801010a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801010c:	4ab3      	ldr	r2, [pc, #716]	; (80103dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801010e:	430b      	orrs	r3, r1
 8010110:	6513      	str	r3, [r2, #80]	; 0x50
 8010112:	e003      	b.n	801011c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010114:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010118:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801011c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010124:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8010128:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801012c:	2300      	movs	r3, #0
 801012e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010132:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8010136:	460b      	mov	r3, r1
 8010138:	4313      	orrs	r3, r2
 801013a:	d039      	beq.n	80101b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801013c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010142:	2b03      	cmp	r3, #3
 8010144:	d81c      	bhi.n	8010180 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8010146:	a201      	add	r2, pc, #4	; (adr r2, 801014c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8010148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801014c:	08010189 	.word	0x08010189
 8010150:	0801015d 	.word	0x0801015d
 8010154:	0801016b 	.word	0x0801016b
 8010158:	08010189 	.word	0x08010189
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801015c:	4b9f      	ldr	r3, [pc, #636]	; (80103dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801015e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010160:	4a9e      	ldr	r2, [pc, #632]	; (80103dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8010162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010166:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8010168:	e00f      	b.n	801018a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801016a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801016e:	3308      	adds	r3, #8
 8010170:	2102      	movs	r1, #2
 8010172:	4618      	mov	r0, r3
 8010174:	f001 f8e6 	bl	8011344 <RCCEx_PLL2_Config>
 8010178:	4603      	mov	r3, r0
 801017a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 801017e:	e004      	b.n	801018a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8010180:	2301      	movs	r3, #1
 8010182:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8010186:	e000      	b.n	801018a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8010188:	bf00      	nop
    }

    if (ret == HAL_OK)
 801018a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801018e:	2b00      	cmp	r3, #0
 8010190:	d10a      	bne.n	80101a8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8010192:	4b92      	ldr	r3, [pc, #584]	; (80103dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8010194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010196:	f023 0103 	bic.w	r1, r3, #3
 801019a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801019e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80101a0:	4a8e      	ldr	r2, [pc, #568]	; (80103dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80101a2:	430b      	orrs	r3, r1
 80101a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80101a6:	e003      	b.n	80101b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80101a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80101ac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80101b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80101b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101b8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80101bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80101c0:	2300      	movs	r3, #0
 80101c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80101c6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80101ca:	460b      	mov	r3, r1
 80101cc:	4313      	orrs	r3, r2
 80101ce:	f000 8099 	beq.w	8010304 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80101d2:	4b83      	ldr	r3, [pc, #524]	; (80103e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	4a82      	ldr	r2, [pc, #520]	; (80103e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80101d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80101dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80101de:	f7fd fd83 	bl	800dce8 <HAL_GetTick>
 80101e2:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80101e6:	e00b      	b.n	8010200 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80101e8:	f7fd fd7e 	bl	800dce8 <HAL_GetTick>
 80101ec:	4602      	mov	r2, r0
 80101ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80101f2:	1ad3      	subs	r3, r2, r3
 80101f4:	2b64      	cmp	r3, #100	; 0x64
 80101f6:	d903      	bls.n	8010200 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80101f8:	2303      	movs	r3, #3
 80101fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80101fe:	e005      	b.n	801020c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010200:	4b77      	ldr	r3, [pc, #476]	; (80103e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010208:	2b00      	cmp	r3, #0
 801020a:	d0ed      	beq.n	80101e8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 801020c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010210:	2b00      	cmp	r3, #0
 8010212:	d173      	bne.n	80102fc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8010214:	4b71      	ldr	r3, [pc, #452]	; (80103dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8010216:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801021c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8010220:	4053      	eors	r3, r2
 8010222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010226:	2b00      	cmp	r3, #0
 8010228:	d015      	beq.n	8010256 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801022a:	4b6c      	ldr	r3, [pc, #432]	; (80103dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801022c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801022e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010232:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8010236:	4b69      	ldr	r3, [pc, #420]	; (80103dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8010238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801023a:	4a68      	ldr	r2, [pc, #416]	; (80103dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801023c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010240:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8010242:	4b66      	ldr	r3, [pc, #408]	; (80103dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8010244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010246:	4a65      	ldr	r2, [pc, #404]	; (80103dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8010248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801024c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801024e:	4a63      	ldr	r2, [pc, #396]	; (80103dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8010250:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010254:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8010256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801025a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801025e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010262:	d118      	bne.n	8010296 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010264:	f7fd fd40 	bl	800dce8 <HAL_GetTick>
 8010268:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801026c:	e00d      	b.n	801028a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801026e:	f7fd fd3b 	bl	800dce8 <HAL_GetTick>
 8010272:	4602      	mov	r2, r0
 8010274:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8010278:	1ad2      	subs	r2, r2, r3
 801027a:	f241 3388 	movw	r3, #5000	; 0x1388
 801027e:	429a      	cmp	r2, r3
 8010280:	d903      	bls.n	801028a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8010282:	2303      	movs	r3, #3
 8010284:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8010288:	e005      	b.n	8010296 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801028a:	4b54      	ldr	r3, [pc, #336]	; (80103dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801028c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801028e:	f003 0302 	and.w	r3, r3, #2
 8010292:	2b00      	cmp	r3, #0
 8010294:	d0eb      	beq.n	801026e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8010296:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801029a:	2b00      	cmp	r3, #0
 801029c:	d129      	bne.n	80102f2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801029e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80102a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80102a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80102aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80102ae:	d10e      	bne.n	80102ce <HAL_RCCEx_PeriphCLKConfig+0x846>
 80102b0:	4b4a      	ldr	r3, [pc, #296]	; (80103dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80102b2:	691b      	ldr	r3, [r3, #16]
 80102b4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80102b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80102bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80102c0:	091a      	lsrs	r2, r3, #4
 80102c2:	4b48      	ldr	r3, [pc, #288]	; (80103e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80102c4:	4013      	ands	r3, r2
 80102c6:	4a45      	ldr	r2, [pc, #276]	; (80103dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80102c8:	430b      	orrs	r3, r1
 80102ca:	6113      	str	r3, [r2, #16]
 80102cc:	e005      	b.n	80102da <HAL_RCCEx_PeriphCLKConfig+0x852>
 80102ce:	4b43      	ldr	r3, [pc, #268]	; (80103dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80102d0:	691b      	ldr	r3, [r3, #16]
 80102d2:	4a42      	ldr	r2, [pc, #264]	; (80103dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80102d4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80102d8:	6113      	str	r3, [r2, #16]
 80102da:	4b40      	ldr	r3, [pc, #256]	; (80103dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80102dc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80102de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80102e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80102e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80102ea:	4a3c      	ldr	r2, [pc, #240]	; (80103dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80102ec:	430b      	orrs	r3, r1
 80102ee:	6713      	str	r3, [r2, #112]	; 0x70
 80102f0:	e008      	b.n	8010304 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80102f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80102f6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80102fa:	e003      	b.n	8010304 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80102fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010300:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8010304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801030c:	f002 0301 	and.w	r3, r2, #1
 8010310:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010314:	2300      	movs	r3, #0
 8010316:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801031a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 801031e:	460b      	mov	r3, r1
 8010320:	4313      	orrs	r3, r2
 8010322:	f000 808f 	beq.w	8010444 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8010326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801032a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801032c:	2b28      	cmp	r3, #40	; 0x28
 801032e:	d871      	bhi.n	8010414 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8010330:	a201      	add	r2, pc, #4	; (adr r2, 8010338 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8010332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010336:	bf00      	nop
 8010338:	0801041d 	.word	0x0801041d
 801033c:	08010415 	.word	0x08010415
 8010340:	08010415 	.word	0x08010415
 8010344:	08010415 	.word	0x08010415
 8010348:	08010415 	.word	0x08010415
 801034c:	08010415 	.word	0x08010415
 8010350:	08010415 	.word	0x08010415
 8010354:	08010415 	.word	0x08010415
 8010358:	080103e9 	.word	0x080103e9
 801035c:	08010415 	.word	0x08010415
 8010360:	08010415 	.word	0x08010415
 8010364:	08010415 	.word	0x08010415
 8010368:	08010415 	.word	0x08010415
 801036c:	08010415 	.word	0x08010415
 8010370:	08010415 	.word	0x08010415
 8010374:	08010415 	.word	0x08010415
 8010378:	080103ff 	.word	0x080103ff
 801037c:	08010415 	.word	0x08010415
 8010380:	08010415 	.word	0x08010415
 8010384:	08010415 	.word	0x08010415
 8010388:	08010415 	.word	0x08010415
 801038c:	08010415 	.word	0x08010415
 8010390:	08010415 	.word	0x08010415
 8010394:	08010415 	.word	0x08010415
 8010398:	0801041d 	.word	0x0801041d
 801039c:	08010415 	.word	0x08010415
 80103a0:	08010415 	.word	0x08010415
 80103a4:	08010415 	.word	0x08010415
 80103a8:	08010415 	.word	0x08010415
 80103ac:	08010415 	.word	0x08010415
 80103b0:	08010415 	.word	0x08010415
 80103b4:	08010415 	.word	0x08010415
 80103b8:	0801041d 	.word	0x0801041d
 80103bc:	08010415 	.word	0x08010415
 80103c0:	08010415 	.word	0x08010415
 80103c4:	08010415 	.word	0x08010415
 80103c8:	08010415 	.word	0x08010415
 80103cc:	08010415 	.word	0x08010415
 80103d0:	08010415 	.word	0x08010415
 80103d4:	08010415 	.word	0x08010415
 80103d8:	0801041d 	.word	0x0801041d
 80103dc:	58024400 	.word	0x58024400
 80103e0:	58024800 	.word	0x58024800
 80103e4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80103e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80103ec:	3308      	adds	r3, #8
 80103ee:	2101      	movs	r1, #1
 80103f0:	4618      	mov	r0, r3
 80103f2:	f000 ffa7 	bl	8011344 <RCCEx_PLL2_Config>
 80103f6:	4603      	mov	r3, r0
 80103f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80103fc:	e00f      	b.n	801041e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80103fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010402:	3328      	adds	r3, #40	; 0x28
 8010404:	2101      	movs	r1, #1
 8010406:	4618      	mov	r0, r3
 8010408:	f001 f84e 	bl	80114a8 <RCCEx_PLL3_Config>
 801040c:	4603      	mov	r3, r0
 801040e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8010412:	e004      	b.n	801041e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010414:	2301      	movs	r3, #1
 8010416:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801041a:	e000      	b.n	801041e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 801041c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801041e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010422:	2b00      	cmp	r3, #0
 8010424:	d10a      	bne.n	801043c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8010426:	4bbf      	ldr	r3, [pc, #764]	; (8010724 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8010428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801042a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 801042e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010432:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010434:	4abb      	ldr	r2, [pc, #748]	; (8010724 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8010436:	430b      	orrs	r3, r1
 8010438:	6553      	str	r3, [r2, #84]	; 0x54
 801043a:	e003      	b.n	8010444 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801043c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010440:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8010444:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010448:	e9d3 2300 	ldrd	r2, r3, [r3]
 801044c:	f002 0302 	and.w	r3, r2, #2
 8010450:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010454:	2300      	movs	r3, #0
 8010456:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801045a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 801045e:	460b      	mov	r3, r1
 8010460:	4313      	orrs	r3, r2
 8010462:	d041      	beq.n	80104e8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8010464:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801046a:	2b05      	cmp	r3, #5
 801046c:	d824      	bhi.n	80104b8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 801046e:	a201      	add	r2, pc, #4	; (adr r2, 8010474 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8010470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010474:	080104c1 	.word	0x080104c1
 8010478:	0801048d 	.word	0x0801048d
 801047c:	080104a3 	.word	0x080104a3
 8010480:	080104c1 	.word	0x080104c1
 8010484:	080104c1 	.word	0x080104c1
 8010488:	080104c1 	.word	0x080104c1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801048c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010490:	3308      	adds	r3, #8
 8010492:	2101      	movs	r1, #1
 8010494:	4618      	mov	r0, r3
 8010496:	f000 ff55 	bl	8011344 <RCCEx_PLL2_Config>
 801049a:	4603      	mov	r3, r0
 801049c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80104a0:	e00f      	b.n	80104c2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80104a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80104a6:	3328      	adds	r3, #40	; 0x28
 80104a8:	2101      	movs	r1, #1
 80104aa:	4618      	mov	r0, r3
 80104ac:	f000 fffc 	bl	80114a8 <RCCEx_PLL3_Config>
 80104b0:	4603      	mov	r3, r0
 80104b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80104b6:	e004      	b.n	80104c2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80104b8:	2301      	movs	r3, #1
 80104ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80104be:	e000      	b.n	80104c2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80104c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80104c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d10a      	bne.n	80104e0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80104ca:	4b96      	ldr	r3, [pc, #600]	; (8010724 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80104cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80104ce:	f023 0107 	bic.w	r1, r3, #7
 80104d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80104d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104d8:	4a92      	ldr	r2, [pc, #584]	; (8010724 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80104da:	430b      	orrs	r3, r1
 80104dc:	6553      	str	r3, [r2, #84]	; 0x54
 80104de:	e003      	b.n	80104e8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80104e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80104e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80104e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80104ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f0:	f002 0304 	and.w	r3, r2, #4
 80104f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80104f8:	2300      	movs	r3, #0
 80104fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80104fe:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8010502:	460b      	mov	r3, r1
 8010504:	4313      	orrs	r3, r2
 8010506:	d044      	beq.n	8010592 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8010508:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801050c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010510:	2b05      	cmp	r3, #5
 8010512:	d825      	bhi.n	8010560 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8010514:	a201      	add	r2, pc, #4	; (adr r2, 801051c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8010516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801051a:	bf00      	nop
 801051c:	08010569 	.word	0x08010569
 8010520:	08010535 	.word	0x08010535
 8010524:	0801054b 	.word	0x0801054b
 8010528:	08010569 	.word	0x08010569
 801052c:	08010569 	.word	0x08010569
 8010530:	08010569 	.word	0x08010569
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010534:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010538:	3308      	adds	r3, #8
 801053a:	2101      	movs	r1, #1
 801053c:	4618      	mov	r0, r3
 801053e:	f000 ff01 	bl	8011344 <RCCEx_PLL2_Config>
 8010542:	4603      	mov	r3, r0
 8010544:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8010548:	e00f      	b.n	801056a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801054a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801054e:	3328      	adds	r3, #40	; 0x28
 8010550:	2101      	movs	r1, #1
 8010552:	4618      	mov	r0, r3
 8010554:	f000 ffa8 	bl	80114a8 <RCCEx_PLL3_Config>
 8010558:	4603      	mov	r3, r0
 801055a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801055e:	e004      	b.n	801056a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010560:	2301      	movs	r3, #1
 8010562:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8010566:	e000      	b.n	801056a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8010568:	bf00      	nop
    }

    if (ret == HAL_OK)
 801056a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801056e:	2b00      	cmp	r3, #0
 8010570:	d10b      	bne.n	801058a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8010572:	4b6c      	ldr	r3, [pc, #432]	; (8010724 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8010574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010576:	f023 0107 	bic.w	r1, r3, #7
 801057a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801057e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010582:	4a68      	ldr	r2, [pc, #416]	; (8010724 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8010584:	430b      	orrs	r3, r1
 8010586:	6593      	str	r3, [r2, #88]	; 0x58
 8010588:	e003      	b.n	8010592 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801058a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801058e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8010592:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010596:	e9d3 2300 	ldrd	r2, r3, [r3]
 801059a:	f002 0320 	and.w	r3, r2, #32
 801059e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80105a2:	2300      	movs	r3, #0
 80105a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80105a8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80105ac:	460b      	mov	r3, r1
 80105ae:	4313      	orrs	r3, r2
 80105b0:	d055      	beq.n	801065e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80105b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80105b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80105ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80105be:	d033      	beq.n	8010628 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80105c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80105c4:	d82c      	bhi.n	8010620 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80105c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80105ca:	d02f      	beq.n	801062c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80105cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80105d0:	d826      	bhi.n	8010620 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80105d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80105d6:	d02b      	beq.n	8010630 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80105d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80105dc:	d820      	bhi.n	8010620 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80105de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80105e2:	d012      	beq.n	801060a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80105e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80105e8:	d81a      	bhi.n	8010620 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d022      	beq.n	8010634 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80105ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80105f2:	d115      	bne.n	8010620 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80105f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80105f8:	3308      	adds	r3, #8
 80105fa:	2100      	movs	r1, #0
 80105fc:	4618      	mov	r0, r3
 80105fe:	f000 fea1 	bl	8011344 <RCCEx_PLL2_Config>
 8010602:	4603      	mov	r3, r0
 8010604:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8010608:	e015      	b.n	8010636 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801060a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801060e:	3328      	adds	r3, #40	; 0x28
 8010610:	2102      	movs	r1, #2
 8010612:	4618      	mov	r0, r3
 8010614:	f000 ff48 	bl	80114a8 <RCCEx_PLL3_Config>
 8010618:	4603      	mov	r3, r0
 801061a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801061e:	e00a      	b.n	8010636 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010620:	2301      	movs	r3, #1
 8010622:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8010626:	e006      	b.n	8010636 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8010628:	bf00      	nop
 801062a:	e004      	b.n	8010636 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 801062c:	bf00      	nop
 801062e:	e002      	b.n	8010636 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8010630:	bf00      	nop
 8010632:	e000      	b.n	8010636 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8010634:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010636:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801063a:	2b00      	cmp	r3, #0
 801063c:	d10b      	bne.n	8010656 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801063e:	4b39      	ldr	r3, [pc, #228]	; (8010724 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8010640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010642:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8010646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801064a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801064e:	4a35      	ldr	r2, [pc, #212]	; (8010724 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8010650:	430b      	orrs	r3, r1
 8010652:	6553      	str	r3, [r2, #84]	; 0x54
 8010654:	e003      	b.n	801065e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010656:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801065a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801065e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010666:	f002 0340 	and.w	r3, r2, #64	; 0x40
 801066a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801066e:	2300      	movs	r3, #0
 8010670:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010674:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8010678:	460b      	mov	r3, r1
 801067a:	4313      	orrs	r3, r2
 801067c:	d058      	beq.n	8010730 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801067e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010682:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010686:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801068a:	d033      	beq.n	80106f4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 801068c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8010690:	d82c      	bhi.n	80106ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8010692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010696:	d02f      	beq.n	80106f8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8010698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801069c:	d826      	bhi.n	80106ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801069e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80106a2:	d02b      	beq.n	80106fc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80106a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80106a8:	d820      	bhi.n	80106ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80106aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80106ae:	d012      	beq.n	80106d6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80106b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80106b4:	d81a      	bhi.n	80106ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d022      	beq.n	8010700 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80106ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80106be:	d115      	bne.n	80106ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80106c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80106c4:	3308      	adds	r3, #8
 80106c6:	2100      	movs	r1, #0
 80106c8:	4618      	mov	r0, r3
 80106ca:	f000 fe3b 	bl	8011344 <RCCEx_PLL2_Config>
 80106ce:	4603      	mov	r3, r0
 80106d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80106d4:	e015      	b.n	8010702 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80106d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80106da:	3328      	adds	r3, #40	; 0x28
 80106dc:	2102      	movs	r1, #2
 80106de:	4618      	mov	r0, r3
 80106e0:	f000 fee2 	bl	80114a8 <RCCEx_PLL3_Config>
 80106e4:	4603      	mov	r3, r0
 80106e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80106ea:	e00a      	b.n	8010702 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80106ec:	2301      	movs	r3, #1
 80106ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80106f2:	e006      	b.n	8010702 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80106f4:	bf00      	nop
 80106f6:	e004      	b.n	8010702 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80106f8:	bf00      	nop
 80106fa:	e002      	b.n	8010702 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80106fc:	bf00      	nop
 80106fe:	e000      	b.n	8010702 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8010700:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010702:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010706:	2b00      	cmp	r3, #0
 8010708:	d10e      	bne.n	8010728 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801070a:	4b06      	ldr	r3, [pc, #24]	; (8010724 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801070c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801070e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8010712:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010716:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801071a:	4a02      	ldr	r2, [pc, #8]	; (8010724 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801071c:	430b      	orrs	r3, r1
 801071e:	6593      	str	r3, [r2, #88]	; 0x58
 8010720:	e006      	b.n	8010730 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8010722:	bf00      	nop
 8010724:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010728:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801072c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8010730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010738:	f002 0380 	and.w	r3, r2, #128	; 0x80
 801073c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010740:	2300      	movs	r3, #0
 8010742:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010746:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 801074a:	460b      	mov	r3, r1
 801074c:	4313      	orrs	r3, r2
 801074e:	d055      	beq.n	80107fc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8010750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010754:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010758:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 801075c:	d033      	beq.n	80107c6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 801075e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8010762:	d82c      	bhi.n	80107be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8010764:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010768:	d02f      	beq.n	80107ca <HAL_RCCEx_PeriphCLKConfig+0xd42>
 801076a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801076e:	d826      	bhi.n	80107be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8010770:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8010774:	d02b      	beq.n	80107ce <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8010776:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 801077a:	d820      	bhi.n	80107be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 801077c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010780:	d012      	beq.n	80107a8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8010782:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010786:	d81a      	bhi.n	80107be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8010788:	2b00      	cmp	r3, #0
 801078a:	d022      	beq.n	80107d2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 801078c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010790:	d115      	bne.n	80107be <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010792:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010796:	3308      	adds	r3, #8
 8010798:	2100      	movs	r1, #0
 801079a:	4618      	mov	r0, r3
 801079c:	f000 fdd2 	bl	8011344 <RCCEx_PLL2_Config>
 80107a0:	4603      	mov	r3, r0
 80107a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80107a6:	e015      	b.n	80107d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80107a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80107ac:	3328      	adds	r3, #40	; 0x28
 80107ae:	2102      	movs	r1, #2
 80107b0:	4618      	mov	r0, r3
 80107b2:	f000 fe79 	bl	80114a8 <RCCEx_PLL3_Config>
 80107b6:	4603      	mov	r3, r0
 80107b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80107bc:	e00a      	b.n	80107d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80107be:	2301      	movs	r3, #1
 80107c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80107c4:	e006      	b.n	80107d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80107c6:	bf00      	nop
 80107c8:	e004      	b.n	80107d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80107ca:	bf00      	nop
 80107cc:	e002      	b.n	80107d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80107ce:	bf00      	nop
 80107d0:	e000      	b.n	80107d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80107d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80107d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d10b      	bne.n	80107f4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80107dc:	4ba0      	ldr	r3, [pc, #640]	; (8010a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80107de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80107e0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80107e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80107e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80107ec:	4a9c      	ldr	r2, [pc, #624]	; (8010a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80107ee:	430b      	orrs	r3, r1
 80107f0:	6593      	str	r3, [r2, #88]	; 0x58
 80107f2:	e003      	b.n	80107fc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80107f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80107f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80107fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010804:	f002 0308 	and.w	r3, r2, #8
 8010808:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801080c:	2300      	movs	r3, #0
 801080e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010812:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8010816:	460b      	mov	r3, r1
 8010818:	4313      	orrs	r3, r2
 801081a:	d01e      	beq.n	801085a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 801081c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010820:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010828:	d10c      	bne.n	8010844 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801082a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801082e:	3328      	adds	r3, #40	; 0x28
 8010830:	2102      	movs	r1, #2
 8010832:	4618      	mov	r0, r3
 8010834:	f000 fe38 	bl	80114a8 <RCCEx_PLL3_Config>
 8010838:	4603      	mov	r3, r0
 801083a:	2b00      	cmp	r3, #0
 801083c:	d002      	beq.n	8010844 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 801083e:	2301      	movs	r3, #1
 8010840:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8010844:	4b86      	ldr	r3, [pc, #536]	; (8010a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8010846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010848:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801084c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010850:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010854:	4a82      	ldr	r2, [pc, #520]	; (8010a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8010856:	430b      	orrs	r3, r1
 8010858:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801085a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801085e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010862:	f002 0310 	and.w	r3, r2, #16
 8010866:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801086a:	2300      	movs	r3, #0
 801086c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010870:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8010874:	460b      	mov	r3, r1
 8010876:	4313      	orrs	r3, r2
 8010878:	d01e      	beq.n	80108b8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801087a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801087e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010886:	d10c      	bne.n	80108a2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8010888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801088c:	3328      	adds	r3, #40	; 0x28
 801088e:	2102      	movs	r1, #2
 8010890:	4618      	mov	r0, r3
 8010892:	f000 fe09 	bl	80114a8 <RCCEx_PLL3_Config>
 8010896:	4603      	mov	r3, r0
 8010898:	2b00      	cmp	r3, #0
 801089a:	d002      	beq.n	80108a2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 801089c:	2301      	movs	r3, #1
 801089e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80108a2:	4b6f      	ldr	r3, [pc, #444]	; (8010a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80108a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80108a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80108aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80108ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80108b2:	4a6b      	ldr	r2, [pc, #428]	; (8010a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80108b4:	430b      	orrs	r3, r1
 80108b6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80108b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80108bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108c0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80108c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80108c6:	2300      	movs	r3, #0
 80108c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80108ca:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80108ce:	460b      	mov	r3, r1
 80108d0:	4313      	orrs	r3, r2
 80108d2:	d03e      	beq.n	8010952 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80108d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80108d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80108dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80108e0:	d022      	beq.n	8010928 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80108e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80108e6:	d81b      	bhi.n	8010920 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d003      	beq.n	80108f4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80108ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80108f0:	d00b      	beq.n	801090a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80108f2:	e015      	b.n	8010920 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80108f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80108f8:	3308      	adds	r3, #8
 80108fa:	2100      	movs	r1, #0
 80108fc:	4618      	mov	r0, r3
 80108fe:	f000 fd21 	bl	8011344 <RCCEx_PLL2_Config>
 8010902:	4603      	mov	r3, r0
 8010904:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8010908:	e00f      	b.n	801092a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801090a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801090e:	3328      	adds	r3, #40	; 0x28
 8010910:	2102      	movs	r1, #2
 8010912:	4618      	mov	r0, r3
 8010914:	f000 fdc8 	bl	80114a8 <RCCEx_PLL3_Config>
 8010918:	4603      	mov	r3, r0
 801091a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 801091e:	e004      	b.n	801092a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010920:	2301      	movs	r3, #1
 8010922:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8010926:	e000      	b.n	801092a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8010928:	bf00      	nop
    }

    if (ret == HAL_OK)
 801092a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801092e:	2b00      	cmp	r3, #0
 8010930:	d10b      	bne.n	801094a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8010932:	4b4b      	ldr	r3, [pc, #300]	; (8010a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8010934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010936:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 801093a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801093e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8010942:	4a47      	ldr	r2, [pc, #284]	; (8010a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8010944:	430b      	orrs	r3, r1
 8010946:	6593      	str	r3, [r2, #88]	; 0x58
 8010948:	e003      	b.n	8010952 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801094a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801094e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8010952:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010956:	e9d3 2300 	ldrd	r2, r3, [r3]
 801095a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 801095e:	673b      	str	r3, [r7, #112]	; 0x70
 8010960:	2300      	movs	r3, #0
 8010962:	677b      	str	r3, [r7, #116]	; 0x74
 8010964:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8010968:	460b      	mov	r3, r1
 801096a:	4313      	orrs	r3, r2
 801096c:	d03b      	beq.n	80109e6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801096e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010972:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010976:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801097a:	d01f      	beq.n	80109bc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 801097c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010980:	d818      	bhi.n	80109b4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8010982:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010986:	d003      	beq.n	8010990 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8010988:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801098c:	d007      	beq.n	801099e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 801098e:	e011      	b.n	80109b4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010990:	4b33      	ldr	r3, [pc, #204]	; (8010a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8010992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010994:	4a32      	ldr	r2, [pc, #200]	; (8010a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8010996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801099a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 801099c:	e00f      	b.n	80109be <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801099e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80109a2:	3328      	adds	r3, #40	; 0x28
 80109a4:	2101      	movs	r1, #1
 80109a6:	4618      	mov	r0, r3
 80109a8:	f000 fd7e 	bl	80114a8 <RCCEx_PLL3_Config>
 80109ac:	4603      	mov	r3, r0
 80109ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80109b2:	e004      	b.n	80109be <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80109b4:	2301      	movs	r3, #1
 80109b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80109ba:	e000      	b.n	80109be <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80109bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80109be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d10b      	bne.n	80109de <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80109c6:	4b26      	ldr	r3, [pc, #152]	; (8010a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80109c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109ca:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80109ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80109d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80109d6:	4a22      	ldr	r2, [pc, #136]	; (8010a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80109d8:	430b      	orrs	r3, r1
 80109da:	6553      	str	r3, [r2, #84]	; 0x54
 80109dc:	e003      	b.n	80109e6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80109de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80109e2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80109e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80109ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ee:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80109f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80109f4:	2300      	movs	r3, #0
 80109f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80109f8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80109fc:	460b      	mov	r3, r1
 80109fe:	4313      	orrs	r3, r2
 8010a00:	d034      	beq.n	8010a6c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8010a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d003      	beq.n	8010a14 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8010a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010a10:	d007      	beq.n	8010a22 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8010a12:	e011      	b.n	8010a38 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010a14:	4b12      	ldr	r3, [pc, #72]	; (8010a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8010a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a18:	4a11      	ldr	r2, [pc, #68]	; (8010a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8010a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010a1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8010a20:	e00e      	b.n	8010a40 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8010a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a26:	3308      	adds	r3, #8
 8010a28:	2102      	movs	r1, #2
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	f000 fc8a 	bl	8011344 <RCCEx_PLL2_Config>
 8010a30:	4603      	mov	r3, r0
 8010a32:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8010a36:	e003      	b.n	8010a40 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8010a38:	2301      	movs	r3, #1
 8010a3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8010a3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010a40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d10d      	bne.n	8010a64 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8010a48:	4b05      	ldr	r3, [pc, #20]	; (8010a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8010a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010a4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a56:	4a02      	ldr	r2, [pc, #8]	; (8010a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8010a58:	430b      	orrs	r3, r1
 8010a5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010a5c:	e006      	b.n	8010a6c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8010a5e:	bf00      	nop
 8010a60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010a64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010a68:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8010a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a74:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8010a78:	663b      	str	r3, [r7, #96]	; 0x60
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	667b      	str	r3, [r7, #100]	; 0x64
 8010a7e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8010a82:	460b      	mov	r3, r1
 8010a84:	4313      	orrs	r3, r2
 8010a86:	d00c      	beq.n	8010aa2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8010a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a8c:	3328      	adds	r3, #40	; 0x28
 8010a8e:	2102      	movs	r1, #2
 8010a90:	4618      	mov	r0, r3
 8010a92:	f000 fd09 	bl	80114a8 <RCCEx_PLL3_Config>
 8010a96:	4603      	mov	r3, r0
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d002      	beq.n	8010aa2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8010a9c:	2301      	movs	r3, #1
 8010a9e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8010aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aaa:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8010aae:	65bb      	str	r3, [r7, #88]	; 0x58
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010ab4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8010ab8:	460b      	mov	r3, r1
 8010aba:	4313      	orrs	r3, r2
 8010abc:	d036      	beq.n	8010b2c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8010abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ac2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010ac4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010ac8:	d018      	beq.n	8010afc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8010aca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010ace:	d811      	bhi.n	8010af4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8010ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010ad4:	d014      	beq.n	8010b00 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8010ad6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010ada:	d80b      	bhi.n	8010af4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d011      	beq.n	8010b04 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8010ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ae4:	d106      	bne.n	8010af4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010ae6:	4bb7      	ldr	r3, [pc, #732]	; (8010dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8010ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010aea:	4ab6      	ldr	r2, [pc, #728]	; (8010dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8010aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010af0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8010af2:	e008      	b.n	8010b06 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010af4:	2301      	movs	r3, #1
 8010af6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8010afa:	e004      	b.n	8010b06 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8010afc:	bf00      	nop
 8010afe:	e002      	b.n	8010b06 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8010b00:	bf00      	nop
 8010b02:	e000      	b.n	8010b06 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8010b04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010b06:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d10a      	bne.n	8010b24 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8010b0e:	4bad      	ldr	r3, [pc, #692]	; (8010dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8010b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8010b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010b1c:	4aa9      	ldr	r2, [pc, #676]	; (8010dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8010b1e:	430b      	orrs	r3, r1
 8010b20:	6553      	str	r3, [r2, #84]	; 0x54
 8010b22:	e003      	b.n	8010b2c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010b24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010b28:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8010b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b34:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8010b38:	653b      	str	r3, [r7, #80]	; 0x50
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	657b      	str	r3, [r7, #84]	; 0x54
 8010b3e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8010b42:	460b      	mov	r3, r1
 8010b44:	4313      	orrs	r3, r2
 8010b46:	d009      	beq.n	8010b5c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8010b48:	4b9e      	ldr	r3, [pc, #632]	; (8010dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8010b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b4c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b56:	4a9b      	ldr	r2, [pc, #620]	; (8010dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8010b58:	430b      	orrs	r3, r1
 8010b5a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8010b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b64:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8010b68:	64bb      	str	r3, [r7, #72]	; 0x48
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010b6e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8010b72:	460b      	mov	r3, r1
 8010b74:	4313      	orrs	r3, r2
 8010b76:	d009      	beq.n	8010b8c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8010b78:	4b92      	ldr	r3, [pc, #584]	; (8010dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8010b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b7c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8010b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010b86:	4a8f      	ldr	r2, [pc, #572]	; (8010dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8010b88:	430b      	orrs	r3, r1
 8010b8a:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8010b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b94:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8010b98:	643b      	str	r3, [r7, #64]	; 0x40
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	647b      	str	r3, [r7, #68]	; 0x44
 8010b9e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8010ba2:	460b      	mov	r3, r1
 8010ba4:	4313      	orrs	r3, r2
 8010ba6:	d00e      	beq.n	8010bc6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8010ba8:	4b86      	ldr	r3, [pc, #536]	; (8010dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8010baa:	691b      	ldr	r3, [r3, #16]
 8010bac:	4a85      	ldr	r2, [pc, #532]	; (8010dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8010bae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8010bb2:	6113      	str	r3, [r2, #16]
 8010bb4:	4b83      	ldr	r3, [pc, #524]	; (8010dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8010bb6:	6919      	ldr	r1, [r3, #16]
 8010bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010bbc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010bc0:	4a80      	ldr	r2, [pc, #512]	; (8010dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8010bc2:	430b      	orrs	r3, r1
 8010bc4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8010bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bce:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8010bd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010bd8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8010bdc:	460b      	mov	r3, r1
 8010bde:	4313      	orrs	r3, r2
 8010be0:	d009      	beq.n	8010bf6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8010be2:	4b78      	ldr	r3, [pc, #480]	; (8010dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8010be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010be6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8010bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bf0:	4a74      	ldr	r2, [pc, #464]	; (8010dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8010bf2:	430b      	orrs	r3, r1
 8010bf4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8010bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bfe:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8010c02:	633b      	str	r3, [r7, #48]	; 0x30
 8010c04:	2300      	movs	r3, #0
 8010c06:	637b      	str	r3, [r7, #52]	; 0x34
 8010c08:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8010c0c:	460b      	mov	r3, r1
 8010c0e:	4313      	orrs	r3, r2
 8010c10:	d00a      	beq.n	8010c28 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8010c12:	4b6c      	ldr	r3, [pc, #432]	; (8010dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8010c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c16:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8010c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010c22:	4a68      	ldr	r2, [pc, #416]	; (8010dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8010c24:	430b      	orrs	r3, r1
 8010c26:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8010c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c30:	2100      	movs	r1, #0
 8010c32:	62b9      	str	r1, [r7, #40]	; 0x28
 8010c34:	f003 0301 	and.w	r3, r3, #1
 8010c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010c3a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8010c3e:	460b      	mov	r3, r1
 8010c40:	4313      	orrs	r3, r2
 8010c42:	d011      	beq.n	8010c68 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c48:	3308      	adds	r3, #8
 8010c4a:	2100      	movs	r1, #0
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	f000 fb79 	bl	8011344 <RCCEx_PLL2_Config>
 8010c52:	4603      	mov	r3, r0
 8010c54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8010c58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d003      	beq.n	8010c68 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010c60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010c64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8010c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c70:	2100      	movs	r1, #0
 8010c72:	6239      	str	r1, [r7, #32]
 8010c74:	f003 0302 	and.w	r3, r3, #2
 8010c78:	627b      	str	r3, [r7, #36]	; 0x24
 8010c7a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8010c7e:	460b      	mov	r3, r1
 8010c80:	4313      	orrs	r3, r2
 8010c82:	d011      	beq.n	8010ca8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c88:	3308      	adds	r3, #8
 8010c8a:	2101      	movs	r1, #1
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	f000 fb59 	bl	8011344 <RCCEx_PLL2_Config>
 8010c92:	4603      	mov	r3, r0
 8010c94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8010c98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d003      	beq.n	8010ca8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010ca0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010ca4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8010ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cb0:	2100      	movs	r1, #0
 8010cb2:	61b9      	str	r1, [r7, #24]
 8010cb4:	f003 0304 	and.w	r3, r3, #4
 8010cb8:	61fb      	str	r3, [r7, #28]
 8010cba:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8010cbe:	460b      	mov	r3, r1
 8010cc0:	4313      	orrs	r3, r2
 8010cc2:	d011      	beq.n	8010ce8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8010cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010cc8:	3308      	adds	r3, #8
 8010cca:	2102      	movs	r1, #2
 8010ccc:	4618      	mov	r0, r3
 8010cce:	f000 fb39 	bl	8011344 <RCCEx_PLL2_Config>
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8010cd8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d003      	beq.n	8010ce8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010ce0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010ce4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8010ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cf0:	2100      	movs	r1, #0
 8010cf2:	6139      	str	r1, [r7, #16]
 8010cf4:	f003 0308 	and.w	r3, r3, #8
 8010cf8:	617b      	str	r3, [r7, #20]
 8010cfa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8010cfe:	460b      	mov	r3, r1
 8010d00:	4313      	orrs	r3, r2
 8010d02:	d011      	beq.n	8010d28 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8010d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d08:	3328      	adds	r3, #40	; 0x28
 8010d0a:	2100      	movs	r1, #0
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	f000 fbcb 	bl	80114a8 <RCCEx_PLL3_Config>
 8010d12:	4603      	mov	r3, r0
 8010d14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8010d18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d003      	beq.n	8010d28 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010d20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010d24:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8010d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d30:	2100      	movs	r1, #0
 8010d32:	60b9      	str	r1, [r7, #8]
 8010d34:	f003 0310 	and.w	r3, r3, #16
 8010d38:	60fb      	str	r3, [r7, #12]
 8010d3a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8010d3e:	460b      	mov	r3, r1
 8010d40:	4313      	orrs	r3, r2
 8010d42:	d011      	beq.n	8010d68 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d48:	3328      	adds	r3, #40	; 0x28
 8010d4a:	2101      	movs	r1, #1
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	f000 fbab 	bl	80114a8 <RCCEx_PLL3_Config>
 8010d52:	4603      	mov	r3, r0
 8010d54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8010d58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d003      	beq.n	8010d68 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010d60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010d64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8010d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d70:	2100      	movs	r1, #0
 8010d72:	6039      	str	r1, [r7, #0]
 8010d74:	f003 0320 	and.w	r3, r3, #32
 8010d78:	607b      	str	r3, [r7, #4]
 8010d7a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8010d7e:	460b      	mov	r3, r1
 8010d80:	4313      	orrs	r3, r2
 8010d82:	d011      	beq.n	8010da8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d88:	3328      	adds	r3, #40	; 0x28
 8010d8a:	2102      	movs	r1, #2
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	f000 fb8b 	bl	80114a8 <RCCEx_PLL3_Config>
 8010d92:	4603      	mov	r3, r0
 8010d94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8010d98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d003      	beq.n	8010da8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010da0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010da4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8010da8:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d101      	bne.n	8010db4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8010db0:	2300      	movs	r3, #0
 8010db2:	e000      	b.n	8010db6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8010db4:	2301      	movs	r3, #1
}
 8010db6:	4618      	mov	r0, r3
 8010db8:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010dc2:	bf00      	nop
 8010dc4:	58024400 	.word	0x58024400

08010dc8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8010dcc:	f7fe fe00 	bl	800f9d0 <HAL_RCC_GetHCLKFreq>
 8010dd0:	4602      	mov	r2, r0
 8010dd2:	4b06      	ldr	r3, [pc, #24]	; (8010dec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8010dd4:	6a1b      	ldr	r3, [r3, #32]
 8010dd6:	091b      	lsrs	r3, r3, #4
 8010dd8:	f003 0307 	and.w	r3, r3, #7
 8010ddc:	4904      	ldr	r1, [pc, #16]	; (8010df0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8010dde:	5ccb      	ldrb	r3, [r1, r3]
 8010de0:	f003 031f 	and.w	r3, r3, #31
 8010de4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8010de8:	4618      	mov	r0, r3
 8010dea:	bd80      	pop	{r7, pc}
 8010dec:	58024400 	.word	0x58024400
 8010df0:	08016f28 	.word	0x08016f28

08010df4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8010df4:	b480      	push	{r7}
 8010df6:	b089      	sub	sp, #36	; 0x24
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010dfc:	4ba1      	ldr	r3, [pc, #644]	; (8011084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e00:	f003 0303 	and.w	r3, r3, #3
 8010e04:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8010e06:	4b9f      	ldr	r3, [pc, #636]	; (8011084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e0a:	0b1b      	lsrs	r3, r3, #12
 8010e0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010e10:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8010e12:	4b9c      	ldr	r3, [pc, #624]	; (8011084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e16:	091b      	lsrs	r3, r3, #4
 8010e18:	f003 0301 	and.w	r3, r3, #1
 8010e1c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8010e1e:	4b99      	ldr	r3, [pc, #612]	; (8011084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e22:	08db      	lsrs	r3, r3, #3
 8010e24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010e28:	693a      	ldr	r2, [r7, #16]
 8010e2a:	fb02 f303 	mul.w	r3, r2, r3
 8010e2e:	ee07 3a90 	vmov	s15, r3
 8010e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8010e3a:	697b      	ldr	r3, [r7, #20]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	f000 8111 	beq.w	8011064 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8010e42:	69bb      	ldr	r3, [r7, #24]
 8010e44:	2b02      	cmp	r3, #2
 8010e46:	f000 8083 	beq.w	8010f50 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8010e4a:	69bb      	ldr	r3, [r7, #24]
 8010e4c:	2b02      	cmp	r3, #2
 8010e4e:	f200 80a1 	bhi.w	8010f94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8010e52:	69bb      	ldr	r3, [r7, #24]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d003      	beq.n	8010e60 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8010e58:	69bb      	ldr	r3, [r7, #24]
 8010e5a:	2b01      	cmp	r3, #1
 8010e5c:	d056      	beq.n	8010f0c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8010e5e:	e099      	b.n	8010f94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010e60:	4b88      	ldr	r3, [pc, #544]	; (8011084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	f003 0320 	and.w	r3, r3, #32
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d02d      	beq.n	8010ec8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010e6c:	4b85      	ldr	r3, [pc, #532]	; (8011084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	08db      	lsrs	r3, r3, #3
 8010e72:	f003 0303 	and.w	r3, r3, #3
 8010e76:	4a84      	ldr	r2, [pc, #528]	; (8011088 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8010e78:	fa22 f303 	lsr.w	r3, r2, r3
 8010e7c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010e7e:	68bb      	ldr	r3, [r7, #8]
 8010e80:	ee07 3a90 	vmov	s15, r3
 8010e84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e88:	697b      	ldr	r3, [r7, #20]
 8010e8a:	ee07 3a90 	vmov	s15, r3
 8010e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010e96:	4b7b      	ldr	r3, [pc, #492]	; (8011084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e9e:	ee07 3a90 	vmov	s15, r3
 8010ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010ea6:	ed97 6a03 	vldr	s12, [r7, #12]
 8010eaa:	eddf 5a78 	vldr	s11, [pc, #480]	; 801108c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010eb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010ec2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010ec6:	e087      	b.n	8010fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010ec8:	697b      	ldr	r3, [r7, #20]
 8010eca:	ee07 3a90 	vmov	s15, r3
 8010ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ed2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8011090 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8010ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010eda:	4b6a      	ldr	r3, [pc, #424]	; (8011084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ee2:	ee07 3a90 	vmov	s15, r3
 8010ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010eea:	ed97 6a03 	vldr	s12, [r7, #12]
 8010eee:	eddf 5a67 	vldr	s11, [pc, #412]	; 801108c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010efa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010f0a:	e065      	b.n	8010fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010f0c:	697b      	ldr	r3, [r7, #20]
 8010f0e:	ee07 3a90 	vmov	s15, r3
 8010f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f16:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8011094 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8010f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010f1e:	4b59      	ldr	r3, [pc, #356]	; (8011084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f26:	ee07 3a90 	vmov	s15, r3
 8010f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010f2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010f32:	eddf 5a56 	vldr	s11, [pc, #344]	; 801108c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010f3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010f4e:	e043      	b.n	8010fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010f50:	697b      	ldr	r3, [r7, #20]
 8010f52:	ee07 3a90 	vmov	s15, r3
 8010f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f5a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8011098 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8010f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010f62:	4b48      	ldr	r3, [pc, #288]	; (8011084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f6a:	ee07 3a90 	vmov	s15, r3
 8010f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010f72:	ed97 6a03 	vldr	s12, [r7, #12]
 8010f76:	eddf 5a45 	vldr	s11, [pc, #276]	; 801108c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010f82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010f92:	e021      	b.n	8010fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010f94:	697b      	ldr	r3, [r7, #20]
 8010f96:	ee07 3a90 	vmov	s15, r3
 8010f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f9e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8011094 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8010fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010fa6:	4b37      	ldr	r3, [pc, #220]	; (8011084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010fae:	ee07 3a90 	vmov	s15, r3
 8010fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010fb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8010fba:	eddf 5a34 	vldr	s11, [pc, #208]	; 801108c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010fc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010fd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010fd6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8010fd8:	4b2a      	ldr	r3, [pc, #168]	; (8011084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fdc:	0a5b      	lsrs	r3, r3, #9
 8010fde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010fe2:	ee07 3a90 	vmov	s15, r3
 8010fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010fea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010fee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010ff2:	edd7 6a07 	vldr	s13, [r7, #28]
 8010ff6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010ffa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010ffe:	ee17 2a90 	vmov	r2, s15
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8011006:	4b1f      	ldr	r3, [pc, #124]	; (8011084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801100a:	0c1b      	lsrs	r3, r3, #16
 801100c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011010:	ee07 3a90 	vmov	s15, r3
 8011014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011018:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801101c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011020:	edd7 6a07 	vldr	s13, [r7, #28]
 8011024:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011028:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801102c:	ee17 2a90 	vmov	r2, s15
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8011034:	4b13      	ldr	r3, [pc, #76]	; (8011084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011038:	0e1b      	lsrs	r3, r3, #24
 801103a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801103e:	ee07 3a90 	vmov	s15, r3
 8011042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011046:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801104a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801104e:	edd7 6a07 	vldr	s13, [r7, #28]
 8011052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801105a:	ee17 2a90 	vmov	r2, s15
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8011062:	e008      	b.n	8011076 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	2200      	movs	r2, #0
 8011068:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	2200      	movs	r2, #0
 801106e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	2200      	movs	r2, #0
 8011074:	609a      	str	r2, [r3, #8]
}
 8011076:	bf00      	nop
 8011078:	3724      	adds	r7, #36	; 0x24
 801107a:	46bd      	mov	sp, r7
 801107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011080:	4770      	bx	lr
 8011082:	bf00      	nop
 8011084:	58024400 	.word	0x58024400
 8011088:	03d09000 	.word	0x03d09000
 801108c:	46000000 	.word	0x46000000
 8011090:	4c742400 	.word	0x4c742400
 8011094:	4a742400 	.word	0x4a742400
 8011098:	4af42400 	.word	0x4af42400

0801109c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801109c:	b480      	push	{r7}
 801109e:	b089      	sub	sp, #36	; 0x24
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80110a4:	4ba1      	ldr	r3, [pc, #644]	; (801132c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80110a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110a8:	f003 0303 	and.w	r3, r3, #3
 80110ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80110ae:	4b9f      	ldr	r3, [pc, #636]	; (801132c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80110b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110b2:	0d1b      	lsrs	r3, r3, #20
 80110b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80110b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80110ba:	4b9c      	ldr	r3, [pc, #624]	; (801132c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80110bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110be:	0a1b      	lsrs	r3, r3, #8
 80110c0:	f003 0301 	and.w	r3, r3, #1
 80110c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80110c6:	4b99      	ldr	r3, [pc, #612]	; (801132c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80110c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110ca:	08db      	lsrs	r3, r3, #3
 80110cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80110d0:	693a      	ldr	r2, [r7, #16]
 80110d2:	fb02 f303 	mul.w	r3, r2, r3
 80110d6:	ee07 3a90 	vmov	s15, r3
 80110da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80110de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80110e2:	697b      	ldr	r3, [r7, #20]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	f000 8111 	beq.w	801130c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80110ea:	69bb      	ldr	r3, [r7, #24]
 80110ec:	2b02      	cmp	r3, #2
 80110ee:	f000 8083 	beq.w	80111f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80110f2:	69bb      	ldr	r3, [r7, #24]
 80110f4:	2b02      	cmp	r3, #2
 80110f6:	f200 80a1 	bhi.w	801123c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80110fa:	69bb      	ldr	r3, [r7, #24]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d003      	beq.n	8011108 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8011100:	69bb      	ldr	r3, [r7, #24]
 8011102:	2b01      	cmp	r3, #1
 8011104:	d056      	beq.n	80111b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8011106:	e099      	b.n	801123c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011108:	4b88      	ldr	r3, [pc, #544]	; (801132c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	f003 0320 	and.w	r3, r3, #32
 8011110:	2b00      	cmp	r3, #0
 8011112:	d02d      	beq.n	8011170 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011114:	4b85      	ldr	r3, [pc, #532]	; (801132c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	08db      	lsrs	r3, r3, #3
 801111a:	f003 0303 	and.w	r3, r3, #3
 801111e:	4a84      	ldr	r2, [pc, #528]	; (8011330 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8011120:	fa22 f303 	lsr.w	r3, r2, r3
 8011124:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8011126:	68bb      	ldr	r3, [r7, #8]
 8011128:	ee07 3a90 	vmov	s15, r3
 801112c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011130:	697b      	ldr	r3, [r7, #20]
 8011132:	ee07 3a90 	vmov	s15, r3
 8011136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801113a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801113e:	4b7b      	ldr	r3, [pc, #492]	; (801132c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011146:	ee07 3a90 	vmov	s15, r3
 801114a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801114e:	ed97 6a03 	vldr	s12, [r7, #12]
 8011152:	eddf 5a78 	vldr	s11, [pc, #480]	; 8011334 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8011156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801115a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801115e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011166:	ee67 7a27 	vmul.f32	s15, s14, s15
 801116a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801116e:	e087      	b.n	8011280 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8011170:	697b      	ldr	r3, [r7, #20]
 8011172:	ee07 3a90 	vmov	s15, r3
 8011176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801117a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8011338 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801117e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011182:	4b6a      	ldr	r3, [pc, #424]	; (801132c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801118a:	ee07 3a90 	vmov	s15, r3
 801118e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011192:	ed97 6a03 	vldr	s12, [r7, #12]
 8011196:	eddf 5a67 	vldr	s11, [pc, #412]	; 8011334 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801119a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801119e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80111a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80111a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80111aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80111b2:	e065      	b.n	8011280 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80111b4:	697b      	ldr	r3, [r7, #20]
 80111b6:	ee07 3a90 	vmov	s15, r3
 80111ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80111be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 801133c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80111c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80111c6:	4b59      	ldr	r3, [pc, #356]	; (801132c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80111c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111ce:	ee07 3a90 	vmov	s15, r3
 80111d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80111d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80111da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8011334 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80111de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80111e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80111e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80111ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80111ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80111f6:	e043      	b.n	8011280 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80111f8:	697b      	ldr	r3, [r7, #20]
 80111fa:	ee07 3a90 	vmov	s15, r3
 80111fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011202:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8011340 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8011206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801120a:	4b48      	ldr	r3, [pc, #288]	; (801132c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801120e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011212:	ee07 3a90 	vmov	s15, r3
 8011216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801121a:	ed97 6a03 	vldr	s12, [r7, #12]
 801121e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8011334 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8011222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801122a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801122e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011236:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801123a:	e021      	b.n	8011280 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801123c:	697b      	ldr	r3, [r7, #20]
 801123e:	ee07 3a90 	vmov	s15, r3
 8011242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011246:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801133c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801124a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801124e:	4b37      	ldr	r3, [pc, #220]	; (801132c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011256:	ee07 3a90 	vmov	s15, r3
 801125a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801125e:	ed97 6a03 	vldr	s12, [r7, #12]
 8011262:	eddf 5a34 	vldr	s11, [pc, #208]	; 8011334 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8011266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801126a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801126e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011276:	ee67 7a27 	vmul.f32	s15, s14, s15
 801127a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801127e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8011280:	4b2a      	ldr	r3, [pc, #168]	; (801132c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011284:	0a5b      	lsrs	r3, r3, #9
 8011286:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801128a:	ee07 3a90 	vmov	s15, r3
 801128e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011292:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011296:	ee37 7a87 	vadd.f32	s14, s15, s14
 801129a:	edd7 6a07 	vldr	s13, [r7, #28]
 801129e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80112a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80112a6:	ee17 2a90 	vmov	r2, s15
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80112ae:	4b1f      	ldr	r3, [pc, #124]	; (801132c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80112b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112b2:	0c1b      	lsrs	r3, r3, #16
 80112b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80112b8:	ee07 3a90 	vmov	s15, r3
 80112bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80112c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80112c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80112c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80112cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80112d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80112d4:	ee17 2a90 	vmov	r2, s15
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80112dc:	4b13      	ldr	r3, [pc, #76]	; (801132c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80112de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112e0:	0e1b      	lsrs	r3, r3, #24
 80112e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80112e6:	ee07 3a90 	vmov	s15, r3
 80112ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80112ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80112f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80112f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80112fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80112fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011302:	ee17 2a90 	vmov	r2, s15
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801130a:	e008      	b.n	801131e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	2200      	movs	r2, #0
 8011310:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	2200      	movs	r2, #0
 8011316:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	2200      	movs	r2, #0
 801131c:	609a      	str	r2, [r3, #8]
}
 801131e:	bf00      	nop
 8011320:	3724      	adds	r7, #36	; 0x24
 8011322:	46bd      	mov	sp, r7
 8011324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011328:	4770      	bx	lr
 801132a:	bf00      	nop
 801132c:	58024400 	.word	0x58024400
 8011330:	03d09000 	.word	0x03d09000
 8011334:	46000000 	.word	0x46000000
 8011338:	4c742400 	.word	0x4c742400
 801133c:	4a742400 	.word	0x4a742400
 8011340:	4af42400 	.word	0x4af42400

08011344 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8011344:	b580      	push	{r7, lr}
 8011346:	b084      	sub	sp, #16
 8011348:	af00      	add	r7, sp, #0
 801134a:	6078      	str	r0, [r7, #4]
 801134c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801134e:	2300      	movs	r3, #0
 8011350:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8011352:	4b53      	ldr	r3, [pc, #332]	; (80114a0 <RCCEx_PLL2_Config+0x15c>)
 8011354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011356:	f003 0303 	and.w	r3, r3, #3
 801135a:	2b03      	cmp	r3, #3
 801135c:	d101      	bne.n	8011362 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801135e:	2301      	movs	r3, #1
 8011360:	e099      	b.n	8011496 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8011362:	4b4f      	ldr	r3, [pc, #316]	; (80114a0 <RCCEx_PLL2_Config+0x15c>)
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	4a4e      	ldr	r2, [pc, #312]	; (80114a0 <RCCEx_PLL2_Config+0x15c>)
 8011368:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801136c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801136e:	f7fc fcbb 	bl	800dce8 <HAL_GetTick>
 8011372:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011374:	e008      	b.n	8011388 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8011376:	f7fc fcb7 	bl	800dce8 <HAL_GetTick>
 801137a:	4602      	mov	r2, r0
 801137c:	68bb      	ldr	r3, [r7, #8]
 801137e:	1ad3      	subs	r3, r2, r3
 8011380:	2b02      	cmp	r3, #2
 8011382:	d901      	bls.n	8011388 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8011384:	2303      	movs	r3, #3
 8011386:	e086      	b.n	8011496 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011388:	4b45      	ldr	r3, [pc, #276]	; (80114a0 <RCCEx_PLL2_Config+0x15c>)
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011390:	2b00      	cmp	r3, #0
 8011392:	d1f0      	bne.n	8011376 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8011394:	4b42      	ldr	r3, [pc, #264]	; (80114a0 <RCCEx_PLL2_Config+0x15c>)
 8011396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011398:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	031b      	lsls	r3, r3, #12
 80113a2:	493f      	ldr	r1, [pc, #252]	; (80114a0 <RCCEx_PLL2_Config+0x15c>)
 80113a4:	4313      	orrs	r3, r2
 80113a6:	628b      	str	r3, [r1, #40]	; 0x28
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	685b      	ldr	r3, [r3, #4]
 80113ac:	3b01      	subs	r3, #1
 80113ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	689b      	ldr	r3, [r3, #8]
 80113b6:	3b01      	subs	r3, #1
 80113b8:	025b      	lsls	r3, r3, #9
 80113ba:	b29b      	uxth	r3, r3
 80113bc:	431a      	orrs	r2, r3
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	68db      	ldr	r3, [r3, #12]
 80113c2:	3b01      	subs	r3, #1
 80113c4:	041b      	lsls	r3, r3, #16
 80113c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80113ca:	431a      	orrs	r2, r3
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	691b      	ldr	r3, [r3, #16]
 80113d0:	3b01      	subs	r3, #1
 80113d2:	061b      	lsls	r3, r3, #24
 80113d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80113d8:	4931      	ldr	r1, [pc, #196]	; (80114a0 <RCCEx_PLL2_Config+0x15c>)
 80113da:	4313      	orrs	r3, r2
 80113dc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80113de:	4b30      	ldr	r3, [pc, #192]	; (80114a0 <RCCEx_PLL2_Config+0x15c>)
 80113e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	695b      	ldr	r3, [r3, #20]
 80113ea:	492d      	ldr	r1, [pc, #180]	; (80114a0 <RCCEx_PLL2_Config+0x15c>)
 80113ec:	4313      	orrs	r3, r2
 80113ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80113f0:	4b2b      	ldr	r3, [pc, #172]	; (80114a0 <RCCEx_PLL2_Config+0x15c>)
 80113f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113f4:	f023 0220 	bic.w	r2, r3, #32
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	699b      	ldr	r3, [r3, #24]
 80113fc:	4928      	ldr	r1, [pc, #160]	; (80114a0 <RCCEx_PLL2_Config+0x15c>)
 80113fe:	4313      	orrs	r3, r2
 8011400:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8011402:	4b27      	ldr	r3, [pc, #156]	; (80114a0 <RCCEx_PLL2_Config+0x15c>)
 8011404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011406:	4a26      	ldr	r2, [pc, #152]	; (80114a0 <RCCEx_PLL2_Config+0x15c>)
 8011408:	f023 0310 	bic.w	r3, r3, #16
 801140c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801140e:	4b24      	ldr	r3, [pc, #144]	; (80114a0 <RCCEx_PLL2_Config+0x15c>)
 8011410:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011412:	4b24      	ldr	r3, [pc, #144]	; (80114a4 <RCCEx_PLL2_Config+0x160>)
 8011414:	4013      	ands	r3, r2
 8011416:	687a      	ldr	r2, [r7, #4]
 8011418:	69d2      	ldr	r2, [r2, #28]
 801141a:	00d2      	lsls	r2, r2, #3
 801141c:	4920      	ldr	r1, [pc, #128]	; (80114a0 <RCCEx_PLL2_Config+0x15c>)
 801141e:	4313      	orrs	r3, r2
 8011420:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8011422:	4b1f      	ldr	r3, [pc, #124]	; (80114a0 <RCCEx_PLL2_Config+0x15c>)
 8011424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011426:	4a1e      	ldr	r2, [pc, #120]	; (80114a0 <RCCEx_PLL2_Config+0x15c>)
 8011428:	f043 0310 	orr.w	r3, r3, #16
 801142c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801142e:	683b      	ldr	r3, [r7, #0]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d106      	bne.n	8011442 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8011434:	4b1a      	ldr	r3, [pc, #104]	; (80114a0 <RCCEx_PLL2_Config+0x15c>)
 8011436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011438:	4a19      	ldr	r2, [pc, #100]	; (80114a0 <RCCEx_PLL2_Config+0x15c>)
 801143a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801143e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011440:	e00f      	b.n	8011462 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8011442:	683b      	ldr	r3, [r7, #0]
 8011444:	2b01      	cmp	r3, #1
 8011446:	d106      	bne.n	8011456 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8011448:	4b15      	ldr	r3, [pc, #84]	; (80114a0 <RCCEx_PLL2_Config+0x15c>)
 801144a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801144c:	4a14      	ldr	r2, [pc, #80]	; (80114a0 <RCCEx_PLL2_Config+0x15c>)
 801144e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011452:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011454:	e005      	b.n	8011462 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8011456:	4b12      	ldr	r3, [pc, #72]	; (80114a0 <RCCEx_PLL2_Config+0x15c>)
 8011458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801145a:	4a11      	ldr	r2, [pc, #68]	; (80114a0 <RCCEx_PLL2_Config+0x15c>)
 801145c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011460:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8011462:	4b0f      	ldr	r3, [pc, #60]	; (80114a0 <RCCEx_PLL2_Config+0x15c>)
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	4a0e      	ldr	r2, [pc, #56]	; (80114a0 <RCCEx_PLL2_Config+0x15c>)
 8011468:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801146c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801146e:	f7fc fc3b 	bl	800dce8 <HAL_GetTick>
 8011472:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011474:	e008      	b.n	8011488 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8011476:	f7fc fc37 	bl	800dce8 <HAL_GetTick>
 801147a:	4602      	mov	r2, r0
 801147c:	68bb      	ldr	r3, [r7, #8]
 801147e:	1ad3      	subs	r3, r2, r3
 8011480:	2b02      	cmp	r3, #2
 8011482:	d901      	bls.n	8011488 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8011484:	2303      	movs	r3, #3
 8011486:	e006      	b.n	8011496 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011488:	4b05      	ldr	r3, [pc, #20]	; (80114a0 <RCCEx_PLL2_Config+0x15c>)
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011490:	2b00      	cmp	r3, #0
 8011492:	d0f0      	beq.n	8011476 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8011494:	7bfb      	ldrb	r3, [r7, #15]
}
 8011496:	4618      	mov	r0, r3
 8011498:	3710      	adds	r7, #16
 801149a:	46bd      	mov	sp, r7
 801149c:	bd80      	pop	{r7, pc}
 801149e:	bf00      	nop
 80114a0:	58024400 	.word	0x58024400
 80114a4:	ffff0007 	.word	0xffff0007

080114a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b084      	sub	sp, #16
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	6078      	str	r0, [r7, #4]
 80114b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80114b2:	2300      	movs	r3, #0
 80114b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80114b6:	4b53      	ldr	r3, [pc, #332]	; (8011604 <RCCEx_PLL3_Config+0x15c>)
 80114b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114ba:	f003 0303 	and.w	r3, r3, #3
 80114be:	2b03      	cmp	r3, #3
 80114c0:	d101      	bne.n	80114c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80114c2:	2301      	movs	r3, #1
 80114c4:	e099      	b.n	80115fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80114c6:	4b4f      	ldr	r3, [pc, #316]	; (8011604 <RCCEx_PLL3_Config+0x15c>)
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	4a4e      	ldr	r2, [pc, #312]	; (8011604 <RCCEx_PLL3_Config+0x15c>)
 80114cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80114d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80114d2:	f7fc fc09 	bl	800dce8 <HAL_GetTick>
 80114d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80114d8:	e008      	b.n	80114ec <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80114da:	f7fc fc05 	bl	800dce8 <HAL_GetTick>
 80114de:	4602      	mov	r2, r0
 80114e0:	68bb      	ldr	r3, [r7, #8]
 80114e2:	1ad3      	subs	r3, r2, r3
 80114e4:	2b02      	cmp	r3, #2
 80114e6:	d901      	bls.n	80114ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80114e8:	2303      	movs	r3, #3
 80114ea:	e086      	b.n	80115fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80114ec:	4b45      	ldr	r3, [pc, #276]	; (8011604 <RCCEx_PLL3_Config+0x15c>)
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d1f0      	bne.n	80114da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80114f8:	4b42      	ldr	r3, [pc, #264]	; (8011604 <RCCEx_PLL3_Config+0x15c>)
 80114fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114fc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	051b      	lsls	r3, r3, #20
 8011506:	493f      	ldr	r1, [pc, #252]	; (8011604 <RCCEx_PLL3_Config+0x15c>)
 8011508:	4313      	orrs	r3, r2
 801150a:	628b      	str	r3, [r1, #40]	; 0x28
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	685b      	ldr	r3, [r3, #4]
 8011510:	3b01      	subs	r3, #1
 8011512:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	689b      	ldr	r3, [r3, #8]
 801151a:	3b01      	subs	r3, #1
 801151c:	025b      	lsls	r3, r3, #9
 801151e:	b29b      	uxth	r3, r3
 8011520:	431a      	orrs	r2, r3
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	68db      	ldr	r3, [r3, #12]
 8011526:	3b01      	subs	r3, #1
 8011528:	041b      	lsls	r3, r3, #16
 801152a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801152e:	431a      	orrs	r2, r3
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	691b      	ldr	r3, [r3, #16]
 8011534:	3b01      	subs	r3, #1
 8011536:	061b      	lsls	r3, r3, #24
 8011538:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801153c:	4931      	ldr	r1, [pc, #196]	; (8011604 <RCCEx_PLL3_Config+0x15c>)
 801153e:	4313      	orrs	r3, r2
 8011540:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8011542:	4b30      	ldr	r3, [pc, #192]	; (8011604 <RCCEx_PLL3_Config+0x15c>)
 8011544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011546:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	695b      	ldr	r3, [r3, #20]
 801154e:	492d      	ldr	r1, [pc, #180]	; (8011604 <RCCEx_PLL3_Config+0x15c>)
 8011550:	4313      	orrs	r3, r2
 8011552:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8011554:	4b2b      	ldr	r3, [pc, #172]	; (8011604 <RCCEx_PLL3_Config+0x15c>)
 8011556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011558:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	699b      	ldr	r3, [r3, #24]
 8011560:	4928      	ldr	r1, [pc, #160]	; (8011604 <RCCEx_PLL3_Config+0x15c>)
 8011562:	4313      	orrs	r3, r2
 8011564:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8011566:	4b27      	ldr	r3, [pc, #156]	; (8011604 <RCCEx_PLL3_Config+0x15c>)
 8011568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801156a:	4a26      	ldr	r2, [pc, #152]	; (8011604 <RCCEx_PLL3_Config+0x15c>)
 801156c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011570:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8011572:	4b24      	ldr	r3, [pc, #144]	; (8011604 <RCCEx_PLL3_Config+0x15c>)
 8011574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011576:	4b24      	ldr	r3, [pc, #144]	; (8011608 <RCCEx_PLL3_Config+0x160>)
 8011578:	4013      	ands	r3, r2
 801157a:	687a      	ldr	r2, [r7, #4]
 801157c:	69d2      	ldr	r2, [r2, #28]
 801157e:	00d2      	lsls	r2, r2, #3
 8011580:	4920      	ldr	r1, [pc, #128]	; (8011604 <RCCEx_PLL3_Config+0x15c>)
 8011582:	4313      	orrs	r3, r2
 8011584:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8011586:	4b1f      	ldr	r3, [pc, #124]	; (8011604 <RCCEx_PLL3_Config+0x15c>)
 8011588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801158a:	4a1e      	ldr	r2, [pc, #120]	; (8011604 <RCCEx_PLL3_Config+0x15c>)
 801158c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011590:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8011592:	683b      	ldr	r3, [r7, #0]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d106      	bne.n	80115a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8011598:	4b1a      	ldr	r3, [pc, #104]	; (8011604 <RCCEx_PLL3_Config+0x15c>)
 801159a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801159c:	4a19      	ldr	r2, [pc, #100]	; (8011604 <RCCEx_PLL3_Config+0x15c>)
 801159e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80115a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80115a4:	e00f      	b.n	80115c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80115a6:	683b      	ldr	r3, [r7, #0]
 80115a8:	2b01      	cmp	r3, #1
 80115aa:	d106      	bne.n	80115ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80115ac:	4b15      	ldr	r3, [pc, #84]	; (8011604 <RCCEx_PLL3_Config+0x15c>)
 80115ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115b0:	4a14      	ldr	r2, [pc, #80]	; (8011604 <RCCEx_PLL3_Config+0x15c>)
 80115b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80115b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80115b8:	e005      	b.n	80115c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80115ba:	4b12      	ldr	r3, [pc, #72]	; (8011604 <RCCEx_PLL3_Config+0x15c>)
 80115bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115be:	4a11      	ldr	r2, [pc, #68]	; (8011604 <RCCEx_PLL3_Config+0x15c>)
 80115c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80115c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80115c6:	4b0f      	ldr	r3, [pc, #60]	; (8011604 <RCCEx_PLL3_Config+0x15c>)
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	4a0e      	ldr	r2, [pc, #56]	; (8011604 <RCCEx_PLL3_Config+0x15c>)
 80115cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80115d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80115d2:	f7fc fb89 	bl	800dce8 <HAL_GetTick>
 80115d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80115d8:	e008      	b.n	80115ec <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80115da:	f7fc fb85 	bl	800dce8 <HAL_GetTick>
 80115de:	4602      	mov	r2, r0
 80115e0:	68bb      	ldr	r3, [r7, #8]
 80115e2:	1ad3      	subs	r3, r2, r3
 80115e4:	2b02      	cmp	r3, #2
 80115e6:	d901      	bls.n	80115ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80115e8:	2303      	movs	r3, #3
 80115ea:	e006      	b.n	80115fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80115ec:	4b05      	ldr	r3, [pc, #20]	; (8011604 <RCCEx_PLL3_Config+0x15c>)
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d0f0      	beq.n	80115da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80115f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80115fa:	4618      	mov	r0, r3
 80115fc:	3710      	adds	r7, #16
 80115fe:	46bd      	mov	sp, r7
 8011600:	bd80      	pop	{r7, pc}
 8011602:	bf00      	nop
 8011604:	58024400 	.word	0x58024400
 8011608:	ffff0007 	.word	0xffff0007

0801160c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 801160c:	b580      	push	{r7, lr}
 801160e:	b084      	sub	sp, #16
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d101      	bne.n	801161e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 801161a:	2301      	movs	r3, #1
 801161c:	e092      	b.n	8011744 <HAL_RNG_Init+0x138>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	7a5b      	ldrb	r3, [r3, #9]
 8011622:	b2db      	uxtb	r3, r3
 8011624:	2b00      	cmp	r3, #0
 8011626:	d105      	bne.n	8011634 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	2200      	movs	r2, #0
 801162c:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 801162e:	6878      	ldr	r0, [r7, #4]
 8011630:	f7fc f8a2 	bl	800d778 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	2202      	movs	r2, #2
 8011638:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	681a      	ldr	r2, [r3, #0]
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	f022 0204 	bic.w	r2, r2, #4
 8011648:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	681a      	ldr	r2, [r3, #0]
 8011650:	4b3e      	ldr	r3, [pc, #248]	; (801174c <HAL_RNG_Init+0x140>)
 8011652:	4013      	ands	r3, r2
 8011654:	687a      	ldr	r2, [r7, #4]
 8011656:	6852      	ldr	r2, [r2, #4]
 8011658:	431a      	orrs	r2, r3
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8011662:	601a      	str	r2, [r3, #0]

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	4a39      	ldr	r2, [pc, #228]	; (8011750 <HAL_RNG_Init+0x144>)
 801166a:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	f247 2274 	movw	r2, #29300	; 0x7274
 8011674:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	681a      	ldr	r2, [r3, #0]
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8011684:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8011686:	f7fc fb2f 	bl	800dce8 <HAL_GetTick>
 801168a:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 801168c:	e016      	b.n	80116bc <HAL_RNG_Init+0xb0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 801168e:	f7fc fb2b 	bl	800dce8 <HAL_GetTick>
 8011692:	4602      	mov	r2, r0
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	1ad3      	subs	r3, r2, r3
 8011698:	2b02      	cmp	r3, #2
 801169a:	d90f      	bls.n	80116bc <HAL_RNG_Init+0xb0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80116a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80116aa:	d107      	bne.n	80116bc <HAL_RNG_Init+0xb0>
      {
        hrng->State = HAL_RNG_STATE_READY;
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	2201      	movs	r2, #1
 80116b0:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	2202      	movs	r2, #2
 80116b6:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 80116b8:	2301      	movs	r3, #1
 80116ba:	e043      	b.n	8011744 <HAL_RNG_Init+0x138>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80116c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80116ca:	d0e0      	beq.n	801168e <HAL_RNG_Init+0x82>
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	681a      	ldr	r2, [r3, #0]
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	f042 0204 	orr.w	r2, r2, #4
 80116da:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	685b      	ldr	r3, [r3, #4]
 80116e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80116e6:	2b40      	cmp	r3, #64	; 0x40
 80116e8:	d104      	bne.n	80116f4 <HAL_RNG_Init+0xe8>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	2204      	movs	r2, #4
 80116ee:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 80116f0:	2301      	movs	r3, #1
 80116f2:	e027      	b.n	8011744 <HAL_RNG_Init+0x138>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80116f4:	f7fc faf8 	bl	800dce8 <HAL_GetTick>
 80116f8:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80116fa:	e015      	b.n	8011728 <HAL_RNG_Init+0x11c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80116fc:	f7fc faf4 	bl	800dce8 <HAL_GetTick>
 8011700:	4602      	mov	r2, r0
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	1ad3      	subs	r3, r2, r3
 8011706:	2b02      	cmp	r3, #2
 8011708:	d90e      	bls.n	8011728 <HAL_RNG_Init+0x11c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	685b      	ldr	r3, [r3, #4]
 8011710:	f003 0304 	and.w	r3, r3, #4
 8011714:	2b04      	cmp	r3, #4
 8011716:	d107      	bne.n	8011728 <HAL_RNG_Init+0x11c>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	2204      	movs	r2, #4
 801171c:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	2202      	movs	r2, #2
 8011722:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8011724:	2301      	movs	r3, #1
 8011726:	e00d      	b.n	8011744 <HAL_RNG_Init+0x138>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	685b      	ldr	r3, [r3, #4]
 801172e:	f003 0304 	and.w	r3, r3, #4
 8011732:	2b04      	cmp	r3, #4
 8011734:	d0e2      	beq.n	80116fc <HAL_RNG_Init+0xf0>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	2201      	movs	r2, #1
 801173a:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	2200      	movs	r2, #0
 8011740:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8011742:	2300      	movs	r3, #0
}
 8011744:	4618      	mov	r0, r3
 8011746:	3710      	adds	r7, #16
 8011748:	46bd      	mov	sp, r7
 801174a:	bd80      	pop	{r7, pc}
 801174c:	bfffffdf 	.word	0xbfffffdf
 8011750:	17590abc 	.word	0x17590abc

08011754 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8011754:	b580      	push	{r7, lr}
 8011756:	b084      	sub	sp, #16
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]
 801175c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801175e:	2300      	movs	r3, #0
 8011760:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	7a1b      	ldrb	r3, [r3, #8]
 8011766:	2b01      	cmp	r3, #1
 8011768:	d101      	bne.n	801176e <HAL_RNG_GenerateRandomNumber+0x1a>
 801176a:	2302      	movs	r3, #2
 801176c:	e06d      	b.n	801184a <HAL_RNG_GenerateRandomNumber+0xf6>
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	2201      	movs	r2, #1
 8011772:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	7a5b      	ldrb	r3, [r3, #9]
 8011778:	b2db      	uxtb	r3, r3
 801177a:	2b01      	cmp	r3, #1
 801177c:	d15c      	bne.n	8011838 <HAL_RNG_GenerateRandomNumber+0xe4>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	2202      	movs	r2, #2
 8011782:	725a      	strb	r2, [r3, #9]
#if defined(RNG_CR_CONDRST)
    /* Check if there is a seed error */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	685b      	ldr	r3, [r3, #4]
 801178a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801178e:	2b40      	cmp	r3, #64	; 0x40
 8011790:	d10c      	bne.n	80117ac <HAL_RNG_GenerateRandomNumber+0x58>
    {
      /* Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	2208      	movs	r2, #8
 8011796:	60da      	str	r2, [r3, #12]
      /* Reset from seed error */
      status = RNG_RecoverSeedError(hrng);
 8011798:	6878      	ldr	r0, [r7, #4]
 801179a:	f000 f864 	bl	8011866 <RNG_RecoverSeedError>
 801179e:	4603      	mov	r3, r0
 80117a0:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_ERROR)
 80117a2:	7bfb      	ldrb	r3, [r7, #15]
 80117a4:	2b01      	cmp	r3, #1
 80117a6:	d101      	bne.n	80117ac <HAL_RNG_GenerateRandomNumber+0x58>
      {
        return status;
 80117a8:	7bfb      	ldrb	r3, [r7, #15]
 80117aa:	e04e      	b.n	801184a <HAL_RNG_GenerateRandomNumber+0xf6>
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 80117ac:	f7fc fa9c 	bl	800dce8 <HAL_GetTick>
 80117b0:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80117b2:	e018      	b.n	80117e6 <HAL_RNG_GenerateRandomNumber+0x92>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80117b4:	f7fc fa98 	bl	800dce8 <HAL_GetTick>
 80117b8:	4602      	mov	r2, r0
 80117ba:	68bb      	ldr	r3, [r7, #8]
 80117bc:	1ad3      	subs	r3, r2, r3
 80117be:	2b02      	cmp	r3, #2
 80117c0:	d911      	bls.n	80117e6 <HAL_RNG_GenerateRandomNumber+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	685b      	ldr	r3, [r3, #4]
 80117c8:	f003 0301 	and.w	r3, r3, #1
 80117cc:	2b01      	cmp	r3, #1
 80117ce:	d00a      	beq.n	80117e6 <HAL_RNG_GenerateRandomNumber+0x92>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	2201      	movs	r2, #1
 80117d4:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	2202      	movs	r2, #2
 80117da:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	2200      	movs	r2, #0
 80117e0:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 80117e2:	2301      	movs	r3, #1
 80117e4:	e031      	b.n	801184a <HAL_RNG_GenerateRandomNumber+0xf6>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	685b      	ldr	r3, [r3, #4]
 80117ec:	f003 0301 	and.w	r3, r3, #1
 80117f0:	2b01      	cmp	r3, #1
 80117f2:	d1df      	bne.n	80117b4 <HAL_RNG_GenerateRandomNumber+0x60>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	689a      	ldr	r2, [r3, #8]
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	611a      	str	r2, [r3, #16]
#if defined(RNG_CR_CONDRST)
    /* In case of seed error, the value available in the RNG_DR register must not
       be used as it may not have enough entropy */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	685b      	ldr	r3, [r3, #4]
 8011804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011808:	2b40      	cmp	r3, #64	; 0x40
 801180a:	d10d      	bne.n	8011828 <HAL_RNG_GenerateRandomNumber+0xd4>
    {
      /* Update the error code and status */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	2208      	movs	r2, #8
 8011810:	60da      	str	r2, [r3, #12]
      status = HAL_ERROR;
 8011812:	2301      	movs	r3, #1
 8011814:	73fb      	strb	r3, [r7, #15]
      /* Clear bit DRDY */
      CLEAR_BIT(hrng->Instance->SR, RNG_FLAG_DRDY);
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	685a      	ldr	r2, [r3, #4]
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	f022 0201 	bic.w	r2, r2, #1
 8011824:	605a      	str	r2, [r3, #4]
 8011826:	e003      	b.n	8011830 <HAL_RNG_GenerateRandomNumber+0xdc>
    }
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	691a      	ldr	r2, [r3, #16]
 801182c:	683b      	ldr	r3, [r7, #0]
 801182e:	601a      	str	r2, [r3, #0]
    }
#else
    *random32bit = hrng->RandomNumber;

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	2201      	movs	r2, #1
 8011834:	725a      	strb	r2, [r3, #9]
 8011836:	e004      	b.n	8011842 <HAL_RNG_GenerateRandomNumber+0xee>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	2204      	movs	r2, #4
 801183c:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 801183e:	2301      	movs	r3, #1
 8011840:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	2200      	movs	r2, #0
 8011846:	721a      	strb	r2, [r3, #8]

  return status;
 8011848:	7bfb      	ldrb	r3, [r7, #15]
}
 801184a:	4618      	mov	r0, r3
 801184c:	3710      	adds	r7, #16
 801184e:	46bd      	mov	sp, r7
 8011850:	bd80      	pop	{r7, pc}

08011852 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8011852:	b480      	push	{r7}
 8011854:	b083      	sub	sp, #12
 8011856:	af00      	add	r7, sp, #0
 8011858:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 801185a:	bf00      	nop
 801185c:	370c      	adds	r7, #12
 801185e:	46bd      	mov	sp, r7
 8011860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011864:	4770      	bx	lr

08011866 <RNG_RecoverSeedError>:
  * @brief  RNG sequence to recover from a seed error
  * @param  hrng pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef RNG_RecoverSeedError(RNG_HandleTypeDef *hrng)
{
 8011866:	b580      	push	{r7, lr}
 8011868:	b084      	sub	sp, #16
 801186a:	af00      	add	r7, sp, #0
 801186c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801186e:	2300      	movs	r3, #0
 8011870:	60fb      	str	r3, [r7, #12]

  /*Check if seed error current status (SECS)is set */
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	685b      	ldr	r3, [r3, #4]
 8011878:	f003 0304 	and.w	r3, r3, #4
 801187c:	2b04      	cmp	r3, #4
 801187e:	d008      	beq.n	8011892 <RNG_RecoverSeedError+0x2c>
  {
    /* RNG performed the reset automatically (auto-reset) */
    /* Clear bit SEIS */
    CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	685a      	ldr	r2, [r3, #4]
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801188e:	605a      	str	r2, [r3, #4]
 8011890:	e05f      	b.n	8011952 <RNG_RecoverSeedError+0xec>
  }
  else  /* Sequence to fully recover from a seed error*/
  {
    /* Writing bit CONDRST=1*/
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	681a      	ldr	r2, [r3, #0]
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80118a0:	601a      	str	r2, [r3, #0]
    /* Writing bit CONDRST=0*/
    CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	681a      	ldr	r2, [r3, #0]
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80118b0:	601a      	str	r2, [r3, #0]

    /* Wait for conditioning reset process to be completed */
    count = RNG_TIMEOUT_VALUE;
 80118b2:	2302      	movs	r3, #2
 80118b4:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	3b01      	subs	r3, #1
 80118ba:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d110      	bne.n	80118e4 <RNG_RecoverSeedError+0x7e>
      {
        hrng->State = HAL_RNG_STATE_READY;
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	2201      	movs	r2, #1
 80118c6:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	68db      	ldr	r3, [r3, #12]
 80118cc:	f043 0202 	orr.w	r2, r3, #2
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	2200      	movs	r2, #0
 80118d8:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 80118da:	6878      	ldr	r0, [r7, #4]
 80118dc:	f7ff ffb9 	bl	8011852 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 80118e0:	2301      	movs	r3, #1
 80118e2:	e03d      	b.n	8011960 <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST));
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80118ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80118f2:	d0e0      	beq.n	80118b6 <RNG_RecoverSeedError+0x50>

    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	685b      	ldr	r3, [r3, #4]
 80118fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80118fe:	2b40      	cmp	r3, #64	; 0x40
 8011900:	d107      	bne.n	8011912 <RNG_RecoverSeedError+0xac>
    {
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	685a      	ldr	r2, [r3, #4]
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011910:	605a      	str	r2, [r3, #4]
    }

    /* Wait for SECS to be cleared */
    count = RNG_TIMEOUT_VALUE;
 8011912:	2302      	movs	r3, #2
 8011914:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	3b01      	subs	r3, #1
 801191a:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d110      	bne.n	8011944 <RNG_RecoverSeedError+0xde>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	2201      	movs	r2, #1
 8011926:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	68db      	ldr	r3, [r3, #12]
 801192c:	f043 0202 	orr.w	r2, r3, #2
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	2200      	movs	r2, #0
 8011938:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 801193a:	6878      	ldr	r0, [r7, #4]
 801193c:	f7ff ff89 	bl	8011852 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 8011940:	2301      	movs	r3, #1
 8011942:	e00d      	b.n	8011960 <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	685b      	ldr	r3, [r3, #4]
 801194a:	f003 0304 	and.w	r3, r3, #4
 801194e:	2b04      	cmp	r3, #4
 8011950:	d0e1      	beq.n	8011916 <RNG_RecoverSeedError+0xb0>
  }
  /* Update the error code */
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	68db      	ldr	r3, [r3, #12]
 8011956:	f023 0208 	bic.w	r2, r3, #8
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 801195e:	2300      	movs	r3, #0
}
 8011960:	4618      	mov	r0, r3
 8011962:	3710      	adds	r7, #16
 8011964:	46bd      	mov	sp, r7
 8011966:	bd80      	pop	{r7, pc}

08011968 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011968:	b580      	push	{r7, lr}
 801196a:	b082      	sub	sp, #8
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d101      	bne.n	801197a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011976:	2301      	movs	r3, #1
 8011978:	e042      	b.n	8011a00 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011980:	2b00      	cmp	r3, #0
 8011982:	d106      	bne.n	8011992 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	2200      	movs	r2, #0
 8011988:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801198c:	6878      	ldr	r0, [r7, #4]
 801198e:	f7fb ff2d 	bl	800d7ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	2224      	movs	r2, #36	; 0x24
 8011996:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	681a      	ldr	r2, [r3, #0]
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	f022 0201 	bic.w	r2, r2, #1
 80119a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80119aa:	6878      	ldr	r0, [r7, #4]
 80119ac:	f000 f8ba 	bl	8011b24 <UART_SetConfig>
 80119b0:	4603      	mov	r3, r0
 80119b2:	2b01      	cmp	r3, #1
 80119b4:	d101      	bne.n	80119ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80119b6:	2301      	movs	r3, #1
 80119b8:	e022      	b.n	8011a00 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d002      	beq.n	80119c8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80119c2:	6878      	ldr	r0, [r7, #4]
 80119c4:	f000 ff1a 	bl	80127fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	685a      	ldr	r2, [r3, #4]
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80119d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	689a      	ldr	r2, [r3, #8]
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80119e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	681a      	ldr	r2, [r3, #0]
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	f042 0201 	orr.w	r2, r2, #1
 80119f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80119f8:	6878      	ldr	r0, [r7, #4]
 80119fa:	f000 ffa1 	bl	8012940 <UART_CheckIdleState>
 80119fe:	4603      	mov	r3, r0
}
 8011a00:	4618      	mov	r0, r3
 8011a02:	3708      	adds	r7, #8
 8011a04:	46bd      	mov	sp, r7
 8011a06:	bd80      	pop	{r7, pc}

08011a08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	b08a      	sub	sp, #40	; 0x28
 8011a0c:	af02      	add	r7, sp, #8
 8011a0e:	60f8      	str	r0, [r7, #12]
 8011a10:	60b9      	str	r1, [r7, #8]
 8011a12:	603b      	str	r3, [r7, #0]
 8011a14:	4613      	mov	r3, r2
 8011a16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011a1e:	2b20      	cmp	r3, #32
 8011a20:	d17b      	bne.n	8011b1a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8011a22:	68bb      	ldr	r3, [r7, #8]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d002      	beq.n	8011a2e <HAL_UART_Transmit+0x26>
 8011a28:	88fb      	ldrh	r3, [r7, #6]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d101      	bne.n	8011a32 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8011a2e:	2301      	movs	r3, #1
 8011a30:	e074      	b.n	8011b1c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	2200      	movs	r2, #0
 8011a36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	2221      	movs	r2, #33	; 0x21
 8011a3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011a42:	f7fc f951 	bl	800dce8 <HAL_GetTick>
 8011a46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	88fa      	ldrh	r2, [r7, #6]
 8011a4c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	88fa      	ldrh	r2, [r7, #6]
 8011a54:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	689b      	ldr	r3, [r3, #8]
 8011a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011a60:	d108      	bne.n	8011a74 <HAL_UART_Transmit+0x6c>
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	691b      	ldr	r3, [r3, #16]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d104      	bne.n	8011a74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8011a6e:	68bb      	ldr	r3, [r7, #8]
 8011a70:	61bb      	str	r3, [r7, #24]
 8011a72:	e003      	b.n	8011a7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8011a74:	68bb      	ldr	r3, [r7, #8]
 8011a76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011a78:	2300      	movs	r3, #0
 8011a7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8011a7c:	e030      	b.n	8011ae0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011a7e:	683b      	ldr	r3, [r7, #0]
 8011a80:	9300      	str	r3, [sp, #0]
 8011a82:	697b      	ldr	r3, [r7, #20]
 8011a84:	2200      	movs	r2, #0
 8011a86:	2180      	movs	r1, #128	; 0x80
 8011a88:	68f8      	ldr	r0, [r7, #12]
 8011a8a:	f001 f803 	bl	8012a94 <UART_WaitOnFlagUntilTimeout>
 8011a8e:	4603      	mov	r3, r0
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d005      	beq.n	8011aa0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	2220      	movs	r2, #32
 8011a98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8011a9c:	2303      	movs	r3, #3
 8011a9e:	e03d      	b.n	8011b1c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8011aa0:	69fb      	ldr	r3, [r7, #28]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d10b      	bne.n	8011abe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011aa6:	69bb      	ldr	r3, [r7, #24]
 8011aa8:	881b      	ldrh	r3, [r3, #0]
 8011aaa:	461a      	mov	r2, r3
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011ab4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8011ab6:	69bb      	ldr	r3, [r7, #24]
 8011ab8:	3302      	adds	r3, #2
 8011aba:	61bb      	str	r3, [r7, #24]
 8011abc:	e007      	b.n	8011ace <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8011abe:	69fb      	ldr	r3, [r7, #28]
 8011ac0:	781a      	ldrb	r2, [r3, #0]
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8011ac8:	69fb      	ldr	r3, [r7, #28]
 8011aca:	3301      	adds	r3, #1
 8011acc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8011ad4:	b29b      	uxth	r3, r3
 8011ad6:	3b01      	subs	r3, #1
 8011ad8:	b29a      	uxth	r2, r3
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8011ae6:	b29b      	uxth	r3, r3
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d1c8      	bne.n	8011a7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011aec:	683b      	ldr	r3, [r7, #0]
 8011aee:	9300      	str	r3, [sp, #0]
 8011af0:	697b      	ldr	r3, [r7, #20]
 8011af2:	2200      	movs	r2, #0
 8011af4:	2140      	movs	r1, #64	; 0x40
 8011af6:	68f8      	ldr	r0, [r7, #12]
 8011af8:	f000 ffcc 	bl	8012a94 <UART_WaitOnFlagUntilTimeout>
 8011afc:	4603      	mov	r3, r0
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d005      	beq.n	8011b0e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	2220      	movs	r2, #32
 8011b06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8011b0a:	2303      	movs	r3, #3
 8011b0c:	e006      	b.n	8011b1c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	2220      	movs	r2, #32
 8011b12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8011b16:	2300      	movs	r3, #0
 8011b18:	e000      	b.n	8011b1c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8011b1a:	2302      	movs	r3, #2
  }
}
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	3720      	adds	r7, #32
 8011b20:	46bd      	mov	sp, r7
 8011b22:	bd80      	pop	{r7, pc}

08011b24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011b28:	b092      	sub	sp, #72	; 0x48
 8011b2a:	af00      	add	r7, sp, #0
 8011b2c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011b2e:	2300      	movs	r3, #0
 8011b30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011b34:	697b      	ldr	r3, [r7, #20]
 8011b36:	689a      	ldr	r2, [r3, #8]
 8011b38:	697b      	ldr	r3, [r7, #20]
 8011b3a:	691b      	ldr	r3, [r3, #16]
 8011b3c:	431a      	orrs	r2, r3
 8011b3e:	697b      	ldr	r3, [r7, #20]
 8011b40:	695b      	ldr	r3, [r3, #20]
 8011b42:	431a      	orrs	r2, r3
 8011b44:	697b      	ldr	r3, [r7, #20]
 8011b46:	69db      	ldr	r3, [r3, #28]
 8011b48:	4313      	orrs	r3, r2
 8011b4a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011b4c:	697b      	ldr	r3, [r7, #20]
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	681a      	ldr	r2, [r3, #0]
 8011b52:	4bbe      	ldr	r3, [pc, #760]	; (8011e4c <UART_SetConfig+0x328>)
 8011b54:	4013      	ands	r3, r2
 8011b56:	697a      	ldr	r2, [r7, #20]
 8011b58:	6812      	ldr	r2, [r2, #0]
 8011b5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011b5c:	430b      	orrs	r3, r1
 8011b5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011b60:	697b      	ldr	r3, [r7, #20]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	685b      	ldr	r3, [r3, #4]
 8011b66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011b6a:	697b      	ldr	r3, [r7, #20]
 8011b6c:	68da      	ldr	r2, [r3, #12]
 8011b6e:	697b      	ldr	r3, [r7, #20]
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	430a      	orrs	r2, r1
 8011b74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011b76:	697b      	ldr	r3, [r7, #20]
 8011b78:	699b      	ldr	r3, [r3, #24]
 8011b7a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011b7c:	697b      	ldr	r3, [r7, #20]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	4ab3      	ldr	r2, [pc, #716]	; (8011e50 <UART_SetConfig+0x32c>)
 8011b82:	4293      	cmp	r3, r2
 8011b84:	d004      	beq.n	8011b90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011b86:	697b      	ldr	r3, [r7, #20]
 8011b88:	6a1b      	ldr	r3, [r3, #32]
 8011b8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011b8c:	4313      	orrs	r3, r2
 8011b8e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011b90:	697b      	ldr	r3, [r7, #20]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	689a      	ldr	r2, [r3, #8]
 8011b96:	4baf      	ldr	r3, [pc, #700]	; (8011e54 <UART_SetConfig+0x330>)
 8011b98:	4013      	ands	r3, r2
 8011b9a:	697a      	ldr	r2, [r7, #20]
 8011b9c:	6812      	ldr	r2, [r2, #0]
 8011b9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011ba0:	430b      	orrs	r3, r1
 8011ba2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011ba4:	697b      	ldr	r3, [r7, #20]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011baa:	f023 010f 	bic.w	r1, r3, #15
 8011bae:	697b      	ldr	r3, [r7, #20]
 8011bb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011bb2:	697b      	ldr	r3, [r7, #20]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	430a      	orrs	r2, r1
 8011bb8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011bba:	697b      	ldr	r3, [r7, #20]
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	4aa6      	ldr	r2, [pc, #664]	; (8011e58 <UART_SetConfig+0x334>)
 8011bc0:	4293      	cmp	r3, r2
 8011bc2:	d177      	bne.n	8011cb4 <UART_SetConfig+0x190>
 8011bc4:	4ba5      	ldr	r3, [pc, #660]	; (8011e5c <UART_SetConfig+0x338>)
 8011bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011bc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011bcc:	2b28      	cmp	r3, #40	; 0x28
 8011bce:	d86d      	bhi.n	8011cac <UART_SetConfig+0x188>
 8011bd0:	a201      	add	r2, pc, #4	; (adr r2, 8011bd8 <UART_SetConfig+0xb4>)
 8011bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bd6:	bf00      	nop
 8011bd8:	08011c7d 	.word	0x08011c7d
 8011bdc:	08011cad 	.word	0x08011cad
 8011be0:	08011cad 	.word	0x08011cad
 8011be4:	08011cad 	.word	0x08011cad
 8011be8:	08011cad 	.word	0x08011cad
 8011bec:	08011cad 	.word	0x08011cad
 8011bf0:	08011cad 	.word	0x08011cad
 8011bf4:	08011cad 	.word	0x08011cad
 8011bf8:	08011c85 	.word	0x08011c85
 8011bfc:	08011cad 	.word	0x08011cad
 8011c00:	08011cad 	.word	0x08011cad
 8011c04:	08011cad 	.word	0x08011cad
 8011c08:	08011cad 	.word	0x08011cad
 8011c0c:	08011cad 	.word	0x08011cad
 8011c10:	08011cad 	.word	0x08011cad
 8011c14:	08011cad 	.word	0x08011cad
 8011c18:	08011c8d 	.word	0x08011c8d
 8011c1c:	08011cad 	.word	0x08011cad
 8011c20:	08011cad 	.word	0x08011cad
 8011c24:	08011cad 	.word	0x08011cad
 8011c28:	08011cad 	.word	0x08011cad
 8011c2c:	08011cad 	.word	0x08011cad
 8011c30:	08011cad 	.word	0x08011cad
 8011c34:	08011cad 	.word	0x08011cad
 8011c38:	08011c95 	.word	0x08011c95
 8011c3c:	08011cad 	.word	0x08011cad
 8011c40:	08011cad 	.word	0x08011cad
 8011c44:	08011cad 	.word	0x08011cad
 8011c48:	08011cad 	.word	0x08011cad
 8011c4c:	08011cad 	.word	0x08011cad
 8011c50:	08011cad 	.word	0x08011cad
 8011c54:	08011cad 	.word	0x08011cad
 8011c58:	08011c9d 	.word	0x08011c9d
 8011c5c:	08011cad 	.word	0x08011cad
 8011c60:	08011cad 	.word	0x08011cad
 8011c64:	08011cad 	.word	0x08011cad
 8011c68:	08011cad 	.word	0x08011cad
 8011c6c:	08011cad 	.word	0x08011cad
 8011c70:	08011cad 	.word	0x08011cad
 8011c74:	08011cad 	.word	0x08011cad
 8011c78:	08011ca5 	.word	0x08011ca5
 8011c7c:	2301      	movs	r3, #1
 8011c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c82:	e326      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011c84:	2304      	movs	r3, #4
 8011c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c8a:	e322      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011c8c:	2308      	movs	r3, #8
 8011c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c92:	e31e      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011c94:	2310      	movs	r3, #16
 8011c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c9a:	e31a      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011c9c:	2320      	movs	r3, #32
 8011c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ca2:	e316      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011ca4:	2340      	movs	r3, #64	; 0x40
 8011ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011caa:	e312      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011cac:	2380      	movs	r3, #128	; 0x80
 8011cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cb2:	e30e      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011cb4:	697b      	ldr	r3, [r7, #20]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	4a69      	ldr	r2, [pc, #420]	; (8011e60 <UART_SetConfig+0x33c>)
 8011cba:	4293      	cmp	r3, r2
 8011cbc:	d130      	bne.n	8011d20 <UART_SetConfig+0x1fc>
 8011cbe:	4b67      	ldr	r3, [pc, #412]	; (8011e5c <UART_SetConfig+0x338>)
 8011cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011cc2:	f003 0307 	and.w	r3, r3, #7
 8011cc6:	2b05      	cmp	r3, #5
 8011cc8:	d826      	bhi.n	8011d18 <UART_SetConfig+0x1f4>
 8011cca:	a201      	add	r2, pc, #4	; (adr r2, 8011cd0 <UART_SetConfig+0x1ac>)
 8011ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cd0:	08011ce9 	.word	0x08011ce9
 8011cd4:	08011cf1 	.word	0x08011cf1
 8011cd8:	08011cf9 	.word	0x08011cf9
 8011cdc:	08011d01 	.word	0x08011d01
 8011ce0:	08011d09 	.word	0x08011d09
 8011ce4:	08011d11 	.word	0x08011d11
 8011ce8:	2300      	movs	r3, #0
 8011cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cee:	e2f0      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011cf0:	2304      	movs	r3, #4
 8011cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cf6:	e2ec      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011cf8:	2308      	movs	r3, #8
 8011cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cfe:	e2e8      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011d00:	2310      	movs	r3, #16
 8011d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d06:	e2e4      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011d08:	2320      	movs	r3, #32
 8011d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d0e:	e2e0      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011d10:	2340      	movs	r3, #64	; 0x40
 8011d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d16:	e2dc      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011d18:	2380      	movs	r3, #128	; 0x80
 8011d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d1e:	e2d8      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011d20:	697b      	ldr	r3, [r7, #20]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	4a4f      	ldr	r2, [pc, #316]	; (8011e64 <UART_SetConfig+0x340>)
 8011d26:	4293      	cmp	r3, r2
 8011d28:	d130      	bne.n	8011d8c <UART_SetConfig+0x268>
 8011d2a:	4b4c      	ldr	r3, [pc, #304]	; (8011e5c <UART_SetConfig+0x338>)
 8011d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d2e:	f003 0307 	and.w	r3, r3, #7
 8011d32:	2b05      	cmp	r3, #5
 8011d34:	d826      	bhi.n	8011d84 <UART_SetConfig+0x260>
 8011d36:	a201      	add	r2, pc, #4	; (adr r2, 8011d3c <UART_SetConfig+0x218>)
 8011d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d3c:	08011d55 	.word	0x08011d55
 8011d40:	08011d5d 	.word	0x08011d5d
 8011d44:	08011d65 	.word	0x08011d65
 8011d48:	08011d6d 	.word	0x08011d6d
 8011d4c:	08011d75 	.word	0x08011d75
 8011d50:	08011d7d 	.word	0x08011d7d
 8011d54:	2300      	movs	r3, #0
 8011d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d5a:	e2ba      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011d5c:	2304      	movs	r3, #4
 8011d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d62:	e2b6      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011d64:	2308      	movs	r3, #8
 8011d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d6a:	e2b2      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011d6c:	2310      	movs	r3, #16
 8011d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d72:	e2ae      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011d74:	2320      	movs	r3, #32
 8011d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d7a:	e2aa      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011d7c:	2340      	movs	r3, #64	; 0x40
 8011d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d82:	e2a6      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011d84:	2380      	movs	r3, #128	; 0x80
 8011d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d8a:	e2a2      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011d8c:	697b      	ldr	r3, [r7, #20]
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	4a35      	ldr	r2, [pc, #212]	; (8011e68 <UART_SetConfig+0x344>)
 8011d92:	4293      	cmp	r3, r2
 8011d94:	d130      	bne.n	8011df8 <UART_SetConfig+0x2d4>
 8011d96:	4b31      	ldr	r3, [pc, #196]	; (8011e5c <UART_SetConfig+0x338>)
 8011d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d9a:	f003 0307 	and.w	r3, r3, #7
 8011d9e:	2b05      	cmp	r3, #5
 8011da0:	d826      	bhi.n	8011df0 <UART_SetConfig+0x2cc>
 8011da2:	a201      	add	r2, pc, #4	; (adr r2, 8011da8 <UART_SetConfig+0x284>)
 8011da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011da8:	08011dc1 	.word	0x08011dc1
 8011dac:	08011dc9 	.word	0x08011dc9
 8011db0:	08011dd1 	.word	0x08011dd1
 8011db4:	08011dd9 	.word	0x08011dd9
 8011db8:	08011de1 	.word	0x08011de1
 8011dbc:	08011de9 	.word	0x08011de9
 8011dc0:	2300      	movs	r3, #0
 8011dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011dc6:	e284      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011dc8:	2304      	movs	r3, #4
 8011dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011dce:	e280      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011dd0:	2308      	movs	r3, #8
 8011dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011dd6:	e27c      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011dd8:	2310      	movs	r3, #16
 8011dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011dde:	e278      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011de0:	2320      	movs	r3, #32
 8011de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011de6:	e274      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011de8:	2340      	movs	r3, #64	; 0x40
 8011dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011dee:	e270      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011df0:	2380      	movs	r3, #128	; 0x80
 8011df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011df6:	e26c      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011df8:	697b      	ldr	r3, [r7, #20]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	4a1b      	ldr	r2, [pc, #108]	; (8011e6c <UART_SetConfig+0x348>)
 8011dfe:	4293      	cmp	r3, r2
 8011e00:	d142      	bne.n	8011e88 <UART_SetConfig+0x364>
 8011e02:	4b16      	ldr	r3, [pc, #88]	; (8011e5c <UART_SetConfig+0x338>)
 8011e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011e06:	f003 0307 	and.w	r3, r3, #7
 8011e0a:	2b05      	cmp	r3, #5
 8011e0c:	d838      	bhi.n	8011e80 <UART_SetConfig+0x35c>
 8011e0e:	a201      	add	r2, pc, #4	; (adr r2, 8011e14 <UART_SetConfig+0x2f0>)
 8011e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e14:	08011e2d 	.word	0x08011e2d
 8011e18:	08011e35 	.word	0x08011e35
 8011e1c:	08011e3d 	.word	0x08011e3d
 8011e20:	08011e45 	.word	0x08011e45
 8011e24:	08011e71 	.word	0x08011e71
 8011e28:	08011e79 	.word	0x08011e79
 8011e2c:	2300      	movs	r3, #0
 8011e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e32:	e24e      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011e34:	2304      	movs	r3, #4
 8011e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e3a:	e24a      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011e3c:	2308      	movs	r3, #8
 8011e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e42:	e246      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011e44:	2310      	movs	r3, #16
 8011e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e4a:	e242      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011e4c:	cfff69f3 	.word	0xcfff69f3
 8011e50:	58000c00 	.word	0x58000c00
 8011e54:	11fff4ff 	.word	0x11fff4ff
 8011e58:	40011000 	.word	0x40011000
 8011e5c:	58024400 	.word	0x58024400
 8011e60:	40004400 	.word	0x40004400
 8011e64:	40004800 	.word	0x40004800
 8011e68:	40004c00 	.word	0x40004c00
 8011e6c:	40005000 	.word	0x40005000
 8011e70:	2320      	movs	r3, #32
 8011e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e76:	e22c      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011e78:	2340      	movs	r3, #64	; 0x40
 8011e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e7e:	e228      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011e80:	2380      	movs	r3, #128	; 0x80
 8011e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e86:	e224      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011e88:	697b      	ldr	r3, [r7, #20]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	4ab1      	ldr	r2, [pc, #708]	; (8012154 <UART_SetConfig+0x630>)
 8011e8e:	4293      	cmp	r3, r2
 8011e90:	d176      	bne.n	8011f80 <UART_SetConfig+0x45c>
 8011e92:	4bb1      	ldr	r3, [pc, #708]	; (8012158 <UART_SetConfig+0x634>)
 8011e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011e96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011e9a:	2b28      	cmp	r3, #40	; 0x28
 8011e9c:	d86c      	bhi.n	8011f78 <UART_SetConfig+0x454>
 8011e9e:	a201      	add	r2, pc, #4	; (adr r2, 8011ea4 <UART_SetConfig+0x380>)
 8011ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ea4:	08011f49 	.word	0x08011f49
 8011ea8:	08011f79 	.word	0x08011f79
 8011eac:	08011f79 	.word	0x08011f79
 8011eb0:	08011f79 	.word	0x08011f79
 8011eb4:	08011f79 	.word	0x08011f79
 8011eb8:	08011f79 	.word	0x08011f79
 8011ebc:	08011f79 	.word	0x08011f79
 8011ec0:	08011f79 	.word	0x08011f79
 8011ec4:	08011f51 	.word	0x08011f51
 8011ec8:	08011f79 	.word	0x08011f79
 8011ecc:	08011f79 	.word	0x08011f79
 8011ed0:	08011f79 	.word	0x08011f79
 8011ed4:	08011f79 	.word	0x08011f79
 8011ed8:	08011f79 	.word	0x08011f79
 8011edc:	08011f79 	.word	0x08011f79
 8011ee0:	08011f79 	.word	0x08011f79
 8011ee4:	08011f59 	.word	0x08011f59
 8011ee8:	08011f79 	.word	0x08011f79
 8011eec:	08011f79 	.word	0x08011f79
 8011ef0:	08011f79 	.word	0x08011f79
 8011ef4:	08011f79 	.word	0x08011f79
 8011ef8:	08011f79 	.word	0x08011f79
 8011efc:	08011f79 	.word	0x08011f79
 8011f00:	08011f79 	.word	0x08011f79
 8011f04:	08011f61 	.word	0x08011f61
 8011f08:	08011f79 	.word	0x08011f79
 8011f0c:	08011f79 	.word	0x08011f79
 8011f10:	08011f79 	.word	0x08011f79
 8011f14:	08011f79 	.word	0x08011f79
 8011f18:	08011f79 	.word	0x08011f79
 8011f1c:	08011f79 	.word	0x08011f79
 8011f20:	08011f79 	.word	0x08011f79
 8011f24:	08011f69 	.word	0x08011f69
 8011f28:	08011f79 	.word	0x08011f79
 8011f2c:	08011f79 	.word	0x08011f79
 8011f30:	08011f79 	.word	0x08011f79
 8011f34:	08011f79 	.word	0x08011f79
 8011f38:	08011f79 	.word	0x08011f79
 8011f3c:	08011f79 	.word	0x08011f79
 8011f40:	08011f79 	.word	0x08011f79
 8011f44:	08011f71 	.word	0x08011f71
 8011f48:	2301      	movs	r3, #1
 8011f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f4e:	e1c0      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011f50:	2304      	movs	r3, #4
 8011f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f56:	e1bc      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011f58:	2308      	movs	r3, #8
 8011f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f5e:	e1b8      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011f60:	2310      	movs	r3, #16
 8011f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f66:	e1b4      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011f68:	2320      	movs	r3, #32
 8011f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f6e:	e1b0      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011f70:	2340      	movs	r3, #64	; 0x40
 8011f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f76:	e1ac      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011f78:	2380      	movs	r3, #128	; 0x80
 8011f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f7e:	e1a8      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011f80:	697b      	ldr	r3, [r7, #20]
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	4a75      	ldr	r2, [pc, #468]	; (801215c <UART_SetConfig+0x638>)
 8011f86:	4293      	cmp	r3, r2
 8011f88:	d130      	bne.n	8011fec <UART_SetConfig+0x4c8>
 8011f8a:	4b73      	ldr	r3, [pc, #460]	; (8012158 <UART_SetConfig+0x634>)
 8011f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011f8e:	f003 0307 	and.w	r3, r3, #7
 8011f92:	2b05      	cmp	r3, #5
 8011f94:	d826      	bhi.n	8011fe4 <UART_SetConfig+0x4c0>
 8011f96:	a201      	add	r2, pc, #4	; (adr r2, 8011f9c <UART_SetConfig+0x478>)
 8011f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f9c:	08011fb5 	.word	0x08011fb5
 8011fa0:	08011fbd 	.word	0x08011fbd
 8011fa4:	08011fc5 	.word	0x08011fc5
 8011fa8:	08011fcd 	.word	0x08011fcd
 8011fac:	08011fd5 	.word	0x08011fd5
 8011fb0:	08011fdd 	.word	0x08011fdd
 8011fb4:	2300      	movs	r3, #0
 8011fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011fba:	e18a      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011fbc:	2304      	movs	r3, #4
 8011fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011fc2:	e186      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011fc4:	2308      	movs	r3, #8
 8011fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011fca:	e182      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011fcc:	2310      	movs	r3, #16
 8011fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011fd2:	e17e      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011fd4:	2320      	movs	r3, #32
 8011fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011fda:	e17a      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011fdc:	2340      	movs	r3, #64	; 0x40
 8011fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011fe2:	e176      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011fe4:	2380      	movs	r3, #128	; 0x80
 8011fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011fea:	e172      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8011fec:	697b      	ldr	r3, [r7, #20]
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	4a5b      	ldr	r2, [pc, #364]	; (8012160 <UART_SetConfig+0x63c>)
 8011ff2:	4293      	cmp	r3, r2
 8011ff4:	d130      	bne.n	8012058 <UART_SetConfig+0x534>
 8011ff6:	4b58      	ldr	r3, [pc, #352]	; (8012158 <UART_SetConfig+0x634>)
 8011ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ffa:	f003 0307 	and.w	r3, r3, #7
 8011ffe:	2b05      	cmp	r3, #5
 8012000:	d826      	bhi.n	8012050 <UART_SetConfig+0x52c>
 8012002:	a201      	add	r2, pc, #4	; (adr r2, 8012008 <UART_SetConfig+0x4e4>)
 8012004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012008:	08012021 	.word	0x08012021
 801200c:	08012029 	.word	0x08012029
 8012010:	08012031 	.word	0x08012031
 8012014:	08012039 	.word	0x08012039
 8012018:	08012041 	.word	0x08012041
 801201c:	08012049 	.word	0x08012049
 8012020:	2300      	movs	r3, #0
 8012022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012026:	e154      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8012028:	2304      	movs	r3, #4
 801202a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801202e:	e150      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8012030:	2308      	movs	r3, #8
 8012032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012036:	e14c      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8012038:	2310      	movs	r3, #16
 801203a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801203e:	e148      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8012040:	2320      	movs	r3, #32
 8012042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012046:	e144      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8012048:	2340      	movs	r3, #64	; 0x40
 801204a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801204e:	e140      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8012050:	2380      	movs	r3, #128	; 0x80
 8012052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012056:	e13c      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8012058:	697b      	ldr	r3, [r7, #20]
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	4a41      	ldr	r2, [pc, #260]	; (8012164 <UART_SetConfig+0x640>)
 801205e:	4293      	cmp	r3, r2
 8012060:	f040 8082 	bne.w	8012168 <UART_SetConfig+0x644>
 8012064:	4b3c      	ldr	r3, [pc, #240]	; (8012158 <UART_SetConfig+0x634>)
 8012066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012068:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801206c:	2b28      	cmp	r3, #40	; 0x28
 801206e:	d86d      	bhi.n	801214c <UART_SetConfig+0x628>
 8012070:	a201      	add	r2, pc, #4	; (adr r2, 8012078 <UART_SetConfig+0x554>)
 8012072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012076:	bf00      	nop
 8012078:	0801211d 	.word	0x0801211d
 801207c:	0801214d 	.word	0x0801214d
 8012080:	0801214d 	.word	0x0801214d
 8012084:	0801214d 	.word	0x0801214d
 8012088:	0801214d 	.word	0x0801214d
 801208c:	0801214d 	.word	0x0801214d
 8012090:	0801214d 	.word	0x0801214d
 8012094:	0801214d 	.word	0x0801214d
 8012098:	08012125 	.word	0x08012125
 801209c:	0801214d 	.word	0x0801214d
 80120a0:	0801214d 	.word	0x0801214d
 80120a4:	0801214d 	.word	0x0801214d
 80120a8:	0801214d 	.word	0x0801214d
 80120ac:	0801214d 	.word	0x0801214d
 80120b0:	0801214d 	.word	0x0801214d
 80120b4:	0801214d 	.word	0x0801214d
 80120b8:	0801212d 	.word	0x0801212d
 80120bc:	0801214d 	.word	0x0801214d
 80120c0:	0801214d 	.word	0x0801214d
 80120c4:	0801214d 	.word	0x0801214d
 80120c8:	0801214d 	.word	0x0801214d
 80120cc:	0801214d 	.word	0x0801214d
 80120d0:	0801214d 	.word	0x0801214d
 80120d4:	0801214d 	.word	0x0801214d
 80120d8:	08012135 	.word	0x08012135
 80120dc:	0801214d 	.word	0x0801214d
 80120e0:	0801214d 	.word	0x0801214d
 80120e4:	0801214d 	.word	0x0801214d
 80120e8:	0801214d 	.word	0x0801214d
 80120ec:	0801214d 	.word	0x0801214d
 80120f0:	0801214d 	.word	0x0801214d
 80120f4:	0801214d 	.word	0x0801214d
 80120f8:	0801213d 	.word	0x0801213d
 80120fc:	0801214d 	.word	0x0801214d
 8012100:	0801214d 	.word	0x0801214d
 8012104:	0801214d 	.word	0x0801214d
 8012108:	0801214d 	.word	0x0801214d
 801210c:	0801214d 	.word	0x0801214d
 8012110:	0801214d 	.word	0x0801214d
 8012114:	0801214d 	.word	0x0801214d
 8012118:	08012145 	.word	0x08012145
 801211c:	2301      	movs	r3, #1
 801211e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012122:	e0d6      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8012124:	2304      	movs	r3, #4
 8012126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801212a:	e0d2      	b.n	80122d2 <UART_SetConfig+0x7ae>
 801212c:	2308      	movs	r3, #8
 801212e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012132:	e0ce      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8012134:	2310      	movs	r3, #16
 8012136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801213a:	e0ca      	b.n	80122d2 <UART_SetConfig+0x7ae>
 801213c:	2320      	movs	r3, #32
 801213e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012142:	e0c6      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8012144:	2340      	movs	r3, #64	; 0x40
 8012146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801214a:	e0c2      	b.n	80122d2 <UART_SetConfig+0x7ae>
 801214c:	2380      	movs	r3, #128	; 0x80
 801214e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012152:	e0be      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8012154:	40011400 	.word	0x40011400
 8012158:	58024400 	.word	0x58024400
 801215c:	40007800 	.word	0x40007800
 8012160:	40007c00 	.word	0x40007c00
 8012164:	40011800 	.word	0x40011800
 8012168:	697b      	ldr	r3, [r7, #20]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	4aad      	ldr	r2, [pc, #692]	; (8012424 <UART_SetConfig+0x900>)
 801216e:	4293      	cmp	r3, r2
 8012170:	d176      	bne.n	8012260 <UART_SetConfig+0x73c>
 8012172:	4bad      	ldr	r3, [pc, #692]	; (8012428 <UART_SetConfig+0x904>)
 8012174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012176:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801217a:	2b28      	cmp	r3, #40	; 0x28
 801217c:	d86c      	bhi.n	8012258 <UART_SetConfig+0x734>
 801217e:	a201      	add	r2, pc, #4	; (adr r2, 8012184 <UART_SetConfig+0x660>)
 8012180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012184:	08012229 	.word	0x08012229
 8012188:	08012259 	.word	0x08012259
 801218c:	08012259 	.word	0x08012259
 8012190:	08012259 	.word	0x08012259
 8012194:	08012259 	.word	0x08012259
 8012198:	08012259 	.word	0x08012259
 801219c:	08012259 	.word	0x08012259
 80121a0:	08012259 	.word	0x08012259
 80121a4:	08012231 	.word	0x08012231
 80121a8:	08012259 	.word	0x08012259
 80121ac:	08012259 	.word	0x08012259
 80121b0:	08012259 	.word	0x08012259
 80121b4:	08012259 	.word	0x08012259
 80121b8:	08012259 	.word	0x08012259
 80121bc:	08012259 	.word	0x08012259
 80121c0:	08012259 	.word	0x08012259
 80121c4:	08012239 	.word	0x08012239
 80121c8:	08012259 	.word	0x08012259
 80121cc:	08012259 	.word	0x08012259
 80121d0:	08012259 	.word	0x08012259
 80121d4:	08012259 	.word	0x08012259
 80121d8:	08012259 	.word	0x08012259
 80121dc:	08012259 	.word	0x08012259
 80121e0:	08012259 	.word	0x08012259
 80121e4:	08012241 	.word	0x08012241
 80121e8:	08012259 	.word	0x08012259
 80121ec:	08012259 	.word	0x08012259
 80121f0:	08012259 	.word	0x08012259
 80121f4:	08012259 	.word	0x08012259
 80121f8:	08012259 	.word	0x08012259
 80121fc:	08012259 	.word	0x08012259
 8012200:	08012259 	.word	0x08012259
 8012204:	08012249 	.word	0x08012249
 8012208:	08012259 	.word	0x08012259
 801220c:	08012259 	.word	0x08012259
 8012210:	08012259 	.word	0x08012259
 8012214:	08012259 	.word	0x08012259
 8012218:	08012259 	.word	0x08012259
 801221c:	08012259 	.word	0x08012259
 8012220:	08012259 	.word	0x08012259
 8012224:	08012251 	.word	0x08012251
 8012228:	2301      	movs	r3, #1
 801222a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801222e:	e050      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8012230:	2304      	movs	r3, #4
 8012232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012236:	e04c      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8012238:	2308      	movs	r3, #8
 801223a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801223e:	e048      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8012240:	2310      	movs	r3, #16
 8012242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012246:	e044      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8012248:	2320      	movs	r3, #32
 801224a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801224e:	e040      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8012250:	2340      	movs	r3, #64	; 0x40
 8012252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012256:	e03c      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8012258:	2380      	movs	r3, #128	; 0x80
 801225a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801225e:	e038      	b.n	80122d2 <UART_SetConfig+0x7ae>
 8012260:	697b      	ldr	r3, [r7, #20]
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	4a71      	ldr	r2, [pc, #452]	; (801242c <UART_SetConfig+0x908>)
 8012266:	4293      	cmp	r3, r2
 8012268:	d130      	bne.n	80122cc <UART_SetConfig+0x7a8>
 801226a:	4b6f      	ldr	r3, [pc, #444]	; (8012428 <UART_SetConfig+0x904>)
 801226c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801226e:	f003 0307 	and.w	r3, r3, #7
 8012272:	2b05      	cmp	r3, #5
 8012274:	d826      	bhi.n	80122c4 <UART_SetConfig+0x7a0>
 8012276:	a201      	add	r2, pc, #4	; (adr r2, 801227c <UART_SetConfig+0x758>)
 8012278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801227c:	08012295 	.word	0x08012295
 8012280:	0801229d 	.word	0x0801229d
 8012284:	080122a5 	.word	0x080122a5
 8012288:	080122ad 	.word	0x080122ad
 801228c:	080122b5 	.word	0x080122b5
 8012290:	080122bd 	.word	0x080122bd
 8012294:	2302      	movs	r3, #2
 8012296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801229a:	e01a      	b.n	80122d2 <UART_SetConfig+0x7ae>
 801229c:	2304      	movs	r3, #4
 801229e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122a2:	e016      	b.n	80122d2 <UART_SetConfig+0x7ae>
 80122a4:	2308      	movs	r3, #8
 80122a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122aa:	e012      	b.n	80122d2 <UART_SetConfig+0x7ae>
 80122ac:	2310      	movs	r3, #16
 80122ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122b2:	e00e      	b.n	80122d2 <UART_SetConfig+0x7ae>
 80122b4:	2320      	movs	r3, #32
 80122b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122ba:	e00a      	b.n	80122d2 <UART_SetConfig+0x7ae>
 80122bc:	2340      	movs	r3, #64	; 0x40
 80122be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122c2:	e006      	b.n	80122d2 <UART_SetConfig+0x7ae>
 80122c4:	2380      	movs	r3, #128	; 0x80
 80122c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122ca:	e002      	b.n	80122d2 <UART_SetConfig+0x7ae>
 80122cc:	2380      	movs	r3, #128	; 0x80
 80122ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80122d2:	697b      	ldr	r3, [r7, #20]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	4a55      	ldr	r2, [pc, #340]	; (801242c <UART_SetConfig+0x908>)
 80122d8:	4293      	cmp	r3, r2
 80122da:	f040 80f8 	bne.w	80124ce <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80122de:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80122e2:	2b20      	cmp	r3, #32
 80122e4:	dc46      	bgt.n	8012374 <UART_SetConfig+0x850>
 80122e6:	2b02      	cmp	r3, #2
 80122e8:	db75      	blt.n	80123d6 <UART_SetConfig+0x8b2>
 80122ea:	3b02      	subs	r3, #2
 80122ec:	2b1e      	cmp	r3, #30
 80122ee:	d872      	bhi.n	80123d6 <UART_SetConfig+0x8b2>
 80122f0:	a201      	add	r2, pc, #4	; (adr r2, 80122f8 <UART_SetConfig+0x7d4>)
 80122f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122f6:	bf00      	nop
 80122f8:	0801237b 	.word	0x0801237b
 80122fc:	080123d7 	.word	0x080123d7
 8012300:	08012383 	.word	0x08012383
 8012304:	080123d7 	.word	0x080123d7
 8012308:	080123d7 	.word	0x080123d7
 801230c:	080123d7 	.word	0x080123d7
 8012310:	08012393 	.word	0x08012393
 8012314:	080123d7 	.word	0x080123d7
 8012318:	080123d7 	.word	0x080123d7
 801231c:	080123d7 	.word	0x080123d7
 8012320:	080123d7 	.word	0x080123d7
 8012324:	080123d7 	.word	0x080123d7
 8012328:	080123d7 	.word	0x080123d7
 801232c:	080123d7 	.word	0x080123d7
 8012330:	080123a3 	.word	0x080123a3
 8012334:	080123d7 	.word	0x080123d7
 8012338:	080123d7 	.word	0x080123d7
 801233c:	080123d7 	.word	0x080123d7
 8012340:	080123d7 	.word	0x080123d7
 8012344:	080123d7 	.word	0x080123d7
 8012348:	080123d7 	.word	0x080123d7
 801234c:	080123d7 	.word	0x080123d7
 8012350:	080123d7 	.word	0x080123d7
 8012354:	080123d7 	.word	0x080123d7
 8012358:	080123d7 	.word	0x080123d7
 801235c:	080123d7 	.word	0x080123d7
 8012360:	080123d7 	.word	0x080123d7
 8012364:	080123d7 	.word	0x080123d7
 8012368:	080123d7 	.word	0x080123d7
 801236c:	080123d7 	.word	0x080123d7
 8012370:	080123c9 	.word	0x080123c9
 8012374:	2b40      	cmp	r3, #64	; 0x40
 8012376:	d02a      	beq.n	80123ce <UART_SetConfig+0x8aa>
 8012378:	e02d      	b.n	80123d6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801237a:	f7fe fd25 	bl	8010dc8 <HAL_RCCEx_GetD3PCLK1Freq>
 801237e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012380:	e02f      	b.n	80123e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012386:	4618      	mov	r0, r3
 8012388:	f7fe fd34 	bl	8010df4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801238c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801238e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012390:	e027      	b.n	80123e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012392:	f107 0318 	add.w	r3, r7, #24
 8012396:	4618      	mov	r0, r3
 8012398:	f7fe fe80 	bl	801109c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801239c:	69fb      	ldr	r3, [r7, #28]
 801239e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80123a0:	e01f      	b.n	80123e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80123a2:	4b21      	ldr	r3, [pc, #132]	; (8012428 <UART_SetConfig+0x904>)
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	f003 0320 	and.w	r3, r3, #32
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d009      	beq.n	80123c2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80123ae:	4b1e      	ldr	r3, [pc, #120]	; (8012428 <UART_SetConfig+0x904>)
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	08db      	lsrs	r3, r3, #3
 80123b4:	f003 0303 	and.w	r3, r3, #3
 80123b8:	4a1d      	ldr	r2, [pc, #116]	; (8012430 <UART_SetConfig+0x90c>)
 80123ba:	fa22 f303 	lsr.w	r3, r2, r3
 80123be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80123c0:	e00f      	b.n	80123e2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80123c2:	4b1b      	ldr	r3, [pc, #108]	; (8012430 <UART_SetConfig+0x90c>)
 80123c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80123c6:	e00c      	b.n	80123e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80123c8:	4b1a      	ldr	r3, [pc, #104]	; (8012434 <UART_SetConfig+0x910>)
 80123ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80123cc:	e009      	b.n	80123e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80123ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80123d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80123d4:	e005      	b.n	80123e2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80123d6:	2300      	movs	r3, #0
 80123d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80123da:	2301      	movs	r3, #1
 80123dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80123e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80123e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	f000 81ee 	beq.w	80127c6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80123ea:	697b      	ldr	r3, [r7, #20]
 80123ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123ee:	4a12      	ldr	r2, [pc, #72]	; (8012438 <UART_SetConfig+0x914>)
 80123f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80123f4:	461a      	mov	r2, r3
 80123f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80123fc:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80123fe:	697b      	ldr	r3, [r7, #20]
 8012400:	685a      	ldr	r2, [r3, #4]
 8012402:	4613      	mov	r3, r2
 8012404:	005b      	lsls	r3, r3, #1
 8012406:	4413      	add	r3, r2
 8012408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801240a:	429a      	cmp	r2, r3
 801240c:	d305      	bcc.n	801241a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801240e:	697b      	ldr	r3, [r7, #20]
 8012410:	685b      	ldr	r3, [r3, #4]
 8012412:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012416:	429a      	cmp	r2, r3
 8012418:	d910      	bls.n	801243c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 801241a:	2301      	movs	r3, #1
 801241c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8012420:	e1d1      	b.n	80127c6 <UART_SetConfig+0xca2>
 8012422:	bf00      	nop
 8012424:	40011c00 	.word	0x40011c00
 8012428:	58024400 	.word	0x58024400
 801242c:	58000c00 	.word	0x58000c00
 8012430:	03d09000 	.word	0x03d09000
 8012434:	003d0900 	.word	0x003d0900
 8012438:	08016f38 	.word	0x08016f38
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801243c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801243e:	2200      	movs	r2, #0
 8012440:	60bb      	str	r3, [r7, #8]
 8012442:	60fa      	str	r2, [r7, #12]
 8012444:	697b      	ldr	r3, [r7, #20]
 8012446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012448:	4ac0      	ldr	r2, [pc, #768]	; (801274c <UART_SetConfig+0xc28>)
 801244a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801244e:	b29b      	uxth	r3, r3
 8012450:	2200      	movs	r2, #0
 8012452:	603b      	str	r3, [r7, #0]
 8012454:	607a      	str	r2, [r7, #4]
 8012456:	e9d7 2300 	ldrd	r2, r3, [r7]
 801245a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801245e:	f7ee f9cb 	bl	80007f8 <__aeabi_uldivmod>
 8012462:	4602      	mov	r2, r0
 8012464:	460b      	mov	r3, r1
 8012466:	4610      	mov	r0, r2
 8012468:	4619      	mov	r1, r3
 801246a:	f04f 0200 	mov.w	r2, #0
 801246e:	f04f 0300 	mov.w	r3, #0
 8012472:	020b      	lsls	r3, r1, #8
 8012474:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8012478:	0202      	lsls	r2, r0, #8
 801247a:	6979      	ldr	r1, [r7, #20]
 801247c:	6849      	ldr	r1, [r1, #4]
 801247e:	0849      	lsrs	r1, r1, #1
 8012480:	2000      	movs	r0, #0
 8012482:	460c      	mov	r4, r1
 8012484:	4605      	mov	r5, r0
 8012486:	eb12 0804 	adds.w	r8, r2, r4
 801248a:	eb43 0905 	adc.w	r9, r3, r5
 801248e:	697b      	ldr	r3, [r7, #20]
 8012490:	685b      	ldr	r3, [r3, #4]
 8012492:	2200      	movs	r2, #0
 8012494:	469a      	mov	sl, r3
 8012496:	4693      	mov	fp, r2
 8012498:	4652      	mov	r2, sl
 801249a:	465b      	mov	r3, fp
 801249c:	4640      	mov	r0, r8
 801249e:	4649      	mov	r1, r9
 80124a0:	f7ee f9aa 	bl	80007f8 <__aeabi_uldivmod>
 80124a4:	4602      	mov	r2, r0
 80124a6:	460b      	mov	r3, r1
 80124a8:	4613      	mov	r3, r2
 80124aa:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80124ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80124b2:	d308      	bcc.n	80124c6 <UART_SetConfig+0x9a2>
 80124b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80124ba:	d204      	bcs.n	80124c6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80124bc:	697b      	ldr	r3, [r7, #20]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80124c2:	60da      	str	r2, [r3, #12]
 80124c4:	e17f      	b.n	80127c6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80124c6:	2301      	movs	r3, #1
 80124c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80124cc:	e17b      	b.n	80127c6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80124ce:	697b      	ldr	r3, [r7, #20]
 80124d0:	69db      	ldr	r3, [r3, #28]
 80124d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80124d6:	f040 80bd 	bne.w	8012654 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80124da:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80124de:	2b20      	cmp	r3, #32
 80124e0:	dc48      	bgt.n	8012574 <UART_SetConfig+0xa50>
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	db7b      	blt.n	80125de <UART_SetConfig+0xaba>
 80124e6:	2b20      	cmp	r3, #32
 80124e8:	d879      	bhi.n	80125de <UART_SetConfig+0xaba>
 80124ea:	a201      	add	r2, pc, #4	; (adr r2, 80124f0 <UART_SetConfig+0x9cc>)
 80124ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124f0:	0801257b 	.word	0x0801257b
 80124f4:	08012583 	.word	0x08012583
 80124f8:	080125df 	.word	0x080125df
 80124fc:	080125df 	.word	0x080125df
 8012500:	0801258b 	.word	0x0801258b
 8012504:	080125df 	.word	0x080125df
 8012508:	080125df 	.word	0x080125df
 801250c:	080125df 	.word	0x080125df
 8012510:	0801259b 	.word	0x0801259b
 8012514:	080125df 	.word	0x080125df
 8012518:	080125df 	.word	0x080125df
 801251c:	080125df 	.word	0x080125df
 8012520:	080125df 	.word	0x080125df
 8012524:	080125df 	.word	0x080125df
 8012528:	080125df 	.word	0x080125df
 801252c:	080125df 	.word	0x080125df
 8012530:	080125ab 	.word	0x080125ab
 8012534:	080125df 	.word	0x080125df
 8012538:	080125df 	.word	0x080125df
 801253c:	080125df 	.word	0x080125df
 8012540:	080125df 	.word	0x080125df
 8012544:	080125df 	.word	0x080125df
 8012548:	080125df 	.word	0x080125df
 801254c:	080125df 	.word	0x080125df
 8012550:	080125df 	.word	0x080125df
 8012554:	080125df 	.word	0x080125df
 8012558:	080125df 	.word	0x080125df
 801255c:	080125df 	.word	0x080125df
 8012560:	080125df 	.word	0x080125df
 8012564:	080125df 	.word	0x080125df
 8012568:	080125df 	.word	0x080125df
 801256c:	080125df 	.word	0x080125df
 8012570:	080125d1 	.word	0x080125d1
 8012574:	2b40      	cmp	r3, #64	; 0x40
 8012576:	d02e      	beq.n	80125d6 <UART_SetConfig+0xab2>
 8012578:	e031      	b.n	80125de <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801257a:	f7fd fa59 	bl	800fa30 <HAL_RCC_GetPCLK1Freq>
 801257e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012580:	e033      	b.n	80125ea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012582:	f7fd fa6b 	bl	800fa5c <HAL_RCC_GetPCLK2Freq>
 8012586:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012588:	e02f      	b.n	80125ea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801258a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801258e:	4618      	mov	r0, r3
 8012590:	f7fe fc30 	bl	8010df4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012596:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012598:	e027      	b.n	80125ea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801259a:	f107 0318 	add.w	r3, r7, #24
 801259e:	4618      	mov	r0, r3
 80125a0:	f7fe fd7c 	bl	801109c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80125a4:	69fb      	ldr	r3, [r7, #28]
 80125a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80125a8:	e01f      	b.n	80125ea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80125aa:	4b69      	ldr	r3, [pc, #420]	; (8012750 <UART_SetConfig+0xc2c>)
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	f003 0320 	and.w	r3, r3, #32
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d009      	beq.n	80125ca <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80125b6:	4b66      	ldr	r3, [pc, #408]	; (8012750 <UART_SetConfig+0xc2c>)
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	08db      	lsrs	r3, r3, #3
 80125bc:	f003 0303 	and.w	r3, r3, #3
 80125c0:	4a64      	ldr	r2, [pc, #400]	; (8012754 <UART_SetConfig+0xc30>)
 80125c2:	fa22 f303 	lsr.w	r3, r2, r3
 80125c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80125c8:	e00f      	b.n	80125ea <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80125ca:	4b62      	ldr	r3, [pc, #392]	; (8012754 <UART_SetConfig+0xc30>)
 80125cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80125ce:	e00c      	b.n	80125ea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80125d0:	4b61      	ldr	r3, [pc, #388]	; (8012758 <UART_SetConfig+0xc34>)
 80125d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80125d4:	e009      	b.n	80125ea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80125d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80125da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80125dc:	e005      	b.n	80125ea <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80125de:	2300      	movs	r3, #0
 80125e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80125e2:	2301      	movs	r3, #1
 80125e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80125e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80125ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	f000 80ea 	beq.w	80127c6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80125f2:	697b      	ldr	r3, [r7, #20]
 80125f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125f6:	4a55      	ldr	r2, [pc, #340]	; (801274c <UART_SetConfig+0xc28>)
 80125f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80125fc:	461a      	mov	r2, r3
 80125fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012600:	fbb3 f3f2 	udiv	r3, r3, r2
 8012604:	005a      	lsls	r2, r3, #1
 8012606:	697b      	ldr	r3, [r7, #20]
 8012608:	685b      	ldr	r3, [r3, #4]
 801260a:	085b      	lsrs	r3, r3, #1
 801260c:	441a      	add	r2, r3
 801260e:	697b      	ldr	r3, [r7, #20]
 8012610:	685b      	ldr	r3, [r3, #4]
 8012612:	fbb2 f3f3 	udiv	r3, r2, r3
 8012616:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801261a:	2b0f      	cmp	r3, #15
 801261c:	d916      	bls.n	801264c <UART_SetConfig+0xb28>
 801261e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012624:	d212      	bcs.n	801264c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012628:	b29b      	uxth	r3, r3
 801262a:	f023 030f 	bic.w	r3, r3, #15
 801262e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012632:	085b      	lsrs	r3, r3, #1
 8012634:	b29b      	uxth	r3, r3
 8012636:	f003 0307 	and.w	r3, r3, #7
 801263a:	b29a      	uxth	r2, r3
 801263c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801263e:	4313      	orrs	r3, r2
 8012640:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8012642:	697b      	ldr	r3, [r7, #20]
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012648:	60da      	str	r2, [r3, #12]
 801264a:	e0bc      	b.n	80127c6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 801264c:	2301      	movs	r3, #1
 801264e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8012652:	e0b8      	b.n	80127c6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8012654:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012658:	2b20      	cmp	r3, #32
 801265a:	dc4b      	bgt.n	80126f4 <UART_SetConfig+0xbd0>
 801265c:	2b00      	cmp	r3, #0
 801265e:	f2c0 8087 	blt.w	8012770 <UART_SetConfig+0xc4c>
 8012662:	2b20      	cmp	r3, #32
 8012664:	f200 8084 	bhi.w	8012770 <UART_SetConfig+0xc4c>
 8012668:	a201      	add	r2, pc, #4	; (adr r2, 8012670 <UART_SetConfig+0xb4c>)
 801266a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801266e:	bf00      	nop
 8012670:	080126fb 	.word	0x080126fb
 8012674:	08012703 	.word	0x08012703
 8012678:	08012771 	.word	0x08012771
 801267c:	08012771 	.word	0x08012771
 8012680:	0801270b 	.word	0x0801270b
 8012684:	08012771 	.word	0x08012771
 8012688:	08012771 	.word	0x08012771
 801268c:	08012771 	.word	0x08012771
 8012690:	0801271b 	.word	0x0801271b
 8012694:	08012771 	.word	0x08012771
 8012698:	08012771 	.word	0x08012771
 801269c:	08012771 	.word	0x08012771
 80126a0:	08012771 	.word	0x08012771
 80126a4:	08012771 	.word	0x08012771
 80126a8:	08012771 	.word	0x08012771
 80126ac:	08012771 	.word	0x08012771
 80126b0:	0801272b 	.word	0x0801272b
 80126b4:	08012771 	.word	0x08012771
 80126b8:	08012771 	.word	0x08012771
 80126bc:	08012771 	.word	0x08012771
 80126c0:	08012771 	.word	0x08012771
 80126c4:	08012771 	.word	0x08012771
 80126c8:	08012771 	.word	0x08012771
 80126cc:	08012771 	.word	0x08012771
 80126d0:	08012771 	.word	0x08012771
 80126d4:	08012771 	.word	0x08012771
 80126d8:	08012771 	.word	0x08012771
 80126dc:	08012771 	.word	0x08012771
 80126e0:	08012771 	.word	0x08012771
 80126e4:	08012771 	.word	0x08012771
 80126e8:	08012771 	.word	0x08012771
 80126ec:	08012771 	.word	0x08012771
 80126f0:	08012763 	.word	0x08012763
 80126f4:	2b40      	cmp	r3, #64	; 0x40
 80126f6:	d037      	beq.n	8012768 <UART_SetConfig+0xc44>
 80126f8:	e03a      	b.n	8012770 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80126fa:	f7fd f999 	bl	800fa30 <HAL_RCC_GetPCLK1Freq>
 80126fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012700:	e03c      	b.n	801277c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012702:	f7fd f9ab 	bl	800fa5c <HAL_RCC_GetPCLK2Freq>
 8012706:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012708:	e038      	b.n	801277c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801270a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801270e:	4618      	mov	r0, r3
 8012710:	f7fe fb70 	bl	8010df4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012716:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012718:	e030      	b.n	801277c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801271a:	f107 0318 	add.w	r3, r7, #24
 801271e:	4618      	mov	r0, r3
 8012720:	f7fe fcbc 	bl	801109c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012724:	69fb      	ldr	r3, [r7, #28]
 8012726:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012728:	e028      	b.n	801277c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801272a:	4b09      	ldr	r3, [pc, #36]	; (8012750 <UART_SetConfig+0xc2c>)
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	f003 0320 	and.w	r3, r3, #32
 8012732:	2b00      	cmp	r3, #0
 8012734:	d012      	beq.n	801275c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012736:	4b06      	ldr	r3, [pc, #24]	; (8012750 <UART_SetConfig+0xc2c>)
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	08db      	lsrs	r3, r3, #3
 801273c:	f003 0303 	and.w	r3, r3, #3
 8012740:	4a04      	ldr	r2, [pc, #16]	; (8012754 <UART_SetConfig+0xc30>)
 8012742:	fa22 f303 	lsr.w	r3, r2, r3
 8012746:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012748:	e018      	b.n	801277c <UART_SetConfig+0xc58>
 801274a:	bf00      	nop
 801274c:	08016f38 	.word	0x08016f38
 8012750:	58024400 	.word	0x58024400
 8012754:	03d09000 	.word	0x03d09000
 8012758:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 801275c:	4b24      	ldr	r3, [pc, #144]	; (80127f0 <UART_SetConfig+0xccc>)
 801275e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012760:	e00c      	b.n	801277c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012762:	4b24      	ldr	r3, [pc, #144]	; (80127f4 <UART_SetConfig+0xcd0>)
 8012764:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012766:	e009      	b.n	801277c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012768:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801276c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801276e:	e005      	b.n	801277c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8012770:	2300      	movs	r3, #0
 8012772:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8012774:	2301      	movs	r3, #1
 8012776:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801277a:	bf00      	nop
    }

    if (pclk != 0U)
 801277c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801277e:	2b00      	cmp	r3, #0
 8012780:	d021      	beq.n	80127c6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012782:	697b      	ldr	r3, [r7, #20]
 8012784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012786:	4a1c      	ldr	r2, [pc, #112]	; (80127f8 <UART_SetConfig+0xcd4>)
 8012788:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801278c:	461a      	mov	r2, r3
 801278e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012790:	fbb3 f2f2 	udiv	r2, r3, r2
 8012794:	697b      	ldr	r3, [r7, #20]
 8012796:	685b      	ldr	r3, [r3, #4]
 8012798:	085b      	lsrs	r3, r3, #1
 801279a:	441a      	add	r2, r3
 801279c:	697b      	ldr	r3, [r7, #20]
 801279e:	685b      	ldr	r3, [r3, #4]
 80127a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80127a4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80127a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127a8:	2b0f      	cmp	r3, #15
 80127aa:	d909      	bls.n	80127c0 <UART_SetConfig+0xc9c>
 80127ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80127b2:	d205      	bcs.n	80127c0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80127b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127b6:	b29a      	uxth	r2, r3
 80127b8:	697b      	ldr	r3, [r7, #20]
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	60da      	str	r2, [r3, #12]
 80127be:	e002      	b.n	80127c6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80127c0:	2301      	movs	r3, #1
 80127c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80127c6:	697b      	ldr	r3, [r7, #20]
 80127c8:	2201      	movs	r2, #1
 80127ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80127ce:	697b      	ldr	r3, [r7, #20]
 80127d0:	2201      	movs	r2, #1
 80127d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80127d6:	697b      	ldr	r3, [r7, #20]
 80127d8:	2200      	movs	r2, #0
 80127da:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80127dc:	697b      	ldr	r3, [r7, #20]
 80127de:	2200      	movs	r2, #0
 80127e0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80127e2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80127e6:	4618      	mov	r0, r3
 80127e8:	3748      	adds	r7, #72	; 0x48
 80127ea:	46bd      	mov	sp, r7
 80127ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80127f0:	03d09000 	.word	0x03d09000
 80127f4:	003d0900 	.word	0x003d0900
 80127f8:	08016f38 	.word	0x08016f38

080127fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80127fc:	b480      	push	{r7}
 80127fe:	b083      	sub	sp, #12
 8012800:	af00      	add	r7, sp, #0
 8012802:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012808:	f003 0301 	and.w	r3, r3, #1
 801280c:	2b00      	cmp	r3, #0
 801280e:	d00a      	beq.n	8012826 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	685b      	ldr	r3, [r3, #4]
 8012816:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	430a      	orrs	r2, r1
 8012824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801282a:	f003 0302 	and.w	r3, r3, #2
 801282e:	2b00      	cmp	r3, #0
 8012830:	d00a      	beq.n	8012848 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	685b      	ldr	r3, [r3, #4]
 8012838:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	430a      	orrs	r2, r1
 8012846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801284c:	f003 0304 	and.w	r3, r3, #4
 8012850:	2b00      	cmp	r3, #0
 8012852:	d00a      	beq.n	801286a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	685b      	ldr	r3, [r3, #4]
 801285a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	430a      	orrs	r2, r1
 8012868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801286e:	f003 0308 	and.w	r3, r3, #8
 8012872:	2b00      	cmp	r3, #0
 8012874:	d00a      	beq.n	801288c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	685b      	ldr	r3, [r3, #4]
 801287c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	430a      	orrs	r2, r1
 801288a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012890:	f003 0310 	and.w	r3, r3, #16
 8012894:	2b00      	cmp	r3, #0
 8012896:	d00a      	beq.n	80128ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	689b      	ldr	r3, [r3, #8]
 801289e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	430a      	orrs	r2, r1
 80128ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128b2:	f003 0320 	and.w	r3, r3, #32
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d00a      	beq.n	80128d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	689b      	ldr	r3, [r3, #8]
 80128c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	430a      	orrs	r2, r1
 80128ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d01a      	beq.n	8012912 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	685b      	ldr	r3, [r3, #4]
 80128e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	430a      	orrs	r2, r1
 80128f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80128fa:	d10a      	bne.n	8012912 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	685b      	ldr	r3, [r3, #4]
 8012902:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	430a      	orrs	r2, r1
 8012910:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801291a:	2b00      	cmp	r3, #0
 801291c:	d00a      	beq.n	8012934 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	685b      	ldr	r3, [r3, #4]
 8012924:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	430a      	orrs	r2, r1
 8012932:	605a      	str	r2, [r3, #4]
  }
}
 8012934:	bf00      	nop
 8012936:	370c      	adds	r7, #12
 8012938:	46bd      	mov	sp, r7
 801293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801293e:	4770      	bx	lr

08012940 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012940:	b580      	push	{r7, lr}
 8012942:	b098      	sub	sp, #96	; 0x60
 8012944:	af02      	add	r7, sp, #8
 8012946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	2200      	movs	r2, #0
 801294c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012950:	f7fb f9ca 	bl	800dce8 <HAL_GetTick>
 8012954:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	f003 0308 	and.w	r3, r3, #8
 8012960:	2b08      	cmp	r3, #8
 8012962:	d12f      	bne.n	80129c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012964:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012968:	9300      	str	r3, [sp, #0]
 801296a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801296c:	2200      	movs	r2, #0
 801296e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012972:	6878      	ldr	r0, [r7, #4]
 8012974:	f000 f88e 	bl	8012a94 <UART_WaitOnFlagUntilTimeout>
 8012978:	4603      	mov	r3, r0
 801297a:	2b00      	cmp	r3, #0
 801297c:	d022      	beq.n	80129c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012986:	e853 3f00 	ldrex	r3, [r3]
 801298a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801298c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801298e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012992:	653b      	str	r3, [r7, #80]	; 0x50
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	461a      	mov	r2, r3
 801299a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801299c:	647b      	str	r3, [r7, #68]	; 0x44
 801299e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80129a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80129a4:	e841 2300 	strex	r3, r2, [r1]
 80129a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80129aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d1e6      	bne.n	801297e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	2220      	movs	r2, #32
 80129b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	2200      	movs	r2, #0
 80129bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80129c0:	2303      	movs	r3, #3
 80129c2:	e063      	b.n	8012a8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	f003 0304 	and.w	r3, r3, #4
 80129ce:	2b04      	cmp	r3, #4
 80129d0:	d149      	bne.n	8012a66 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80129d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80129d6:	9300      	str	r3, [sp, #0]
 80129d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80129da:	2200      	movs	r2, #0
 80129dc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80129e0:	6878      	ldr	r0, [r7, #4]
 80129e2:	f000 f857 	bl	8012a94 <UART_WaitOnFlagUntilTimeout>
 80129e6:	4603      	mov	r3, r0
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d03c      	beq.n	8012a66 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129f4:	e853 3f00 	ldrex	r3, [r3]
 80129f8:	623b      	str	r3, [r7, #32]
   return(result);
 80129fa:	6a3b      	ldr	r3, [r7, #32]
 80129fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012a00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	461a      	mov	r2, r3
 8012a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a0a:	633b      	str	r3, [r7, #48]	; 0x30
 8012a0c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a12:	e841 2300 	strex	r3, r2, [r1]
 8012a16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d1e6      	bne.n	80129ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	3308      	adds	r3, #8
 8012a24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a26:	693b      	ldr	r3, [r7, #16]
 8012a28:	e853 3f00 	ldrex	r3, [r3]
 8012a2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	f023 0301 	bic.w	r3, r3, #1
 8012a34:	64bb      	str	r3, [r7, #72]	; 0x48
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	3308      	adds	r3, #8
 8012a3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012a3e:	61fa      	str	r2, [r7, #28]
 8012a40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a42:	69b9      	ldr	r1, [r7, #24]
 8012a44:	69fa      	ldr	r2, [r7, #28]
 8012a46:	e841 2300 	strex	r3, r2, [r1]
 8012a4a:	617b      	str	r3, [r7, #20]
   return(result);
 8012a4c:	697b      	ldr	r3, [r7, #20]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d1e5      	bne.n	8012a1e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	2220      	movs	r2, #32
 8012a56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012a62:	2303      	movs	r3, #3
 8012a64:	e012      	b.n	8012a8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	2220      	movs	r2, #32
 8012a6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	2220      	movs	r2, #32
 8012a72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	2200      	movs	r2, #0
 8012a7a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	2200      	movs	r2, #0
 8012a80:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	2200      	movs	r2, #0
 8012a86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012a8a:	2300      	movs	r3, #0
}
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	3758      	adds	r7, #88	; 0x58
 8012a90:	46bd      	mov	sp, r7
 8012a92:	bd80      	pop	{r7, pc}

08012a94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012a94:	b580      	push	{r7, lr}
 8012a96:	b084      	sub	sp, #16
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	60f8      	str	r0, [r7, #12]
 8012a9c:	60b9      	str	r1, [r7, #8]
 8012a9e:	603b      	str	r3, [r7, #0]
 8012aa0:	4613      	mov	r3, r2
 8012aa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012aa4:	e049      	b.n	8012b3a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012aa6:	69bb      	ldr	r3, [r7, #24]
 8012aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012aac:	d045      	beq.n	8012b3a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012aae:	f7fb f91b 	bl	800dce8 <HAL_GetTick>
 8012ab2:	4602      	mov	r2, r0
 8012ab4:	683b      	ldr	r3, [r7, #0]
 8012ab6:	1ad3      	subs	r3, r2, r3
 8012ab8:	69ba      	ldr	r2, [r7, #24]
 8012aba:	429a      	cmp	r2, r3
 8012abc:	d302      	bcc.n	8012ac4 <UART_WaitOnFlagUntilTimeout+0x30>
 8012abe:	69bb      	ldr	r3, [r7, #24]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d101      	bne.n	8012ac8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012ac4:	2303      	movs	r3, #3
 8012ac6:	e048      	b.n	8012b5a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	f003 0304 	and.w	r3, r3, #4
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d031      	beq.n	8012b3a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	69db      	ldr	r3, [r3, #28]
 8012adc:	f003 0308 	and.w	r3, r3, #8
 8012ae0:	2b08      	cmp	r3, #8
 8012ae2:	d110      	bne.n	8012b06 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	2208      	movs	r2, #8
 8012aea:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8012aec:	68f8      	ldr	r0, [r7, #12]
 8012aee:	f000 f839 	bl	8012b64 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	2208      	movs	r2, #8
 8012af6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	2200      	movs	r2, #0
 8012afe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8012b02:	2301      	movs	r3, #1
 8012b04:	e029      	b.n	8012b5a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	69db      	ldr	r3, [r3, #28]
 8012b0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012b10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012b14:	d111      	bne.n	8012b3a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012b1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012b20:	68f8      	ldr	r0, [r7, #12]
 8012b22:	f000 f81f 	bl	8012b64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	2220      	movs	r2, #32
 8012b2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	2200      	movs	r2, #0
 8012b32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8012b36:	2303      	movs	r3, #3
 8012b38:	e00f      	b.n	8012b5a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	69da      	ldr	r2, [r3, #28]
 8012b40:	68bb      	ldr	r3, [r7, #8]
 8012b42:	4013      	ands	r3, r2
 8012b44:	68ba      	ldr	r2, [r7, #8]
 8012b46:	429a      	cmp	r2, r3
 8012b48:	bf0c      	ite	eq
 8012b4a:	2301      	moveq	r3, #1
 8012b4c:	2300      	movne	r3, #0
 8012b4e:	b2db      	uxtb	r3, r3
 8012b50:	461a      	mov	r2, r3
 8012b52:	79fb      	ldrb	r3, [r7, #7]
 8012b54:	429a      	cmp	r2, r3
 8012b56:	d0a6      	beq.n	8012aa6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012b58:	2300      	movs	r3, #0
}
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	3710      	adds	r7, #16
 8012b5e:	46bd      	mov	sp, r7
 8012b60:	bd80      	pop	{r7, pc}
	...

08012b64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012b64:	b480      	push	{r7}
 8012b66:	b095      	sub	sp, #84	; 0x54
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b74:	e853 3f00 	ldrex	r3, [r3]
 8012b78:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012b80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	461a      	mov	r2, r3
 8012b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b8a:	643b      	str	r3, [r7, #64]	; 0x40
 8012b8c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012b90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012b92:	e841 2300 	strex	r3, r2, [r1]
 8012b96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d1e6      	bne.n	8012b6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	3308      	adds	r3, #8
 8012ba4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ba6:	6a3b      	ldr	r3, [r7, #32]
 8012ba8:	e853 3f00 	ldrex	r3, [r3]
 8012bac:	61fb      	str	r3, [r7, #28]
   return(result);
 8012bae:	69fa      	ldr	r2, [r7, #28]
 8012bb0:	4b1e      	ldr	r3, [pc, #120]	; (8012c2c <UART_EndRxTransfer+0xc8>)
 8012bb2:	4013      	ands	r3, r2
 8012bb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	3308      	adds	r3, #8
 8012bbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012bbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012bc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012bc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012bc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012bc6:	e841 2300 	strex	r3, r2, [r1]
 8012bca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d1e5      	bne.n	8012b9e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012bd6:	2b01      	cmp	r3, #1
 8012bd8:	d118      	bne.n	8012c0c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	e853 3f00 	ldrex	r3, [r3]
 8012be6:	60bb      	str	r3, [r7, #8]
   return(result);
 8012be8:	68bb      	ldr	r3, [r7, #8]
 8012bea:	f023 0310 	bic.w	r3, r3, #16
 8012bee:	647b      	str	r3, [r7, #68]	; 0x44
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	461a      	mov	r2, r3
 8012bf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012bf8:	61bb      	str	r3, [r7, #24]
 8012bfa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012bfc:	6979      	ldr	r1, [r7, #20]
 8012bfe:	69ba      	ldr	r2, [r7, #24]
 8012c00:	e841 2300 	strex	r3, r2, [r1]
 8012c04:	613b      	str	r3, [r7, #16]
   return(result);
 8012c06:	693b      	ldr	r3, [r7, #16]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d1e6      	bne.n	8012bda <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	2220      	movs	r2, #32
 8012c10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	2200      	movs	r2, #0
 8012c18:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	2200      	movs	r2, #0
 8012c1e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8012c20:	bf00      	nop
 8012c22:	3754      	adds	r7, #84	; 0x54
 8012c24:	46bd      	mov	sp, r7
 8012c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c2a:	4770      	bx	lr
 8012c2c:	effffffe 	.word	0xeffffffe

08012c30 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012c30:	b480      	push	{r7}
 8012c32:	b085      	sub	sp, #20
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012c3e:	2b01      	cmp	r3, #1
 8012c40:	d101      	bne.n	8012c46 <HAL_UARTEx_DisableFifoMode+0x16>
 8012c42:	2302      	movs	r3, #2
 8012c44:	e027      	b.n	8012c96 <HAL_UARTEx_DisableFifoMode+0x66>
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	2201      	movs	r2, #1
 8012c4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	2224      	movs	r2, #36	; 0x24
 8012c52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	681a      	ldr	r2, [r3, #0]
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	f022 0201 	bic.w	r2, r2, #1
 8012c6c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012c74:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	2200      	movs	r2, #0
 8012c7a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	68fa      	ldr	r2, [r7, #12]
 8012c82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	2220      	movs	r2, #32
 8012c88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	2200      	movs	r2, #0
 8012c90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012c94:	2300      	movs	r3, #0
}
 8012c96:	4618      	mov	r0, r3
 8012c98:	3714      	adds	r7, #20
 8012c9a:	46bd      	mov	sp, r7
 8012c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca0:	4770      	bx	lr

08012ca2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012ca2:	b580      	push	{r7, lr}
 8012ca4:	b084      	sub	sp, #16
 8012ca6:	af00      	add	r7, sp, #0
 8012ca8:	6078      	str	r0, [r7, #4]
 8012caa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012cb2:	2b01      	cmp	r3, #1
 8012cb4:	d101      	bne.n	8012cba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012cb6:	2302      	movs	r3, #2
 8012cb8:	e02d      	b.n	8012d16 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	2201      	movs	r2, #1
 8012cbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	2224      	movs	r2, #36	; 0x24
 8012cc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	681a      	ldr	r2, [r3, #0]
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	f022 0201 	bic.w	r2, r2, #1
 8012ce0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	689b      	ldr	r3, [r3, #8]
 8012ce8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	683a      	ldr	r2, [r7, #0]
 8012cf2:	430a      	orrs	r2, r1
 8012cf4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012cf6:	6878      	ldr	r0, [r7, #4]
 8012cf8:	f000 f850 	bl	8012d9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	68fa      	ldr	r2, [r7, #12]
 8012d02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	2220      	movs	r2, #32
 8012d08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	2200      	movs	r2, #0
 8012d10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012d14:	2300      	movs	r3, #0
}
 8012d16:	4618      	mov	r0, r3
 8012d18:	3710      	adds	r7, #16
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	bd80      	pop	{r7, pc}

08012d1e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012d1e:	b580      	push	{r7, lr}
 8012d20:	b084      	sub	sp, #16
 8012d22:	af00      	add	r7, sp, #0
 8012d24:	6078      	str	r0, [r7, #4]
 8012d26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012d2e:	2b01      	cmp	r3, #1
 8012d30:	d101      	bne.n	8012d36 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012d32:	2302      	movs	r3, #2
 8012d34:	e02d      	b.n	8012d92 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	2201      	movs	r2, #1
 8012d3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	2224      	movs	r2, #36	; 0x24
 8012d42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	681a      	ldr	r2, [r3, #0]
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	f022 0201 	bic.w	r2, r2, #1
 8012d5c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	689b      	ldr	r3, [r3, #8]
 8012d64:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	683a      	ldr	r2, [r7, #0]
 8012d6e:	430a      	orrs	r2, r1
 8012d70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012d72:	6878      	ldr	r0, [r7, #4]
 8012d74:	f000 f812 	bl	8012d9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	68fa      	ldr	r2, [r7, #12]
 8012d7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	2220      	movs	r2, #32
 8012d84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	2200      	movs	r2, #0
 8012d8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012d90:	2300      	movs	r3, #0
}
 8012d92:	4618      	mov	r0, r3
 8012d94:	3710      	adds	r7, #16
 8012d96:	46bd      	mov	sp, r7
 8012d98:	bd80      	pop	{r7, pc}
	...

08012d9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012d9c:	b480      	push	{r7}
 8012d9e:	b085      	sub	sp, #20
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d108      	bne.n	8012dbe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	2201      	movs	r2, #1
 8012db0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	2201      	movs	r2, #1
 8012db8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012dbc:	e031      	b.n	8012e22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012dbe:	2310      	movs	r3, #16
 8012dc0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012dc2:	2310      	movs	r3, #16
 8012dc4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	689b      	ldr	r3, [r3, #8]
 8012dcc:	0e5b      	lsrs	r3, r3, #25
 8012dce:	b2db      	uxtb	r3, r3
 8012dd0:	f003 0307 	and.w	r3, r3, #7
 8012dd4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	689b      	ldr	r3, [r3, #8]
 8012ddc:	0f5b      	lsrs	r3, r3, #29
 8012dde:	b2db      	uxtb	r3, r3
 8012de0:	f003 0307 	and.w	r3, r3, #7
 8012de4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012de6:	7bbb      	ldrb	r3, [r7, #14]
 8012de8:	7b3a      	ldrb	r2, [r7, #12]
 8012dea:	4911      	ldr	r1, [pc, #68]	; (8012e30 <UARTEx_SetNbDataToProcess+0x94>)
 8012dec:	5c8a      	ldrb	r2, [r1, r2]
 8012dee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012df2:	7b3a      	ldrb	r2, [r7, #12]
 8012df4:	490f      	ldr	r1, [pc, #60]	; (8012e34 <UARTEx_SetNbDataToProcess+0x98>)
 8012df6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012df8:	fb93 f3f2 	sdiv	r3, r3, r2
 8012dfc:	b29a      	uxth	r2, r3
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012e04:	7bfb      	ldrb	r3, [r7, #15]
 8012e06:	7b7a      	ldrb	r2, [r7, #13]
 8012e08:	4909      	ldr	r1, [pc, #36]	; (8012e30 <UARTEx_SetNbDataToProcess+0x94>)
 8012e0a:	5c8a      	ldrb	r2, [r1, r2]
 8012e0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012e10:	7b7a      	ldrb	r2, [r7, #13]
 8012e12:	4908      	ldr	r1, [pc, #32]	; (8012e34 <UARTEx_SetNbDataToProcess+0x98>)
 8012e14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012e16:	fb93 f3f2 	sdiv	r3, r3, r2
 8012e1a:	b29a      	uxth	r2, r3
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012e22:	bf00      	nop
 8012e24:	3714      	adds	r7, #20
 8012e26:	46bd      	mov	sp, r7
 8012e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e2c:	4770      	bx	lr
 8012e2e:	bf00      	nop
 8012e30:	08016f50 	.word	0x08016f50
 8012e34:	08016f58 	.word	0x08016f58

08012e38 <__assert_func>:
 8012e38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012e3a:	4614      	mov	r4, r2
 8012e3c:	461a      	mov	r2, r3
 8012e3e:	4b09      	ldr	r3, [pc, #36]	; (8012e64 <__assert_func+0x2c>)
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	4605      	mov	r5, r0
 8012e44:	68d8      	ldr	r0, [r3, #12]
 8012e46:	b14c      	cbz	r4, 8012e5c <__assert_func+0x24>
 8012e48:	4b07      	ldr	r3, [pc, #28]	; (8012e68 <__assert_func+0x30>)
 8012e4a:	9100      	str	r1, [sp, #0]
 8012e4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012e50:	4906      	ldr	r1, [pc, #24]	; (8012e6c <__assert_func+0x34>)
 8012e52:	462b      	mov	r3, r5
 8012e54:	f000 fa76 	bl	8013344 <fiprintf>
 8012e58:	f000 fc0e 	bl	8013678 <abort>
 8012e5c:	4b04      	ldr	r3, [pc, #16]	; (8012e70 <__assert_func+0x38>)
 8012e5e:	461c      	mov	r4, r3
 8012e60:	e7f3      	b.n	8012e4a <__assert_func+0x12>
 8012e62:	bf00      	nop
 8012e64:	24000304 	.word	0x24000304
 8012e68:	08016f60 	.word	0x08016f60
 8012e6c:	08016f6d 	.word	0x08016f6d
 8012e70:	08016f9b 	.word	0x08016f9b

08012e74 <atoi>:
 8012e74:	220a      	movs	r2, #10
 8012e76:	2100      	movs	r1, #0
 8012e78:	f000 b9c8 	b.w	801320c <strtol>

08012e7c <calloc>:
 8012e7c:	4b02      	ldr	r3, [pc, #8]	; (8012e88 <calloc+0xc>)
 8012e7e:	460a      	mov	r2, r1
 8012e80:	4601      	mov	r1, r0
 8012e82:	6818      	ldr	r0, [r3, #0]
 8012e84:	f000 b802 	b.w	8012e8c <_calloc_r>
 8012e88:	24000304 	.word	0x24000304

08012e8c <_calloc_r>:
 8012e8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012e8e:	fba1 2402 	umull	r2, r4, r1, r2
 8012e92:	b94c      	cbnz	r4, 8012ea8 <_calloc_r+0x1c>
 8012e94:	4611      	mov	r1, r2
 8012e96:	9201      	str	r2, [sp, #4]
 8012e98:	f000 f83e 	bl	8012f18 <_malloc_r>
 8012e9c:	9a01      	ldr	r2, [sp, #4]
 8012e9e:	4605      	mov	r5, r0
 8012ea0:	b930      	cbnz	r0, 8012eb0 <_calloc_r+0x24>
 8012ea2:	4628      	mov	r0, r5
 8012ea4:	b003      	add	sp, #12
 8012ea6:	bd30      	pop	{r4, r5, pc}
 8012ea8:	220c      	movs	r2, #12
 8012eaa:	6002      	str	r2, [r0, #0]
 8012eac:	2500      	movs	r5, #0
 8012eae:	e7f8      	b.n	8012ea2 <_calloc_r+0x16>
 8012eb0:	4621      	mov	r1, r4
 8012eb2:	f000 faec 	bl	801348e <memset>
 8012eb6:	e7f4      	b.n	8012ea2 <_calloc_r+0x16>

08012eb8 <malloc>:
 8012eb8:	4b02      	ldr	r3, [pc, #8]	; (8012ec4 <malloc+0xc>)
 8012eba:	4601      	mov	r1, r0
 8012ebc:	6818      	ldr	r0, [r3, #0]
 8012ebe:	f000 b82b 	b.w	8012f18 <_malloc_r>
 8012ec2:	bf00      	nop
 8012ec4:	24000304 	.word	0x24000304

08012ec8 <free>:
 8012ec8:	4b02      	ldr	r3, [pc, #8]	; (8012ed4 <free+0xc>)
 8012eca:	4601      	mov	r1, r0
 8012ecc:	6818      	ldr	r0, [r3, #0]
 8012ece:	f000 bbdb 	b.w	8013688 <_free_r>
 8012ed2:	bf00      	nop
 8012ed4:	24000304 	.word	0x24000304

08012ed8 <sbrk_aligned>:
 8012ed8:	b570      	push	{r4, r5, r6, lr}
 8012eda:	4e0e      	ldr	r6, [pc, #56]	; (8012f14 <sbrk_aligned+0x3c>)
 8012edc:	460c      	mov	r4, r1
 8012ede:	6831      	ldr	r1, [r6, #0]
 8012ee0:	4605      	mov	r5, r0
 8012ee2:	b911      	cbnz	r1, 8012eea <sbrk_aligned+0x12>
 8012ee4:	f000 fb64 	bl	80135b0 <_sbrk_r>
 8012ee8:	6030      	str	r0, [r6, #0]
 8012eea:	4621      	mov	r1, r4
 8012eec:	4628      	mov	r0, r5
 8012eee:	f000 fb5f 	bl	80135b0 <_sbrk_r>
 8012ef2:	1c43      	adds	r3, r0, #1
 8012ef4:	d00a      	beq.n	8012f0c <sbrk_aligned+0x34>
 8012ef6:	1cc4      	adds	r4, r0, #3
 8012ef8:	f024 0403 	bic.w	r4, r4, #3
 8012efc:	42a0      	cmp	r0, r4
 8012efe:	d007      	beq.n	8012f10 <sbrk_aligned+0x38>
 8012f00:	1a21      	subs	r1, r4, r0
 8012f02:	4628      	mov	r0, r5
 8012f04:	f000 fb54 	bl	80135b0 <_sbrk_r>
 8012f08:	3001      	adds	r0, #1
 8012f0a:	d101      	bne.n	8012f10 <sbrk_aligned+0x38>
 8012f0c:	f04f 34ff 	mov.w	r4, #4294967295
 8012f10:	4620      	mov	r0, r4
 8012f12:	bd70      	pop	{r4, r5, r6, pc}
 8012f14:	24003644 	.word	0x24003644

08012f18 <_malloc_r>:
 8012f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f1c:	1ccd      	adds	r5, r1, #3
 8012f1e:	f025 0503 	bic.w	r5, r5, #3
 8012f22:	3508      	adds	r5, #8
 8012f24:	2d0c      	cmp	r5, #12
 8012f26:	bf38      	it	cc
 8012f28:	250c      	movcc	r5, #12
 8012f2a:	2d00      	cmp	r5, #0
 8012f2c:	4607      	mov	r7, r0
 8012f2e:	db01      	blt.n	8012f34 <_malloc_r+0x1c>
 8012f30:	42a9      	cmp	r1, r5
 8012f32:	d905      	bls.n	8012f40 <_malloc_r+0x28>
 8012f34:	230c      	movs	r3, #12
 8012f36:	603b      	str	r3, [r7, #0]
 8012f38:	2600      	movs	r6, #0
 8012f3a:	4630      	mov	r0, r6
 8012f3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f40:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013014 <_malloc_r+0xfc>
 8012f44:	f000 f868 	bl	8013018 <__malloc_lock>
 8012f48:	f8d8 3000 	ldr.w	r3, [r8]
 8012f4c:	461c      	mov	r4, r3
 8012f4e:	bb5c      	cbnz	r4, 8012fa8 <_malloc_r+0x90>
 8012f50:	4629      	mov	r1, r5
 8012f52:	4638      	mov	r0, r7
 8012f54:	f7ff ffc0 	bl	8012ed8 <sbrk_aligned>
 8012f58:	1c43      	adds	r3, r0, #1
 8012f5a:	4604      	mov	r4, r0
 8012f5c:	d155      	bne.n	801300a <_malloc_r+0xf2>
 8012f5e:	f8d8 4000 	ldr.w	r4, [r8]
 8012f62:	4626      	mov	r6, r4
 8012f64:	2e00      	cmp	r6, #0
 8012f66:	d145      	bne.n	8012ff4 <_malloc_r+0xdc>
 8012f68:	2c00      	cmp	r4, #0
 8012f6a:	d048      	beq.n	8012ffe <_malloc_r+0xe6>
 8012f6c:	6823      	ldr	r3, [r4, #0]
 8012f6e:	4631      	mov	r1, r6
 8012f70:	4638      	mov	r0, r7
 8012f72:	eb04 0903 	add.w	r9, r4, r3
 8012f76:	f000 fb1b 	bl	80135b0 <_sbrk_r>
 8012f7a:	4581      	cmp	r9, r0
 8012f7c:	d13f      	bne.n	8012ffe <_malloc_r+0xe6>
 8012f7e:	6821      	ldr	r1, [r4, #0]
 8012f80:	1a6d      	subs	r5, r5, r1
 8012f82:	4629      	mov	r1, r5
 8012f84:	4638      	mov	r0, r7
 8012f86:	f7ff ffa7 	bl	8012ed8 <sbrk_aligned>
 8012f8a:	3001      	adds	r0, #1
 8012f8c:	d037      	beq.n	8012ffe <_malloc_r+0xe6>
 8012f8e:	6823      	ldr	r3, [r4, #0]
 8012f90:	442b      	add	r3, r5
 8012f92:	6023      	str	r3, [r4, #0]
 8012f94:	f8d8 3000 	ldr.w	r3, [r8]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d038      	beq.n	801300e <_malloc_r+0xf6>
 8012f9c:	685a      	ldr	r2, [r3, #4]
 8012f9e:	42a2      	cmp	r2, r4
 8012fa0:	d12b      	bne.n	8012ffa <_malloc_r+0xe2>
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	605a      	str	r2, [r3, #4]
 8012fa6:	e00f      	b.n	8012fc8 <_malloc_r+0xb0>
 8012fa8:	6822      	ldr	r2, [r4, #0]
 8012faa:	1b52      	subs	r2, r2, r5
 8012fac:	d41f      	bmi.n	8012fee <_malloc_r+0xd6>
 8012fae:	2a0b      	cmp	r2, #11
 8012fb0:	d917      	bls.n	8012fe2 <_malloc_r+0xca>
 8012fb2:	1961      	adds	r1, r4, r5
 8012fb4:	42a3      	cmp	r3, r4
 8012fb6:	6025      	str	r5, [r4, #0]
 8012fb8:	bf18      	it	ne
 8012fba:	6059      	strne	r1, [r3, #4]
 8012fbc:	6863      	ldr	r3, [r4, #4]
 8012fbe:	bf08      	it	eq
 8012fc0:	f8c8 1000 	streq.w	r1, [r8]
 8012fc4:	5162      	str	r2, [r4, r5]
 8012fc6:	604b      	str	r3, [r1, #4]
 8012fc8:	4638      	mov	r0, r7
 8012fca:	f104 060b 	add.w	r6, r4, #11
 8012fce:	f000 f829 	bl	8013024 <__malloc_unlock>
 8012fd2:	f026 0607 	bic.w	r6, r6, #7
 8012fd6:	1d23      	adds	r3, r4, #4
 8012fd8:	1af2      	subs	r2, r6, r3
 8012fda:	d0ae      	beq.n	8012f3a <_malloc_r+0x22>
 8012fdc:	1b9b      	subs	r3, r3, r6
 8012fde:	50a3      	str	r3, [r4, r2]
 8012fe0:	e7ab      	b.n	8012f3a <_malloc_r+0x22>
 8012fe2:	42a3      	cmp	r3, r4
 8012fe4:	6862      	ldr	r2, [r4, #4]
 8012fe6:	d1dd      	bne.n	8012fa4 <_malloc_r+0x8c>
 8012fe8:	f8c8 2000 	str.w	r2, [r8]
 8012fec:	e7ec      	b.n	8012fc8 <_malloc_r+0xb0>
 8012fee:	4623      	mov	r3, r4
 8012ff0:	6864      	ldr	r4, [r4, #4]
 8012ff2:	e7ac      	b.n	8012f4e <_malloc_r+0x36>
 8012ff4:	4634      	mov	r4, r6
 8012ff6:	6876      	ldr	r6, [r6, #4]
 8012ff8:	e7b4      	b.n	8012f64 <_malloc_r+0x4c>
 8012ffa:	4613      	mov	r3, r2
 8012ffc:	e7cc      	b.n	8012f98 <_malloc_r+0x80>
 8012ffe:	230c      	movs	r3, #12
 8013000:	603b      	str	r3, [r7, #0]
 8013002:	4638      	mov	r0, r7
 8013004:	f000 f80e 	bl	8013024 <__malloc_unlock>
 8013008:	e797      	b.n	8012f3a <_malloc_r+0x22>
 801300a:	6025      	str	r5, [r4, #0]
 801300c:	e7dc      	b.n	8012fc8 <_malloc_r+0xb0>
 801300e:	605b      	str	r3, [r3, #4]
 8013010:	deff      	udf	#255	; 0xff
 8013012:	bf00      	nop
 8013014:	24003640 	.word	0x24003640

08013018 <__malloc_lock>:
 8013018:	4801      	ldr	r0, [pc, #4]	; (8013020 <__malloc_lock+0x8>)
 801301a:	f000 bb15 	b.w	8013648 <__retarget_lock_acquire_recursive>
 801301e:	bf00      	nop
 8013020:	24003788 	.word	0x24003788

08013024 <__malloc_unlock>:
 8013024:	4801      	ldr	r0, [pc, #4]	; (801302c <__malloc_unlock+0x8>)
 8013026:	f000 bb10 	b.w	801364a <__retarget_lock_release_recursive>
 801302a:	bf00      	nop
 801302c:	24003788 	.word	0x24003788

08013030 <srand>:
 8013030:	b538      	push	{r3, r4, r5, lr}
 8013032:	4b10      	ldr	r3, [pc, #64]	; (8013074 <srand+0x44>)
 8013034:	681d      	ldr	r5, [r3, #0]
 8013036:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8013038:	4604      	mov	r4, r0
 801303a:	b9b3      	cbnz	r3, 801306a <srand+0x3a>
 801303c:	2018      	movs	r0, #24
 801303e:	f7ff ff3b 	bl	8012eb8 <malloc>
 8013042:	4602      	mov	r2, r0
 8013044:	6328      	str	r0, [r5, #48]	; 0x30
 8013046:	b920      	cbnz	r0, 8013052 <srand+0x22>
 8013048:	4b0b      	ldr	r3, [pc, #44]	; (8013078 <srand+0x48>)
 801304a:	480c      	ldr	r0, [pc, #48]	; (801307c <srand+0x4c>)
 801304c:	2146      	movs	r1, #70	; 0x46
 801304e:	f7ff fef3 	bl	8012e38 <__assert_func>
 8013052:	490b      	ldr	r1, [pc, #44]	; (8013080 <srand+0x50>)
 8013054:	4b0b      	ldr	r3, [pc, #44]	; (8013084 <srand+0x54>)
 8013056:	e9c0 1300 	strd	r1, r3, [r0]
 801305a:	4b0b      	ldr	r3, [pc, #44]	; (8013088 <srand+0x58>)
 801305c:	6083      	str	r3, [r0, #8]
 801305e:	230b      	movs	r3, #11
 8013060:	8183      	strh	r3, [r0, #12]
 8013062:	2100      	movs	r1, #0
 8013064:	2001      	movs	r0, #1
 8013066:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801306a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801306c:	2200      	movs	r2, #0
 801306e:	611c      	str	r4, [r3, #16]
 8013070:	615a      	str	r2, [r3, #20]
 8013072:	bd38      	pop	{r3, r4, r5, pc}
 8013074:	24000304 	.word	0x24000304
 8013078:	08016f9c 	.word	0x08016f9c
 801307c:	08016fb3 	.word	0x08016fb3
 8013080:	abcd330e 	.word	0xabcd330e
 8013084:	e66d1234 	.word	0xe66d1234
 8013088:	0005deec 	.word	0x0005deec

0801308c <rand>:
 801308c:	4b16      	ldr	r3, [pc, #88]	; (80130e8 <rand+0x5c>)
 801308e:	b510      	push	{r4, lr}
 8013090:	681c      	ldr	r4, [r3, #0]
 8013092:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013094:	b9b3      	cbnz	r3, 80130c4 <rand+0x38>
 8013096:	2018      	movs	r0, #24
 8013098:	f7ff ff0e 	bl	8012eb8 <malloc>
 801309c:	4602      	mov	r2, r0
 801309e:	6320      	str	r0, [r4, #48]	; 0x30
 80130a0:	b920      	cbnz	r0, 80130ac <rand+0x20>
 80130a2:	4b12      	ldr	r3, [pc, #72]	; (80130ec <rand+0x60>)
 80130a4:	4812      	ldr	r0, [pc, #72]	; (80130f0 <rand+0x64>)
 80130a6:	2152      	movs	r1, #82	; 0x52
 80130a8:	f7ff fec6 	bl	8012e38 <__assert_func>
 80130ac:	4911      	ldr	r1, [pc, #68]	; (80130f4 <rand+0x68>)
 80130ae:	4b12      	ldr	r3, [pc, #72]	; (80130f8 <rand+0x6c>)
 80130b0:	e9c0 1300 	strd	r1, r3, [r0]
 80130b4:	4b11      	ldr	r3, [pc, #68]	; (80130fc <rand+0x70>)
 80130b6:	6083      	str	r3, [r0, #8]
 80130b8:	230b      	movs	r3, #11
 80130ba:	8183      	strh	r3, [r0, #12]
 80130bc:	2100      	movs	r1, #0
 80130be:	2001      	movs	r0, #1
 80130c0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80130c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80130c6:	480e      	ldr	r0, [pc, #56]	; (8013100 <rand+0x74>)
 80130c8:	690b      	ldr	r3, [r1, #16]
 80130ca:	694c      	ldr	r4, [r1, #20]
 80130cc:	4a0d      	ldr	r2, [pc, #52]	; (8013104 <rand+0x78>)
 80130ce:	4358      	muls	r0, r3
 80130d0:	fb02 0004 	mla	r0, r2, r4, r0
 80130d4:	fba3 3202 	umull	r3, r2, r3, r2
 80130d8:	3301      	adds	r3, #1
 80130da:	eb40 0002 	adc.w	r0, r0, r2
 80130de:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80130e2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80130e6:	bd10      	pop	{r4, pc}
 80130e8:	24000304 	.word	0x24000304
 80130ec:	08016f9c 	.word	0x08016f9c
 80130f0:	08016fb3 	.word	0x08016fb3
 80130f4:	abcd330e 	.word	0xabcd330e
 80130f8:	e66d1234 	.word	0xe66d1234
 80130fc:	0005deec 	.word	0x0005deec
 8013100:	5851f42d 	.word	0x5851f42d
 8013104:	4c957f2d 	.word	0x4c957f2d

08013108 <_strtol_l.constprop.0>:
 8013108:	2b01      	cmp	r3, #1
 801310a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801310e:	d001      	beq.n	8013114 <_strtol_l.constprop.0+0xc>
 8013110:	2b24      	cmp	r3, #36	; 0x24
 8013112:	d906      	bls.n	8013122 <_strtol_l.constprop.0+0x1a>
 8013114:	f000 fa6e 	bl	80135f4 <__errno>
 8013118:	2316      	movs	r3, #22
 801311a:	6003      	str	r3, [r0, #0]
 801311c:	2000      	movs	r0, #0
 801311e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013122:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8013208 <_strtol_l.constprop.0+0x100>
 8013126:	460d      	mov	r5, r1
 8013128:	462e      	mov	r6, r5
 801312a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801312e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8013132:	f017 0708 	ands.w	r7, r7, #8
 8013136:	d1f7      	bne.n	8013128 <_strtol_l.constprop.0+0x20>
 8013138:	2c2d      	cmp	r4, #45	; 0x2d
 801313a:	d132      	bne.n	80131a2 <_strtol_l.constprop.0+0x9a>
 801313c:	782c      	ldrb	r4, [r5, #0]
 801313e:	2701      	movs	r7, #1
 8013140:	1cb5      	adds	r5, r6, #2
 8013142:	2b00      	cmp	r3, #0
 8013144:	d05b      	beq.n	80131fe <_strtol_l.constprop.0+0xf6>
 8013146:	2b10      	cmp	r3, #16
 8013148:	d109      	bne.n	801315e <_strtol_l.constprop.0+0x56>
 801314a:	2c30      	cmp	r4, #48	; 0x30
 801314c:	d107      	bne.n	801315e <_strtol_l.constprop.0+0x56>
 801314e:	782c      	ldrb	r4, [r5, #0]
 8013150:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8013154:	2c58      	cmp	r4, #88	; 0x58
 8013156:	d14d      	bne.n	80131f4 <_strtol_l.constprop.0+0xec>
 8013158:	786c      	ldrb	r4, [r5, #1]
 801315a:	2310      	movs	r3, #16
 801315c:	3502      	adds	r5, #2
 801315e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8013162:	f108 38ff 	add.w	r8, r8, #4294967295
 8013166:	f04f 0e00 	mov.w	lr, #0
 801316a:	fbb8 f9f3 	udiv	r9, r8, r3
 801316e:	4676      	mov	r6, lr
 8013170:	fb03 8a19 	mls	sl, r3, r9, r8
 8013174:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8013178:	f1bc 0f09 	cmp.w	ip, #9
 801317c:	d816      	bhi.n	80131ac <_strtol_l.constprop.0+0xa4>
 801317e:	4664      	mov	r4, ip
 8013180:	42a3      	cmp	r3, r4
 8013182:	dd24      	ble.n	80131ce <_strtol_l.constprop.0+0xc6>
 8013184:	f1be 3fff 	cmp.w	lr, #4294967295
 8013188:	d008      	beq.n	801319c <_strtol_l.constprop.0+0x94>
 801318a:	45b1      	cmp	r9, r6
 801318c:	d31c      	bcc.n	80131c8 <_strtol_l.constprop.0+0xc0>
 801318e:	d101      	bne.n	8013194 <_strtol_l.constprop.0+0x8c>
 8013190:	45a2      	cmp	sl, r4
 8013192:	db19      	blt.n	80131c8 <_strtol_l.constprop.0+0xc0>
 8013194:	fb06 4603 	mla	r6, r6, r3, r4
 8013198:	f04f 0e01 	mov.w	lr, #1
 801319c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80131a0:	e7e8      	b.n	8013174 <_strtol_l.constprop.0+0x6c>
 80131a2:	2c2b      	cmp	r4, #43	; 0x2b
 80131a4:	bf04      	itt	eq
 80131a6:	782c      	ldrbeq	r4, [r5, #0]
 80131a8:	1cb5      	addeq	r5, r6, #2
 80131aa:	e7ca      	b.n	8013142 <_strtol_l.constprop.0+0x3a>
 80131ac:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80131b0:	f1bc 0f19 	cmp.w	ip, #25
 80131b4:	d801      	bhi.n	80131ba <_strtol_l.constprop.0+0xb2>
 80131b6:	3c37      	subs	r4, #55	; 0x37
 80131b8:	e7e2      	b.n	8013180 <_strtol_l.constprop.0+0x78>
 80131ba:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80131be:	f1bc 0f19 	cmp.w	ip, #25
 80131c2:	d804      	bhi.n	80131ce <_strtol_l.constprop.0+0xc6>
 80131c4:	3c57      	subs	r4, #87	; 0x57
 80131c6:	e7db      	b.n	8013180 <_strtol_l.constprop.0+0x78>
 80131c8:	f04f 3eff 	mov.w	lr, #4294967295
 80131cc:	e7e6      	b.n	801319c <_strtol_l.constprop.0+0x94>
 80131ce:	f1be 3fff 	cmp.w	lr, #4294967295
 80131d2:	d105      	bne.n	80131e0 <_strtol_l.constprop.0+0xd8>
 80131d4:	2322      	movs	r3, #34	; 0x22
 80131d6:	6003      	str	r3, [r0, #0]
 80131d8:	4646      	mov	r6, r8
 80131da:	b942      	cbnz	r2, 80131ee <_strtol_l.constprop.0+0xe6>
 80131dc:	4630      	mov	r0, r6
 80131de:	e79e      	b.n	801311e <_strtol_l.constprop.0+0x16>
 80131e0:	b107      	cbz	r7, 80131e4 <_strtol_l.constprop.0+0xdc>
 80131e2:	4276      	negs	r6, r6
 80131e4:	2a00      	cmp	r2, #0
 80131e6:	d0f9      	beq.n	80131dc <_strtol_l.constprop.0+0xd4>
 80131e8:	f1be 0f00 	cmp.w	lr, #0
 80131ec:	d000      	beq.n	80131f0 <_strtol_l.constprop.0+0xe8>
 80131ee:	1e69      	subs	r1, r5, #1
 80131f0:	6011      	str	r1, [r2, #0]
 80131f2:	e7f3      	b.n	80131dc <_strtol_l.constprop.0+0xd4>
 80131f4:	2430      	movs	r4, #48	; 0x30
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d1b1      	bne.n	801315e <_strtol_l.constprop.0+0x56>
 80131fa:	2308      	movs	r3, #8
 80131fc:	e7af      	b.n	801315e <_strtol_l.constprop.0+0x56>
 80131fe:	2c30      	cmp	r4, #48	; 0x30
 8013200:	d0a5      	beq.n	801314e <_strtol_l.constprop.0+0x46>
 8013202:	230a      	movs	r3, #10
 8013204:	e7ab      	b.n	801315e <_strtol_l.constprop.0+0x56>
 8013206:	bf00      	nop
 8013208:	0801700c 	.word	0x0801700c

0801320c <strtol>:
 801320c:	4613      	mov	r3, r2
 801320e:	460a      	mov	r2, r1
 8013210:	4601      	mov	r1, r0
 8013212:	4802      	ldr	r0, [pc, #8]	; (801321c <strtol+0x10>)
 8013214:	6800      	ldr	r0, [r0, #0]
 8013216:	f7ff bf77 	b.w	8013108 <_strtol_l.constprop.0>
 801321a:	bf00      	nop
 801321c:	24000304 	.word	0x24000304

08013220 <std>:
 8013220:	2300      	movs	r3, #0
 8013222:	b510      	push	{r4, lr}
 8013224:	4604      	mov	r4, r0
 8013226:	e9c0 3300 	strd	r3, r3, [r0]
 801322a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801322e:	6083      	str	r3, [r0, #8]
 8013230:	8181      	strh	r1, [r0, #12]
 8013232:	6643      	str	r3, [r0, #100]	; 0x64
 8013234:	81c2      	strh	r2, [r0, #14]
 8013236:	6183      	str	r3, [r0, #24]
 8013238:	4619      	mov	r1, r3
 801323a:	2208      	movs	r2, #8
 801323c:	305c      	adds	r0, #92	; 0x5c
 801323e:	f000 f926 	bl	801348e <memset>
 8013242:	4b05      	ldr	r3, [pc, #20]	; (8013258 <std+0x38>)
 8013244:	6263      	str	r3, [r4, #36]	; 0x24
 8013246:	4b05      	ldr	r3, [pc, #20]	; (801325c <std+0x3c>)
 8013248:	62a3      	str	r3, [r4, #40]	; 0x28
 801324a:	4b05      	ldr	r3, [pc, #20]	; (8013260 <std+0x40>)
 801324c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801324e:	4b05      	ldr	r3, [pc, #20]	; (8013264 <std+0x44>)
 8013250:	6224      	str	r4, [r4, #32]
 8013252:	6323      	str	r3, [r4, #48]	; 0x30
 8013254:	bd10      	pop	{r4, pc}
 8013256:	bf00      	nop
 8013258:	080133b5 	.word	0x080133b5
 801325c:	080133d7 	.word	0x080133d7
 8013260:	0801340f 	.word	0x0801340f
 8013264:	08013433 	.word	0x08013433

08013268 <stdio_exit_handler>:
 8013268:	4a02      	ldr	r2, [pc, #8]	; (8013274 <stdio_exit_handler+0xc>)
 801326a:	4903      	ldr	r1, [pc, #12]	; (8013278 <stdio_exit_handler+0x10>)
 801326c:	4803      	ldr	r0, [pc, #12]	; (801327c <stdio_exit_handler+0x14>)
 801326e:	f000 b87b 	b.w	8013368 <_fwalk_sglue>
 8013272:	bf00      	nop
 8013274:	240002ac 	.word	0x240002ac
 8013278:	08013dd5 	.word	0x08013dd5
 801327c:	240002b8 	.word	0x240002b8

08013280 <cleanup_stdio>:
 8013280:	6841      	ldr	r1, [r0, #4]
 8013282:	4b0c      	ldr	r3, [pc, #48]	; (80132b4 <cleanup_stdio+0x34>)
 8013284:	4299      	cmp	r1, r3
 8013286:	b510      	push	{r4, lr}
 8013288:	4604      	mov	r4, r0
 801328a:	d001      	beq.n	8013290 <cleanup_stdio+0x10>
 801328c:	f000 fda2 	bl	8013dd4 <_fflush_r>
 8013290:	68a1      	ldr	r1, [r4, #8]
 8013292:	4b09      	ldr	r3, [pc, #36]	; (80132b8 <cleanup_stdio+0x38>)
 8013294:	4299      	cmp	r1, r3
 8013296:	d002      	beq.n	801329e <cleanup_stdio+0x1e>
 8013298:	4620      	mov	r0, r4
 801329a:	f000 fd9b 	bl	8013dd4 <_fflush_r>
 801329e:	68e1      	ldr	r1, [r4, #12]
 80132a0:	4b06      	ldr	r3, [pc, #24]	; (80132bc <cleanup_stdio+0x3c>)
 80132a2:	4299      	cmp	r1, r3
 80132a4:	d004      	beq.n	80132b0 <cleanup_stdio+0x30>
 80132a6:	4620      	mov	r0, r4
 80132a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80132ac:	f000 bd92 	b.w	8013dd4 <_fflush_r>
 80132b0:	bd10      	pop	{r4, pc}
 80132b2:	bf00      	nop
 80132b4:	24003648 	.word	0x24003648
 80132b8:	240036b0 	.word	0x240036b0
 80132bc:	24003718 	.word	0x24003718

080132c0 <global_stdio_init.part.0>:
 80132c0:	b510      	push	{r4, lr}
 80132c2:	4b0b      	ldr	r3, [pc, #44]	; (80132f0 <global_stdio_init.part.0+0x30>)
 80132c4:	4c0b      	ldr	r4, [pc, #44]	; (80132f4 <global_stdio_init.part.0+0x34>)
 80132c6:	4a0c      	ldr	r2, [pc, #48]	; (80132f8 <global_stdio_init.part.0+0x38>)
 80132c8:	601a      	str	r2, [r3, #0]
 80132ca:	4620      	mov	r0, r4
 80132cc:	2200      	movs	r2, #0
 80132ce:	2104      	movs	r1, #4
 80132d0:	f7ff ffa6 	bl	8013220 <std>
 80132d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80132d8:	2201      	movs	r2, #1
 80132da:	2109      	movs	r1, #9
 80132dc:	f7ff ffa0 	bl	8013220 <std>
 80132e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80132e4:	2202      	movs	r2, #2
 80132e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80132ea:	2112      	movs	r1, #18
 80132ec:	f7ff bf98 	b.w	8013220 <std>
 80132f0:	24003780 	.word	0x24003780
 80132f4:	24003648 	.word	0x24003648
 80132f8:	08013269 	.word	0x08013269

080132fc <__sfp_lock_acquire>:
 80132fc:	4801      	ldr	r0, [pc, #4]	; (8013304 <__sfp_lock_acquire+0x8>)
 80132fe:	f000 b9a3 	b.w	8013648 <__retarget_lock_acquire_recursive>
 8013302:	bf00      	nop
 8013304:	24003789 	.word	0x24003789

08013308 <__sfp_lock_release>:
 8013308:	4801      	ldr	r0, [pc, #4]	; (8013310 <__sfp_lock_release+0x8>)
 801330a:	f000 b99e 	b.w	801364a <__retarget_lock_release_recursive>
 801330e:	bf00      	nop
 8013310:	24003789 	.word	0x24003789

08013314 <__sinit>:
 8013314:	b510      	push	{r4, lr}
 8013316:	4604      	mov	r4, r0
 8013318:	f7ff fff0 	bl	80132fc <__sfp_lock_acquire>
 801331c:	6a23      	ldr	r3, [r4, #32]
 801331e:	b11b      	cbz	r3, 8013328 <__sinit+0x14>
 8013320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013324:	f7ff bff0 	b.w	8013308 <__sfp_lock_release>
 8013328:	4b04      	ldr	r3, [pc, #16]	; (801333c <__sinit+0x28>)
 801332a:	6223      	str	r3, [r4, #32]
 801332c:	4b04      	ldr	r3, [pc, #16]	; (8013340 <__sinit+0x2c>)
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	2b00      	cmp	r3, #0
 8013332:	d1f5      	bne.n	8013320 <__sinit+0xc>
 8013334:	f7ff ffc4 	bl	80132c0 <global_stdio_init.part.0>
 8013338:	e7f2      	b.n	8013320 <__sinit+0xc>
 801333a:	bf00      	nop
 801333c:	08013281 	.word	0x08013281
 8013340:	24003780 	.word	0x24003780

08013344 <fiprintf>:
 8013344:	b40e      	push	{r1, r2, r3}
 8013346:	b503      	push	{r0, r1, lr}
 8013348:	4601      	mov	r1, r0
 801334a:	ab03      	add	r3, sp, #12
 801334c:	4805      	ldr	r0, [pc, #20]	; (8013364 <fiprintf+0x20>)
 801334e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013352:	6800      	ldr	r0, [r0, #0]
 8013354:	9301      	str	r3, [sp, #4]
 8013356:	f000 fa0d 	bl	8013774 <_vfiprintf_r>
 801335a:	b002      	add	sp, #8
 801335c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013360:	b003      	add	sp, #12
 8013362:	4770      	bx	lr
 8013364:	24000304 	.word	0x24000304

08013368 <_fwalk_sglue>:
 8013368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801336c:	4607      	mov	r7, r0
 801336e:	4688      	mov	r8, r1
 8013370:	4614      	mov	r4, r2
 8013372:	2600      	movs	r6, #0
 8013374:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013378:	f1b9 0901 	subs.w	r9, r9, #1
 801337c:	d505      	bpl.n	801338a <_fwalk_sglue+0x22>
 801337e:	6824      	ldr	r4, [r4, #0]
 8013380:	2c00      	cmp	r4, #0
 8013382:	d1f7      	bne.n	8013374 <_fwalk_sglue+0xc>
 8013384:	4630      	mov	r0, r6
 8013386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801338a:	89ab      	ldrh	r3, [r5, #12]
 801338c:	2b01      	cmp	r3, #1
 801338e:	d907      	bls.n	80133a0 <_fwalk_sglue+0x38>
 8013390:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013394:	3301      	adds	r3, #1
 8013396:	d003      	beq.n	80133a0 <_fwalk_sglue+0x38>
 8013398:	4629      	mov	r1, r5
 801339a:	4638      	mov	r0, r7
 801339c:	47c0      	blx	r8
 801339e:	4306      	orrs	r6, r0
 80133a0:	3568      	adds	r5, #104	; 0x68
 80133a2:	e7e9      	b.n	8013378 <_fwalk_sglue+0x10>

080133a4 <putchar>:
 80133a4:	4b02      	ldr	r3, [pc, #8]	; (80133b0 <putchar+0xc>)
 80133a6:	4601      	mov	r1, r0
 80133a8:	6818      	ldr	r0, [r3, #0]
 80133aa:	6882      	ldr	r2, [r0, #8]
 80133ac:	f000 bd3a 	b.w	8013e24 <_putc_r>
 80133b0:	24000304 	.word	0x24000304

080133b4 <__sread>:
 80133b4:	b510      	push	{r4, lr}
 80133b6:	460c      	mov	r4, r1
 80133b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133bc:	f000 f8e6 	bl	801358c <_read_r>
 80133c0:	2800      	cmp	r0, #0
 80133c2:	bfab      	itete	ge
 80133c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80133c6:	89a3      	ldrhlt	r3, [r4, #12]
 80133c8:	181b      	addge	r3, r3, r0
 80133ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80133ce:	bfac      	ite	ge
 80133d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80133d2:	81a3      	strhlt	r3, [r4, #12]
 80133d4:	bd10      	pop	{r4, pc}

080133d6 <__swrite>:
 80133d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133da:	461f      	mov	r7, r3
 80133dc:	898b      	ldrh	r3, [r1, #12]
 80133de:	05db      	lsls	r3, r3, #23
 80133e0:	4605      	mov	r5, r0
 80133e2:	460c      	mov	r4, r1
 80133e4:	4616      	mov	r6, r2
 80133e6:	d505      	bpl.n	80133f4 <__swrite+0x1e>
 80133e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133ec:	2302      	movs	r3, #2
 80133ee:	2200      	movs	r2, #0
 80133f0:	f000 f8ba 	bl	8013568 <_lseek_r>
 80133f4:	89a3      	ldrh	r3, [r4, #12]
 80133f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80133fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80133fe:	81a3      	strh	r3, [r4, #12]
 8013400:	4632      	mov	r2, r6
 8013402:	463b      	mov	r3, r7
 8013404:	4628      	mov	r0, r5
 8013406:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801340a:	f000 b8e1 	b.w	80135d0 <_write_r>

0801340e <__sseek>:
 801340e:	b510      	push	{r4, lr}
 8013410:	460c      	mov	r4, r1
 8013412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013416:	f000 f8a7 	bl	8013568 <_lseek_r>
 801341a:	1c43      	adds	r3, r0, #1
 801341c:	89a3      	ldrh	r3, [r4, #12]
 801341e:	bf15      	itete	ne
 8013420:	6560      	strne	r0, [r4, #84]	; 0x54
 8013422:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013426:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801342a:	81a3      	strheq	r3, [r4, #12]
 801342c:	bf18      	it	ne
 801342e:	81a3      	strhne	r3, [r4, #12]
 8013430:	bd10      	pop	{r4, pc}

08013432 <__sclose>:
 8013432:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013436:	f000 b887 	b.w	8013548 <_close_r>

0801343a <memcmp>:
 801343a:	b510      	push	{r4, lr}
 801343c:	3901      	subs	r1, #1
 801343e:	4402      	add	r2, r0
 8013440:	4290      	cmp	r0, r2
 8013442:	d101      	bne.n	8013448 <memcmp+0xe>
 8013444:	2000      	movs	r0, #0
 8013446:	e005      	b.n	8013454 <memcmp+0x1a>
 8013448:	7803      	ldrb	r3, [r0, #0]
 801344a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801344e:	42a3      	cmp	r3, r4
 8013450:	d001      	beq.n	8013456 <memcmp+0x1c>
 8013452:	1b18      	subs	r0, r3, r4
 8013454:	bd10      	pop	{r4, pc}
 8013456:	3001      	adds	r0, #1
 8013458:	e7f2      	b.n	8013440 <memcmp+0x6>

0801345a <memmove>:
 801345a:	4288      	cmp	r0, r1
 801345c:	b510      	push	{r4, lr}
 801345e:	eb01 0402 	add.w	r4, r1, r2
 8013462:	d902      	bls.n	801346a <memmove+0x10>
 8013464:	4284      	cmp	r4, r0
 8013466:	4623      	mov	r3, r4
 8013468:	d807      	bhi.n	801347a <memmove+0x20>
 801346a:	1e43      	subs	r3, r0, #1
 801346c:	42a1      	cmp	r1, r4
 801346e:	d008      	beq.n	8013482 <memmove+0x28>
 8013470:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013474:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013478:	e7f8      	b.n	801346c <memmove+0x12>
 801347a:	4402      	add	r2, r0
 801347c:	4601      	mov	r1, r0
 801347e:	428a      	cmp	r2, r1
 8013480:	d100      	bne.n	8013484 <memmove+0x2a>
 8013482:	bd10      	pop	{r4, pc}
 8013484:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013488:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801348c:	e7f7      	b.n	801347e <memmove+0x24>

0801348e <memset>:
 801348e:	4402      	add	r2, r0
 8013490:	4603      	mov	r3, r0
 8013492:	4293      	cmp	r3, r2
 8013494:	d100      	bne.n	8013498 <memset+0xa>
 8013496:	4770      	bx	lr
 8013498:	f803 1b01 	strb.w	r1, [r3], #1
 801349c:	e7f9      	b.n	8013492 <memset+0x4>

0801349e <strchr>:
 801349e:	b2c9      	uxtb	r1, r1
 80134a0:	4603      	mov	r3, r0
 80134a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80134a6:	b11a      	cbz	r2, 80134b0 <strchr+0x12>
 80134a8:	428a      	cmp	r2, r1
 80134aa:	d1f9      	bne.n	80134a0 <strchr+0x2>
 80134ac:	4618      	mov	r0, r3
 80134ae:	4770      	bx	lr
 80134b0:	2900      	cmp	r1, #0
 80134b2:	bf18      	it	ne
 80134b4:	2300      	movne	r3, #0
 80134b6:	e7f9      	b.n	80134ac <strchr+0xe>

080134b8 <strdup>:
 80134b8:	4b02      	ldr	r3, [pc, #8]	; (80134c4 <strdup+0xc>)
 80134ba:	4601      	mov	r1, r0
 80134bc:	6818      	ldr	r0, [r3, #0]
 80134be:	f000 b803 	b.w	80134c8 <_strdup_r>
 80134c2:	bf00      	nop
 80134c4:	24000304 	.word	0x24000304

080134c8 <_strdup_r>:
 80134c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80134ca:	4604      	mov	r4, r0
 80134cc:	4608      	mov	r0, r1
 80134ce:	460d      	mov	r5, r1
 80134d0:	f7ec ff7e 	bl	80003d0 <strlen>
 80134d4:	1c42      	adds	r2, r0, #1
 80134d6:	4611      	mov	r1, r2
 80134d8:	4620      	mov	r0, r4
 80134da:	9201      	str	r2, [sp, #4]
 80134dc:	f7ff fd1c 	bl	8012f18 <_malloc_r>
 80134e0:	4604      	mov	r4, r0
 80134e2:	b118      	cbz	r0, 80134ec <_strdup_r+0x24>
 80134e4:	9a01      	ldr	r2, [sp, #4]
 80134e6:	4629      	mov	r1, r5
 80134e8:	f000 f8b8 	bl	801365c <memcpy>
 80134ec:	4620      	mov	r0, r4
 80134ee:	b003      	add	sp, #12
 80134f0:	bd30      	pop	{r4, r5, pc}

080134f2 <strncmp>:
 80134f2:	b510      	push	{r4, lr}
 80134f4:	b16a      	cbz	r2, 8013512 <strncmp+0x20>
 80134f6:	3901      	subs	r1, #1
 80134f8:	1884      	adds	r4, r0, r2
 80134fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80134fe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013502:	429a      	cmp	r2, r3
 8013504:	d103      	bne.n	801350e <strncmp+0x1c>
 8013506:	42a0      	cmp	r0, r4
 8013508:	d001      	beq.n	801350e <strncmp+0x1c>
 801350a:	2a00      	cmp	r2, #0
 801350c:	d1f5      	bne.n	80134fa <strncmp+0x8>
 801350e:	1ad0      	subs	r0, r2, r3
 8013510:	bd10      	pop	{r4, pc}
 8013512:	4610      	mov	r0, r2
 8013514:	e7fc      	b.n	8013510 <strncmp+0x1e>

08013516 <strrchr>:
 8013516:	b513      	push	{r0, r1, r4, lr}
 8013518:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 801351c:	4603      	mov	r3, r0
 801351e:	d110      	bne.n	8013542 <strrchr+0x2c>
 8013520:	b002      	add	sp, #8
 8013522:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013526:	f7ff bfba 	b.w	801349e <strchr>
 801352a:	1c43      	adds	r3, r0, #1
 801352c:	4604      	mov	r4, r0
 801352e:	4618      	mov	r0, r3
 8013530:	9101      	str	r1, [sp, #4]
 8013532:	f7ff ffb4 	bl	801349e <strchr>
 8013536:	9901      	ldr	r1, [sp, #4]
 8013538:	2800      	cmp	r0, #0
 801353a:	d1f6      	bne.n	801352a <strrchr+0x14>
 801353c:	4620      	mov	r0, r4
 801353e:	b002      	add	sp, #8
 8013540:	bd10      	pop	{r4, pc}
 8013542:	2400      	movs	r4, #0
 8013544:	e7f3      	b.n	801352e <strrchr+0x18>
	...

08013548 <_close_r>:
 8013548:	b538      	push	{r3, r4, r5, lr}
 801354a:	4d06      	ldr	r5, [pc, #24]	; (8013564 <_close_r+0x1c>)
 801354c:	2300      	movs	r3, #0
 801354e:	4604      	mov	r4, r0
 8013550:	4608      	mov	r0, r1
 8013552:	602b      	str	r3, [r5, #0]
 8013554:	f7fa fa36 	bl	800d9c4 <_close>
 8013558:	1c43      	adds	r3, r0, #1
 801355a:	d102      	bne.n	8013562 <_close_r+0x1a>
 801355c:	682b      	ldr	r3, [r5, #0]
 801355e:	b103      	cbz	r3, 8013562 <_close_r+0x1a>
 8013560:	6023      	str	r3, [r4, #0]
 8013562:	bd38      	pop	{r3, r4, r5, pc}
 8013564:	24003784 	.word	0x24003784

08013568 <_lseek_r>:
 8013568:	b538      	push	{r3, r4, r5, lr}
 801356a:	4d07      	ldr	r5, [pc, #28]	; (8013588 <_lseek_r+0x20>)
 801356c:	4604      	mov	r4, r0
 801356e:	4608      	mov	r0, r1
 8013570:	4611      	mov	r1, r2
 8013572:	2200      	movs	r2, #0
 8013574:	602a      	str	r2, [r5, #0]
 8013576:	461a      	mov	r2, r3
 8013578:	f7fa fa4b 	bl	800da12 <_lseek>
 801357c:	1c43      	adds	r3, r0, #1
 801357e:	d102      	bne.n	8013586 <_lseek_r+0x1e>
 8013580:	682b      	ldr	r3, [r5, #0]
 8013582:	b103      	cbz	r3, 8013586 <_lseek_r+0x1e>
 8013584:	6023      	str	r3, [r4, #0]
 8013586:	bd38      	pop	{r3, r4, r5, pc}
 8013588:	24003784 	.word	0x24003784

0801358c <_read_r>:
 801358c:	b538      	push	{r3, r4, r5, lr}
 801358e:	4d07      	ldr	r5, [pc, #28]	; (80135ac <_read_r+0x20>)
 8013590:	4604      	mov	r4, r0
 8013592:	4608      	mov	r0, r1
 8013594:	4611      	mov	r1, r2
 8013596:	2200      	movs	r2, #0
 8013598:	602a      	str	r2, [r5, #0]
 801359a:	461a      	mov	r2, r3
 801359c:	f7fa f9dc 	bl	800d958 <_read>
 80135a0:	1c43      	adds	r3, r0, #1
 80135a2:	d102      	bne.n	80135aa <_read_r+0x1e>
 80135a4:	682b      	ldr	r3, [r5, #0]
 80135a6:	b103      	cbz	r3, 80135aa <_read_r+0x1e>
 80135a8:	6023      	str	r3, [r4, #0]
 80135aa:	bd38      	pop	{r3, r4, r5, pc}
 80135ac:	24003784 	.word	0x24003784

080135b0 <_sbrk_r>:
 80135b0:	b538      	push	{r3, r4, r5, lr}
 80135b2:	4d06      	ldr	r5, [pc, #24]	; (80135cc <_sbrk_r+0x1c>)
 80135b4:	2300      	movs	r3, #0
 80135b6:	4604      	mov	r4, r0
 80135b8:	4608      	mov	r0, r1
 80135ba:	602b      	str	r3, [r5, #0]
 80135bc:	f7fa fa36 	bl	800da2c <_sbrk>
 80135c0:	1c43      	adds	r3, r0, #1
 80135c2:	d102      	bne.n	80135ca <_sbrk_r+0x1a>
 80135c4:	682b      	ldr	r3, [r5, #0]
 80135c6:	b103      	cbz	r3, 80135ca <_sbrk_r+0x1a>
 80135c8:	6023      	str	r3, [r4, #0]
 80135ca:	bd38      	pop	{r3, r4, r5, pc}
 80135cc:	24003784 	.word	0x24003784

080135d0 <_write_r>:
 80135d0:	b538      	push	{r3, r4, r5, lr}
 80135d2:	4d07      	ldr	r5, [pc, #28]	; (80135f0 <_write_r+0x20>)
 80135d4:	4604      	mov	r4, r0
 80135d6:	4608      	mov	r0, r1
 80135d8:	4611      	mov	r1, r2
 80135da:	2200      	movs	r2, #0
 80135dc:	602a      	str	r2, [r5, #0]
 80135de:	461a      	mov	r2, r3
 80135e0:	f7fa f9d8 	bl	800d994 <_write>
 80135e4:	1c43      	adds	r3, r0, #1
 80135e6:	d102      	bne.n	80135ee <_write_r+0x1e>
 80135e8:	682b      	ldr	r3, [r5, #0]
 80135ea:	b103      	cbz	r3, 80135ee <_write_r+0x1e>
 80135ec:	6023      	str	r3, [r4, #0]
 80135ee:	bd38      	pop	{r3, r4, r5, pc}
 80135f0:	24003784 	.word	0x24003784

080135f4 <__errno>:
 80135f4:	4b01      	ldr	r3, [pc, #4]	; (80135fc <__errno+0x8>)
 80135f6:	6818      	ldr	r0, [r3, #0]
 80135f8:	4770      	bx	lr
 80135fa:	bf00      	nop
 80135fc:	24000304 	.word	0x24000304

08013600 <__libc_init_array>:
 8013600:	b570      	push	{r4, r5, r6, lr}
 8013602:	4d0d      	ldr	r5, [pc, #52]	; (8013638 <__libc_init_array+0x38>)
 8013604:	4c0d      	ldr	r4, [pc, #52]	; (801363c <__libc_init_array+0x3c>)
 8013606:	1b64      	subs	r4, r4, r5
 8013608:	10a4      	asrs	r4, r4, #2
 801360a:	2600      	movs	r6, #0
 801360c:	42a6      	cmp	r6, r4
 801360e:	d109      	bne.n	8013624 <__libc_init_array+0x24>
 8013610:	4d0b      	ldr	r5, [pc, #44]	; (8013640 <__libc_init_array+0x40>)
 8013612:	4c0c      	ldr	r4, [pc, #48]	; (8013644 <__libc_init_array+0x44>)
 8013614:	f000 fd98 	bl	8014148 <_init>
 8013618:	1b64      	subs	r4, r4, r5
 801361a:	10a4      	asrs	r4, r4, #2
 801361c:	2600      	movs	r6, #0
 801361e:	42a6      	cmp	r6, r4
 8013620:	d105      	bne.n	801362e <__libc_init_array+0x2e>
 8013622:	bd70      	pop	{r4, r5, r6, pc}
 8013624:	f855 3b04 	ldr.w	r3, [r5], #4
 8013628:	4798      	blx	r3
 801362a:	3601      	adds	r6, #1
 801362c:	e7ee      	b.n	801360c <__libc_init_array+0xc>
 801362e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013632:	4798      	blx	r3
 8013634:	3601      	adds	r6, #1
 8013636:	e7f2      	b.n	801361e <__libc_init_array+0x1e>
 8013638:	08017148 	.word	0x08017148
 801363c:	08017148 	.word	0x08017148
 8013640:	08017148 	.word	0x08017148
 8013644:	0801714c 	.word	0x0801714c

08013648 <__retarget_lock_acquire_recursive>:
 8013648:	4770      	bx	lr

0801364a <__retarget_lock_release_recursive>:
 801364a:	4770      	bx	lr

0801364c <strcpy>:
 801364c:	4603      	mov	r3, r0
 801364e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013652:	f803 2b01 	strb.w	r2, [r3], #1
 8013656:	2a00      	cmp	r2, #0
 8013658:	d1f9      	bne.n	801364e <strcpy+0x2>
 801365a:	4770      	bx	lr

0801365c <memcpy>:
 801365c:	440a      	add	r2, r1
 801365e:	4291      	cmp	r1, r2
 8013660:	f100 33ff 	add.w	r3, r0, #4294967295
 8013664:	d100      	bne.n	8013668 <memcpy+0xc>
 8013666:	4770      	bx	lr
 8013668:	b510      	push	{r4, lr}
 801366a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801366e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013672:	4291      	cmp	r1, r2
 8013674:	d1f9      	bne.n	801366a <memcpy+0xe>
 8013676:	bd10      	pop	{r4, pc}

08013678 <abort>:
 8013678:	b508      	push	{r3, lr}
 801367a:	2006      	movs	r0, #6
 801367c:	f000 fcc4 	bl	8014008 <raise>
 8013680:	2001      	movs	r0, #1
 8013682:	f7fa f95f 	bl	800d944 <_exit>
	...

08013688 <_free_r>:
 8013688:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801368a:	2900      	cmp	r1, #0
 801368c:	d044      	beq.n	8013718 <_free_r+0x90>
 801368e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013692:	9001      	str	r0, [sp, #4]
 8013694:	2b00      	cmp	r3, #0
 8013696:	f1a1 0404 	sub.w	r4, r1, #4
 801369a:	bfb8      	it	lt
 801369c:	18e4      	addlt	r4, r4, r3
 801369e:	f7ff fcbb 	bl	8013018 <__malloc_lock>
 80136a2:	4a1e      	ldr	r2, [pc, #120]	; (801371c <_free_r+0x94>)
 80136a4:	9801      	ldr	r0, [sp, #4]
 80136a6:	6813      	ldr	r3, [r2, #0]
 80136a8:	b933      	cbnz	r3, 80136b8 <_free_r+0x30>
 80136aa:	6063      	str	r3, [r4, #4]
 80136ac:	6014      	str	r4, [r2, #0]
 80136ae:	b003      	add	sp, #12
 80136b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80136b4:	f7ff bcb6 	b.w	8013024 <__malloc_unlock>
 80136b8:	42a3      	cmp	r3, r4
 80136ba:	d908      	bls.n	80136ce <_free_r+0x46>
 80136bc:	6825      	ldr	r5, [r4, #0]
 80136be:	1961      	adds	r1, r4, r5
 80136c0:	428b      	cmp	r3, r1
 80136c2:	bf01      	itttt	eq
 80136c4:	6819      	ldreq	r1, [r3, #0]
 80136c6:	685b      	ldreq	r3, [r3, #4]
 80136c8:	1949      	addeq	r1, r1, r5
 80136ca:	6021      	streq	r1, [r4, #0]
 80136cc:	e7ed      	b.n	80136aa <_free_r+0x22>
 80136ce:	461a      	mov	r2, r3
 80136d0:	685b      	ldr	r3, [r3, #4]
 80136d2:	b10b      	cbz	r3, 80136d8 <_free_r+0x50>
 80136d4:	42a3      	cmp	r3, r4
 80136d6:	d9fa      	bls.n	80136ce <_free_r+0x46>
 80136d8:	6811      	ldr	r1, [r2, #0]
 80136da:	1855      	adds	r5, r2, r1
 80136dc:	42a5      	cmp	r5, r4
 80136de:	d10b      	bne.n	80136f8 <_free_r+0x70>
 80136e0:	6824      	ldr	r4, [r4, #0]
 80136e2:	4421      	add	r1, r4
 80136e4:	1854      	adds	r4, r2, r1
 80136e6:	42a3      	cmp	r3, r4
 80136e8:	6011      	str	r1, [r2, #0]
 80136ea:	d1e0      	bne.n	80136ae <_free_r+0x26>
 80136ec:	681c      	ldr	r4, [r3, #0]
 80136ee:	685b      	ldr	r3, [r3, #4]
 80136f0:	6053      	str	r3, [r2, #4]
 80136f2:	440c      	add	r4, r1
 80136f4:	6014      	str	r4, [r2, #0]
 80136f6:	e7da      	b.n	80136ae <_free_r+0x26>
 80136f8:	d902      	bls.n	8013700 <_free_r+0x78>
 80136fa:	230c      	movs	r3, #12
 80136fc:	6003      	str	r3, [r0, #0]
 80136fe:	e7d6      	b.n	80136ae <_free_r+0x26>
 8013700:	6825      	ldr	r5, [r4, #0]
 8013702:	1961      	adds	r1, r4, r5
 8013704:	428b      	cmp	r3, r1
 8013706:	bf04      	itt	eq
 8013708:	6819      	ldreq	r1, [r3, #0]
 801370a:	685b      	ldreq	r3, [r3, #4]
 801370c:	6063      	str	r3, [r4, #4]
 801370e:	bf04      	itt	eq
 8013710:	1949      	addeq	r1, r1, r5
 8013712:	6021      	streq	r1, [r4, #0]
 8013714:	6054      	str	r4, [r2, #4]
 8013716:	e7ca      	b.n	80136ae <_free_r+0x26>
 8013718:	b003      	add	sp, #12
 801371a:	bd30      	pop	{r4, r5, pc}
 801371c:	24003640 	.word	0x24003640

08013720 <__sfputc_r>:
 8013720:	6893      	ldr	r3, [r2, #8]
 8013722:	3b01      	subs	r3, #1
 8013724:	2b00      	cmp	r3, #0
 8013726:	b410      	push	{r4}
 8013728:	6093      	str	r3, [r2, #8]
 801372a:	da08      	bge.n	801373e <__sfputc_r+0x1e>
 801372c:	6994      	ldr	r4, [r2, #24]
 801372e:	42a3      	cmp	r3, r4
 8013730:	db01      	blt.n	8013736 <__sfputc_r+0x16>
 8013732:	290a      	cmp	r1, #10
 8013734:	d103      	bne.n	801373e <__sfputc_r+0x1e>
 8013736:	f85d 4b04 	ldr.w	r4, [sp], #4
 801373a:	f000 bba7 	b.w	8013e8c <__swbuf_r>
 801373e:	6813      	ldr	r3, [r2, #0]
 8013740:	1c58      	adds	r0, r3, #1
 8013742:	6010      	str	r0, [r2, #0]
 8013744:	7019      	strb	r1, [r3, #0]
 8013746:	4608      	mov	r0, r1
 8013748:	f85d 4b04 	ldr.w	r4, [sp], #4
 801374c:	4770      	bx	lr

0801374e <__sfputs_r>:
 801374e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013750:	4606      	mov	r6, r0
 8013752:	460f      	mov	r7, r1
 8013754:	4614      	mov	r4, r2
 8013756:	18d5      	adds	r5, r2, r3
 8013758:	42ac      	cmp	r4, r5
 801375a:	d101      	bne.n	8013760 <__sfputs_r+0x12>
 801375c:	2000      	movs	r0, #0
 801375e:	e007      	b.n	8013770 <__sfputs_r+0x22>
 8013760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013764:	463a      	mov	r2, r7
 8013766:	4630      	mov	r0, r6
 8013768:	f7ff ffda 	bl	8013720 <__sfputc_r>
 801376c:	1c43      	adds	r3, r0, #1
 801376e:	d1f3      	bne.n	8013758 <__sfputs_r+0xa>
 8013770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013774 <_vfiprintf_r>:
 8013774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013778:	460d      	mov	r5, r1
 801377a:	b09d      	sub	sp, #116	; 0x74
 801377c:	4614      	mov	r4, r2
 801377e:	4698      	mov	r8, r3
 8013780:	4606      	mov	r6, r0
 8013782:	b118      	cbz	r0, 801378c <_vfiprintf_r+0x18>
 8013784:	6a03      	ldr	r3, [r0, #32]
 8013786:	b90b      	cbnz	r3, 801378c <_vfiprintf_r+0x18>
 8013788:	f7ff fdc4 	bl	8013314 <__sinit>
 801378c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801378e:	07d9      	lsls	r1, r3, #31
 8013790:	d405      	bmi.n	801379e <_vfiprintf_r+0x2a>
 8013792:	89ab      	ldrh	r3, [r5, #12]
 8013794:	059a      	lsls	r2, r3, #22
 8013796:	d402      	bmi.n	801379e <_vfiprintf_r+0x2a>
 8013798:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801379a:	f7ff ff55 	bl	8013648 <__retarget_lock_acquire_recursive>
 801379e:	89ab      	ldrh	r3, [r5, #12]
 80137a0:	071b      	lsls	r3, r3, #28
 80137a2:	d501      	bpl.n	80137a8 <_vfiprintf_r+0x34>
 80137a4:	692b      	ldr	r3, [r5, #16]
 80137a6:	b99b      	cbnz	r3, 80137d0 <_vfiprintf_r+0x5c>
 80137a8:	4629      	mov	r1, r5
 80137aa:	4630      	mov	r0, r6
 80137ac:	f000 fbac 	bl	8013f08 <__swsetup_r>
 80137b0:	b170      	cbz	r0, 80137d0 <_vfiprintf_r+0x5c>
 80137b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80137b4:	07dc      	lsls	r4, r3, #31
 80137b6:	d504      	bpl.n	80137c2 <_vfiprintf_r+0x4e>
 80137b8:	f04f 30ff 	mov.w	r0, #4294967295
 80137bc:	b01d      	add	sp, #116	; 0x74
 80137be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137c2:	89ab      	ldrh	r3, [r5, #12]
 80137c4:	0598      	lsls	r0, r3, #22
 80137c6:	d4f7      	bmi.n	80137b8 <_vfiprintf_r+0x44>
 80137c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80137ca:	f7ff ff3e 	bl	801364a <__retarget_lock_release_recursive>
 80137ce:	e7f3      	b.n	80137b8 <_vfiprintf_r+0x44>
 80137d0:	2300      	movs	r3, #0
 80137d2:	9309      	str	r3, [sp, #36]	; 0x24
 80137d4:	2320      	movs	r3, #32
 80137d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80137da:	f8cd 800c 	str.w	r8, [sp, #12]
 80137de:	2330      	movs	r3, #48	; 0x30
 80137e0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8013994 <_vfiprintf_r+0x220>
 80137e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80137e8:	f04f 0901 	mov.w	r9, #1
 80137ec:	4623      	mov	r3, r4
 80137ee:	469a      	mov	sl, r3
 80137f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80137f4:	b10a      	cbz	r2, 80137fa <_vfiprintf_r+0x86>
 80137f6:	2a25      	cmp	r2, #37	; 0x25
 80137f8:	d1f9      	bne.n	80137ee <_vfiprintf_r+0x7a>
 80137fa:	ebba 0b04 	subs.w	fp, sl, r4
 80137fe:	d00b      	beq.n	8013818 <_vfiprintf_r+0xa4>
 8013800:	465b      	mov	r3, fp
 8013802:	4622      	mov	r2, r4
 8013804:	4629      	mov	r1, r5
 8013806:	4630      	mov	r0, r6
 8013808:	f7ff ffa1 	bl	801374e <__sfputs_r>
 801380c:	3001      	adds	r0, #1
 801380e:	f000 80a9 	beq.w	8013964 <_vfiprintf_r+0x1f0>
 8013812:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013814:	445a      	add	r2, fp
 8013816:	9209      	str	r2, [sp, #36]	; 0x24
 8013818:	f89a 3000 	ldrb.w	r3, [sl]
 801381c:	2b00      	cmp	r3, #0
 801381e:	f000 80a1 	beq.w	8013964 <_vfiprintf_r+0x1f0>
 8013822:	2300      	movs	r3, #0
 8013824:	f04f 32ff 	mov.w	r2, #4294967295
 8013828:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801382c:	f10a 0a01 	add.w	sl, sl, #1
 8013830:	9304      	str	r3, [sp, #16]
 8013832:	9307      	str	r3, [sp, #28]
 8013834:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013838:	931a      	str	r3, [sp, #104]	; 0x68
 801383a:	4654      	mov	r4, sl
 801383c:	2205      	movs	r2, #5
 801383e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013842:	4854      	ldr	r0, [pc, #336]	; (8013994 <_vfiprintf_r+0x220>)
 8013844:	f7ec fd74 	bl	8000330 <memchr>
 8013848:	9a04      	ldr	r2, [sp, #16]
 801384a:	b9d8      	cbnz	r0, 8013884 <_vfiprintf_r+0x110>
 801384c:	06d1      	lsls	r1, r2, #27
 801384e:	bf44      	itt	mi
 8013850:	2320      	movmi	r3, #32
 8013852:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013856:	0713      	lsls	r3, r2, #28
 8013858:	bf44      	itt	mi
 801385a:	232b      	movmi	r3, #43	; 0x2b
 801385c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013860:	f89a 3000 	ldrb.w	r3, [sl]
 8013864:	2b2a      	cmp	r3, #42	; 0x2a
 8013866:	d015      	beq.n	8013894 <_vfiprintf_r+0x120>
 8013868:	9a07      	ldr	r2, [sp, #28]
 801386a:	4654      	mov	r4, sl
 801386c:	2000      	movs	r0, #0
 801386e:	f04f 0c0a 	mov.w	ip, #10
 8013872:	4621      	mov	r1, r4
 8013874:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013878:	3b30      	subs	r3, #48	; 0x30
 801387a:	2b09      	cmp	r3, #9
 801387c:	d94d      	bls.n	801391a <_vfiprintf_r+0x1a6>
 801387e:	b1b0      	cbz	r0, 80138ae <_vfiprintf_r+0x13a>
 8013880:	9207      	str	r2, [sp, #28]
 8013882:	e014      	b.n	80138ae <_vfiprintf_r+0x13a>
 8013884:	eba0 0308 	sub.w	r3, r0, r8
 8013888:	fa09 f303 	lsl.w	r3, r9, r3
 801388c:	4313      	orrs	r3, r2
 801388e:	9304      	str	r3, [sp, #16]
 8013890:	46a2      	mov	sl, r4
 8013892:	e7d2      	b.n	801383a <_vfiprintf_r+0xc6>
 8013894:	9b03      	ldr	r3, [sp, #12]
 8013896:	1d19      	adds	r1, r3, #4
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	9103      	str	r1, [sp, #12]
 801389c:	2b00      	cmp	r3, #0
 801389e:	bfbb      	ittet	lt
 80138a0:	425b      	neglt	r3, r3
 80138a2:	f042 0202 	orrlt.w	r2, r2, #2
 80138a6:	9307      	strge	r3, [sp, #28]
 80138a8:	9307      	strlt	r3, [sp, #28]
 80138aa:	bfb8      	it	lt
 80138ac:	9204      	strlt	r2, [sp, #16]
 80138ae:	7823      	ldrb	r3, [r4, #0]
 80138b0:	2b2e      	cmp	r3, #46	; 0x2e
 80138b2:	d10c      	bne.n	80138ce <_vfiprintf_r+0x15a>
 80138b4:	7863      	ldrb	r3, [r4, #1]
 80138b6:	2b2a      	cmp	r3, #42	; 0x2a
 80138b8:	d134      	bne.n	8013924 <_vfiprintf_r+0x1b0>
 80138ba:	9b03      	ldr	r3, [sp, #12]
 80138bc:	1d1a      	adds	r2, r3, #4
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	9203      	str	r2, [sp, #12]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	bfb8      	it	lt
 80138c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80138ca:	3402      	adds	r4, #2
 80138cc:	9305      	str	r3, [sp, #20]
 80138ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80139a4 <_vfiprintf_r+0x230>
 80138d2:	7821      	ldrb	r1, [r4, #0]
 80138d4:	2203      	movs	r2, #3
 80138d6:	4650      	mov	r0, sl
 80138d8:	f7ec fd2a 	bl	8000330 <memchr>
 80138dc:	b138      	cbz	r0, 80138ee <_vfiprintf_r+0x17a>
 80138de:	9b04      	ldr	r3, [sp, #16]
 80138e0:	eba0 000a 	sub.w	r0, r0, sl
 80138e4:	2240      	movs	r2, #64	; 0x40
 80138e6:	4082      	lsls	r2, r0
 80138e8:	4313      	orrs	r3, r2
 80138ea:	3401      	adds	r4, #1
 80138ec:	9304      	str	r3, [sp, #16]
 80138ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138f2:	4829      	ldr	r0, [pc, #164]	; (8013998 <_vfiprintf_r+0x224>)
 80138f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80138f8:	2206      	movs	r2, #6
 80138fa:	f7ec fd19 	bl	8000330 <memchr>
 80138fe:	2800      	cmp	r0, #0
 8013900:	d03f      	beq.n	8013982 <_vfiprintf_r+0x20e>
 8013902:	4b26      	ldr	r3, [pc, #152]	; (801399c <_vfiprintf_r+0x228>)
 8013904:	bb1b      	cbnz	r3, 801394e <_vfiprintf_r+0x1da>
 8013906:	9b03      	ldr	r3, [sp, #12]
 8013908:	3307      	adds	r3, #7
 801390a:	f023 0307 	bic.w	r3, r3, #7
 801390e:	3308      	adds	r3, #8
 8013910:	9303      	str	r3, [sp, #12]
 8013912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013914:	443b      	add	r3, r7
 8013916:	9309      	str	r3, [sp, #36]	; 0x24
 8013918:	e768      	b.n	80137ec <_vfiprintf_r+0x78>
 801391a:	fb0c 3202 	mla	r2, ip, r2, r3
 801391e:	460c      	mov	r4, r1
 8013920:	2001      	movs	r0, #1
 8013922:	e7a6      	b.n	8013872 <_vfiprintf_r+0xfe>
 8013924:	2300      	movs	r3, #0
 8013926:	3401      	adds	r4, #1
 8013928:	9305      	str	r3, [sp, #20]
 801392a:	4619      	mov	r1, r3
 801392c:	f04f 0c0a 	mov.w	ip, #10
 8013930:	4620      	mov	r0, r4
 8013932:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013936:	3a30      	subs	r2, #48	; 0x30
 8013938:	2a09      	cmp	r2, #9
 801393a:	d903      	bls.n	8013944 <_vfiprintf_r+0x1d0>
 801393c:	2b00      	cmp	r3, #0
 801393e:	d0c6      	beq.n	80138ce <_vfiprintf_r+0x15a>
 8013940:	9105      	str	r1, [sp, #20]
 8013942:	e7c4      	b.n	80138ce <_vfiprintf_r+0x15a>
 8013944:	fb0c 2101 	mla	r1, ip, r1, r2
 8013948:	4604      	mov	r4, r0
 801394a:	2301      	movs	r3, #1
 801394c:	e7f0      	b.n	8013930 <_vfiprintf_r+0x1bc>
 801394e:	ab03      	add	r3, sp, #12
 8013950:	9300      	str	r3, [sp, #0]
 8013952:	462a      	mov	r2, r5
 8013954:	4b12      	ldr	r3, [pc, #72]	; (80139a0 <_vfiprintf_r+0x22c>)
 8013956:	a904      	add	r1, sp, #16
 8013958:	4630      	mov	r0, r6
 801395a:	f3af 8000 	nop.w
 801395e:	4607      	mov	r7, r0
 8013960:	1c78      	adds	r0, r7, #1
 8013962:	d1d6      	bne.n	8013912 <_vfiprintf_r+0x19e>
 8013964:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013966:	07d9      	lsls	r1, r3, #31
 8013968:	d405      	bmi.n	8013976 <_vfiprintf_r+0x202>
 801396a:	89ab      	ldrh	r3, [r5, #12]
 801396c:	059a      	lsls	r2, r3, #22
 801396e:	d402      	bmi.n	8013976 <_vfiprintf_r+0x202>
 8013970:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013972:	f7ff fe6a 	bl	801364a <__retarget_lock_release_recursive>
 8013976:	89ab      	ldrh	r3, [r5, #12]
 8013978:	065b      	lsls	r3, r3, #25
 801397a:	f53f af1d 	bmi.w	80137b8 <_vfiprintf_r+0x44>
 801397e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013980:	e71c      	b.n	80137bc <_vfiprintf_r+0x48>
 8013982:	ab03      	add	r3, sp, #12
 8013984:	9300      	str	r3, [sp, #0]
 8013986:	462a      	mov	r2, r5
 8013988:	4b05      	ldr	r3, [pc, #20]	; (80139a0 <_vfiprintf_r+0x22c>)
 801398a:	a904      	add	r1, sp, #16
 801398c:	4630      	mov	r0, r6
 801398e:	f000 f879 	bl	8013a84 <_printf_i>
 8013992:	e7e4      	b.n	801395e <_vfiprintf_r+0x1ea>
 8013994:	0801710c 	.word	0x0801710c
 8013998:	08017116 	.word	0x08017116
 801399c:	00000000 	.word	0x00000000
 80139a0:	0801374f 	.word	0x0801374f
 80139a4:	08017112 	.word	0x08017112

080139a8 <_printf_common>:
 80139a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139ac:	4616      	mov	r6, r2
 80139ae:	4699      	mov	r9, r3
 80139b0:	688a      	ldr	r2, [r1, #8]
 80139b2:	690b      	ldr	r3, [r1, #16]
 80139b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80139b8:	4293      	cmp	r3, r2
 80139ba:	bfb8      	it	lt
 80139bc:	4613      	movlt	r3, r2
 80139be:	6033      	str	r3, [r6, #0]
 80139c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80139c4:	4607      	mov	r7, r0
 80139c6:	460c      	mov	r4, r1
 80139c8:	b10a      	cbz	r2, 80139ce <_printf_common+0x26>
 80139ca:	3301      	adds	r3, #1
 80139cc:	6033      	str	r3, [r6, #0]
 80139ce:	6823      	ldr	r3, [r4, #0]
 80139d0:	0699      	lsls	r1, r3, #26
 80139d2:	bf42      	ittt	mi
 80139d4:	6833      	ldrmi	r3, [r6, #0]
 80139d6:	3302      	addmi	r3, #2
 80139d8:	6033      	strmi	r3, [r6, #0]
 80139da:	6825      	ldr	r5, [r4, #0]
 80139dc:	f015 0506 	ands.w	r5, r5, #6
 80139e0:	d106      	bne.n	80139f0 <_printf_common+0x48>
 80139e2:	f104 0a19 	add.w	sl, r4, #25
 80139e6:	68e3      	ldr	r3, [r4, #12]
 80139e8:	6832      	ldr	r2, [r6, #0]
 80139ea:	1a9b      	subs	r3, r3, r2
 80139ec:	42ab      	cmp	r3, r5
 80139ee:	dc26      	bgt.n	8013a3e <_printf_common+0x96>
 80139f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80139f4:	1e13      	subs	r3, r2, #0
 80139f6:	6822      	ldr	r2, [r4, #0]
 80139f8:	bf18      	it	ne
 80139fa:	2301      	movne	r3, #1
 80139fc:	0692      	lsls	r2, r2, #26
 80139fe:	d42b      	bmi.n	8013a58 <_printf_common+0xb0>
 8013a00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013a04:	4649      	mov	r1, r9
 8013a06:	4638      	mov	r0, r7
 8013a08:	47c0      	blx	r8
 8013a0a:	3001      	adds	r0, #1
 8013a0c:	d01e      	beq.n	8013a4c <_printf_common+0xa4>
 8013a0e:	6823      	ldr	r3, [r4, #0]
 8013a10:	6922      	ldr	r2, [r4, #16]
 8013a12:	f003 0306 	and.w	r3, r3, #6
 8013a16:	2b04      	cmp	r3, #4
 8013a18:	bf02      	ittt	eq
 8013a1a:	68e5      	ldreq	r5, [r4, #12]
 8013a1c:	6833      	ldreq	r3, [r6, #0]
 8013a1e:	1aed      	subeq	r5, r5, r3
 8013a20:	68a3      	ldr	r3, [r4, #8]
 8013a22:	bf0c      	ite	eq
 8013a24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013a28:	2500      	movne	r5, #0
 8013a2a:	4293      	cmp	r3, r2
 8013a2c:	bfc4      	itt	gt
 8013a2e:	1a9b      	subgt	r3, r3, r2
 8013a30:	18ed      	addgt	r5, r5, r3
 8013a32:	2600      	movs	r6, #0
 8013a34:	341a      	adds	r4, #26
 8013a36:	42b5      	cmp	r5, r6
 8013a38:	d11a      	bne.n	8013a70 <_printf_common+0xc8>
 8013a3a:	2000      	movs	r0, #0
 8013a3c:	e008      	b.n	8013a50 <_printf_common+0xa8>
 8013a3e:	2301      	movs	r3, #1
 8013a40:	4652      	mov	r2, sl
 8013a42:	4649      	mov	r1, r9
 8013a44:	4638      	mov	r0, r7
 8013a46:	47c0      	blx	r8
 8013a48:	3001      	adds	r0, #1
 8013a4a:	d103      	bne.n	8013a54 <_printf_common+0xac>
 8013a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8013a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a54:	3501      	adds	r5, #1
 8013a56:	e7c6      	b.n	80139e6 <_printf_common+0x3e>
 8013a58:	18e1      	adds	r1, r4, r3
 8013a5a:	1c5a      	adds	r2, r3, #1
 8013a5c:	2030      	movs	r0, #48	; 0x30
 8013a5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013a62:	4422      	add	r2, r4
 8013a64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013a68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013a6c:	3302      	adds	r3, #2
 8013a6e:	e7c7      	b.n	8013a00 <_printf_common+0x58>
 8013a70:	2301      	movs	r3, #1
 8013a72:	4622      	mov	r2, r4
 8013a74:	4649      	mov	r1, r9
 8013a76:	4638      	mov	r0, r7
 8013a78:	47c0      	blx	r8
 8013a7a:	3001      	adds	r0, #1
 8013a7c:	d0e6      	beq.n	8013a4c <_printf_common+0xa4>
 8013a7e:	3601      	adds	r6, #1
 8013a80:	e7d9      	b.n	8013a36 <_printf_common+0x8e>
	...

08013a84 <_printf_i>:
 8013a84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013a88:	7e0f      	ldrb	r7, [r1, #24]
 8013a8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013a8c:	2f78      	cmp	r7, #120	; 0x78
 8013a8e:	4691      	mov	r9, r2
 8013a90:	4680      	mov	r8, r0
 8013a92:	460c      	mov	r4, r1
 8013a94:	469a      	mov	sl, r3
 8013a96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013a9a:	d807      	bhi.n	8013aac <_printf_i+0x28>
 8013a9c:	2f62      	cmp	r7, #98	; 0x62
 8013a9e:	d80a      	bhi.n	8013ab6 <_printf_i+0x32>
 8013aa0:	2f00      	cmp	r7, #0
 8013aa2:	f000 80d4 	beq.w	8013c4e <_printf_i+0x1ca>
 8013aa6:	2f58      	cmp	r7, #88	; 0x58
 8013aa8:	f000 80c0 	beq.w	8013c2c <_printf_i+0x1a8>
 8013aac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013ab0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013ab4:	e03a      	b.n	8013b2c <_printf_i+0xa8>
 8013ab6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013aba:	2b15      	cmp	r3, #21
 8013abc:	d8f6      	bhi.n	8013aac <_printf_i+0x28>
 8013abe:	a101      	add	r1, pc, #4	; (adr r1, 8013ac4 <_printf_i+0x40>)
 8013ac0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013ac4:	08013b1d 	.word	0x08013b1d
 8013ac8:	08013b31 	.word	0x08013b31
 8013acc:	08013aad 	.word	0x08013aad
 8013ad0:	08013aad 	.word	0x08013aad
 8013ad4:	08013aad 	.word	0x08013aad
 8013ad8:	08013aad 	.word	0x08013aad
 8013adc:	08013b31 	.word	0x08013b31
 8013ae0:	08013aad 	.word	0x08013aad
 8013ae4:	08013aad 	.word	0x08013aad
 8013ae8:	08013aad 	.word	0x08013aad
 8013aec:	08013aad 	.word	0x08013aad
 8013af0:	08013c35 	.word	0x08013c35
 8013af4:	08013b5d 	.word	0x08013b5d
 8013af8:	08013bef 	.word	0x08013bef
 8013afc:	08013aad 	.word	0x08013aad
 8013b00:	08013aad 	.word	0x08013aad
 8013b04:	08013c57 	.word	0x08013c57
 8013b08:	08013aad 	.word	0x08013aad
 8013b0c:	08013b5d 	.word	0x08013b5d
 8013b10:	08013aad 	.word	0x08013aad
 8013b14:	08013aad 	.word	0x08013aad
 8013b18:	08013bf7 	.word	0x08013bf7
 8013b1c:	682b      	ldr	r3, [r5, #0]
 8013b1e:	1d1a      	adds	r2, r3, #4
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	602a      	str	r2, [r5, #0]
 8013b24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013b28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013b2c:	2301      	movs	r3, #1
 8013b2e:	e09f      	b.n	8013c70 <_printf_i+0x1ec>
 8013b30:	6820      	ldr	r0, [r4, #0]
 8013b32:	682b      	ldr	r3, [r5, #0]
 8013b34:	0607      	lsls	r7, r0, #24
 8013b36:	f103 0104 	add.w	r1, r3, #4
 8013b3a:	6029      	str	r1, [r5, #0]
 8013b3c:	d501      	bpl.n	8013b42 <_printf_i+0xbe>
 8013b3e:	681e      	ldr	r6, [r3, #0]
 8013b40:	e003      	b.n	8013b4a <_printf_i+0xc6>
 8013b42:	0646      	lsls	r6, r0, #25
 8013b44:	d5fb      	bpl.n	8013b3e <_printf_i+0xba>
 8013b46:	f9b3 6000 	ldrsh.w	r6, [r3]
 8013b4a:	2e00      	cmp	r6, #0
 8013b4c:	da03      	bge.n	8013b56 <_printf_i+0xd2>
 8013b4e:	232d      	movs	r3, #45	; 0x2d
 8013b50:	4276      	negs	r6, r6
 8013b52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013b56:	485a      	ldr	r0, [pc, #360]	; (8013cc0 <_printf_i+0x23c>)
 8013b58:	230a      	movs	r3, #10
 8013b5a:	e012      	b.n	8013b82 <_printf_i+0xfe>
 8013b5c:	682b      	ldr	r3, [r5, #0]
 8013b5e:	6820      	ldr	r0, [r4, #0]
 8013b60:	1d19      	adds	r1, r3, #4
 8013b62:	6029      	str	r1, [r5, #0]
 8013b64:	0605      	lsls	r5, r0, #24
 8013b66:	d501      	bpl.n	8013b6c <_printf_i+0xe8>
 8013b68:	681e      	ldr	r6, [r3, #0]
 8013b6a:	e002      	b.n	8013b72 <_printf_i+0xee>
 8013b6c:	0641      	lsls	r1, r0, #25
 8013b6e:	d5fb      	bpl.n	8013b68 <_printf_i+0xe4>
 8013b70:	881e      	ldrh	r6, [r3, #0]
 8013b72:	4853      	ldr	r0, [pc, #332]	; (8013cc0 <_printf_i+0x23c>)
 8013b74:	2f6f      	cmp	r7, #111	; 0x6f
 8013b76:	bf0c      	ite	eq
 8013b78:	2308      	moveq	r3, #8
 8013b7a:	230a      	movne	r3, #10
 8013b7c:	2100      	movs	r1, #0
 8013b7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013b82:	6865      	ldr	r5, [r4, #4]
 8013b84:	60a5      	str	r5, [r4, #8]
 8013b86:	2d00      	cmp	r5, #0
 8013b88:	bfa2      	ittt	ge
 8013b8a:	6821      	ldrge	r1, [r4, #0]
 8013b8c:	f021 0104 	bicge.w	r1, r1, #4
 8013b90:	6021      	strge	r1, [r4, #0]
 8013b92:	b90e      	cbnz	r6, 8013b98 <_printf_i+0x114>
 8013b94:	2d00      	cmp	r5, #0
 8013b96:	d04b      	beq.n	8013c30 <_printf_i+0x1ac>
 8013b98:	4615      	mov	r5, r2
 8013b9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8013b9e:	fb03 6711 	mls	r7, r3, r1, r6
 8013ba2:	5dc7      	ldrb	r7, [r0, r7]
 8013ba4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013ba8:	4637      	mov	r7, r6
 8013baa:	42bb      	cmp	r3, r7
 8013bac:	460e      	mov	r6, r1
 8013bae:	d9f4      	bls.n	8013b9a <_printf_i+0x116>
 8013bb0:	2b08      	cmp	r3, #8
 8013bb2:	d10b      	bne.n	8013bcc <_printf_i+0x148>
 8013bb4:	6823      	ldr	r3, [r4, #0]
 8013bb6:	07de      	lsls	r6, r3, #31
 8013bb8:	d508      	bpl.n	8013bcc <_printf_i+0x148>
 8013bba:	6923      	ldr	r3, [r4, #16]
 8013bbc:	6861      	ldr	r1, [r4, #4]
 8013bbe:	4299      	cmp	r1, r3
 8013bc0:	bfde      	ittt	le
 8013bc2:	2330      	movle	r3, #48	; 0x30
 8013bc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013bc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013bcc:	1b52      	subs	r2, r2, r5
 8013bce:	6122      	str	r2, [r4, #16]
 8013bd0:	f8cd a000 	str.w	sl, [sp]
 8013bd4:	464b      	mov	r3, r9
 8013bd6:	aa03      	add	r2, sp, #12
 8013bd8:	4621      	mov	r1, r4
 8013bda:	4640      	mov	r0, r8
 8013bdc:	f7ff fee4 	bl	80139a8 <_printf_common>
 8013be0:	3001      	adds	r0, #1
 8013be2:	d14a      	bne.n	8013c7a <_printf_i+0x1f6>
 8013be4:	f04f 30ff 	mov.w	r0, #4294967295
 8013be8:	b004      	add	sp, #16
 8013bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bee:	6823      	ldr	r3, [r4, #0]
 8013bf0:	f043 0320 	orr.w	r3, r3, #32
 8013bf4:	6023      	str	r3, [r4, #0]
 8013bf6:	4833      	ldr	r0, [pc, #204]	; (8013cc4 <_printf_i+0x240>)
 8013bf8:	2778      	movs	r7, #120	; 0x78
 8013bfa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013bfe:	6823      	ldr	r3, [r4, #0]
 8013c00:	6829      	ldr	r1, [r5, #0]
 8013c02:	061f      	lsls	r7, r3, #24
 8013c04:	f851 6b04 	ldr.w	r6, [r1], #4
 8013c08:	d402      	bmi.n	8013c10 <_printf_i+0x18c>
 8013c0a:	065f      	lsls	r7, r3, #25
 8013c0c:	bf48      	it	mi
 8013c0e:	b2b6      	uxthmi	r6, r6
 8013c10:	07df      	lsls	r7, r3, #31
 8013c12:	bf48      	it	mi
 8013c14:	f043 0320 	orrmi.w	r3, r3, #32
 8013c18:	6029      	str	r1, [r5, #0]
 8013c1a:	bf48      	it	mi
 8013c1c:	6023      	strmi	r3, [r4, #0]
 8013c1e:	b91e      	cbnz	r6, 8013c28 <_printf_i+0x1a4>
 8013c20:	6823      	ldr	r3, [r4, #0]
 8013c22:	f023 0320 	bic.w	r3, r3, #32
 8013c26:	6023      	str	r3, [r4, #0]
 8013c28:	2310      	movs	r3, #16
 8013c2a:	e7a7      	b.n	8013b7c <_printf_i+0xf8>
 8013c2c:	4824      	ldr	r0, [pc, #144]	; (8013cc0 <_printf_i+0x23c>)
 8013c2e:	e7e4      	b.n	8013bfa <_printf_i+0x176>
 8013c30:	4615      	mov	r5, r2
 8013c32:	e7bd      	b.n	8013bb0 <_printf_i+0x12c>
 8013c34:	682b      	ldr	r3, [r5, #0]
 8013c36:	6826      	ldr	r6, [r4, #0]
 8013c38:	6961      	ldr	r1, [r4, #20]
 8013c3a:	1d18      	adds	r0, r3, #4
 8013c3c:	6028      	str	r0, [r5, #0]
 8013c3e:	0635      	lsls	r5, r6, #24
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	d501      	bpl.n	8013c48 <_printf_i+0x1c4>
 8013c44:	6019      	str	r1, [r3, #0]
 8013c46:	e002      	b.n	8013c4e <_printf_i+0x1ca>
 8013c48:	0670      	lsls	r0, r6, #25
 8013c4a:	d5fb      	bpl.n	8013c44 <_printf_i+0x1c0>
 8013c4c:	8019      	strh	r1, [r3, #0]
 8013c4e:	2300      	movs	r3, #0
 8013c50:	6123      	str	r3, [r4, #16]
 8013c52:	4615      	mov	r5, r2
 8013c54:	e7bc      	b.n	8013bd0 <_printf_i+0x14c>
 8013c56:	682b      	ldr	r3, [r5, #0]
 8013c58:	1d1a      	adds	r2, r3, #4
 8013c5a:	602a      	str	r2, [r5, #0]
 8013c5c:	681d      	ldr	r5, [r3, #0]
 8013c5e:	6862      	ldr	r2, [r4, #4]
 8013c60:	2100      	movs	r1, #0
 8013c62:	4628      	mov	r0, r5
 8013c64:	f7ec fb64 	bl	8000330 <memchr>
 8013c68:	b108      	cbz	r0, 8013c6e <_printf_i+0x1ea>
 8013c6a:	1b40      	subs	r0, r0, r5
 8013c6c:	6060      	str	r0, [r4, #4]
 8013c6e:	6863      	ldr	r3, [r4, #4]
 8013c70:	6123      	str	r3, [r4, #16]
 8013c72:	2300      	movs	r3, #0
 8013c74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013c78:	e7aa      	b.n	8013bd0 <_printf_i+0x14c>
 8013c7a:	6923      	ldr	r3, [r4, #16]
 8013c7c:	462a      	mov	r2, r5
 8013c7e:	4649      	mov	r1, r9
 8013c80:	4640      	mov	r0, r8
 8013c82:	47d0      	blx	sl
 8013c84:	3001      	adds	r0, #1
 8013c86:	d0ad      	beq.n	8013be4 <_printf_i+0x160>
 8013c88:	6823      	ldr	r3, [r4, #0]
 8013c8a:	079b      	lsls	r3, r3, #30
 8013c8c:	d413      	bmi.n	8013cb6 <_printf_i+0x232>
 8013c8e:	68e0      	ldr	r0, [r4, #12]
 8013c90:	9b03      	ldr	r3, [sp, #12]
 8013c92:	4298      	cmp	r0, r3
 8013c94:	bfb8      	it	lt
 8013c96:	4618      	movlt	r0, r3
 8013c98:	e7a6      	b.n	8013be8 <_printf_i+0x164>
 8013c9a:	2301      	movs	r3, #1
 8013c9c:	4632      	mov	r2, r6
 8013c9e:	4649      	mov	r1, r9
 8013ca0:	4640      	mov	r0, r8
 8013ca2:	47d0      	blx	sl
 8013ca4:	3001      	adds	r0, #1
 8013ca6:	d09d      	beq.n	8013be4 <_printf_i+0x160>
 8013ca8:	3501      	adds	r5, #1
 8013caa:	68e3      	ldr	r3, [r4, #12]
 8013cac:	9903      	ldr	r1, [sp, #12]
 8013cae:	1a5b      	subs	r3, r3, r1
 8013cb0:	42ab      	cmp	r3, r5
 8013cb2:	dcf2      	bgt.n	8013c9a <_printf_i+0x216>
 8013cb4:	e7eb      	b.n	8013c8e <_printf_i+0x20a>
 8013cb6:	2500      	movs	r5, #0
 8013cb8:	f104 0619 	add.w	r6, r4, #25
 8013cbc:	e7f5      	b.n	8013caa <_printf_i+0x226>
 8013cbe:	bf00      	nop
 8013cc0:	0801711d 	.word	0x0801711d
 8013cc4:	0801712e 	.word	0x0801712e

08013cc8 <__sflush_r>:
 8013cc8:	898a      	ldrh	r2, [r1, #12]
 8013cca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cce:	4605      	mov	r5, r0
 8013cd0:	0710      	lsls	r0, r2, #28
 8013cd2:	460c      	mov	r4, r1
 8013cd4:	d458      	bmi.n	8013d88 <__sflush_r+0xc0>
 8013cd6:	684b      	ldr	r3, [r1, #4]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	dc05      	bgt.n	8013ce8 <__sflush_r+0x20>
 8013cdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	dc02      	bgt.n	8013ce8 <__sflush_r+0x20>
 8013ce2:	2000      	movs	r0, #0
 8013ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ce8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013cea:	2e00      	cmp	r6, #0
 8013cec:	d0f9      	beq.n	8013ce2 <__sflush_r+0x1a>
 8013cee:	2300      	movs	r3, #0
 8013cf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013cf4:	682f      	ldr	r7, [r5, #0]
 8013cf6:	6a21      	ldr	r1, [r4, #32]
 8013cf8:	602b      	str	r3, [r5, #0]
 8013cfa:	d032      	beq.n	8013d62 <__sflush_r+0x9a>
 8013cfc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013cfe:	89a3      	ldrh	r3, [r4, #12]
 8013d00:	075a      	lsls	r2, r3, #29
 8013d02:	d505      	bpl.n	8013d10 <__sflush_r+0x48>
 8013d04:	6863      	ldr	r3, [r4, #4]
 8013d06:	1ac0      	subs	r0, r0, r3
 8013d08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013d0a:	b10b      	cbz	r3, 8013d10 <__sflush_r+0x48>
 8013d0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013d0e:	1ac0      	subs	r0, r0, r3
 8013d10:	2300      	movs	r3, #0
 8013d12:	4602      	mov	r2, r0
 8013d14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013d16:	6a21      	ldr	r1, [r4, #32]
 8013d18:	4628      	mov	r0, r5
 8013d1a:	47b0      	blx	r6
 8013d1c:	1c43      	adds	r3, r0, #1
 8013d1e:	89a3      	ldrh	r3, [r4, #12]
 8013d20:	d106      	bne.n	8013d30 <__sflush_r+0x68>
 8013d22:	6829      	ldr	r1, [r5, #0]
 8013d24:	291d      	cmp	r1, #29
 8013d26:	d82b      	bhi.n	8013d80 <__sflush_r+0xb8>
 8013d28:	4a29      	ldr	r2, [pc, #164]	; (8013dd0 <__sflush_r+0x108>)
 8013d2a:	410a      	asrs	r2, r1
 8013d2c:	07d6      	lsls	r6, r2, #31
 8013d2e:	d427      	bmi.n	8013d80 <__sflush_r+0xb8>
 8013d30:	2200      	movs	r2, #0
 8013d32:	6062      	str	r2, [r4, #4]
 8013d34:	04d9      	lsls	r1, r3, #19
 8013d36:	6922      	ldr	r2, [r4, #16]
 8013d38:	6022      	str	r2, [r4, #0]
 8013d3a:	d504      	bpl.n	8013d46 <__sflush_r+0x7e>
 8013d3c:	1c42      	adds	r2, r0, #1
 8013d3e:	d101      	bne.n	8013d44 <__sflush_r+0x7c>
 8013d40:	682b      	ldr	r3, [r5, #0]
 8013d42:	b903      	cbnz	r3, 8013d46 <__sflush_r+0x7e>
 8013d44:	6560      	str	r0, [r4, #84]	; 0x54
 8013d46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013d48:	602f      	str	r7, [r5, #0]
 8013d4a:	2900      	cmp	r1, #0
 8013d4c:	d0c9      	beq.n	8013ce2 <__sflush_r+0x1a>
 8013d4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013d52:	4299      	cmp	r1, r3
 8013d54:	d002      	beq.n	8013d5c <__sflush_r+0x94>
 8013d56:	4628      	mov	r0, r5
 8013d58:	f7ff fc96 	bl	8013688 <_free_r>
 8013d5c:	2000      	movs	r0, #0
 8013d5e:	6360      	str	r0, [r4, #52]	; 0x34
 8013d60:	e7c0      	b.n	8013ce4 <__sflush_r+0x1c>
 8013d62:	2301      	movs	r3, #1
 8013d64:	4628      	mov	r0, r5
 8013d66:	47b0      	blx	r6
 8013d68:	1c41      	adds	r1, r0, #1
 8013d6a:	d1c8      	bne.n	8013cfe <__sflush_r+0x36>
 8013d6c:	682b      	ldr	r3, [r5, #0]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d0c5      	beq.n	8013cfe <__sflush_r+0x36>
 8013d72:	2b1d      	cmp	r3, #29
 8013d74:	d001      	beq.n	8013d7a <__sflush_r+0xb2>
 8013d76:	2b16      	cmp	r3, #22
 8013d78:	d101      	bne.n	8013d7e <__sflush_r+0xb6>
 8013d7a:	602f      	str	r7, [r5, #0]
 8013d7c:	e7b1      	b.n	8013ce2 <__sflush_r+0x1a>
 8013d7e:	89a3      	ldrh	r3, [r4, #12]
 8013d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d84:	81a3      	strh	r3, [r4, #12]
 8013d86:	e7ad      	b.n	8013ce4 <__sflush_r+0x1c>
 8013d88:	690f      	ldr	r7, [r1, #16]
 8013d8a:	2f00      	cmp	r7, #0
 8013d8c:	d0a9      	beq.n	8013ce2 <__sflush_r+0x1a>
 8013d8e:	0793      	lsls	r3, r2, #30
 8013d90:	680e      	ldr	r6, [r1, #0]
 8013d92:	bf08      	it	eq
 8013d94:	694b      	ldreq	r3, [r1, #20]
 8013d96:	600f      	str	r7, [r1, #0]
 8013d98:	bf18      	it	ne
 8013d9a:	2300      	movne	r3, #0
 8013d9c:	eba6 0807 	sub.w	r8, r6, r7
 8013da0:	608b      	str	r3, [r1, #8]
 8013da2:	f1b8 0f00 	cmp.w	r8, #0
 8013da6:	dd9c      	ble.n	8013ce2 <__sflush_r+0x1a>
 8013da8:	6a21      	ldr	r1, [r4, #32]
 8013daa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013dac:	4643      	mov	r3, r8
 8013dae:	463a      	mov	r2, r7
 8013db0:	4628      	mov	r0, r5
 8013db2:	47b0      	blx	r6
 8013db4:	2800      	cmp	r0, #0
 8013db6:	dc06      	bgt.n	8013dc6 <__sflush_r+0xfe>
 8013db8:	89a3      	ldrh	r3, [r4, #12]
 8013dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013dbe:	81a3      	strh	r3, [r4, #12]
 8013dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8013dc4:	e78e      	b.n	8013ce4 <__sflush_r+0x1c>
 8013dc6:	4407      	add	r7, r0
 8013dc8:	eba8 0800 	sub.w	r8, r8, r0
 8013dcc:	e7e9      	b.n	8013da2 <__sflush_r+0xda>
 8013dce:	bf00      	nop
 8013dd0:	dfbffffe 	.word	0xdfbffffe

08013dd4 <_fflush_r>:
 8013dd4:	b538      	push	{r3, r4, r5, lr}
 8013dd6:	690b      	ldr	r3, [r1, #16]
 8013dd8:	4605      	mov	r5, r0
 8013dda:	460c      	mov	r4, r1
 8013ddc:	b913      	cbnz	r3, 8013de4 <_fflush_r+0x10>
 8013dde:	2500      	movs	r5, #0
 8013de0:	4628      	mov	r0, r5
 8013de2:	bd38      	pop	{r3, r4, r5, pc}
 8013de4:	b118      	cbz	r0, 8013dee <_fflush_r+0x1a>
 8013de6:	6a03      	ldr	r3, [r0, #32]
 8013de8:	b90b      	cbnz	r3, 8013dee <_fflush_r+0x1a>
 8013dea:	f7ff fa93 	bl	8013314 <__sinit>
 8013dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d0f3      	beq.n	8013dde <_fflush_r+0xa>
 8013df6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013df8:	07d0      	lsls	r0, r2, #31
 8013dfa:	d404      	bmi.n	8013e06 <_fflush_r+0x32>
 8013dfc:	0599      	lsls	r1, r3, #22
 8013dfe:	d402      	bmi.n	8013e06 <_fflush_r+0x32>
 8013e00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e02:	f7ff fc21 	bl	8013648 <__retarget_lock_acquire_recursive>
 8013e06:	4628      	mov	r0, r5
 8013e08:	4621      	mov	r1, r4
 8013e0a:	f7ff ff5d 	bl	8013cc8 <__sflush_r>
 8013e0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013e10:	07da      	lsls	r2, r3, #31
 8013e12:	4605      	mov	r5, r0
 8013e14:	d4e4      	bmi.n	8013de0 <_fflush_r+0xc>
 8013e16:	89a3      	ldrh	r3, [r4, #12]
 8013e18:	059b      	lsls	r3, r3, #22
 8013e1a:	d4e1      	bmi.n	8013de0 <_fflush_r+0xc>
 8013e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e1e:	f7ff fc14 	bl	801364a <__retarget_lock_release_recursive>
 8013e22:	e7dd      	b.n	8013de0 <_fflush_r+0xc>

08013e24 <_putc_r>:
 8013e24:	b570      	push	{r4, r5, r6, lr}
 8013e26:	460d      	mov	r5, r1
 8013e28:	4614      	mov	r4, r2
 8013e2a:	4606      	mov	r6, r0
 8013e2c:	b118      	cbz	r0, 8013e36 <_putc_r+0x12>
 8013e2e:	6a03      	ldr	r3, [r0, #32]
 8013e30:	b90b      	cbnz	r3, 8013e36 <_putc_r+0x12>
 8013e32:	f7ff fa6f 	bl	8013314 <__sinit>
 8013e36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013e38:	07d8      	lsls	r0, r3, #31
 8013e3a:	d405      	bmi.n	8013e48 <_putc_r+0x24>
 8013e3c:	89a3      	ldrh	r3, [r4, #12]
 8013e3e:	0599      	lsls	r1, r3, #22
 8013e40:	d402      	bmi.n	8013e48 <_putc_r+0x24>
 8013e42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e44:	f7ff fc00 	bl	8013648 <__retarget_lock_acquire_recursive>
 8013e48:	68a3      	ldr	r3, [r4, #8]
 8013e4a:	3b01      	subs	r3, #1
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	60a3      	str	r3, [r4, #8]
 8013e50:	da05      	bge.n	8013e5e <_putc_r+0x3a>
 8013e52:	69a2      	ldr	r2, [r4, #24]
 8013e54:	4293      	cmp	r3, r2
 8013e56:	db12      	blt.n	8013e7e <_putc_r+0x5a>
 8013e58:	b2eb      	uxtb	r3, r5
 8013e5a:	2b0a      	cmp	r3, #10
 8013e5c:	d00f      	beq.n	8013e7e <_putc_r+0x5a>
 8013e5e:	6823      	ldr	r3, [r4, #0]
 8013e60:	1c5a      	adds	r2, r3, #1
 8013e62:	6022      	str	r2, [r4, #0]
 8013e64:	701d      	strb	r5, [r3, #0]
 8013e66:	b2ed      	uxtb	r5, r5
 8013e68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013e6a:	07da      	lsls	r2, r3, #31
 8013e6c:	d405      	bmi.n	8013e7a <_putc_r+0x56>
 8013e6e:	89a3      	ldrh	r3, [r4, #12]
 8013e70:	059b      	lsls	r3, r3, #22
 8013e72:	d402      	bmi.n	8013e7a <_putc_r+0x56>
 8013e74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e76:	f7ff fbe8 	bl	801364a <__retarget_lock_release_recursive>
 8013e7a:	4628      	mov	r0, r5
 8013e7c:	bd70      	pop	{r4, r5, r6, pc}
 8013e7e:	4629      	mov	r1, r5
 8013e80:	4622      	mov	r2, r4
 8013e82:	4630      	mov	r0, r6
 8013e84:	f000 f802 	bl	8013e8c <__swbuf_r>
 8013e88:	4605      	mov	r5, r0
 8013e8a:	e7ed      	b.n	8013e68 <_putc_r+0x44>

08013e8c <__swbuf_r>:
 8013e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e8e:	460e      	mov	r6, r1
 8013e90:	4614      	mov	r4, r2
 8013e92:	4605      	mov	r5, r0
 8013e94:	b118      	cbz	r0, 8013e9e <__swbuf_r+0x12>
 8013e96:	6a03      	ldr	r3, [r0, #32]
 8013e98:	b90b      	cbnz	r3, 8013e9e <__swbuf_r+0x12>
 8013e9a:	f7ff fa3b 	bl	8013314 <__sinit>
 8013e9e:	69a3      	ldr	r3, [r4, #24]
 8013ea0:	60a3      	str	r3, [r4, #8]
 8013ea2:	89a3      	ldrh	r3, [r4, #12]
 8013ea4:	071a      	lsls	r2, r3, #28
 8013ea6:	d525      	bpl.n	8013ef4 <__swbuf_r+0x68>
 8013ea8:	6923      	ldr	r3, [r4, #16]
 8013eaa:	b31b      	cbz	r3, 8013ef4 <__swbuf_r+0x68>
 8013eac:	6823      	ldr	r3, [r4, #0]
 8013eae:	6922      	ldr	r2, [r4, #16]
 8013eb0:	1a98      	subs	r0, r3, r2
 8013eb2:	6963      	ldr	r3, [r4, #20]
 8013eb4:	b2f6      	uxtb	r6, r6
 8013eb6:	4283      	cmp	r3, r0
 8013eb8:	4637      	mov	r7, r6
 8013eba:	dc04      	bgt.n	8013ec6 <__swbuf_r+0x3a>
 8013ebc:	4621      	mov	r1, r4
 8013ebe:	4628      	mov	r0, r5
 8013ec0:	f7ff ff88 	bl	8013dd4 <_fflush_r>
 8013ec4:	b9e0      	cbnz	r0, 8013f00 <__swbuf_r+0x74>
 8013ec6:	68a3      	ldr	r3, [r4, #8]
 8013ec8:	3b01      	subs	r3, #1
 8013eca:	60a3      	str	r3, [r4, #8]
 8013ecc:	6823      	ldr	r3, [r4, #0]
 8013ece:	1c5a      	adds	r2, r3, #1
 8013ed0:	6022      	str	r2, [r4, #0]
 8013ed2:	701e      	strb	r6, [r3, #0]
 8013ed4:	6962      	ldr	r2, [r4, #20]
 8013ed6:	1c43      	adds	r3, r0, #1
 8013ed8:	429a      	cmp	r2, r3
 8013eda:	d004      	beq.n	8013ee6 <__swbuf_r+0x5a>
 8013edc:	89a3      	ldrh	r3, [r4, #12]
 8013ede:	07db      	lsls	r3, r3, #31
 8013ee0:	d506      	bpl.n	8013ef0 <__swbuf_r+0x64>
 8013ee2:	2e0a      	cmp	r6, #10
 8013ee4:	d104      	bne.n	8013ef0 <__swbuf_r+0x64>
 8013ee6:	4621      	mov	r1, r4
 8013ee8:	4628      	mov	r0, r5
 8013eea:	f7ff ff73 	bl	8013dd4 <_fflush_r>
 8013eee:	b938      	cbnz	r0, 8013f00 <__swbuf_r+0x74>
 8013ef0:	4638      	mov	r0, r7
 8013ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ef4:	4621      	mov	r1, r4
 8013ef6:	4628      	mov	r0, r5
 8013ef8:	f000 f806 	bl	8013f08 <__swsetup_r>
 8013efc:	2800      	cmp	r0, #0
 8013efe:	d0d5      	beq.n	8013eac <__swbuf_r+0x20>
 8013f00:	f04f 37ff 	mov.w	r7, #4294967295
 8013f04:	e7f4      	b.n	8013ef0 <__swbuf_r+0x64>
	...

08013f08 <__swsetup_r>:
 8013f08:	b538      	push	{r3, r4, r5, lr}
 8013f0a:	4b2a      	ldr	r3, [pc, #168]	; (8013fb4 <__swsetup_r+0xac>)
 8013f0c:	4605      	mov	r5, r0
 8013f0e:	6818      	ldr	r0, [r3, #0]
 8013f10:	460c      	mov	r4, r1
 8013f12:	b118      	cbz	r0, 8013f1c <__swsetup_r+0x14>
 8013f14:	6a03      	ldr	r3, [r0, #32]
 8013f16:	b90b      	cbnz	r3, 8013f1c <__swsetup_r+0x14>
 8013f18:	f7ff f9fc 	bl	8013314 <__sinit>
 8013f1c:	89a3      	ldrh	r3, [r4, #12]
 8013f1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013f22:	0718      	lsls	r0, r3, #28
 8013f24:	d422      	bmi.n	8013f6c <__swsetup_r+0x64>
 8013f26:	06d9      	lsls	r1, r3, #27
 8013f28:	d407      	bmi.n	8013f3a <__swsetup_r+0x32>
 8013f2a:	2309      	movs	r3, #9
 8013f2c:	602b      	str	r3, [r5, #0]
 8013f2e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013f32:	81a3      	strh	r3, [r4, #12]
 8013f34:	f04f 30ff 	mov.w	r0, #4294967295
 8013f38:	e034      	b.n	8013fa4 <__swsetup_r+0x9c>
 8013f3a:	0758      	lsls	r0, r3, #29
 8013f3c:	d512      	bpl.n	8013f64 <__swsetup_r+0x5c>
 8013f3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013f40:	b141      	cbz	r1, 8013f54 <__swsetup_r+0x4c>
 8013f42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013f46:	4299      	cmp	r1, r3
 8013f48:	d002      	beq.n	8013f50 <__swsetup_r+0x48>
 8013f4a:	4628      	mov	r0, r5
 8013f4c:	f7ff fb9c 	bl	8013688 <_free_r>
 8013f50:	2300      	movs	r3, #0
 8013f52:	6363      	str	r3, [r4, #52]	; 0x34
 8013f54:	89a3      	ldrh	r3, [r4, #12]
 8013f56:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013f5a:	81a3      	strh	r3, [r4, #12]
 8013f5c:	2300      	movs	r3, #0
 8013f5e:	6063      	str	r3, [r4, #4]
 8013f60:	6923      	ldr	r3, [r4, #16]
 8013f62:	6023      	str	r3, [r4, #0]
 8013f64:	89a3      	ldrh	r3, [r4, #12]
 8013f66:	f043 0308 	orr.w	r3, r3, #8
 8013f6a:	81a3      	strh	r3, [r4, #12]
 8013f6c:	6923      	ldr	r3, [r4, #16]
 8013f6e:	b94b      	cbnz	r3, 8013f84 <__swsetup_r+0x7c>
 8013f70:	89a3      	ldrh	r3, [r4, #12]
 8013f72:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013f76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013f7a:	d003      	beq.n	8013f84 <__swsetup_r+0x7c>
 8013f7c:	4621      	mov	r1, r4
 8013f7e:	4628      	mov	r0, r5
 8013f80:	f000 f884 	bl	801408c <__smakebuf_r>
 8013f84:	89a0      	ldrh	r0, [r4, #12]
 8013f86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013f8a:	f010 0301 	ands.w	r3, r0, #1
 8013f8e:	d00a      	beq.n	8013fa6 <__swsetup_r+0x9e>
 8013f90:	2300      	movs	r3, #0
 8013f92:	60a3      	str	r3, [r4, #8]
 8013f94:	6963      	ldr	r3, [r4, #20]
 8013f96:	425b      	negs	r3, r3
 8013f98:	61a3      	str	r3, [r4, #24]
 8013f9a:	6923      	ldr	r3, [r4, #16]
 8013f9c:	b943      	cbnz	r3, 8013fb0 <__swsetup_r+0xa8>
 8013f9e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013fa2:	d1c4      	bne.n	8013f2e <__swsetup_r+0x26>
 8013fa4:	bd38      	pop	{r3, r4, r5, pc}
 8013fa6:	0781      	lsls	r1, r0, #30
 8013fa8:	bf58      	it	pl
 8013faa:	6963      	ldrpl	r3, [r4, #20]
 8013fac:	60a3      	str	r3, [r4, #8]
 8013fae:	e7f4      	b.n	8013f9a <__swsetup_r+0x92>
 8013fb0:	2000      	movs	r0, #0
 8013fb2:	e7f7      	b.n	8013fa4 <__swsetup_r+0x9c>
 8013fb4:	24000304 	.word	0x24000304

08013fb8 <_raise_r>:
 8013fb8:	291f      	cmp	r1, #31
 8013fba:	b538      	push	{r3, r4, r5, lr}
 8013fbc:	4604      	mov	r4, r0
 8013fbe:	460d      	mov	r5, r1
 8013fc0:	d904      	bls.n	8013fcc <_raise_r+0x14>
 8013fc2:	2316      	movs	r3, #22
 8013fc4:	6003      	str	r3, [r0, #0]
 8013fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8013fca:	bd38      	pop	{r3, r4, r5, pc}
 8013fcc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8013fce:	b112      	cbz	r2, 8013fd6 <_raise_r+0x1e>
 8013fd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013fd4:	b94b      	cbnz	r3, 8013fea <_raise_r+0x32>
 8013fd6:	4620      	mov	r0, r4
 8013fd8:	f000 f830 	bl	801403c <_getpid_r>
 8013fdc:	462a      	mov	r2, r5
 8013fde:	4601      	mov	r1, r0
 8013fe0:	4620      	mov	r0, r4
 8013fe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013fe6:	f000 b817 	b.w	8014018 <_kill_r>
 8013fea:	2b01      	cmp	r3, #1
 8013fec:	d00a      	beq.n	8014004 <_raise_r+0x4c>
 8013fee:	1c59      	adds	r1, r3, #1
 8013ff0:	d103      	bne.n	8013ffa <_raise_r+0x42>
 8013ff2:	2316      	movs	r3, #22
 8013ff4:	6003      	str	r3, [r0, #0]
 8013ff6:	2001      	movs	r0, #1
 8013ff8:	e7e7      	b.n	8013fca <_raise_r+0x12>
 8013ffa:	2400      	movs	r4, #0
 8013ffc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014000:	4628      	mov	r0, r5
 8014002:	4798      	blx	r3
 8014004:	2000      	movs	r0, #0
 8014006:	e7e0      	b.n	8013fca <_raise_r+0x12>

08014008 <raise>:
 8014008:	4b02      	ldr	r3, [pc, #8]	; (8014014 <raise+0xc>)
 801400a:	4601      	mov	r1, r0
 801400c:	6818      	ldr	r0, [r3, #0]
 801400e:	f7ff bfd3 	b.w	8013fb8 <_raise_r>
 8014012:	bf00      	nop
 8014014:	24000304 	.word	0x24000304

08014018 <_kill_r>:
 8014018:	b538      	push	{r3, r4, r5, lr}
 801401a:	4d07      	ldr	r5, [pc, #28]	; (8014038 <_kill_r+0x20>)
 801401c:	2300      	movs	r3, #0
 801401e:	4604      	mov	r4, r0
 8014020:	4608      	mov	r0, r1
 8014022:	4611      	mov	r1, r2
 8014024:	602b      	str	r3, [r5, #0]
 8014026:	f7f9 fc7d 	bl	800d924 <_kill>
 801402a:	1c43      	adds	r3, r0, #1
 801402c:	d102      	bne.n	8014034 <_kill_r+0x1c>
 801402e:	682b      	ldr	r3, [r5, #0]
 8014030:	b103      	cbz	r3, 8014034 <_kill_r+0x1c>
 8014032:	6023      	str	r3, [r4, #0]
 8014034:	bd38      	pop	{r3, r4, r5, pc}
 8014036:	bf00      	nop
 8014038:	24003784 	.word	0x24003784

0801403c <_getpid_r>:
 801403c:	f7f9 bc6a 	b.w	800d914 <_getpid>

08014040 <__swhatbuf_r>:
 8014040:	b570      	push	{r4, r5, r6, lr}
 8014042:	460c      	mov	r4, r1
 8014044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014048:	2900      	cmp	r1, #0
 801404a:	b096      	sub	sp, #88	; 0x58
 801404c:	4615      	mov	r5, r2
 801404e:	461e      	mov	r6, r3
 8014050:	da0d      	bge.n	801406e <__swhatbuf_r+0x2e>
 8014052:	89a3      	ldrh	r3, [r4, #12]
 8014054:	f013 0f80 	tst.w	r3, #128	; 0x80
 8014058:	f04f 0100 	mov.w	r1, #0
 801405c:	bf0c      	ite	eq
 801405e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8014062:	2340      	movne	r3, #64	; 0x40
 8014064:	2000      	movs	r0, #0
 8014066:	6031      	str	r1, [r6, #0]
 8014068:	602b      	str	r3, [r5, #0]
 801406a:	b016      	add	sp, #88	; 0x58
 801406c:	bd70      	pop	{r4, r5, r6, pc}
 801406e:	466a      	mov	r2, sp
 8014070:	f000 f848 	bl	8014104 <_fstat_r>
 8014074:	2800      	cmp	r0, #0
 8014076:	dbec      	blt.n	8014052 <__swhatbuf_r+0x12>
 8014078:	9901      	ldr	r1, [sp, #4]
 801407a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801407e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8014082:	4259      	negs	r1, r3
 8014084:	4159      	adcs	r1, r3
 8014086:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801408a:	e7eb      	b.n	8014064 <__swhatbuf_r+0x24>

0801408c <__smakebuf_r>:
 801408c:	898b      	ldrh	r3, [r1, #12]
 801408e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014090:	079d      	lsls	r5, r3, #30
 8014092:	4606      	mov	r6, r0
 8014094:	460c      	mov	r4, r1
 8014096:	d507      	bpl.n	80140a8 <__smakebuf_r+0x1c>
 8014098:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801409c:	6023      	str	r3, [r4, #0]
 801409e:	6123      	str	r3, [r4, #16]
 80140a0:	2301      	movs	r3, #1
 80140a2:	6163      	str	r3, [r4, #20]
 80140a4:	b002      	add	sp, #8
 80140a6:	bd70      	pop	{r4, r5, r6, pc}
 80140a8:	ab01      	add	r3, sp, #4
 80140aa:	466a      	mov	r2, sp
 80140ac:	f7ff ffc8 	bl	8014040 <__swhatbuf_r>
 80140b0:	9900      	ldr	r1, [sp, #0]
 80140b2:	4605      	mov	r5, r0
 80140b4:	4630      	mov	r0, r6
 80140b6:	f7fe ff2f 	bl	8012f18 <_malloc_r>
 80140ba:	b948      	cbnz	r0, 80140d0 <__smakebuf_r+0x44>
 80140bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80140c0:	059a      	lsls	r2, r3, #22
 80140c2:	d4ef      	bmi.n	80140a4 <__smakebuf_r+0x18>
 80140c4:	f023 0303 	bic.w	r3, r3, #3
 80140c8:	f043 0302 	orr.w	r3, r3, #2
 80140cc:	81a3      	strh	r3, [r4, #12]
 80140ce:	e7e3      	b.n	8014098 <__smakebuf_r+0xc>
 80140d0:	89a3      	ldrh	r3, [r4, #12]
 80140d2:	6020      	str	r0, [r4, #0]
 80140d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80140d8:	81a3      	strh	r3, [r4, #12]
 80140da:	9b00      	ldr	r3, [sp, #0]
 80140dc:	6163      	str	r3, [r4, #20]
 80140de:	9b01      	ldr	r3, [sp, #4]
 80140e0:	6120      	str	r0, [r4, #16]
 80140e2:	b15b      	cbz	r3, 80140fc <__smakebuf_r+0x70>
 80140e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80140e8:	4630      	mov	r0, r6
 80140ea:	f000 f81d 	bl	8014128 <_isatty_r>
 80140ee:	b128      	cbz	r0, 80140fc <__smakebuf_r+0x70>
 80140f0:	89a3      	ldrh	r3, [r4, #12]
 80140f2:	f023 0303 	bic.w	r3, r3, #3
 80140f6:	f043 0301 	orr.w	r3, r3, #1
 80140fa:	81a3      	strh	r3, [r4, #12]
 80140fc:	89a3      	ldrh	r3, [r4, #12]
 80140fe:	431d      	orrs	r5, r3
 8014100:	81a5      	strh	r5, [r4, #12]
 8014102:	e7cf      	b.n	80140a4 <__smakebuf_r+0x18>

08014104 <_fstat_r>:
 8014104:	b538      	push	{r3, r4, r5, lr}
 8014106:	4d07      	ldr	r5, [pc, #28]	; (8014124 <_fstat_r+0x20>)
 8014108:	2300      	movs	r3, #0
 801410a:	4604      	mov	r4, r0
 801410c:	4608      	mov	r0, r1
 801410e:	4611      	mov	r1, r2
 8014110:	602b      	str	r3, [r5, #0]
 8014112:	f7f9 fc63 	bl	800d9dc <_fstat>
 8014116:	1c43      	adds	r3, r0, #1
 8014118:	d102      	bne.n	8014120 <_fstat_r+0x1c>
 801411a:	682b      	ldr	r3, [r5, #0]
 801411c:	b103      	cbz	r3, 8014120 <_fstat_r+0x1c>
 801411e:	6023      	str	r3, [r4, #0]
 8014120:	bd38      	pop	{r3, r4, r5, pc}
 8014122:	bf00      	nop
 8014124:	24003784 	.word	0x24003784

08014128 <_isatty_r>:
 8014128:	b538      	push	{r3, r4, r5, lr}
 801412a:	4d06      	ldr	r5, [pc, #24]	; (8014144 <_isatty_r+0x1c>)
 801412c:	2300      	movs	r3, #0
 801412e:	4604      	mov	r4, r0
 8014130:	4608      	mov	r0, r1
 8014132:	602b      	str	r3, [r5, #0]
 8014134:	f7f9 fc62 	bl	800d9fc <_isatty>
 8014138:	1c43      	adds	r3, r0, #1
 801413a:	d102      	bne.n	8014142 <_isatty_r+0x1a>
 801413c:	682b      	ldr	r3, [r5, #0]
 801413e:	b103      	cbz	r3, 8014142 <_isatty_r+0x1a>
 8014140:	6023      	str	r3, [r4, #0]
 8014142:	bd38      	pop	{r3, r4, r5, pc}
 8014144:	24003784 	.word	0x24003784

08014148 <_init>:
 8014148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801414a:	bf00      	nop
 801414c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801414e:	bc08      	pop	{r3}
 8014150:	469e      	mov	lr, r3
 8014152:	4770      	bx	lr

08014154 <_fini>:
 8014154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014156:	bf00      	nop
 8014158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801415a:	bc08      	pop	{r3}
 801415c:	469e      	mov	lr, r3
 801415e:	4770      	bx	lr
